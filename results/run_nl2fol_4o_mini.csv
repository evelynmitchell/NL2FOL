label,updated_label,articles,Claim,Implication,Referring Expressions - Claim,Referring Expressions - Implication,Property Implications,Equal Entities,Subset Entities,Claim Lfs,Implication Lfs,Logical Form,Logical Form 2
0,false causality,"Giving 10% of your income to the Church will free a child’s soul from Limbo into Heaven, so give your money!"," ""Giving 10% of a person's income to the Church will free a child's soul from Limbo into Heaven.""  "," ""A person should give money.""","IsGiven(a,b),  IsInLimbo(c),  IsInHeaven(c)","IsGiven(g,f)",[],[],[],"(IsGiven(a,b) and IsInLimbo(c)) and IsInHeaven(c)","IsGiven(g,f)","((IsGiven(a,b) and IsInLimbo(c)) and IsInHeaven(c)) -> (IsGiven(g,f))","(exists b (exists a (exists c ((IsGiven(a,b) and IsInLimbo(c)) and IsInHeaven(c))))) -> (exists g (exists f (IsGiven(g,f))))"
0,appeal to emotion,"If everyone lived his or her life exactly like Jesus lived his life, the world would be a beautiful place!"," ""Everyone should live like Jesus lived.""  "," ""The world would be a beautiful place.""","ShouldLiveLike(a, b)","IsBeautiful(c),  IsPlace(d)",[],[],"[(' Everyone', ' The world')]","ShouldLiveLike(a, b)",IsBeautiful(c) and IsPlace(d),"(exists a (ShouldLiveLike(a, b))) -> (forall c (IsBeautiful(c) and IsPlace(d)))","(exists b (exists a (ShouldLiveLike(a, b)))) -> (exists d (exists c (IsBeautiful(c) and IsPlace(d))))"
0,appeal to emotion,"I know you don’t like the kitty-cat sweater that Grandma knitted for you, but she worked so hard on it and it will make her happy to see you wear it in the family holiday photo.", Grandma knitted a kitty-cat sweater and worked hard on it.  , Wearing the kitty-cat sweater will make Grandma happy.,"IsKnitting(a, b),  IsWorkingHardOn(a, c)","IsWearing(b),  MakesHappy(a)",[],"[(' Grandma', ' Grandma'), (' kitty-cat sweater', ' the kitty-cat sweater')]",[],"IsKnitting(a, b) and IsWorkingHardOn(a, c)",IsWearing(b) and MakesHappy(a),"(IsKnitting(a, b) and IsWorkingHardOn(a, c)) -> (IsWearing(b) and MakesHappy(a))","(exists b (exists a (exists c (IsKnitting(a, b) and IsWorkingHardOn(a, c))))) -> (exists b (exists a (IsWearing(b) and MakesHappy(a))))"
0,ad populum,"Dave wants you to break into the spooky cabin with him. “Everyone does it,” he claims. What fallacy has he committed?"," ""Everyone breaks into the spooky cabin.""  "," ""Dave wants you to break into the spooky cabin.""","BreaksInto(b, a),  IsSpooky(a)","Wants(c, d),  BreaksInto(d, a),  IsSpooky(a)",[],"[(' spooky cabin', ' the spooky cabin')]","[(' Everyone', ' you')]","IsSpooky(a) and BreaksInto(b, a)","Wants(c, d) and BreaksInto(d, a) and IsSpooky(a)","(exists b (IsSpooky(a) and BreaksInto(b, a))) -> (forall d (Wants(c, d) and BreaksInto(d, a) and IsSpooky(a)))","(exists b (exists a (IsSpooky(a) and BreaksInto(b, a)))) -> (exists a (exists d (exists c (Wants(c, d) and BreaksInto(d, a) and IsSpooky(a)))))"
0,fallacy of credibility,"Ms. Drayer, the smartest person in the universe, says the debate is the best class, therefore it is."," ""Ms. Drayer says the debate is the best class.""  "," ""The debate is the best class.""","Says(c, a),  IsBest(b)",IsBest(b),[],"[(' the debate', ' The debate'), (' the best class', ' the best class')]",[],"Says(c, a) and IsBest(b)",IsBest(b) and IsDebate(a),"(Says(c, a) and IsBest(b)) -> (IsBest(b) and IsDebate(a))","(exists b (exists a (exists c (Says(c, a) and IsBest(b))))) -> (exists b (exists a (IsBest(b) and IsDebate(a))))"
0,faulty generalization,Why did the blond cross the road?  Because she saw a shoe sale!," ""The blond saw a shoe sale.""  "," ""The blond crossed the road.""","IsBlond(a),  Saw(a, b)","IsBlond(a),  Crossed(a)","[('  Crossed(a)', 'IsBlond(a)')]","[(' The blond', ' The blond')]",[],"IsBlond(a) and Saw(a, b)",IsBlond(a) and Crossed(a),"(IsBlond(a) and Saw(a, b) & (forall a (  Crossed(a) -> IsBlond(a)))) -> (IsBlond(a) and Crossed(a))","(exists b (exists a (IsBlond(a) and Saw(a, b))) & (forall c (  Crossed(c) -> IsBlond(c)))) -> (exists a (IsBlond(a) and Crossed(a)))"
0,appeal to emotion,"Timmy: Mom, what if I don’t believe in God?
Mom: Then you burn in Hell forever.  Why do you ask?
Timmy: No reason.
"," ""Mom believes that if Timmy doesn’t believe in God, then Timmy burns in Hell forever.""  "," ""Timmy will burn in Hell forever.""","Believes(c),  Believes(a, d),  Burns(a, b)","Burns(a, b)",[],"[(' Timmy', ' Timmy'), (' Hell', ' Hell')]",[],"Believes(c) and (~Believes(a, d) and Burns(a, b))","Burns(a, b)","(Believes(c) and (~Believes(a, d) and Burns(a, b))) -> (Burns(a, b))","(exists b (exists d (exists a (exists c (Believes(c) and (~Believes(a, d) and Burns(a, b))))))) -> (exists b (exists a (Burns(a, b))))"
0,false dilemma,"""If you never gave money to charity, then you must be a greedy millionaire."" What is this?"," ""You never gave money to charity.""  "," ""You must be a greedy millionaire.""","GaveMoney(a, b, c),  NeverGaveMoney(a, b, c)","IsGreedy(d),  IsMillionaire(d)",[],"[(' You', ' You')]",[],"~GaveMoney(a, b, c)",IsGreedy(d) and IsMillionaire(d),"(~GaveMoney(a, b, c)) -> (IsGreedy(d) and IsMillionaire(d))","(exists b (exists a (exists c (~GaveMoney(a, b, c))))) -> (exists d (IsGreedy(d) and IsMillionaire(d)))"
0,fallacy of extension,Caroline says that she is going to have lunch with the new girl. Jenna says that she can't believe that Caroline is ditching her old friends for the new girl.," ""Caroline is going to have lunch with the new girl.""  "," ""Caroline is ditching her old friends for the new girl.""","IsHavingLunch(a, b)","IsDitching(a, c),  IsFor(a, b)",[],"[(' Caroline', ' Caroline'), (' the new girl', ' the new girl')]",[],"IsHavingLunch(a, b)","IsDitching(a, c) and IsFor(a, b)","(IsHavingLunch(a, b)) -> (IsDitching(a, c) and IsFor(a, b))","(exists b (exists a (IsHavingLunch(a, b)))) -> (exists b (exists a (exists c (IsDitching(a, c) and IsFor(a, b)))))"
0,faulty generalization,"""You can never give anyone a break. If you do, they'll walk all over you."""," ""You can never give anyone a break.""  "," ""Giving anyone a break leads to being walked all over.""","IsYou(c),  CanGive(c,a,b)","IsGiven(a,b),  LeadsTo(d)",[],"[(' anyone', ' Anyone'), (' a break', ' a break')]",[],"~CanGive(c,a,b)","(IsGiven(a,b)) and LeadsTo(d)","(~CanGive(c,a,b)) -> ((IsGiven(a,b)) and LeadsTo(d))","(exists b (exists a (exists c (~CanGive(c,a,b))))) -> (exists b (exists d (exists a ((IsGiven(a,b)) and LeadsTo(d)))))"
0,false causality,"Believing that ""runs"" occur to statistically independent phenomena such as routine wheel spirits."," ""Runs occur to statistically independent phenomena such as routine wheel spirits.""  "," ""Statistically independent phenomena are believed to have runs.""","IsStatisticallyIndependent(b),  IsRoutine(c),  OccursFor(a,b)","IsStatisticallyIndependent(d),  IsBelievedToHave(d, a)",[],"[(' Runs', ' runs')]","[(' phenomena', ' Statistically independent phenomena')]","IsStatisticallyIndependent(b) and IsRoutine(c) and OccursFor(a,b)","IsStatisticallyIndependent(d) and IsBelievedToHave(d, a)","(exists b (IsStatisticallyIndependent(b) and IsRoutine(c) and OccursFor(a,b))) -> (forall d (IsStatisticallyIndependent(d) and IsBelievedToHave(d, a)))","(exists b (exists a (exists c (IsStatisticallyIndependent(b) and IsRoutine(c) and OccursFor(a,b))))) -> (exists a (exists d (IsStatisticallyIndependent(d) and IsBelievedToHave(d, a))))"
0,false causality,"I broke a mirror earlier in the day, and then I received an F on my history final. Therefore, I received the F because I broke the mirror."," ""I broke a mirror earlier in the day.""  "," ""I received an F on my history final because I broke the mirror.""","Broke(b, c)","Received(a, d),  HasHistoryFinal(a, e),  Broke(a, b)",[],"[(' I', ' I'), (' a mirror', ' the mirror')]",[],"Broke(b, c)","(Received(a, d) and HasHistoryFinal(a, e) and Broke(a, b))","(Broke(b, c)) -> ((Received(a, d) and HasHistoryFinal(a, e) and Broke(a, b)))","(exists b (exists c (Broke(b, c)))) -> (exists b (exists d (exists a (exists e ((Received(a, d) and HasHistoryFinal(a, e) and Broke(a, b)))))))"
0,fallacy of extension,"Charlie: I think we should put more money into schools. Quality public education is so important.
Bob: So you’re saying we should cut military spending and spend it instead on more spiral notebooks and crayons? I guess you want our country to be a weak, defenseless target for terrorists.
Charlie: Creo que deberíamos invertir más dinero en las escuelas. La educación pública de calidad es muy importante.

Bob: ¿Entonces estás diciendo que deberíamos recortar el gasto militar y gastarlo en más cuadernos de espiral y crayones? Supongo que quiere que nuestro país sea un objetivo débil e indefenso para los terroristas."," ""Charlie thinks more money should be put into schools and quality public education is important.""  "," ""Charlie wants the country to be weak and defenseless against terrorists.""","Thinks(a),  ShouldBePutInto(b, c),  IsImportant(d)","Wants(a, e),  IsWeak(e),  IsDefenseless(e),  IsAgainst(e, f)",[],"[(' Charlie', ' Charlie')]",[],"Thinks(a) and ShouldBePutInto(b, c) and IsImportant(d)","Wants(a, e) and IsWeak(e) and IsDefenseless(e) and IsAgainst(e, f)","(Thinks(a) and ShouldBePutInto(b, c) and IsImportant(d)) -> (Wants(a, e) and IsWeak(e) and IsDefenseless(e) and IsAgainst(e, f))","(exists b (exists d (exists a (exists c (Thinks(a) and ShouldBePutInto(b, c) and IsImportant(d)))))) -> (exists f (exists a (exists e (Wants(a, e) and IsWeak(e) and IsDefenseless(e) and IsAgainst(e, f)))))"
0,false causality,"Cellphones weren’t invented before I was born. Now, they are everywhere! Therefore, cellphones were created because I was born."," ""Cellphones were created because I was born.""  "," ""Cellphones are everywhere.""","Created(a),  Born(b)",IsEverywhere(a),[],"[(' Cellphones', ' Cellphones')]",[],Created(a) and Born(b),IsEverywhere(a),(Created(a) and Born(b)) -> (IsEverywhere(a)),(exists b (exists a (Created(a) and Born(b)))) -> (exists a (IsEverywhere(a)))
0,ad hominem,Ms. Baker assigned me a lot of homework because she’s a witch!," ""Ms. Baker assigned a lot of homework.""  "," ""Ms. Baker is a witch.""","AssignedHomework(a, b)",IsWitch(a),[],"[(' Ms. Baker', ' Ms. Baker')]",[],"AssignedHomework(a, b)",IsWitch(a),"(AssignedHomework(a, b)) -> (IsWitch(a))","(exists b (exists a (AssignedHomework(a, b)))) -> (exists a (IsWitch(a)))"
0,fallacy of credibility,"My dad went to school, so he knows everything about the education system."," ""Dad went to school.""  "," ""Dad knows everything about the education system.""","IsDad(a),  IsInSchool(a)","IsDad(a),  KnowsAbout(a, d),  IsEverything(c)",[],"[(' Dad', ' Dad')]","[(' school', ' the education system')]",IsDad(a) and IsInSchool(a),"IsDad(a) and IsEverything(c) and KnowsAbout(a, d)","(IsDad(a) and IsInSchool(a)) -> (IsDad(a) and IsEverything(c) and KnowsAbout(a, d))","(exists a (IsDad(a) and IsInSchool(a))) -> (exists d (exists a (exists c (IsDad(a) and IsEverything(c) and KnowsAbout(a, d)))))"
0,ad populum,Everyone is doing the Low-Carb Diet.," ""Everyone is doing the Low-Carb Diet.""  "," ""People should do the Low-Carb Diet.""",FollowsLowCarbDiet(b),FollowsLowCarbDiet(c),[],"[(' the Low-Carb Diet', ' the Low-Carb Diet')]","[(' Everyone', ' People')]",FollowsLowCarbDiet(b),FollowsLowCarbDiet(c),(exists b (FollowsLowCarbDiet(b))) -> (forall c (FollowsLowCarbDiet(c))),(exists b (FollowsLowCarbDiet(b))) -> (exists c (FollowsLowCarbDiet(c)))
0,fallacy of extension,"Parent: You need to clean out your backpack.
Child: You know I have ADD! Why can’t you just accept me as I am?", The child has ADD.  , The parent should accept the child as the child is.,HasADD(a),"AcceptsAsIs(c, a)",[],"[(' The child', ' the child'), (' The child', ' the child')]",[],HasADD(a),"AcceptsAsIs(c, a)","(HasADD(a)) -> (AcceptsAsIs(c, a))","(exists a (HasADD(a))) -> (exists a (exists c (AcceptsAsIs(c, a))))"
0,fallacy of credibility,"X has been around for years now.
Y is new.
Therefore, Y is better than X."," ""Y is new.""  "," ""Y is better than X.""",IsNew(a),"IsBetterThan(a, b)",[],"[(' Y', ' Y')]",[],IsNew(a),"IsBetterThan(a, b)","(IsNew(a)) -> (IsBetterThan(a, b))","(exists a (IsNew(a))) -> (exists b (exists a (IsBetterThan(a, b))))"
0,false causality,"""Right when I sneezed, the power went off. I must've caused the outage."" Bragged Zohaw."," ""Zohaw sneezed and the power went off.""  "," ""Zohaw caused the outage.""","Sneezed(a),  WentOff(b)","Caused(a, c)",[],"[(' Zohaw', ' Zohaw')]",[],Sneezed(a) and WentOff(b),"Caused(a, c)","(Sneezed(a) and WentOff(b)) -> (Caused(a, c))","(exists b (exists a (Sneezed(a) and WentOff(b)))) -> (exists a (exists c (Caused(a, c))))"
0,equivocation,"I like my steak rare. But I don’t care for aardvark steak, even though it’s the rarest steak in the world."," ""I like my steak rare.""  "," ""I don’t care for aardvark steak.""","LikesSteak(a, b),  IsRare(b)","CaresFor(a, c)",[],"[(' I', ' I')]",[],"LikesSteak(a, b) and IsRare(b)","~CaresFor(a, c)","(LikesSteak(a, b) and IsRare(b)) -> (~CaresFor(a, c))","(exists b (exists a (LikesSteak(a, b) and IsRare(b)))) -> (exists a (exists c (~CaresFor(a, c))))"
0,faulty generalization,"If you allow the students to redo this one test, they will always want to redo all future tests"," ""Students want to redo this one test.""  "," ""Students will always want to redo all future tests.""","WantsToRedo(a, b)","WantsToRedo(a, c)",[],"[(' Students', ' Students')]",[],"WantsToRedo(a, b)","WantsToRedo(a, c)","(WantsToRedo(a, b)) -> (WantsToRedo(a, c))","(exists b (exists a (WantsToRedo(a, b)))) -> (exists a (exists c (WantsToRedo(a, c))))"
0,fallacy of relevance,"There is no need for additional taxes for education. Every year we throw more money into education, and all they do is hire more management and build more buildings. None of the money actually reaches the classroom or is really used for education."," ""More money is thrown into education every year.""  "," ""Additional taxes for education are unnecessary.""","IsThrownInto(b, a)","IsUnnecessary(c),  IsForEducation(c)",[],"[(' education', ' education')]",[],"IsThrownInto(b, a)",IsUnnecessary(c) and IsForEducation(c),"(IsThrownInto(b, a)) -> (IsUnnecessary(c) and IsForEducation(c))","(exists b (exists a (IsThrownInto(b, a)))) -> (exists c (IsUnnecessary(c) and IsForEducation(c)))"
0,false causality,Believing that the cause of the Reformation was simply Martin Luther posting his theses," ""The cause of the Reformation was simply Martin Luther posting his theses.""  ",,"IsCauseOfReformation(a),  IsPostedBy(b, c)","Properties:  IsCauseOfReformation(a),  IsPostedBy(b, c)",[],[],[],"IsCauseOfReformation(a) and IsPostedBy(b, c)","IsCauseOfReformation(d) and IsPostedBy(b, c)","(IsCauseOfReformation(a) and IsPostedBy(b, c)) -> (IsCauseOfReformation(d) and IsPostedBy(b, c))","(exists b (exists a (exists c (IsCauseOfReformation(a) and IsPostedBy(b, c))))) -> (exists b (exists d (exists c (IsCauseOfReformation(d) and IsPostedBy(b, c)))))"
0,false causality,The party was going great! Then Gerald showed up and little by little people started collecting their coats and heading home. Gerald ruined the party.," ""Gerald showed up and people started collecting their coats.""  "," ""Gerald ruined the party.""","ShowedUp(a),  StartedCollecting(b, c)","Ruined(a, d)",[],"[(' Gerald', ' Gerald')]",[],"ShowedUp(a) and StartedCollecting(b, c)","Ruined(a, d)","(ShowedUp(a) and StartedCollecting(b, c)) -> (Ruined(a, d))","(exists b (exists a (exists c (ShowedUp(a) and StartedCollecting(b, c))))) -> (exists d (exists a (Ruined(a, d))))"
0,fallacy of logic,"I can’t stop eating these chocolates.  I really love chocolate, or I seriously lack willpower.  I know I really love chocolate; therefore, I cannot lack willpower."," ""I really love chocolate.""  "," ""I cannot lack willpower.""",LovesChocolate(a),LacksWillpower(a),[],"[(' I', ' I')]",[],LovesChocolate(a),~LacksWillpower(a),(LovesChocolate(a)) -> (~LacksWillpower(a)),(exists a (LovesChocolate(a))) -> (exists a (~LacksWillpower(a)))
0,false causality,"Shortly after MySpace became popular, U.S. soldiers found Saddam Hussein."," ""U.S. soldiers found Saddam Hussein shortly after MySpace became popular.""  "," ""MySpace's popularity led to U.S. soldiers finding Saddam Hussein.""","Found(b, a),  BecamePopular(c)","LedTo(d, a),  Found(b, a)",[],"[(' U.S. soldiers', ' U.S. soldiers'), (' Saddam Hussein', ' Saddam Hussein')]",[],"BecamePopular(c) and Found(b, a)","LedTo(d, a) and Found(b, a)","(BecamePopular(c) and Found(b, a)) -> (LedTo(d, a) and Found(b, a))","(exists b (exists a (exists c (BecamePopular(c) and Found(b, a))))) -> (exists b (exists a (exists d (LedTo(d, a) and Found(b, a)))))"
0,false causality,Jimmy isn't at school today. He must be on a family trip.," ""Jimmy isn't at school today.""  "," ""Jimmy must be on a family trip.""",IsNotAtSchool(a),IsOnFamilyTrip(a),[],"[(' Jimmy', ' Jimmy')]",[],IsNotAtSchool(a),IsOnFamilyTrip(a),(IsNotAtSchool(a)) -> (IsOnFamilyTrip(a)),(exists a (IsNotAtSchool(a))) -> (exists a (IsOnFamilyTrip(a)))
0,circular reasoning,"I am athletic because I run, and I run because I'm athletic."," ""The speaker is athletic because the speaker runs.""  "," ""Running makes the speaker athletic.""","IsAthletic(a),  Runs(a)","IsAthletic(a),  DoesRun(a)","[('IsAthletic(a)', '  DoesRun(a)'), ('  Runs(a)', 'IsAthletic(a)'), ('IsAthletic(a)', '  Runs(a)'), ('  Runs(a)', '  DoesRun(a)'), ('  DoesRun(a)', '  Runs(a)')]","[(' The speaker', ' the speaker')]",[],IsAthletic(a) <and Runs(a),DoesRun(a) and IsAthletic(a),(IsAthletic(a) <and Runs(a) & (forall a (IsAthletic(a) ->   DoesRun(a))) & (forall a (  Runs(a) -> IsAthletic(a))) & (forall a (IsAthletic(a) ->   Runs(a))) & (forall a (  Runs(a) ->   DoesRun(a))) & (forall a (  DoesRun(a) ->   Runs(a)))) -> (DoesRun(a) and IsAthletic(a)),(exists a (IsAthletic(a) <and Runs(a)) & (forall c (IsAthletic(c) ->   DoesRun(c))) & (forall d (  Runs(d) -> IsAthletic(d))) & (forall e (IsAthletic(e) ->   Runs(e))) & (forall f (  Runs(f) ->   DoesRun(f))) & (forall g (  DoesRun(g) ->   Runs(g)))) -> (exists a (DoesRun(a) and IsAthletic(a)))
0,false causality,You know Jane Fonda’s exercise videos must be worth the money. Look at the great shape she’s in.," ""Jane Fonda's exercise videos must be worth the money.""  "," ""Jane Fonda is in great shape.""","IsWorth(a, b)",IsInGreatShape(c),[],[],[],"IsWorth(a, b)",IsInGreatShape(c),"(IsWorth(a, b)) -> (IsInGreatShape(c))","(exists b (exists a (IsWorth(a, b)))) -> (exists c (IsInGreatShape(c)))"
0,fallacy of credibility,Albert Einstein was extremely impressed with this theory.," ""Albert Einstein was extremely impressed with this theory.""  "," ""This theory is impressive.""","IsExtremelyImpressed(b, a)",IsImpressive(a),"[('IsImpressive(a)', 'IsExtremelyImpressed(b, a)')]","[(' this theory', ' This theory')]",[],"IsExtremelyImpressed(b, a)",IsImpressive(a),"(IsExtremelyImpressed(b, a) & (forall b (forall a (IsImpressive(a) -> IsExtremelyImpressed(b, a))))) -> (IsImpressive(a))","(exists b (exists a (IsExtremelyImpressed(b, a))) & (forall f (forall d (forall e (IsImpressive(d) -> IsExtremelyImpressed(e,f)))))) -> (exists a (IsImpressive(a)))"
0,false causality,“I sneezed exactly at the same time the power went off. My sneeze must’ve done something to make the power go off. “," ""The sneeze occurred exactly when the power went off.""  "," ""The sneeze caused the power to go off.""","Occurred(a),  WentOff(b)","Caused(a, b),  WentOff(b)",[],"[(' The sneeze', ' The sneeze'), (' the power', ' the power')]",[],Occurred(a) and WentOff(b),"Caused(a, b) and WentOff(b)","(Occurred(a) and WentOff(b)) -> (Caused(a, b) and WentOff(b))","(exists b (exists a (Occurred(a) and WentOff(b)))) -> (exists b (exists a (Caused(a, b) and WentOff(b))))"
0,faulty generalization,"It’s getting late, and we still have to decide on the school budget. What do you say we just leave it as is and we can call it a night?"," ""We still have to decide on the school budget.""  "," ""The school budget can be left as is.""","HasSchoolBudget(a),  NeedsDecision(b)",IsLeftAsIs(a),[],"[(' the school budget', ' The school budget')]",[],HasSchoolBudget(a) and NeedsDecision(b),IsLeftAsIs(a),(HasSchoolBudget(a) and NeedsDecision(b)) -> (IsLeftAsIs(a)),(exists b (exists a (HasSchoolBudget(a) and NeedsDecision(b)))) -> (exists a (IsLeftAsIs(a)))
0,ad hominem,"Speaker 1 (Democrat): “Donald Trump is a known adulterer. It reflects badly on his character, and suggests he might not be trustworthy.”
Speaker 2 (Republican): “What about Bill Clinton? You didn’t seem to care when he cheated.”"," ""Donald Trump is a known adulterer.""  "," ""Donald Trump might not be trustworthy.""",IsKnownAdulterer(a),IsNotTrustworthy(a),"[('IsKnownAdulterer(a)', 'IsNotTrustworthy(a)')]","[(' Donald Trump', ' Donald Trump')]",[],IsKnownAdulterer(a),~IsNotTrustworthy(a),(IsKnownAdulterer(a) & (forall a (IsKnownAdulterer(a) -> IsNotTrustworthy(a)))) -> (~IsNotTrustworthy(a)),(exists a (IsKnownAdulterer(a)) & (forall b (IsKnownAdulterer(b) -> IsNotTrustworthy(b)))) -> (exists a (~IsNotTrustworthy(a)))
0,ad hominem,"I hope I presented my argument clearly.  Now, my opponent will attempt to refute my argument by his own fallacious, incoherent, illogical version of history."," ""My opponent will attempt to refute my argument with a fallacious, incoherent, illogical version of history.""  "," ""My argument is clear.""","IsOpponent(b),  AttemptsToRefute(b, a),  IsFallacious(c),  IsIncoherent(c),  IsIllogical(e)",IsClear(a),[],"[(' my argument', ' My argument')]",[],"IsOpponent(b) and AttemptsToRefute(b, a) and IsFallacious(c) and IsIncoherent(c) and IsIllogical(e)",IsClear(a),"(IsOpponent(b) and AttemptsToRefute(b, a) and IsFallacious(c) and IsIncoherent(c) and IsIllogical(e)) -> (IsClear(a))","(exists e (exists b (exists a (exists c (IsOpponent(b) and AttemptsToRefute(b, a) and IsFallacious(c) and IsIncoherent(c) and IsIllogical(e)))))) -> (exists a (IsClear(a)))"
0,false causality,"Every time we sacrifice virgins, it rains. Therefore, sacrificing virgins causes it to rain."," ""Every time we sacrifice virgins, it rains.""  "," ""Sacrificing virgins causes rain.""","IsSacrificed(a),  CausesRain(a)","IsSacrificed(a),  CausesRain(a)",[],"[(' virgins', ' Virgins')]",[],IsSacrificed(a) and CausesRain(a),IsSacrificed(a) and CausesRain(b),(IsSacrificed(a) and CausesRain(a)) -> (IsSacrificed(a) and CausesRain(b)),(exists a (IsSacrificed(a) and CausesRain(a))) -> (exists b (exists a (IsSacrificed(a) and CausesRain(b))))
0,ad hominem,"Salesman: This car gets better than average gas mileage and is one of the most reliable cars according to Consumer Reports.
Will: I doubt it—you obviously just want to sell me that car.
"," ""This car gets better than average gas mileage and is one of the most reliable cars according to Consumer Reports.""  "," ""The salesman just wants to sell the car.""","IsBetterThanAverageGasMileage(a),  IsReliable(a),  IsReportedBy(a, d)","WantsToSell(e, a)",[],"[(' This car', ' the car')]",[],"IsBetterThanAverageGasMileage(a) and IsReliable(a) and IsReportedBy(a, d)","WantsToSell(e, a)","(IsBetterThanAverageGasMileage(a) and IsReliable(a) and IsReportedBy(a, d)) -> (WantsToSell(e, a))","(exists d (exists a (IsBetterThanAverageGasMileage(a) and IsReliable(a) and IsReportedBy(a, d)))) -> (exists a (exists e (WantsToSell(e, a))))"
0,fallacy of relevance,Labor unions in America are just as bad as Russia under Stalin!," ""Labor unions in America are just as bad as Russia under Stalin.""  "," ""Labor unions in America are bad.""","IsInAmerica(a),  IsAsBadAs(a, c),  IsUnderStalin(c)","IsInAmerica(a),  IsBad(a)",[],"[(' Labor unions', ' Labor unions'), (' America', ' America')]",[],"IsInAmerica(a) and IsAsBadAs(a, c) and IsUnderStalin(c)",IsInAmerica(a) and IsBad(a),"(IsInAmerica(a) and IsAsBadAs(a, c) and IsUnderStalin(c)) -> (IsInAmerica(a) and IsBad(a))","(exists a (exists c (IsInAmerica(a) and IsAsBadAs(a, c) and IsUnderStalin(c)))) -> (exists a (IsInAmerica(a) and IsBad(a)))"
0,ad populum,"""Everyone was driving over the speed limit, so I shouldn't have gotten a ticket for it!"" is an example of which logical fallacy?"," ""Everyone was driving over the speed limit.""  "," ""I shouldn't have gotten a ticket for driving over the speed limit.""","IsDrivingOverLimit(b),  IsSpeedLimit(a)","HasTicket(c, d),  IsDrivingOverLimit(c),  IsSpeedLimit(a)",[],"[(' the speed limit', ' the speed limit')]",[],IsDrivingOverLimit(b) and IsSpeedLimit(a),"HasTicket(c, d) and ~IsDrivingOverLimit(c)","(IsDrivingOverLimit(b) and IsSpeedLimit(a)) -> (HasTicket(c, d) and ~IsDrivingOverLimit(c))","(exists b (exists a (IsDrivingOverLimit(b) and IsSpeedLimit(a)))) -> (exists d (exists c (HasTicket(c, d) and ~IsDrivingOverLimit(c))))"
0,ad hominem,Why would you trust Paris Hilton to sell health food? She drinks and parties and has multiple partners.," ""Paris Hilton drinks, parties, and has multiple partners.""  "," ""People should not trust Paris Hilton to sell health food.""","Drinks(a),  Parties(a),  HasMultiplePartners(a)","ShouldNotTrust(b, a),  Sells(c, a)",[],"[(' Paris Hilton', ' Paris Hilton')]","[(' Paris Hilton', ' People')]",Drinks(a) and Parties(a) and HasMultiplePartners(a),"ShouldNotTrust(b, a) and ~Sells(c, a)","(exists a (Drinks(a) and Parties(a) and HasMultiplePartners(a))) -> (forall b (ShouldNotTrust(b, a) and ~Sells(c, a)))","(exists a (Drinks(a) and Parties(a) and HasMultiplePartners(a))) -> (exists b (exists a (exists c (ShouldNotTrust(b, a) and ~Sells(c, a)))))"
0,false causality,"“Yesterday, I walked under a ladder with an open umbrella indoors while spilling salt in front of a black cat. And I forgot to knock on wood with my lucky dice. That must be why I’m having such a bad day today. It’s bad luck.”"," ""Yesterday, I walked under a ladder with an open umbrella indoors while spilling salt in front of a black cat.""  "," ""Having such a bad day today is bad luck.""","IsWalkingUnder(a,b),  IsOpen(c),  IsIndoors(d),  IsSpilled(e),  IsInFrontOf(e,f)","IsBadDay(g),  IsBadLuck(h)",[],[],[],"IsWalkingUnder(a,b) and IsOpen(c) and IsIndoors(d) and IsSpilled(e) and IsInFrontOf(e,f)",IsBadDay(g) and IsBadLuck(h),"(IsWalkingUnder(a,b) and IsOpen(c) and IsIndoors(d) and IsSpilled(e) and IsInFrontOf(e,f)) -> (IsBadDay(g) and IsBadLuck(h))","(exists b (exists d (exists f (exists a (exists e (exists c (IsWalkingUnder(a,b) and IsOpen(c) and IsIndoors(d) and IsSpilled(e) and IsInFrontOf(e,f)))))))) -> (exists g (exists h (IsBadDay(g) and IsBadLuck(h))))"
0,faulty generalization,"A car makes less pollution than a bus. Therefore, cars are less of a pollution problem than buses"," ""A car makes less pollution than a bus.""  "," ""Cars are less of a pollution problem than buses.""","MakesLessPollution(a, c),  CausesPollution(a, b),  CausesPollution(c, b)","IsLessPollutionProblem(d, f),  IsPollutionProblem(e)","[('MakesLessPollution(a, c)', 'IsLessPollutionProblem(d, f)')]",[],"[(' A car', ' Cars'), (' a bus', ' buses')]","MakesLessPollution(a, c) and (CausesPollution(a, b) and CausesPollution(c, b))","IsLessPollutionProblem(d, f) and IsPollutionProblem(e)","(exists c (exists a (MakesLessPollution(a, c) and (CausesPollution(a, b) and CausesPollution(c, b)))) & (forall f (forall d (forall a (forall c (MakesLessPollution(a, c) -> IsLessPollutionProblem(d, f))))))) -> (forall f (forall d (IsLessPollutionProblem(d, f) and IsPollutionProblem(e))))","(exists b (exists a (exists c (MakesLessPollution(a, c) and (CausesPollution(a, b) and CausesPollution(c, b))))) & (forall g (forall h (forall i (forall j (MakesLessPollution(g,h) -> IsLessPollutionProblem(i,j))))))) -> (exists f (exists d (exists e (IsLessPollutionProblem(d, f) and IsPollutionProblem(e)))))"
0,appeal to emotion,"Preys on people’s emotions and sensitivities, can turn into a slippery slope"," ""Preys on people's emotions and sensitivities.""  "," ""Preying on people's emotions and sensitivities can turn into a slippery slope.""","PreysOn(a,b)","PreysOn(a,b),  CanTurnInto(c)",[],"[("" people's emotions"", "" people's emotions""), (' sensitivities', ' sensitivities')]",[],"PreysOn(a,b)","(PreysOn(a,b)) and CanTurnInto(c)","(PreysOn(a,b)) -> ((PreysOn(a,b)) and CanTurnInto(c))","(exists b (exists a (PreysOn(a,b)))) -> (exists b (exists a (exists c ((PreysOn(a,b)) and CanTurnInto(c)))))"
0,fallacy of logic,"Bats are mammals. Bats can fly. Pigs are also mammals, therefore pigs can fly."," ""Bats are mammals.""  "," ""Pigs can fly.""",IsMammal(a),CanFly(c),[],[],"[(' mammals', ' Pigs')]",IsMammal(a),CanFly(c),(IsMammal(a)) -> (CanFly(c)),(exists a (IsMammal(a))) -> (exists c (CanFly(c)))
0,intentional,The Geo Metro is a superior car because it averages 43 miles per gallon.," ""The Geo Metro averages 43 miles per gallon.""  "," ""The Geo Metro is a superior car.""","AveragesMilesPerGallon(a, b)",IsSuperior(a),[],"[(' The Geo Metro', ' The Geo Metro')]",[],"AveragesMilesPerGallon(a, b)",IsSuperior(a),"(AveragesMilesPerGallon(a, b)) -> (IsSuperior(a))","(exists b (exists a (AveragesMilesPerGallon(a, b)))) -> (exists a (IsSuperior(a)))"
0,fallacy of relevance,"“While you may have concerns about my votes about the environment, I can assure you that I am an open minded individual. What we should really discuss is my record on votes that expanded educational opportunities for all children."""," ""The speaker has votes about the environment.""  "," ""The speaker is an open-minded individual.""","HasVotes(a),  IsAbout(b,c)",IsOpenMinded(d),[],"[(' The speaker', ' The speaker')]",[],"HasVotes(a) and IsAbout(b,c)",IsSpeaker(a) and IsOpenMinded(d),"(HasVotes(a) and IsAbout(b,c)) -> (IsSpeaker(a) and IsOpenMinded(d))","(exists b (exists a (exists c (HasVotes(a) and IsAbout(b,c))))) -> (exists d (exists a (IsSpeaker(a) and IsOpenMinded(d))))"
0,intentional,"Fish are the easiest pets to keep; they are inexpensive and require no maintenance at all. Plus, they are really pretty and soothing to watch."," ""Fish are inexpensive pets and require no maintenance.""  "," ""Fish are the easiest pets to keep.""","IsInexpensive(b),  RequiresNoMaintenance(b)","IsEasiest(a),  CanBeKept(c)","[('IsInexpensive(b)', '  CanBeKept(c)')]","[(' Fish', ' Fish')]","[(' Fish', ' pets'), (' inexpensive pets', ' pets')]",IsInexpensive(b) and RequiresNoMaintenance(b),IsEasiest(a) and CanBeKept(c),(exists b (IsInexpensive(b) and RequiresNoMaintenance(b)) & (forall b (forall c (IsInexpensive(b) ->   CanBeKept(c))))) -> (forall c (IsEasiest(a) and CanBeKept(c))),(exists b (IsInexpensive(b) and RequiresNoMaintenance(b)) & (forall d (forall e (IsInexpensive(d) ->   CanBeKept(e))))) -> (exists a (exists c (IsEasiest(a) and CanBeKept(c))))
0,intentional,I am only slightly obese.  That is perfectly normal here in America.," ""I am only slightly obese.""  "," ""Slightly obese is perfectly normal in America.""",IsObese(a),"IsNormal(c, d)",[],[],"[(' obese', ' Slightly obese')]",IsObese(a) and ~IsObese(b),"IsNormal(c, d)","(exists b (IsObese(a) and ~IsObese(b))) -> (forall c (IsNormal(c, d)))","(exists b (exists a (IsObese(a) and ~IsObese(b)))) -> (exists d (exists c (IsNormal(c, d))))"
0,ad populum,"Most people think the world is flat, therefore it is flat."," ""Most people think the world is flat.""  "," ""The world is flat.""","ThinksFlat(b, a)",IsFlat(a),[],"[(' the world', ' The world')]","[(' Most people', ' The world')]","ThinksFlat(b, a)",IsFlat(a),"(exists b (ThinksFlat(b, a))) -> (forall a (IsFlat(a)))","(exists b (exists a (ThinksFlat(b, a)))) -> (exists a (IsFlat(a)))"
0,appeal to emotion,You have to give me a passing grade. I spent 150 hours on that project and missed every party this quarter.," ""The person spent 150 hours on the project and missed every party this quarter.""  "," ""The person deserves a passing grade.""","SpentHours(a, b),  WorkedOn(a, c),  MissedParties(a, d),  IsInThisQuarter(e)","DeservesGrade(a, f)",[],"[(' The person', ' The person')]",[],"SpentHours(a, b) and WorkedOn(a, c) and MissedParties(a, d) and IsInThisQuarter(e)","DeservesGrade(a, f)","(SpentHours(a, b) and WorkedOn(a, c) and MissedParties(a, d) and IsInThisQuarter(e)) -> (DeservesGrade(a, f))","(exists b (exists d (exists a (exists e (exists c (SpentHours(a, b) and WorkedOn(a, c) and MissedParties(a, d) and IsInThisQuarter(e))))))) -> (exists f (exists a (DeservesGrade(a, f))))"
0,ad populum,"I guess I should buy my 12 year old daughter an iPhone. Everyone at her school has one, and I want her to fit in with the other kids."," ""Everyone at the 12-year-old daughter's school has an iPhone.""  "," ""The 12-year-old daughter should have an iPhone.""","Has12YearOldDaughter(a),  IsAtSchool(c,d),  HasIPhone(c,b)","Has12YearOldDaughter(a),  ShouldHaveIPhone(a,b)","[('  ShouldHaveIPhone(a,b)', 'Has12YearOldDaughter(a)')]","[(' 12-year-old daughter', ' The 12-year-old daughter'), (' iPhone', ' an iPhone')]","[(' Everyone', ' The 12-year-old daughter')]","Has12YearOldDaughter(a) and IsAtSchool(c,d) and HasIPhone(c,b)","Has12YearOldDaughter(a) and ShouldHaveIPhone(a,b)","(exists c (Has12YearOldDaughter(a) and IsAtSchool(c,d) and HasIPhone(c,b)) & (forall b (forall a (  ShouldHaveIPhone(a,b) -> Has12YearOldDaughter(a))))) -> (forall a (Has12YearOldDaughter(a) and ShouldHaveIPhone(a,b)))","(exists b (exists d (exists a (exists c (Has12YearOldDaughter(a) and IsAtSchool(c,d) and HasIPhone(c,b))))) & (forall g (forall h (  ShouldHaveIPhone(g,h) -> Has12YearOldDaughter(g))))) -> (exists b (exists a (Has12YearOldDaughter(a) and ShouldHaveIPhone(a,b))))"
0,intentional,Kerry’s plan will raise taxes by at least $900 billion his first hundred days.," ""Kerry’s plan will raise taxes by at least $900 billion.""  "," ""Taxation will increase significantly in the first hundred days.""","RaisesTaxes(a,b,c)","IncreasesSignificantly(d, e)",[],[],[],"RaisesTaxes(a, b, c)","IncreasesSignificantly(d, e)","(RaisesTaxes(a, b, c)) -> (IncreasesSignificantly(d, e))","(exists b (exists a (exists c (RaisesTaxes(a, b, c))))) -> (exists d (exists e (IncreasesSignificantly(d, e))))"
0,fallacy of extension,"If you told a person, ""I think we should all stay inside to bend the curve of COVID-19"" and they replied, ""so I guess you want people to lose their jobs then,"" what logical fallacy are they using?"," ""The person thinks everyone should stay inside to bend the curve of COVID-19.""  "," ""The person wants people to lose their jobs.""","Thinks(a),  ShouldStayInside(b),  IsAbout(c,d),  AimsToBend(c)","Wants(a),  ShouldLose(e, f)",[],"[(' The person', ' The person')]","[(' The person', ' people'), (' everyone', ' people')]","Thinks(a) and ShouldStayInside(b) and IsAbout(c,d) and AimsToBend(c)","Wants(a) and ShouldLose(e, f)","(exists b (exists a (Thinks(a) and ShouldStayInside(b) and IsAbout(c,d) and AimsToBend(c)))) -> (forall e (Wants(a) and ShouldLose(e, f)))","(exists b (exists d (exists a (exists c (Thinks(a) and ShouldStayInside(b) and IsAbout(c,d) and AimsToBend(c)))))) -> (exists f (exists a (exists e (Wants(a) and ShouldLose(e, f)))))"
0,appeal to emotion,"Power lines cause cancer. I met a little boy with cancer who lived just 20 miles from a power line who looked into my eyes and said, in his weak voice, “Please do whatever you can so that other kids won’t have to go through what I am going through.” I urge you to vote for this bill to tear down all power lines and replace them with monkeys on treadmills."," ""Power lines cause cancer.""  "," ""Voters should support the bill to tear down all power lines and replace them with monkeys on treadmills.""","Causes(a, b)","Supports(c, d),  TearDown(a),  ReplaceWith(e, f)",[],"[(' Power lines', ' power lines')]",[],"Causes(a, b)","Supports(c, d) and (TearDown(a) and ReplaceWith(e, f))","(Causes(a, b)) -> (Supports(c, d) and (TearDown(a) and ReplaceWith(e, f)))","(exists b (exists a (Causes(a, b)))) -> (exists d (exists f (exists a (exists e (exists c (Supports(c, d) and (TearDown(a) and ReplaceWith(e, f))))))))"
0,ad hominem,"Student: Hey, Professor Moore, we shouldn't have to read this book by Freud. Everyone knows he used cocaine."," ""Everyone knows Freud used cocaine.""  "," ""Students shouldn't have to read the book by Freud.""","Knows(b, a),  Used(a, c)","ShouldNotRead(d, e),  IsWrittenBy(e, a)",[],"[(' Freud', ' Freud')]","[(' Everyone', ' Students')]","Knows(b, a) and Used(a, c)","ShouldNotRead(d, e)","(exists b (Knows(b, a) and Used(a, c))) -> (forall d (ShouldNotRead(d, e)))","(exists b (exists a (exists c (Knows(b, a) and Used(a, c))))) -> (exists d (exists e (ShouldNotRead(d, e))))"
0,false causality,"Our house was burglarized right after that new family moved in next door. Therefore, that new family must have been involved."," ""The new family moved in next door.""  "," ""The new family must have been involved in the burglary.""","IsNewFamily(a),  MovedInNextDoor(a)","IsNewFamily(a),  IsInvolvedInBurglary(a, b)",[],"[(' The new family', ' The new family')]",[],IsNewFamily(a) and MovedInNextDoor(a),"IsNewFamily(a) and IsInvolvedInBurglary(a, b)","(IsNewFamily(a) and MovedInNextDoor(a)) -> (IsNewFamily(a) and IsInvolvedInBurglary(a, b))","(exists a (IsNewFamily(a) and MovedInNextDoor(a))) -> (exists b (exists a (IsNewFamily(a) and IsInvolvedInBurglary(a, b))))"
0,circular reasoning,"Witchcraft remains our most urgent spiritual problem because it threatens
our very souls."," ""Witchcraft is our most urgent spiritual problem.""  "," ""Witchcraft threatens our very souls.""","IsWitchcraft(a),  IsUrgent(c),  IsSpiritualProblem(c)","IsWitchcraft(a),  ThreatensSouls(a, d)",[],"[(' Witchcraft', ' Witchcraft')]","[(' our', ' our souls')]",IsWitchcraft(a) and IsUrgent(c) and IsSpiritualProblem(c),"IsWitchcraft(a) and ThreatensSouls(a, d)","(IsWitchcraft(a) and IsUrgent(c) and IsSpiritualProblem(c)) -> (IsWitchcraft(a) and ThreatensSouls(a, d))","(exists a (exists c (IsWitchcraft(a) and IsUrgent(c) and IsSpiritualProblem(c)))) -> (exists d (exists a (IsWitchcraft(a) and ThreatensSouls(a, d))))"
0,false dilemma,"Senator Jill: ""We'll have to cut education funding this year.""
Senator Bill: ""Why?""
Senator Jill: ""Well, either we cut the social programs or we live with a huge deficit and we can't live with the deficit."""," ""We have to cut education funding this year.""  "," ""Cut social programs or live with a huge deficit.""","HasToCut(a),  IsThisYear(c)","HasToCut(d),  IsHugeDeficit(e)",[],[],[],"HasToCut(a, b) and IsThisYear(c)",HasToCut(d) or IsHugeDeficit(e),"(HasToCut(a, b) and IsThisYear(c)) -> (HasToCut(d) or IsHugeDeficit(e))","(exists b (exists a (exists c (HasToCut(a, b) and IsThisYear(c))))) -> (exists d (exists e (HasToCut(d) or IsHugeDeficit(e))))"
0,appeal to emotion,"""You'll make the right decision because you have something that not many people do: you have heart.""?"," ""You have heart.""  "," ""You will make the right decision.""",HasHeart(a),"WillMakeRightDecision(a, c)","[('HasHeart(a)', 'WillMakeRightDecision(a, c)'), ('WillMakeRightDecision(a, c)', 'HasHeart(a)')]","[(' You', ' You')]",[],HasHeart(a),"WillMakeRightDecision(a, c)","(HasHeart(a) & (forall a (forall c (HasHeart(a) -> WillMakeRightDecision(a, c)))) & (forall a (forall c (WillMakeRightDecision(a, c) -> HasHeart(a))))) -> (WillMakeRightDecision(a, c))","(exists a (HasHeart(a)) & (forall d (forall e (HasHeart(d) -> WillMakeRightDecision(d,e)))) & (forall g (forall f (WillMakeRightDecision(f,g) -> HasHeart(f))))) -> (exists a (exists c (WillMakeRightDecision(a, c))))"
0,faulty generalization,Christine has a terrible experience with a boyfriend. She decides that all boys are mean. This is an example of which logical fallacy?," ""Christine has a terrible experience with a boyfriend.""  "," ""All boys are mean.""","HasTerribleExperience(a, b),  HasBoyfriend(a, c)",IsMean(d),[],[],"[(' a boyfriend', ' All boys')]","HasTerribleExperience(a, b) and HasBoyfriend(a, c)",IsMean(d),"(exists c (HasTerribleExperience(a, b) and HasBoyfriend(a, c))) -> (forall d (IsMean(d)))","(exists b (exists a (exists c (HasTerribleExperience(a, b) and HasBoyfriend(a, c))))) -> (exists d (IsMean(d)))"
0,circular reasoning,Smoking pot is against the law because it's wrong; I know it's wrong because it is against the law.," ""Smoking pot is against the law.""  "," ""Smoking pot is wrong.""",IsAgainstTheLaw(a),IsWrong(a),"[('IsAgainstTheLaw(a)', 'IsWrong(a)'), ('IsWrong(a)', 'IsAgainstTheLaw(a)')]","[(' Smoking pot', ' Smoking pot')]",[],IsAgainstTheLaw(a),IsWrong(a),(IsAgainstTheLaw(a) & (forall a (IsAgainstTheLaw(a) -> IsWrong(a))) & (forall a (IsWrong(a) -> IsAgainstTheLaw(a)))) -> (IsWrong(a)),(exists a (IsAgainstTheLaw(a)) & (forall c (IsAgainstTheLaw(c) -> IsWrong(c))) & (forall d (IsWrong(d) -> IsAgainstTheLaw(d)))) -> (exists a (IsWrong(a)))
0,circular reasoning,"""You can't give me a D because I'm an A student!"""," ""The speaker is an A student.""  "," ""The speaker cannot receive a D.""","IsSpeaker(a),  IsAStudent(a)","IsSpeaker(a),  CannotReceive(c)",[],"[(' The speaker', ' The speaker')]",[],IsSpeaker(a) and IsAStudent(a),IsSpeaker(a) and ~CannotReceive(c),(IsSpeaker(a) and IsAStudent(a)) -> (IsSpeaker(a) and ~CannotReceive(c)),(exists a (IsSpeaker(a) and IsAStudent(a))) -> (exists a (exists c (IsSpeaker(a) and ~CannotReceive(c))))
0,fallacy of logic,People who buy stocks are no different from people who bet on horse racing. They both risk their money with little chance of making a big profit.," ""People who buy stocks are no different from people who bet on horse racing.""  "," ""People who buy stocks risk their money with little chance of making a big profit.""","BuysStocks(a),  BetsOnHorseRacing(b),  IsNoDifferent(a, b)","BuysStocks(c),  RisksMoney(c, e),  HasLittleChance(f),  CanMakeBigProfit(c, g)",[],[],"[(' People who buy stocks', ' People'), (' people who bet on horse racing', ' People')]","BuysStocks(a) and IsNoDifferent(a, b)","(BuysStocks(c) and RisksMoney(c, e) and HasLittleChance(f) and ~CanMakeBigProfit(c, g))","(exists b (exists a (BuysStocks(a) and IsNoDifferent(a, b)))) -> (forall c ((BuysStocks(c) and RisksMoney(c, e) and HasLittleChance(f) and ~CanMakeBigProfit(c, g))))","(exists b (exists a (BuysStocks(a) and IsNoDifferent(a, b)))) -> (exists g (exists f (exists e (exists c ((BuysStocks(c) and RisksMoney(c, e) and HasLittleChance(f) and ~CanMakeBigProfit(c, g)))))))"
0,appeal to emotion,"I cannot get a job because the public education system failed me;  I have to steal to  survive.  It is society's fault, not mine."," ""The public education system failed the speaker.""  "," ""Society is at fault for the speaker's actions.""","Failed(a, b)","IsAtFault(c, d)",[],[],[],"Failed(a, b)","IsAtFault(c, d)","(Failed(a, b)) -> (IsAtFault(c, d))","(exists b (exists a (Failed(a, b)))) -> (exists d (exists c (IsAtFault(c, d))))"
0,faulty generalization,"Trump presents a dark image of America if Clinton is elected, with “Syrian refugees flooding in, illegal immigrants convicted of crimes staying.”"," ""Trump presents a dark image of America if Clinton is elected.""  "," ""Syrian refugees will flood in and illegal immigrants convicted of crimes will stay.""","PresentsImage(a, b),  IsDarkImage(b),  IsElected(c)","WillFloodIn(d),  IsConvictedOfCrimes(e, f),  WillStay(e)",[],[],[],"PresentsImage(a, b) and IsDarkImage(b) and IsElected(c)","WillFloodIn(d) and (IsConvictedOfCrimes(e, f) and WillStay(e))","(PresentsImage(a, b) and IsDarkImage(b) and IsElected(c)) -> (WillFloodIn(d) and (IsConvictedOfCrimes(e, f) and WillStay(e)))","(exists b (exists a (exists c (PresentsImage(a, b) and IsDarkImage(b) and IsElected(c))))) -> (exists f (exists d (exists e (WillFloodIn(d) and (IsConvictedOfCrimes(e, f) and WillStay(e))))))"
0,ad hominem,"Charlie: Fast food is filled with salt, fat, and added sugars. We need better regulation of the industry.
Bob: That my be, but you're such a hypocrite! I saw you devour a Triple-Baconator, super-sized fries, and 64oz of soda yesterday!"," ""Charlie devoured a Triple-Baconator, super-sized fries, and 64oz of soda yesterday.""  "," ""Charlie is a hypocrite.""","Devoured(a, b),  IsSuperSized(c),  Is64oz(d)",IsHypocrite(a),[],"[(' Charlie', ' Charlie')]",[],"Devoured(a, b) and IsSuperSized(c) and Is64oz(d)",IsHypocrite(a),"(Devoured(a, b) and IsSuperSized(c) and Is64oz(d)) -> (IsHypocrite(a))","(exists b (exists d (exists a (exists c (Devoured(a, b) and IsSuperSized(c) and Is64oz(d)))))) -> (exists a (IsHypocrite(a)))"
0,faulty generalization,Christine has a terrible experience with a boyfriend. She decides that all boys are mean.," ""Christine has a terrible experience with a boyfriend.""  "," ""All boys are mean.""  ","HasTerribleExperience(a, b),  HasBoyfriend(a, c)",IsMean(d),[],[],"[(' a boyfriend', ' All boys')]","HasTerribleExperience(a, b) and HasBoyfriend(a, c)",IsMean(d),"(exists c (HasTerribleExperience(a, b) and HasBoyfriend(a, c))) -> (forall d (IsMean(d)))","(exists b (exists a (exists c (HasTerribleExperience(a, b) and HasBoyfriend(a, c))))) -> (exists d (IsMean(d)))"
0,intentional,"Barbara believes the marketing agency's office is haunted. The cleaning crew once said they heard a other-worldly noise late at night. Since no one could prove that it wasn't a ghost, the office must be haunted."," ""The cleaning crew heard an other-worldly noise late at night.""  "," ""The marketing agency's office is haunted.""","HearsNoise(a,b),  IsOtherWorldly(b),  IsLateAtNight(c)",IsHaunted(d),[],[],[],"HearsNoise(a,b) and IsOtherWorldly(b) and IsLateAtNight(c)",IsHaunted(d),"(HearsNoise(a,b) and IsOtherWorldly(b) and IsLateAtNight(c)) -> (IsHaunted(d))","(exists b (exists a (exists c (HearsNoise(a,b) and IsOtherWorldly(b) and IsLateAtNight(c))))) -> (exists d (IsHaunted(d)))"
0,ad populum,"I am voting for Pepitone for President because the rest of my family is voting for her, and I don't want to be the only one not doing so."," ""The rest of the family is voting for Pepitone for President.""  "," ""Everyone should vote for Pepitone for President.""","IsVotingFor(c, a),  IsPresident(b)","IsVotingFor(b, a),  IsPresident(b)",[],"[(' Pepitone', ' Pepitone'), (' Everyone', ' President'), (' President', ' President')]","[(' The rest of the family', ' Everyone')]","IsVotingFor(c, a) and IsPresident(b)","IsVotingFor(b, a) and IsPresident(b)","(exists c (IsVotingFor(c, a) and IsPresident(b))) -> (forall b (IsVotingFor(b, a) and IsPresident(b)))","(exists b (exists a (exists c (IsVotingFor(c, a) and IsPresident(b))))) -> (exists b (exists a (IsVotingFor(b, a) and IsPresident(b))))"
0,fallacy of credibility,"“I admire the president for being a good role model.” REPLY: “But the New York Times says he’s a lousy role model, so you’re wrong.”"," ""The president is a good role model.""  "," ""The president is a lousy role model.""","IsPresident(a),  IsGoodRoleModel(a)","IsPresident(a),  IsLousyRoleModel(a)",[],"[(' The president', ' The president')]",[],IsPresident(a) and IsGoodRoleModel(a),IsPresident(a) and IsLousyRoleModel(a),(IsPresident(a) and IsGoodRoleModel(a)) -> (IsPresident(a) and IsLousyRoleModel(a)),(exists a (IsPresident(a) and IsGoodRoleModel(a))) -> (exists a (IsPresident(a) and IsLousyRoleModel(a)))
0,faulty generalization,The numbers on gun violence speak for themselves. We should ban guns in the country!," ""The numbers on gun violence indicate a problem.""  "," ""The country should ban guns.""","IndicatesProblem(a, b),  IsAProblem(c)","ShouldBan(d, e)",[],[],[],"IndicatesProblem(a, b) and IsAProblem(c)","ShouldBan(d, e)","(IndicatesProblem(a, b) and IsAProblem(c)) -> (ShouldBan(d, e))","(exists b (exists a (exists c (IndicatesProblem(a, b) and IsAProblem(c))))) -> (exists d (exists e (ShouldBan(d, e))))"
0,false causality,"“The temperature has dropped this morning, and I also have a headache. Therefore, the cold weather must be causing my headache. “"," ""The temperature has dropped this morning.""  "," ""Cold weather causes headaches.""","IsDropped(a, b)","Causes(c, d)",[],[],[],"IsDropped(a, b)","Causes(c, d)","(IsDropped(a, b)) -> (Causes(c, d))","(exists b (exists a (IsDropped(a, b)))) -> (exists d (exists c (Causes(c, d))))"
0,ad hominem,"My teacher says the Earth is flat, so it definitely is flat."," ""The teacher says the Earth is flat.""  "," ""The Earth is flat.""","Says(b,a),  IsFlat(a)",IsFlat(a),[],"[(' the Earth', ' The Earth')]",[],"Says(b,a) and IsFlat(a)",IsFlat(a),"(Says(b,a) and IsFlat(a)) -> (IsFlat(a))","(exists b (exists a (Says(b,a) and IsFlat(a)))) -> (exists a (IsFlat(a)))"
0,equivocation,"The fallacy of equivocation occurs when a key term or phrase in an argument is used in an ambiguous way, with one meaning in one portion of the argument and then another meaning in another portion of the argument."," ""The fallacy of equivocation occurs when a key term or phrase in an argument is used ambiguously.""  "," ""A key term or phrase can have different meanings in different portions of an argument.""","IsFallacyOfEquivocation(d),  IsKeyTermUsedAmbiguously(a),  IsPhraseUsedAmbiguously(b),  IsInArgument(c)","IsKeyTerm(a),  IsPhrase(b),  HasDifferentMeanings(e),  IsInDifferentPortions(f),  IsInArgument(c)","[('  IsKeyTermUsedAmbiguously(a)', 'IsKeyTerm(a)')]","[(' a key term', ' A key term'), (' a phrase', ' phrase'), (' an argument', ' an argument')]",[],IsFallacyOfEquivocation(d) and (IsKeyTermUsedAmbiguously(a) or IsPhraseUsedAmbiguously(b)) and IsInArgument(c),IsKeyTerm(a) and IsPhrase(b) and HasDifferentMeanings(e) and IsInDifferentPortions(f) and IsInArgument(c),(IsFallacyOfEquivocation(d) and (IsKeyTermUsedAmbiguously(a) or IsPhraseUsedAmbiguously(b)) and IsInArgument(c) & (forall a (  IsKeyTermUsedAmbiguously(a) -> IsKeyTerm(a)))) -> (IsKeyTerm(a) and IsPhrase(b) and HasDifferentMeanings(e) and IsInDifferentPortions(f) and IsInArgument(c)),(exists b (exists a (exists d (exists c (IsFallacyOfEquivocation(d) and (IsKeyTermUsedAmbiguously(a) or IsPhraseUsedAmbiguously(b)) and IsInArgument(c))))) & (forall i (  IsKeyTermUsedAmbiguously(i) -> IsKeyTerm(i)))) -> (exists b (exists f (exists a (exists e (exists c (IsKeyTerm(a) and IsPhrase(b) and HasDifferentMeanings(e) and IsInDifferentPortions(f) and IsInArgument(c)))))))
0,faulty generalization,When you have too little or unrepresentative data to make claim.," ""Too little data is unrepresentative to make a claim.""  "," ""It is impossible to make a claim.""","IsUnrepresentative(b),  CanMakeClaim(a)","IsImpossible(c),  CanMakeClaim(a)",[],"[(' a claim', ' a claim')]",[],IsUnrepresentative(b) and ~CanMakeClaim(a),IsImpossible(c) and ~CanMakeClaim(a),(IsUnrepresentative(b) and ~CanMakeClaim(a)) -> (IsImpossible(c) and ~CanMakeClaim(a)),(exists b (exists a (IsUnrepresentative(b) and ~CanMakeClaim(a)))) -> (exists a (exists c (IsImpossible(c) and ~CanMakeClaim(a))))
0,ad populum,"The majority of people believe advertisers should spend more money on billboards, so billboards are objectively the best form of advertisement."," ""The majority of people believe advertisers should spend more money on billboards.""  "," ""Billboards are the best form of advertisement.""","Believes(b),  ShouldSpendMoreMoney(c, a)",IsBestFormOfAdvertisement(a),[],"[(' billboards', ' Billboards')]",[],"Believes(b) and ShouldSpendMoreMoney(c, a)",IsBestFormOfAdvertisement(a),"(Believes(b) and ShouldSpendMoreMoney(c, a)) -> (IsBestFormOfAdvertisement(a))","(exists b (exists a (exists c (Believes(b) and ShouldSpendMoreMoney(c, a))))) -> (exists a (IsBestFormOfAdvertisement(a)))"
0,faulty generalization,"If we ban Hummers because they are bad for the environment, eventually the government will ban all cars, so we should not ban Hummers."," ""Hummers are bad for the environment.""  "," ""The government will ban all cars.""",IsBadForEnvironment(a),"WillBan(c, d)",[],[],"[(' Hummers', ' all cars')]",IsBadForEnvironment(a),"WillBan(c, d)","(exists a (IsBadForEnvironment(a))) -> (forall d (WillBan(c, d)))","(exists a (IsBadForEnvironment(a))) -> (exists d (exists c (WillBan(c, d))))"
0,ad hominem,"My opponent raised a good point, but can we trust him? I mean he just moved to town only 5 months ago, how much could he really know?"," ""My opponent raised a good point, but he just moved to town only 5 months ago.""  "," ""My opponent cannot be trusted.""","IsOpponent(a),  RaisedGoodPoint(a,b),  JustMoved(c,d,e)","IsOpponent(a),  CannotBeTrusted(a)","[('  CannotBeTrusted(a)', '  JustMoved(c,d,e)')]","[(' My opponent', ' My opponent')]",[],"IsOpponent(a) and RaisedGoodPoint(a,b) and JustMoved(c,d,e)",IsOpponent(a) and CannotBeTrusted(a),"(IsOpponent(a) and RaisedGoodPoint(a,b) and JustMoved(c,d,e) & (forall e (forall d (forall a (forall c (  CannotBeTrusted(a) ->   JustMoved(c,d,e))))))) -> (IsOpponent(a) and CannotBeTrusted(a))","(exists b (exists d (exists a (exists e (exists c (IsOpponent(a) and RaisedGoodPoint(a,b) and JustMoved(c,d,e)))))) & (forall g (forall h (forall f (forall i (  CannotBeTrusted(f) ->   JustMoved(g,h,i))))))) -> (exists a (IsOpponent(a) and CannotBeTrusted(a)))"
0,false dilemma,"Either you can save your money to buy a new car for yourself, or you can just take an Uber around for the rest of your life."," ""You can save your money to buy a new car.""  "," ""You will take an Uber around for the rest of your life.""","CanSave(a, b),  IsNew(c),  IsBought(b, c)","WillTake(a, d),  IsAround(d, e)",[],"[(' You', ' You')]",[],"CanSave(a, b) and (IsNew(c) and IsBought(b, c))","WillTake(a, d) and IsAround(d, e)","(CanSave(a, b) and (IsNew(c) and IsBought(b, c))) -> (WillTake(a, d) and IsAround(d, e))","(exists b (exists a (exists c (CanSave(a, b) and (IsNew(c) and IsBought(b, c)))))) -> (exists d (exists a (exists e (WillTake(a, d) and IsAround(d, e)))))"
0,false causality,"Matthieu was the only player on the team who didn't grow a playoff beard, and thus he ended up getting injured."," ""Matthieu was the only player on the team who didn't grow a playoff beard.""  "," ""Matthieu ended up getting injured.""","IsOnlyPlayer(a,b),  IsOnTeam(a,c),  DidNotGrowBeard(a,d)",IsInjured(a),[],"[(' Matthieu', ' Matthieu')]",[],"IsOnlyPlayer(a,b) and IsOnTeam(a,c) and DidNotGrowBeard(a,d)",IsInjured(a),"(IsOnlyPlayer(a,b) and IsOnTeam(a,c) and DidNotGrowBeard(a,d)) -> (IsInjured(a))","(exists b (exists d (exists a (exists c (IsOnlyPlayer(a,b) and IsOnTeam(a,c) and DidNotGrowBeard(a,d)))))) -> (exists a (IsInjured(a)))"
0,intentional,"John: Members of the UbaTuba White Men's Club are upstanding citizens of the community.
Marvin: Then why are there so many of these members in jail?
John: They were never true UbaTuba White Men's Club members.
Marvin: What’s a true UbaTuba White Men's Club member?
John: Those who don't go to jail.
"," ""Members of the UbaTuba White Men's Club are upstanding citizens of the community.""  "," ""True UbaTuba White Men's Club members do not go to jail.""","IsMemberOfClub(a),  IsUpstandingCitizen(b),  IsPartOfCommunity(b, c)","IsMemberOfClub(d),  DoesNotGoToJail(d)",[],[],[],"IsMemberOfClub(a) and (IsUpstandingCitizen(b) and IsPartOfCommunity(b, c))",IsMemberOfClub(d) and DoesNotGoToJail(d),"(IsMemberOfClub(a) and (IsUpstandingCitizen(b) and IsPartOfCommunity(b, c))) -> (IsMemberOfClub(d) and DoesNotGoToJail(d))","(exists b (exists a (exists c (IsMemberOfClub(a) and (IsUpstandingCitizen(b) and IsPartOfCommunity(b, c)))))) -> (exists d (IsMemberOfClub(d) and DoesNotGoToJail(d)))"
0,faulty generalization,"""Animal experimentation reduces our respect for life. If we don't respect life, we are likely to be more and more tolerant of violent acts like war and murder. Soon our society will become a battlefield in which everyone constantly fears for their lives. It will be the end of civilization. To prevent this terrible consequence, we should make animal experimentation illegal right now."""," ""Animal experimentation reduces respect for life.""  "," ""Animal experimentation should be made illegal.""","ReducesRespectForLife(a, b)",ShouldBeMadeIllegal(a),[],"[(' Animal experimentation', ' Animal experimentation')]",[],"ReducesRespectForLife(a, b)",ShouldBeMadeIllegal(a),"(ReducesRespectForLife(a, b)) -> (ShouldBeMadeIllegal(a))","(exists b (exists a (ReducesRespectForLife(a, b)))) -> (exists a (ShouldBeMadeIllegal(a)))"
0,false causality,You know Jane Fonda's exercise videos must be worth the money. Look at the great shape she's in.," ""Jane Fonda's exercise videos must be worth the money.""  "," ""Jane Fonda is in great shape.""","IsWorth(a, b)",IsInGreatShape(c),[],[],[],"IsWorth(a, b)",IsInGreatShape(c),"(IsWorth(a, b)) -> (IsInGreatShape(c))","(exists b (exists a (IsWorth(a, b)))) -> (exists c (IsInGreatShape(c)))"
0,faulty generalization,"Asians make lousy athletes, but do well at the Math Olympiad."," ""Asians make lousy athletes.""  "," ""Asians do well at the Math Olympiad.""",IsLousyAthlete(a),"DoesWellAt(a,b)",[],"[(' Asians', ' Asians')]",[],IsLousyAthlete(a),"DoesWellAt(a,b)","(IsLousyAthlete(a)) -> (DoesWellAt(a,b))","(exists a (IsLousyAthlete(a))) -> (exists b (exists a (DoesWellAt(a,b))))"
0,false dilemma,"“Caldwell Hall is in bad shape. Either we tear it down and put up a new building, or we continue to risk students’ safety. Obviously we shouldn’t risk anyone’s safety, so we must tear the building down.”"," ""Caldwell Hall is in bad shape.""  "," ""Caldwell Hall must be torn down.""",IsInBadShape(a),IsTornDown(a),[],"[(' Caldwell Hall', ' Caldwell Hall')]",[],IsInBadShape(a),IsTornDown(a),(IsInBadShape(a)) -> (IsTornDown(a)),(exists a (IsInBadShape(a))) -> (exists a (IsTornDown(a)))
0,faulty generalization,Did you really vote for Donald as class treasurer? Didn't you hear that his uncle was imprisoned for embezzling $1.5 million?," ""Donald was voted for as class treasurer.""  "," ""Donald is not trustworthy.""","IsVotedFor(a, b)",IsNotTrustworthy(a),[],"[(' Donald', ' Donald')]",[],"IsVotedFor(a, b)",IsNotTrustworthy(a),"(IsVotedFor(a, b)) -> (IsNotTrustworthy(a))","(exists b (exists a (IsVotedFor(a, b)))) -> (exists a (IsNotTrustworthy(a)))"
0,fallacy of logic,"If the ozone layer is destroyed, many people will get cancer and suffer from other illnesses.  The ozone layer is being protected, not destroyed.  So, many people will be spared the pain of cancer and other illnesses."," ""The ozone layer is being protected.""  "," ""Many people will be spared the pain of cancer and other illnesses.""",IsProtected(a),"IsSpared(b, c),  IsSpared(b, d)","[('IsProtected(a)', 'IsSpared(b, c)'), ('IsProtected(a)', '  IsSpared(b, d)'), ('  IsSpared(b, d)', 'IsProtected(a)')]",[],[],IsProtected(a),"IsSpared(b, c) and IsSpared(b, d)","(IsProtected(a) & (forall b (forall a (forall c (IsProtected(a) -> IsSpared(b, c))))) & (forall b (forall d (forall a (IsProtected(a) ->   IsSpared(b, d))))) & (forall b (forall a (forall d (  IsSpared(b, d) -> IsProtected(a)))))) -> (IsSpared(b, c) and IsSpared(b, d))","(exists a (IsProtected(a)) & (forall g (forall f (forall e (IsProtected(e) -> IsSpared(f,g))))) & (forall h (forall i (forall j (IsProtected(h) ->   IsSpared(i,j))))) & (forall m (forall k (forall l (  IsSpared(k,l) -> IsProtected(m)))))) -> (exists b (exists d (exists c (IsSpared(b, c) and IsSpared(b, d)))))"
0,faulty generalization,"Broccoli has significantly less fat than the leading candy bar! Plus, it's nowhere near as hot as Hot Cheetos!"," ""Broccoli has significantly less fat than the leading candy bar.""  "," ""Broccoli is healthier than the leading candy bar.""","HasLessFatThan(a, b),  HasFat(c)","IsHealthierThan(a, b)",[],"[(' Broccoli', ' Broccoli'), (' leading candy bar', ' the leading candy bar')]",[],"HasLessFatThan(a, b) and HasFat(c)","IsHealthierThan(a, b)","(HasLessFatThan(a, b) and HasFat(c)) -> (IsHealthierThan(a, b))","(exists b (exists a (exists c (HasLessFatThan(a, b) and HasFat(c))))) -> (exists b (exists a (IsHealthierThan(a, b))))"
0,fallacy of relevance,You're complaining because you have to walk to school? I used to have to give my parents my entire paycheck.," ""The speaker had to give their parents their entire paycheck.""  "," ""Walking to school is not a significant complaint.""","HasToGive(a, b, c),  IsEntirePaycheck(c)","IsWalkingToSchool(d),  IsSignificantComplaint(e)",[],[],[],"HasToGive(a, b, c) and IsEntirePaycheck(c)",~IsWalkingToSchool(d) or ~IsSignificantComplaint(e),"(HasToGive(a, b, c) and IsEntirePaycheck(c)) -> (~IsWalkingToSchool(d) or ~IsSignificantComplaint(e))","(exists b (exists a (exists c (HasToGive(a, b, c) and IsEntirePaycheck(c))))) -> (exists d (exists e (~IsWalkingToSchool(d) or ~IsSignificantComplaint(e))))"
0,fallacy of extension,Robot 2 (Blue) has been refuting all of Robot 1's (Orange) arguments. Robot 1 launches the above counterargument. What is this fallacy?," ""Robot 2 has been refuting all of Robot 1's arguments.""  "," ""Robot 1's counterargument is a fallacy.""","IsRefuting(a, b)","IsCounterargument(c, d),  IsFallacy(d, e)",[],[],[],"IsRefuting(a, b)","IsCounterargument(c, d) and IsFallacy(d, e)","(IsRefuting(a, b)) -> (IsCounterargument(c, d) and IsFallacy(d, e))","(exists b (exists a (IsRefuting(a, b)))) -> (exists e (exists d (exists c (IsCounterargument(c, d) and IsFallacy(d, e)))))"
0,ad hominem,Personally attacking someone to shift attention away from your views is," ""Personally attacking someone shifts attention away from views.""  "," ""People shift attention away from their views.""  ","IsPersonallyAttacked(a),  ShiftsAttention(a, b)","IsPeople(c),  ShiftsAttention(c, d)",[],[],"[(' Someone', ' People')]","IsPersonallyAttacked(a) and ShiftsAttention(a, b)","IsPeople(c) and ShiftsAttention(c, d)","(exists a (IsPersonallyAttacked(a) and ShiftsAttention(a, b))) -> (forall c (IsPeople(c) and ShiftsAttention(c, d)))","(exists b (exists a (IsPersonallyAttacked(a) and ShiftsAttention(a, b)))) -> (exists d (exists c (IsPeople(c) and ShiftsAttention(c, d))))"
0,ad hominem,"""She's such a mean teacher and person – that's why she wouldn't raise my grade ONE percent!"""," ""She is a mean teacher and person.""  "," ""She wouldn't raise the grade by one percent.""","IsMean(b),  IsPerson(c)","IsRaisedBy(a, d, e)",[],"[(' She', ' She')]",[],IsMean(b) and IsPerson(c),"~IsRaisedBy(a, d, e)","(IsMean(b) and IsPerson(c)) -> (~IsRaisedBy(a, d, e))","(exists b (exists c (IsMean(b) and IsPerson(c)))) -> (exists d (exists a (exists e (~IsRaisedBy(a, d, e)))))"
0,appeal to emotion,"If you don't buy the black pencils, you will get made fun of. You will not be chosen for group projects."," ""If someone doesn't buy black pencils, that person will get made fun of.""  "," ""Someone will not be chosen for group projects.""","Buys(b,a),  GetsMadeFunOf(c)","IsNotChosen(a, d)",[],"[(' someone', ' Someone')]",[],"~Buys(b,a) and GetsMadeFunOf(c)","~IsNotChosen(a, d)","(~Buys(b,a) and GetsMadeFunOf(c)) -> (~IsNotChosen(a, d))","(exists b (exists a (exists c (~Buys(b,a) and GetsMadeFunOf(c))))) -> (exists d (exists a (~IsNotChosen(a, d))))"
0,faulty generalization,"Jeff's mom is concerned when she finds out that he skipped class one day. She tells him that she is concerned that since he skipped one class, he will start skipping more frequently. Then he will drop out altogether, never graduate or get into college, and end up unemployed and living at home for the rest of his life. What type of fallacy has Jeff's mom committed?"," ""Jeff skipped class one day.""  "," ""Jeff will end up unemployed and living at home for the rest of his life.""","IsSkipped(a, b),  IsOnOneDay(c)","IsUnemployed(a),  IsLivingAtHome(a),  IsForRestOfLife(a, f)",[],"[(' Jeff', ' Jeff')]","[(' Jeff', ' his life')]","IsSkipped(a, b) and IsOnOneDay(c)","IsUnemployed(a) and IsLivingAtHome(a) and IsForRestOfLife(a, f)","(exists a (IsSkipped(a, b) and IsOnOneDay(c))) -> (forall f (IsUnemployed(a) and IsLivingAtHome(a) and IsForRestOfLife(a, f)))","(exists b (exists a (exists c (IsSkipped(a, b) and IsOnOneDay(c))))) -> (exists f (exists a (IsUnemployed(a) and IsLivingAtHome(a) and IsForRestOfLife(a, f))))"
0,ad hominem,"How can you tell me I should exercise to lose weight? All you do is sit behind a desk all day. I've never seen you do a lick of exercise.

Identify the logical fallacy commited in this argument."," ""You sit behind a desk all day and never exercise.""  "," ""You should not tell me to exercise to lose weight.""  ","SitsBehind(b, a),  NeverExercises(a)","ShouldNotTell(a, c),  ShouldExercise(d),  ShouldLoseWeight(e)",[],"[(' You', ' You')]",[],"SitsBehind(b, a) and NeverExercises(a)","ShouldNotTell(a, c) and ~(ShouldExercise(d) and ShouldLoseWeight(e))","(SitsBehind(b, a) and NeverExercises(a)) -> (ShouldNotTell(a, c) and ~(ShouldExercise(d) and ShouldLoseWeight(e)))","(exists b (exists a (SitsBehind(b, a) and NeverExercises(a)))) -> (exists e (exists d (exists a (exists c (ShouldNotTell(a, c) and ~(ShouldExercise(d) and ShouldLoseWeight(e)))))))"
0,fallacy of logic,"""We both like music, so we should get married."""," ""We both like music.""  "," ""We should get married.""","Likes(a, b)",WantsToGetMarried(a),[],"[(' We', ' We')]",[],"Likes(a, b)",WantsToGetMarried(a),"(Likes(a, b)) -> (WantsToGetMarried(a))","(exists b (exists a (Likes(a, b)))) -> (exists a (WantsToGetMarried(a)))"
0,ad hominem,"Brandon: We should have tastier lunches!
Jaylen: Don't listen to him! He's a terrible person! I saw him trip another student and steal his lunch money!"," ""Brandon is a terrible person who tripped another student and stole lunch money.""  "," ""Brandon should not be listened to.""","IsTerrible(a),  Tripped(a, c),  StoleLunchMoney(a, d)",ShouldNotBeListenedTo(a),"[('IsTerrible(a)', 'ShouldNotBeListenedTo(a)'), ('  StoleLunchMoney(a, d)', 'ShouldNotBeListenedTo(a)')]","[(' Brandon', ' Brandon')]",[],"IsTerrible(a) and Tripped(a, c) and StoleLunchMoney(a, d)",ShouldNotBeListenedTo(a),"(IsTerrible(a) and Tripped(a, c) and StoleLunchMoney(a, d) & (forall a (IsTerrible(a) -> ShouldNotBeListenedTo(a))) & (forall d (forall a (  StoleLunchMoney(a, d) -> ShouldNotBeListenedTo(a))))) -> (ShouldNotBeListenedTo(a))","(exists d (exists a (exists c (IsTerrible(a) and Tripped(a, c) and StoleLunchMoney(a, d)))) & (forall e (IsTerrible(e) -> ShouldNotBeListenedTo(e))) & (forall g (forall f (  StoleLunchMoney(f,g) -> ShouldNotBeListenedTo(f))))) -> (exists a (ShouldNotBeListenedTo(a)))"
0,ad hominem,Of course Marx' theories about the ideal society are bunk. The guy spent all his time in the library.," ""Marx's theories about the ideal society are bunk.""  "," ""Marx did not understand society.""","IsAbout(a, b),  IsBunk(a)","IsUnderstoodBy(c, d),  DoesNotUnderstand(c, d)",[],[],"[("" Marx's theories"", ' Marx'), (' the ideal society', ' society')]","IsAbout(a, b) and IsBunk(a)","DoesNotUnderstand(c, d)","(exists b (exists a (IsAbout(a, b) and IsBunk(a)))) -> (forall d (forall c (DoesNotUnderstand(c, d))))","(exists b (exists a (IsAbout(a, b) and IsBunk(a)))) -> (exists d (exists c (DoesNotUnderstand(c, d))))"
0,fallacy of relevance,"I'm tailgating her, because she cut me off!"," ""The driver cut off the speaker.""  "," ""The speaker is tailgating the driver.""","CutOff(a, b)","IsTailgating(b, a)",[],"[(' The driver', ' the driver'), (' the speaker', ' The speaker')]",[],"CutOff(a, b)","IsTailgating(b, a)","(CutOff(a, b)) -> (IsTailgating(b, a))","(exists b (exists a (CutOff(a, b)))) -> (exists b (exists a (IsTailgating(b, a))))"
0,faulty generalization,President Petutti ordered a military strike that killed many civilians. He is no different than any other mass murder and he belongs in prison!," ""President Petutti ordered a military strike that killed many civilians.""  "," ""President Petutti belongs in prison.""","Ordered(a, b),  Killed(b, c)",IsInPrison(a),[],"[(' President Petutti', ' President Petutti')]",[],"Ordered(a, b) and Killed(b, c)",IsInPrison(a),"(Ordered(a, b) and Killed(b, c)) -> (IsInPrison(a))","(exists b (exists a (exists c (Ordered(a, b) and Killed(b, c))))) -> (exists a (IsInPrison(a)))"
1,,"Coach talks with football player, other players and crowd in background. Thus, a football coach talks with his player in front of the team and the crowd."," ""A football coach talks with his player in front of the team and the crowd.""  "," ""A football coach interacts with the team.""","IsFootballCoach(a),  TalksWith(a, c),  IsInFrontOf(a, b),  IsInFrontOf(a, d)","IsFootballCoach(a),  InteractsWith(a, b)","[('  InteractsWith(a, b)', 'IsFootballCoach(a)'), ('IsFootballCoach(a)', '  TalksWith(a, c)'), ('  InteractsWith(a, b)', '  TalksWith(a, c)')]","[(' A football coach', ' A football coach'), (' the team', ' the team')]","[(' his player', ' the team')]","IsFootballCoach(a) and TalksWith(a, c) and IsInFrontOf(a, b) and IsInFrontOf(a, d)","IsFootballCoach(a) and InteractsWith(a, b)","(exists c (IsFootballCoach(a) and TalksWith(a, c) and IsInFrontOf(a, b) and IsInFrontOf(a, d)) & (forall b (forall a (  InteractsWith(a, b) -> IsFootballCoach(a)))) & (forall a (forall c (IsFootballCoach(a) ->   TalksWith(a, c)))) & (forall b (forall a (forall c (  InteractsWith(a, b) ->   TalksWith(a, c)))))) -> (forall b (IsFootballCoach(a) and InteractsWith(a, b)))","(exists b (exists d (exists a (exists c (IsFootballCoach(a) and TalksWith(a, c) and IsInFrontOf(a, b) and IsInFrontOf(a, d))))) & (forall f (forall e (  InteractsWith(e,f) -> IsFootballCoach(e)))) & (forall g (forall h (IsFootballCoach(g) ->   TalksWith(g,h)))) & (forall k (forall i (forall j (  InteractsWith(i,j) ->   TalksWith(i,k)))))) -> (exists b (exists a (IsFootballCoach(a) and InteractsWith(a, b))))"
1,,"Two men watching one man make a golf putt on the set of Sports Center. As a consequence, people watching sports."," ""Two men are watching one man make a golf putt on the set of Sports Center.""  "," ""People are watching sports.""","IsWatching(a,b),  IsMaking(b,c),  IsOnSet(b,d)","IsWatching(e, f)",[],[],"[(' Two men', ' People'), (' one man', ' People'), (' golf putt', ' sports'), (' set of Sports Center', ' sports')]","IsWatching(a,b) and IsMaking(b,c) and IsOnSet(b,d)","IsWatching(e, f)","(exists d (exists c (exists b (exists a (IsWatching(a,b) and IsMaking(b,c) and IsOnSet(b,d)))))) -> (forall f (forall e (IsWatching(e, f))))","(exists b (exists d (exists a (exists c (IsWatching(a,b) and IsMaking(b,c) and IsOnSet(b,d)))))) -> (exists f (exists e (IsWatching(e, f))))"
1,,"Six women wait to use a port-o-john in a field. Thus, women are outside."," ""Six women wait to use a port-o-john in a field.""  "," ""Women are outside.""","IsWaiting(a),  IsInField(b),  IsUsedFor(b)",IsOutside(d),"[('IsWaiting(a)', 'IsOutside(d)')]",[],"[(' Six women', ' Women')]",IsWaiting(a) and IsInField(b) and IsUsedFor(b),IsOutside(d),(exists a (IsWaiting(a) and IsInField(b) and IsUsedFor(b)) & (forall d (forall a (IsWaiting(a) -> IsOutside(d))))) -> (forall d (IsOutside(d))),(exists b (exists a (IsWaiting(a) and IsInField(b) and IsUsedFor(b))) & (forall f (forall e (IsWaiting(e) -> IsOutside(f))))) -> (exists d (IsOutside(d)))
1,,Women wearing a black top and glasses speaking into a blue tipped microphone with another woman beside her writing. It follows that one woman speaking into a microphone while a second woman writes beside her.," ""One woman is speaking into a blue tipped microphone while another woman is writing.""  "," ""Women are engaging in a discussion.""","IsSpeaking(a,b),  IsWriting(c)","IsEngaging(d, e)","[('IsEngaging(d, e)', 'IsSpeaking(a,b)')]",[],"[(' One woman', ' Women'), (' another woman', ' Women')]","IsSpeaking(a,b) and IsWriting(c)","IsEngaging(d, e)","(exists c (exists a (IsSpeaking(a,b) and IsWriting(c))) & (forall b (forall a (forall d (forall e (IsEngaging(d, e) -> IsSpeaking(a,b))))))) -> (forall d (IsEngaging(d, e)))","(exists b (exists a (exists c (IsSpeaking(a,b) and IsWriting(c)))) & (forall g (forall h (forall f (forall i (IsEngaging(f,g) -> IsSpeaking(h,i))))))) -> (exists d (exists e (IsEngaging(d, e))))"
1,,"One tan girl with a wool hat is running and leaning over an object, while another person in a wool hat is sitting on the ground. Therefore, a tan girl runs leans over an object."," ""One tan girl with a wool hat runs and leans over an object.""  "," ""A tan girl runs and leans over an object.""","IsTan(a),  IsWearingWoolHat(a),  IsLeaningOver(a, b),  IsObject(b)","IsTan(a),  IsRunning(a),  IsLeaningOver(a, b),  IsObject(b)","[('IsTan(a)', '  IsRunning(a)'), ('  IsLeaningOver(a, b)', 'IsTan(a)'), ('  IsLeaningOver(a, b)', '  IsRunning(a)')]","[(' One tan girl', ' A tan girl'), (' an object', ' an object')]","[(' a wool hat', ' an object')]","IsTan(a) and IsWearingWoolHat(a) and IsLeaningOver(a, b) and IsObject(b)","IsTan(a) and IsRunning(a) and IsLeaningOver(a, b) and IsObject(b)","(IsTan(a) and IsWearingWoolHat(a) and IsLeaningOver(a, b) and IsObject(b) & (forall a (IsTan(a) ->   IsRunning(a))) & (forall b (forall a (  IsLeaningOver(a, b) -> IsTan(a)))) & (forall b (forall a (  IsLeaningOver(a, b) ->   IsRunning(a))))) -> (IsTan(a) and IsRunning(a) and IsLeaningOver(a, b) and IsObject(b))","(exists b (exists a (IsTan(a) and IsWearingWoolHat(a) and IsLeaningOver(a, b) and IsObject(b))) & (forall e (IsTan(e) ->   IsRunning(e))) & (forall g (forall f (  IsLeaningOver(f,g) -> IsTan(f)))) & (forall h (forall i (  IsLeaningOver(h,i) ->   IsRunning(h))))) -> (exists b (exists a (IsTan(a) and IsRunning(a) and IsLeaningOver(a, b) and IsObject(b))))"
1,,A scientist studies a slide in order to work on her new creation. It follows that a scientist studies a slide that is related to her invention.," ""A scientist studies a slide to work on a new creation.""  "," ""A scientist studies a slide that is related to the scientist's invention.""","Studies(a, b),  WorksOn(a, c)","Studies(a, b),  IsRelated(b, d)",[],"[(' A scientist', ' A scientist'), (' a slide', ' a slide')]","[(' a new creation', "" the scientist's invention"")]","Studies(a, b) and WorksOn(a, c)","Studies(a, b) and IsRelated(b, d)","(exists c (Studies(a, b) and WorksOn(a, c))) -> (forall d (Studies(a, b) and IsRelated(b, d)))","(exists b (exists a (exists c (Studies(a, b) and WorksOn(a, c))))) -> (exists b (exists d (exists a (Studies(a, b) and IsRelated(b, d)))))"
1,,"A red dog jumps and catches a tennis ball in its mouth. Consequently, a dog catching a ball."," ""A red dog jumps and catches a tennis ball in its mouth.""  "," ""A dog catches a ball.""","IsRed(a),  Jumps(a),  Catches(a, b),  IsInMouth(a, c)","IsDog(d),  Catches(d, e)","[('  IsInMouth(a, c)', '  Catches(d, e)')]",[],"[(' A red dog', ' A dog'), (' a tennis ball', ' a ball')]","IsRed(a) and Jumps(a) and Catches(a, b) and IsInMouth(b, c)","IsDog(d) and Catches(d, e)","(exists b (exists a (IsRed(a) and Jumps(a) and Catches(a, b) and IsInMouth(b, c))) & (forall e (forall d (forall a (forall c (  IsInMouth(a, c) ->   Catches(d, e))))))) -> (forall e (forall d (IsDog(d) and Catches(d, e))))","(exists b (exists a (exists c (IsRed(a) and Jumps(a) and Catches(a, b) and IsInMouth(b, c)))) & (forall g (forall h (forall f (forall i (  IsInMouth(f,g) ->   Catches(h,i))))))) -> (exists d (exists e (IsDog(d) and Catches(d, e))))"
1,,"A group of dogs stand in the snow. Thus, there are animals outdoors."," ""A group of dogs stands in the snow.""  "," ""There are animals outdoors.""","IsInTheSnow(a),  IsStanding(a)",IsOutdoors(c),"[('IsInTheSnow(a)', 'IsOutdoors(c)'), ('  IsStanding(a)', 'IsOutdoors(c)')]",[],"[(' A group of dogs', ' animals')]",IsInTheSnow(a) and IsStanding(a),IsOutdoors(c),(exists a (IsInTheSnow(a) and IsStanding(a)) & (forall a (forall c (IsInTheSnow(a) -> IsOutdoors(c)))) & (forall a (forall c (  IsStanding(a) -> IsOutdoors(c))))) -> (forall c (IsOutdoors(c))),(exists a (IsInTheSnow(a) and IsStanding(a)) & (forall f (forall e (IsInTheSnow(e) -> IsOutdoors(f)))) & (forall g (forall h (  IsStanding(g) -> IsOutdoors(h))))) -> (exists c (IsOutdoors(c)))
1,,This person looks to be snowboarding on a very small pile of snow on a sunny cold day. This implies that young snowboarder sizing up their next jump.," ""This person looks to be snowboarding on a very small pile of snow on a sunny cold day.""  "," ""The young snowboarder is sizing up the next jump.""","IsSnowboarding(a),  IsOnPileOfSnow(a,b),  IsSunny(c),  IsCold(c)","IsYoung(d),  IsSizingUp(d, e)",[],[],[],"IsSnowboarding(a) and IsOnPileOfSnow(a,b) and IsSunny(c) and IsCold(c)","IsYoung(d) and IsSizingUp(d, e)","(IsSnowboarding(a) and IsOnPileOfSnow(a,b) and IsSunny(c) and IsCold(c)) -> (IsYoung(d) and IsSizingUp(d, e))","(exists b (exists a (exists c (IsSnowboarding(a) and IsOnPileOfSnow(a,b) and IsSunny(c) and IsCold(c))))) -> (exists d (exists e (IsYoung(d) and IsSizingUp(d, e))))"
1,,"A large number of people are watching men dressed in kilts, one of whom has thrown a long pole. As a consequence, people watch men in kilts."," ""A large number of people are watching men dressed in kilts.""  "," ""People watch men in kilts.""","IsLargeNumber(c),  IsWatching(c, a),  IsDressedIn(a, b)","IsWatching(d, a),  IsInKilts(a, b)","[('IsLargeNumber(c)', 'IsWatching(d, a)'), ('  IsDressedIn(a, b)', 'IsWatching(d, a)')]","[(' men', ' men'), (' kilts.', ' kilts')]","[(' A large number of people', ' People'), (' A large number of people', ' men'), (' men', ' People')]","IsLargeNumber(c) and IsWatching(c, a) and IsDressedIn(a, b)","IsWatching(d, a) and IsInKilts(a, b)","(exists a (exists c (IsLargeNumber(c) and IsWatching(c, a) and IsDressedIn(a, b))) & (forall a (forall d (forall c (IsLargeNumber(c) -> IsWatching(d, a))))) & (forall b (forall d (forall a (  IsDressedIn(a, b) -> IsWatching(d, a)))))) -> (forall a (forall d (IsWatching(d, a) and IsInKilts(a, b))))","(exists b (exists a (exists c (IsLargeNumber(c) and IsWatching(c, a) and IsDressedIn(a, b)))) & (forall g (forall h (forall f (IsLargeNumber(f) -> IsWatching(g,h))))) & (forall k (forall i (forall l (forall j (  IsDressedIn(i,j) -> IsWatching(k,l))))))) -> (exists b (exists a (exists d (IsWatching(d, a) and IsInKilts(a, b)))))"
1,,"A boy is riding down the road between two cows. Consequently, a boy, a road and two cows."," ""A boy is riding down the road between two cows.""  "," ""A boy, a road, and two cows exist.""","IsRiding(a, b),  IsBetween(a, c)","Exists(a),  Exists(b),  Exists(c)",[],"[(' A boy', ' A boy'), (' the road', ' a road'), (' two cows', ' two cows')]",[],"IsRiding(a, b) and IsBetween(a, c)",Exists(a) and Exists(b) and Exists(c),"(IsRiding(a, b) and IsBetween(a, c)) -> (Exists(a) and Exists(b) and Exists(c))","(exists b (exists a (exists c (IsRiding(a, b) and IsBetween(a, c))))) -> (exists b (exists a (exists c (Exists(a) and Exists(b) and Exists(c)))))"
1,,A bald man is getting out of a small blue car. It follows that the man is bald.," ""A bald man is getting out of a small blue car.""  "," ""The man is bald.""","IsBald(a),  IsGettingOutOf(a, b),  IsSmall(b),  IsBlue(b)",IsBald(c),"[('  IsGettingOutOf(a, b)', 'IsBald(c)')]",[],"[(' A bald man', ' The man')]","IsBald(a) and IsGettingOutOf(a, b) and IsSmall(b) and IsBlue(b)",IsBald(c),"(exists a (IsBald(a) and IsGettingOutOf(a, b) and IsSmall(b) and IsBlue(b)) & (forall b (forall a (forall c (  IsGettingOutOf(a, b) -> IsBald(c)))))) -> (forall c (IsBald(c)))","(exists b (exists a (IsBald(a) and IsGettingOutOf(a, b) and IsSmall(b) and IsBlue(b))) & (forall f (forall d (forall e (  IsGettingOutOf(d,e) -> IsBald(f)))))) -> (exists c (IsBald(c)))"
1,,"Young boys in green and blue jerseys kick around a soccer ball while other soccer games take place in the background. Thus, young boys kicking around a soccer ball."," ""Young boys in green and blue jerseys kick around a soccer ball.""  ",,"IsYoung(a),  IsInGreenJersey(a),  IsInBlueJersey(a),  KicksSoccerBall(a, d)","Properties: IsYoung(a),  IsInGreenJersey(a),  IsInBlueJersey(a),  KicksSoccerBall(a, d)","[('IsYoung(a)', 'Properties: IsYoung(a)'), ('Properties: IsYoung(a)', 'IsYoung(a)')]",[],[],"IsYoung(a) and IsInGreenJersey(a) and IsInBlueJersey(a) and KicksSoccerBall(a, d)","IsYoung(a) and (IsInGreenJersey(a) or IsInBlueJersey(a)) and KicksSoccerBall(a, d)","(IsYoung(a) and IsInGreenJersey(a) and IsInBlueJersey(a) and KicksSoccerBall(a, d) & (forall a (IsYoung(a) -> Properties: IsYoung(a))) & (forall a (Properties: IsYoung(a) -> IsYoung(a)))) -> (IsYoung(a) and (IsInGreenJersey(a) or IsInBlueJersey(a)) and KicksSoccerBall(a, d))","(exists d (exists a (IsYoung(a) and IsInGreenJersey(a) and IsInBlueJersey(a) and KicksSoccerBall(a, d))) & (forall f (IsYoung(f) -> Properties: IsYoung(f))) & (forall g (Properties: IsYoung(g) -> IsYoung(g)))) -> (exists d (exists a (IsYoung(a) and (IsInGreenJersey(a) or IsInBlueJersey(a)) and KicksSoccerBall(a, d))))"
1,,"A girl playing a violin along with a group of people. Consequently, a girl is playing an instrument."," ""A girl is playing a violin.""  "," ""A girl is playing an instrument.""","IsPlaying(a),  IsPlayingViolin(b)","IsPlaying(a),  IsInstrument(c)","[('  IsPlayingViolin(b)', 'IsPlaying(a)')]","[(' A girl', ' A girl')]","[(' a violin', ' an instrument')]",IsPlaying(a) and IsPlayingViolin(b),IsPlaying(a) and IsInstrument(c),(exists b (IsPlaying(a) and IsPlayingViolin(b)) & (forall b (forall a (  IsPlayingViolin(b) -> IsPlaying(a))))) -> (forall c (IsPlaying(a) and IsInstrument(c))),(exists b (exists a (IsPlaying(a) and IsPlayingViolin(b))) & (forall d (forall e (  IsPlayingViolin(d) -> IsPlaying(e))))) -> (exists a (exists c (IsPlaying(a) and IsInstrument(c))))
1,,Two small boys in blue soccer uniforms use a wooden set of steps to wash their hands in an adult-sized bathroom. It follows that two boys washing their hands.," ""Two small boys in blue soccer uniforms wash their hands in an adult-sized bathroom.""  "," ""Two boys are washing their hands.""","IsSmall(a),  IsInBlueSoccerUniforms(a),  WashesHands(a,b),  IsAdultSized(d)","IsWashingHands(a, b)","[('IsSmall(a)', 'IsWashingHands(a, b)'), ('  IsInBlueSoccerUniforms(a)', 'IsWashingHands(a, b)'), ('  WashesHands(a,b)', 'IsWashingHands(a, b)'), ('IsWashingHands(a, b)', '  WashesHands(a,b)')]","[(' Two small boys', ' Two boys'), (' their hands', ' their hands')]",[],"IsSmall(a) and IsInBlueSoccerUniforms(a) and WashesHands(a,b) and IsAdultSized(d)","IsWashingHands(a, b)","(IsSmall(a) and IsInBlueSoccerUniforms(a) and WashesHands(a,b) and IsAdultSized(d) & (forall b (forall a (IsSmall(a) -> IsWashingHands(a, b)))) & (forall b (forall a (  IsInBlueSoccerUniforms(a) -> IsWashingHands(a, b)))) & (forall b (forall a (  WashesHands(a,b) -> IsWashingHands(a, b)))) & (forall b (forall a (IsWashingHands(a, b) ->   WashesHands(a,b))))) -> (IsWashingHands(a, b))","(exists b (exists d (exists a (IsSmall(a) and IsInBlueSoccerUniforms(a) and WashesHands(a,b) and IsAdultSized(d)))) & (forall g (forall f (IsSmall(f) -> IsWashingHands(f,g)))) & (forall h (forall i (  IsInBlueSoccerUniforms(h) -> IsWashingHands(h,i)))) & (forall k (forall l (forall j (  WashesHands(j,k) -> IsWashingHands(j,l))))) & (forall m (forall n (forall o (IsWashingHands(m,n) ->   WashesHands(m,o)))))) -> (exists b (exists a (IsWashingHands(a, b))))"
1,,A soccer player in white kicks a ball as another soccer player lunges towards the ball and a third soccer player in red follows close by. This implies that there are three soccer players.," ""A soccer player in white kicks a ball. Another soccer player lunges towards the ball. A third soccer player in red follows close by.""  "," ""There are three soccer players.""","IsInWhite(a),  Kicks(a, b),  IsLunging(c, d),  IsInRed(e),  FollowsClose(e, d)",IsSoccerPlayer(f),[],[],[],"IsInWhite(a) and Kicks(a, b) and IsLunging(c, d) and IsInRed(e) and FollowsClose(e, d)",IsSoccerPlayer(f),"(IsInWhite(a) and Kicks(a, b) and IsLunging(c, d) and IsInRed(e) and FollowsClose(e, d)) -> (IsSoccerPlayer(f))","(exists b (exists d (exists a (exists e (exists c (IsInWhite(a) and Kicks(a, b) and IsLunging(c, d) and IsInRed(e) and FollowsClose(e, d))))))) -> (exists f (IsSoccerPlayer(f)))"
1,,"Children playing a video game together. Thus, the kids are indoors playing a video game."," ""Children are playing a video game together.""  "," ""The kids are indoors playing a video game.""","IsPlaying(a, b)","IsIndoors(a),  IsPlaying(a, b)",[],"[(' Children', ' The kids'), (' a video game', ' a video game')]",[],"IsPlaying(a, b)","IsIndoors(a) and IsPlaying(a, b)","(IsPlaying(a, b)) -> (IsIndoors(a) and IsPlaying(a, b))","(exists b (exists a (IsPlaying(a, b)))) -> (exists b (exists a (IsIndoors(a) and IsPlaying(a, b))))"
1,,Two people in coats kiss on the side of a road. This implies that people show their appreciation for another.," ""Two people in coats kiss on the side of a road.""  "," ""People show their appreciation for another.""","IsInCoats(a),  Kisses(a),  IsAtSideOfRoad(a, c)","ShowsAppreciation(d, e),  IsFor(d, f)",[],[],"[(' Two people', ' People')]","IsInCoats(a) and Kisses(a) and IsAtSideOfRoad(a, c)","ShowsAppreciation(d, e) and IsFor(d, f)","(exists a (IsInCoats(a) and Kisses(a) and IsAtSideOfRoad(a, c))) -> (forall d (ShowsAppreciation(d, e) and IsFor(d, f)))","(exists a (exists c (IsInCoats(a) and Kisses(a) and IsAtSideOfRoad(a, c)))) -> (exists f (exists d (exists e (ShowsAppreciation(d, e) and IsFor(d, f)))))"
1,,Woman reading a book with a grocery tote. It follows that a woman is reading.," ""A woman is reading a book.""  "," ""A woman is reading.""",IsReading(a),IsReading(a),[],"[(' A woman', ' A woman')]",[],"IsReading(a) and HasBook(a,b)",IsReading(a),"(IsReading(a) and HasBook(a,b)) -> (IsReading(a))","(exists b (exists a (IsReading(a) and HasBook(a,b)))) -> (exists a (IsReading(a)))"
1,,"A man wearing a brown hoodie is shopping for snacks. As a consequence, the man is wearing brown."," ""A man is wearing a brown hoodie.""  "," ""The man is wearing brown.""","IsWearing(b, a)",IsWearingBrown(a),[],"[(' A man', ' The man')]",[],"IsWearing(b, a)",IsWearingBrown(a),"(IsWearing(b, a)) -> (IsWearingBrown(a))","(exists b (exists a (IsWearing(b, a)))) -> (exists a (IsWearingBrown(a)))"
1,,"A young man in a blue T-shirt and sweatpants stands over a stove and looks at the camera while another young man stands behind him. As a consequence, a man is in front of a camera."," ""A young man in a blue T-shirt and sweatpants stands over a stove.""  "," ""A man is in front of a camera.""  ","IsYoung(a),  IsInBlueTShirt(a),  IsInSweatpants(a),  StandsOver(a, d)","IsMan(e),  IsInFrontOf(e, f)",[],[],"[(' A young man', ' A man')]","IsYoung(a) and IsInBlueTShirt(a) and IsInSweatpants(a) and StandsOver(a, d)","IsMan(e) and IsInFrontOf(e, f)","(exists a (IsYoung(a) and IsInBlueTShirt(a) and IsInSweatpants(a) and StandsOver(a, d))) -> (forall e (IsMan(e) and IsInFrontOf(e, f)))","(exists d (exists a (IsYoung(a) and IsInBlueTShirt(a) and IsInSweatpants(a) and StandsOver(a, d)))) -> (exists f (exists e (IsMan(e) and IsInFrontOf(e, f))))"
1,,"This church choir sings to the masses as they sing joyous songs from the book at a church. Therefore, the church is filled with song."," ""The church choir sings joyous songs from the book at a church.""  "," ""The church is filled with song.""","IsInChurch(a),  Sings(b),  IsJoyous(c),  IsFromBook(c,d)","IsFilled(a),  IsSong(e)",[],"[(' a church', ' The church')]","[(' The church choir', ' The church'), (' joyous songs', ' song')]","IsInChurch(a) and Sings(b) and IsJoyous(c) and IsFromBook(c,d)",IsFilled(a) and IsSong(e),"(exists c (exists b (IsInChurch(a) and Sings(b) and IsJoyous(c) and IsFromBook(c,d)))) -> (forall e (forall a (IsFilled(a) and IsSong(e))))","(exists b (exists d (exists a (exists c (IsInChurch(a) and Sings(b) and IsJoyous(c) and IsFromBook(c,d)))))) -> (exists a (exists e (IsFilled(a) and IsSong(e))))"
1,,"A man and a woman are standing at the side of an inflatable climbing structure. As a consequence, a man and a woman are standing."," ""A man and a woman are standing at the side of an inflatable climbing structure.""  "," ""A man and a woman are standing.""","IsStanding(a),  IsStanding(b)","IsStanding(a),  IsStanding(b)",[],"[(' A man', ' A man'), (' a woman', ' a woman')]",[],"IsStanding(a) and IsStanding(b) and IsAtSide(a,c) and IsAtSide(b,c)",IsStanding(a) and IsStanding(b),"(IsStanding(a) and IsStanding(b) and IsAtSide(a,c) and IsAtSide(b,c)) -> (IsStanding(a) and IsStanding(b))","(exists b (exists a (exists c (IsStanding(a) and IsStanding(b) and IsAtSide(a,c) and IsAtSide(b,c))))) -> (exists b (exists a (IsStanding(a) and IsStanding(b))))"
1,,An asian teenager wearing a white shirt with black stripes is sitting on the steps with his face resting on his hand. This implies that the teenager is seated.," ""An Asian teenager is seated on the steps.""  "," ""The teenager is sitting on the steps.""","IsAsian(b),  IsTeenager(b),  IsSeatedOn(b, a)","IsTeenager(c),  IsSittingOn(c, a)","[('  IsTeenager(b)', '  IsSittingOn(c, a)'), ('IsTeenager(c)', '  IsSeatedOn(b, a)'), ('  IsSeatedOn(b, a)', '  IsSittingOn(c, a)'), ('  IsSittingOn(c, a)', '  IsSeatedOn(b, a)')]","[(' the steps', ' the steps')]","[(' An Asian teenager', ' The teenager')]","IsAsian(b) and IsTeenager(b) and IsSeatedOn(b, a)","IsTeenager(c) and IsSittingOn(c, a)","(exists b (IsAsian(b) and IsTeenager(b) and IsSeatedOn(b, a)) & (forall b (forall a (forall c (  IsTeenager(b) ->   IsSittingOn(c, a))))) & (forall b (forall a (forall c (IsTeenager(c) ->   IsSeatedOn(b, a))))) & (forall b (forall a (forall c (  IsSeatedOn(b, a) ->   IsSittingOn(c, a))))) & (forall b (forall a (forall c (  IsSittingOn(c, a) ->   IsSeatedOn(b, a)))))) -> (forall c (IsTeenager(c) and IsSittingOn(c, a)))","(exists b (exists a (IsAsian(b) and IsTeenager(b) and IsSeatedOn(b, a))) & (forall f (forall d (forall e (  IsTeenager(d) ->   IsSittingOn(e,f))))) & (forall g (forall h (forall i (IsTeenager(g) ->   IsSeatedOn(h,i))))) & (forall k (forall l (forall j (  IsSeatedOn(j,k) ->   IsSittingOn(l,k))))) & (forall m (forall n (forall o (  IsSittingOn(m,n) ->   IsSeatedOn(o,n)))))) -> (exists a (exists c (IsTeenager(c) and IsSittingOn(c, a))))"
1,,"Boy in red and black shirt walks through grass. Therefore, the boy is walking."," ""The boy in red and black shirt is walking.""  "," ""The boy is walking.""","IsInRedAndBlackShirt(a),  IsWalking(a)",IsWalking(b),"[('IsInRedAndBlackShirt(a)', 'IsWalking(b)')]",[],"[(' The boy in red and black shirt', ' The boy')]",IsInRedAndBlackShirt(a) and IsWalking(a),IsWalking(b),(exists a (IsInRedAndBlackShirt(a) and IsWalking(a)) & (forall b (forall a (IsInRedAndBlackShirt(a) -> IsWalking(b))))) -> (forall b (IsWalking(b))),(exists a (IsInRedAndBlackShirt(a) and IsWalking(a)) & (forall d (forall c (IsInRedAndBlackShirt(c) -> IsWalking(d))))) -> (exists b (IsWalking(b)))
1,,"These girls are having a great time looking for seashells. As a consequence, the girls are happy."," ""The girls are having a great time looking for seashells.""  "," ""The girls are happy.""","IsHavingGreatTime(a),  IsLookingForSeashells(a, c)",IsHappy(a),"[('IsHavingGreatTime(a)', 'IsHappy(a)')]","[(' The girls', ' The girls')]",[],"IsHavingGreatTime(a) and IsLookingForSeashells(a, c)",IsHappy(a),"(IsHavingGreatTime(a) and IsLookingForSeashells(a, c) & (forall a (IsHavingGreatTime(a) -> IsHappy(a)))) -> (IsHappy(a))","(exists a (exists c (IsHavingGreatTime(a) and IsLookingForSeashells(a, c))) & (forall d (IsHavingGreatTime(d) -> IsHappy(d)))) -> (exists a (IsHappy(a)))"
1,,"Small girl in a pink dress is playing electronic drum pads with sticks. Consequently, a girl is playing electronic drums."," ""A small girl in a pink dress is playing electronic drum pads with sticks.""  ",,"IsSmall(a),  IsInPinkDress(a),  IsPlayingWith(a, c, d)",Properties: IsE(e),[],[],[],"IsSmall(a) and IsInPinkDress(a) and IsPlayingWith(a, c, d)",IsE(e),"(IsSmall(a) and IsInPinkDress(a) and IsPlayingWith(a, c, d)) -> (IsE(e))","(exists d (exists a (exists c (IsSmall(a) and IsInPinkDress(a) and IsPlayingWith(a, c, d))))) -> (exists e (IsE(e)))"
1,,"A blond woman with a tattoo of on an angel on her arm walking down the street, a concrete wall in the background. As a consequence, a person with a tattoo."," ""A blond woman has a tattoo of an angel on her arm.""  "," ""A person has a tattoo.""","IsBlond(b),  HasTattoo(b, a),  IsTattooOf(a, c),  IsOnArm(a, d)","IsPerson(e),  HasTattoo(e, a)",[],"[(' a tattoo', ' a tattoo')]","[(' A blond woman', ' A person'), (' her arm', ' A person')]","IsBlond(b) and HasTattoo(b, a) and IsTattooOf(a, c) and IsOnArm(a, d)","IsPerson(e) and HasTattoo(e, a)","(exists d (exists b (IsBlond(b) and HasTattoo(b, a) and IsTattooOf(a, c) and IsOnArm(a, d)))) -> (forall e (IsPerson(e) and HasTattoo(e, a)))","(exists b (exists d (exists a (exists c (IsBlond(b) and HasTattoo(b, a) and IsTattooOf(a, c) and IsOnArm(a, d)))))) -> (exists a (exists e (IsPerson(e) and HasTattoo(e, a))))"
1,,"A tan dog chases a black and white soccer ball. Therefore, a dog is chasing a ball."," ""A tan dog chases a black and white soccer ball.""  "," ""A dog is chasing a ball.""","IsTan(a),  Chases(a, b),  IsBlackAndWhite(b)","IsDog(a),  Chases(a, c)","[('IsDog(a)', '  Chases(a, b)')]","[(' A tan dog', ' A dog')]","[(' a black and white soccer ball', ' a ball')]","IsTan(a) and Chases(a, b) and IsBlackAndWhite(b)","IsDog(a) and Chases(a, c)","(exists b (IsTan(a) and Chases(a, b) and IsBlackAndWhite(b)) & (forall b (forall a (IsDog(a) ->   Chases(a, b))))) -> (forall c (IsDog(a) and Chases(a, c)))","(exists b (exists a (IsTan(a) and Chases(a, b) and IsBlackAndWhite(b))) & (forall f (forall e (IsDog(e) ->   Chases(e,f))))) -> (exists a (exists c (IsDog(a) and Chases(a, c))))"
1,,"A dusty boy runs along a dirt path through the grass. As a consequence, a boy is outside running."," ""A dusty boy runs along a dirt path through the grass.""  "," ""The boy is outside running.""","IsDusty(a),  RunsAlong(a, b),  IsInGrass(b),  IsDirtPath(b)","IsOutside(d),  IsRunning(d)","[('IsDusty(a)', '  IsRunning(d)'), ('  RunsAlong(a, b)', 'IsOutside(d)'), ('  RunsAlong(a, b)', '  IsRunning(d)')]",[],[],"IsDusty(a) and RunsAlong(a, b) and IsInGrass(b) and IsDirtPath(b)",IsOutside(d) and IsRunning(d),"(IsDusty(a) and RunsAlong(a, b) and IsInGrass(b) and IsDirtPath(b) & (forall d (forall a (IsDusty(a) ->   IsRunning(d)))) & (forall b (forall d (forall a (  RunsAlong(a, b) -> IsOutside(d))))) & (forall b (forall d (forall a (  RunsAlong(a, b) ->   IsRunning(d)))))) -> (IsOutside(d) and IsRunning(d))","(exists b (exists a (IsDusty(a) and RunsAlong(a, b) and IsInGrass(b) and IsDirtPath(b))) & (forall f (forall e (IsDusty(e) ->   IsRunning(f)))) & (forall g (forall h (forall i (  RunsAlong(g,h) -> IsOutside(i))))) & (forall k (forall l (forall j (  RunsAlong(j,k) ->   IsRunning(l)))))) -> (exists d (IsOutside(d) and IsRunning(d)))"
1,,"A guy with a football, a crowd watching him. Consequently, there is a guy holding a football."," ""A guy is holding a football.""  "," ""There is a guy with a football.""","IsHolding(a, b)","IsWith(a, b)",[],"[(' A guy', ' a guy'), (' a football', ' a football')]",[],"IsHolding(a, b)","∃a (IsWith(a, b))","(IsHolding(a, b)) -> (∃a (IsWith(a, b)))","(exists b (exists a (IsHolding(a, b)))) -> (exists b (exists a (∃a (IsWith(a, b)))))"
1,,Two women are tending to their herd of animals including cows and goats near a building made primarily of stone. It follows that the two women are taking care of a herd of animals.," ""The two women are tending to a herd of animals including cows and goats.""  "," ""The two women are taking care of a herd of animals.""","IsTending(a,b),  HasCows(b,c),  HasGoats(b,d)","IsTakingCare(a, b)","[('IsTending(a,b)', 'IsTakingCare(a, b)'), ('IsTakingCare(a, b)', 'IsTending(a,b)'), ('  HasCows(b,c)', 'IsTakingCare(a, b)'), ('  HasGoats(b,d)', 'IsTakingCare(a, b)')]","[(' The two women', ' The two women'), (' a herd of animals', ' a herd of animals')]","[(' cows', ' a herd of animals'), (' goats', ' a herd of animals')]","IsTending(a,b) and HasCows(b,c) and HasGoats(b,d)","IsTakingCare(a, b)","(exists d (exists c (IsTending(a,b) and HasCows(b,c) and HasGoats(b,d))) & (forall b (forall a (IsTending(a,b) -> IsTakingCare(a, b)))) & (forall b (forall a (IsTakingCare(a, b) -> IsTending(a,b)))) & (forall b (forall a (forall c (  HasCows(b,c) -> IsTakingCare(a, b))))) & (forall b (forall a (forall d (  HasGoats(b,d) -> IsTakingCare(a, b)))))) -> (forall b (IsTakingCare(a, b)))","(exists b (exists d (exists a (exists c (IsTending(a,b) and HasCows(b,c) and HasGoats(b,d))))) & (forall g (forall f (forall e (IsTending(e,f) -> IsTakingCare(e,g))))) & (forall h (forall i (forall j (IsTakingCare(h,i) -> IsTending(h,j))))) & (forall m (forall k (forall n (forall l (  HasCows(k,l) -> IsTakingCare(m,n)))))) & (forall o (forall p (forall q (forall r (  HasGoats(o,p) -> IsTakingCare(q,r))))))) -> (exists b (exists a (IsTakingCare(a, b))))"
1,,"A boy and girl play together on a pile or rocks in a residential area. Thus, the boy and girl are outside."," ""A boy and girl play together on a pile of rocks in a residential area.""  "," ""The boy and girl are outside.""","PlaysTogether(a, b),  IsOnPileOfRocks(a, b, c),  IsInResidentialArea(c, d)","IsOutside(a),  IsOutside(b)","[('PlaysTogether(a, b)', 'IsOutside(a)'), ('  IsOnPileOfRocks(a, b, c)', 'IsOutside(a)')]","[(' A boy', ' The boy'), (' girl', ' girl')]",[],"PlaysTogether(a, b) and IsOnPileOfRocks(a, b, c) and IsInResidentialArea(c, d)",IsOutside(a) and IsOutside(b),"(PlaysTogether(a, b) and IsOnPileOfRocks(a, b, c) and IsInResidentialArea(c, d) & (forall b (forall a (PlaysTogether(a, b) -> IsOutside(a)))) & (forall b (forall a (forall c (  IsOnPileOfRocks(a, b, c) -> IsOutside(a)))))) -> (IsOutside(a) and IsOutside(b))","(exists b (exists d (exists a (exists c (PlaysTogether(a, b) and IsOnPileOfRocks(a, b, c) and IsInResidentialArea(c, d))))) & (forall g (forall f (PlaysTogether(f,g) -> IsOutside(f)))) & (forall h (forall i (forall j (  IsOnPileOfRocks(h,i,j) -> IsOutside(h)))))) -> (exists b (exists a (IsOutside(a) and IsOutside(b))))"
1,,"A boy stands in the middle of a crowd of teenagers. Thus, a person stands in the middle of a crowd of teenagers."," ""A boy stands in the middle of a crowd of teenagers.""  "," ""A person stands in the middle of a crowd of teenagers.""","IsInMiddle(d, a),  IsInCrowd(d, b),  IsCrowdOf(b, c)","IsInMiddle(e, a),  IsInCrowd(e, b),  IsCrowdOf(b, c)","[('  IsCrowdOf(b, c)', 'IsInMiddle(e, a)'), ('  IsCrowdOf(b, c)', '  IsInCrowd(e, b)')]","[(' the middle', ' the middle'), (' a crowd', ' a crowd'), (' teenagers', ' teenagers')]","[(' A boy', ' A person'), (' A boy', ' teenagers'), (' teenagers', ' A person')]","IsInMiddle(d, a) and IsInCrowd(d, b) and IsCrowdOf(b, c)","IsInMiddle(e, a) and IsInCrowd(e, b) and IsCrowdOf(b, c)","(exists c (exists d (IsInMiddle(d, a) and IsInCrowd(d, b) and IsCrowdOf(b, c))) & (forall b (forall a (forall e (forall c (  IsCrowdOf(b, c) -> IsInMiddle(e, a)))))) & (forall b (forall e (forall c (  IsCrowdOf(b, c) ->   IsInCrowd(e, b)))))) -> (forall c (forall e (IsInMiddle(e, a) and IsInCrowd(e, b) and IsCrowdOf(b, c))))","(exists b (exists a (exists d (exists c (IsInMiddle(d, a) and IsInCrowd(d, b) and IsCrowdOf(b, c))))) & (forall g (forall h (forall f (forall i (  IsCrowdOf(f,g) -> IsInMiddle(h,i)))))) & (forall m (forall k (forall l (forall j (  IsCrowdOf(j,k) ->   IsInCrowd(l,m))))))) -> (exists b (exists a (exists e (exists c (IsInMiddle(e, a) and IsInCrowd(e, b) and IsCrowdOf(b, c))))))"
1,,"Two men are standing in a boat. Thus, some people are in a boat."," ""Two men are standing in a boat.""  "," ""Some people are in a boat.""","IsStanding(b),  IsInBoat(b)",IsInBoat(c),"[('IsStanding(b)', 'IsInBoat(c)')]","[(' a boat', ' a boat')]","[(' Two men', ' Some people')]",IsStanding(b) and IsInBoat(b),IsInBoat(c),(exists b (IsStanding(b) and IsInBoat(b)) & (forall b (forall c (IsStanding(b) -> IsInBoat(c))))) -> (forall c (IsInBoat(c))),(exists b (IsStanding(b) and IsInBoat(b)) & (forall d (forall e (IsStanding(d) -> IsInBoat(e))))) -> (exists c (IsInBoat(c)))
1,,An Asian woman dressed in a colorful outfit laughing. It follows that a woman is wearing colorful clothing.," ""An Asian woman is dressed in a colorful outfit.""  "," ""A woman is wearing colorful clothing.""","IsAsian(a),  IsDressedIn(b, a)","IsWoman(c),  IsWearing(d, c)","[('  IsDressedIn(b, a)', 'IsWoman(c)'), ('  IsDressedIn(b, a)', '  IsWearing(d, c)')]",[],"[(' An Asian woman', ' A woman'), (' a colorful outfit', ' colorful clothing')]","IsAsian(a) and IsDressedIn(b, a)","IsWoman(c) and IsWearing(d, c)","(exists b (exists a (IsAsian(a) and IsDressedIn(b, a))) & (forall b (forall a (forall c (  IsDressedIn(b, a) -> IsWoman(c))))) & (forall b (forall d (forall a (forall c (  IsDressedIn(b, a) ->   IsWearing(d, c))))))) -> (forall d (forall c (IsWoman(c) and IsWearing(d, c))))","(exists b (exists a (IsAsian(a) and IsDressedIn(b, a))) & (forall g (forall f (forall e (  IsDressedIn(e,f) -> IsWoman(g))))) & (forall h (forall i (forall k (forall j (  IsDressedIn(h,i) ->   IsWearing(j,k))))))) -> (exists d (exists c (IsWoman(c) and IsWearing(d, c))))"
1,,"A woman in black reviews a message as she walks to work. Hence, the woman in black has a job."," ""A woman in black reviews a message while walking to work.""  "," ""The woman in black has a job.""","IsInBlack(a),  ReviewsMessage(a, b),  IsWalkingToWork(a)","IsInBlack(a),  HasJob(a)",[],"[(' A woman in black', ' The woman in black')]","[(' work', ' a job')]","IsInBlack(a) and ReviewsMessage(a, b) and IsWalkingToWork(a)",IsInBlack(a) and HasJob(a),"(IsInBlack(a) and ReviewsMessage(a, b) and IsWalkingToWork(a)) -> (IsInBlack(a) and HasJob(a))","(exists b (exists a (IsInBlack(a) and ReviewsMessage(a, b) and IsWalkingToWork(a)))) -> (exists a (IsInBlack(a) and HasJob(a)))"
1,,"A shirtless man rock climbs. As a consequence, a man is outside."," ""A shirtless man rock climbs.""  "," ""A man is outside.""","IsShirtless(a),  RockClimbs(a)",IsOutside(c),[],[],"[(' A shirtless man', ' A man')]",IsShirtless(a) and RockClimbs(a),IsOutside(c),(exists a (IsShirtless(a) and RockClimbs(a))) -> (forall c (IsOutside(c))),(exists a (IsShirtless(a) and RockClimbs(a))) -> (exists c (IsOutside(c)))
1,,"A man wearing a kilt has thrown a large pole. Therefore, a man is wearing a skirt."," ""A man wearing a kilt has thrown a large pole.""  "," ""A man is wearing a skirt.""","IsWearingKilt(a),  HasThrownPole(a)",IsWearingSkirt(c),"[('IsWearingKilt(a)', 'IsWearingSkirt(c)'), ('  HasThrownPole(a)', 'IsWearingSkirt(c)')]",[],"[(' A man wearing a kilt', ' A man')]",IsWearingKilt(a) and HasThrownPole(a),IsWearingSkirt(c),(exists a (IsWearingKilt(a) and HasThrownPole(a)) & (forall a (forall c (IsWearingKilt(a) -> IsWearingSkirt(c)))) & (forall a (forall c (  HasThrownPole(a) -> IsWearingSkirt(c))))) -> (forall c (IsWearingSkirt(c))),(exists a (IsWearingKilt(a) and HasThrownPole(a)) & (forall f (forall e (IsWearingKilt(e) -> IsWearingSkirt(f)))) & (forall g (forall h (  HasThrownPole(g) -> IsWearingSkirt(h))))) -> (exists c (IsWearingSkirt(c)))
1,,"A man in a blue t-shirt is taking a picture while a woman with an umbrella walks behind him. Consequently, a man is taking a picture outdoors while a woman walks behind him."," ""A man in a blue t-shirt is taking a picture.""  "," ""A man is taking a picture outdoors.""","IsInBlueTShirt(b),  IsTakingPicture(b)","IsTakingPicture(c),  IsOutdoors(d)","[('IsInBlueTShirt(b)', 'IsTakingPicture(c)'), ('  IsOutdoors(d)', '  IsTakingPicture(b)')]","[(' a picture', ' a picture')]","[(' A man in a blue t-shirt', ' A man')]",IsInBlueTShirt(b) and IsTakingPicture(b),IsTakingPicture(c) and IsOutdoors(d),(exists b (IsInBlueTShirt(b) and IsTakingPicture(b)) & (forall b (forall c (IsInBlueTShirt(b) -> IsTakingPicture(c)))) & (forall b (forall d (  IsOutdoors(d) ->   IsTakingPicture(b))))) -> (forall c (IsTakingPicture(c) and IsOutdoors(d))),(exists b (IsInBlueTShirt(b) and IsTakingPicture(b)) & (forall f (forall e (IsInBlueTShirt(e) -> IsTakingPicture(f)))) & (forall g (forall h (  IsOutdoors(g) ->   IsTakingPicture(h))))) -> (exists d (exists c (IsTakingPicture(c) and IsOutdoors(d))))
1,,"A child and a parent or older sibling going for a hike. Consequently, two people are going for a hike."," ""A child and a parent or older sibling are going for a hike.""  "," ""Two people are going for a hike.""","IsChild(a),  IsParent(b),  IsOlderSibling(c),  IsGoingForHike(a)","IsPerson(e),  IsGoingForHike(e)","[('  IsGoingForHike(a)', 'IsPerson(e)')]",[],[],(IsChild(a) and (IsParent(b) or IsOlderSibling(c))) and IsGoingForHike(a),IsPerson(e) and IsGoingForHike(e),((IsChild(a) and (IsParent(b) or IsOlderSibling(c))) and IsGoingForHike(a) & (forall a (forall e (  IsGoingForHike(a) -> IsPerson(e))))) -> (IsPerson(e) and IsGoingForHike(e)),(exists b (exists a (exists c ((IsChild(a) and (IsParent(b) or IsOlderSibling(c))) and IsGoingForHike(a)))) & (forall g (forall f (  IsGoingForHike(f) -> IsPerson(g))))) -> (exists e (IsPerson(e) and IsGoingForHike(e)))
1,,"Two kids in black trunks bouncing on a wet trampoline. Consequently, children play on trampolines outdoors."," ""Two kids are bouncing on a wet trampoline.""  "," ""Children play on trampolines outdoors.""","IsBouncing(a,b),  IsWet(b)","IsPlaying(c, d),  IsOutdoors(e)",[],[],"[(' Two kids', ' Children'), (' a wet trampoline', ' trampolines')]","IsBouncing(a,b) and IsWet(b)","IsPlaying(c, d) and IsOutdoors(e)","(exists b (exists a (IsBouncing(a,b) and IsWet(b)))) -> (forall d (forall c (IsPlaying(c, d) and IsOutdoors(e))))","(exists b (exists a (IsBouncing(a,b) and IsWet(b)))) -> (exists e (exists d (exists c (IsPlaying(c, d) and IsOutdoors(e)))))"
1,,"2 people with backpacks are at a table with a woman with a beige blazer sitting behind it. Thus, 2 people are at a table."," ""Two people with backpacks are at a table with a woman in a beige blazer.""  "," ""Two people are at a table.""","IsAt(b, a),  IsWearing(c, d),  HasBackpack(b)","IsAt(e, a)",[],"[(' a table', ' a table')]","[(' Two people with backpacks', ' Two people')]","HasBackpack(b) and IsAt(b, a) and IsWearing(c, d)","IsAt(e, a)","(exists b (HasBackpack(b) and IsAt(b, a) and IsWearing(c, d))) -> (forall e (IsAt(e, a)))","(exists b (exists d (exists a (exists c (HasBackpack(b) and IsAt(b, a) and IsWearing(c, d)))))) -> (exists a (exists e (IsAt(e, a))))"
1,,"A group stands and watches two men, apparently dressed in some sort of costume, wrestle on the ground. It follows that there are people wrestling."," ""Two men are wrestling on the ground.""  "," ""There are people wrestling.""","IsWrestling(a),  IsOnGround(a, b)",IsWrestling(c),[],[],"[(' Two men', ' people')]","IsWrestling(a) and IsOnGround(a, b)",IsWrestling(c),"(exists a (IsWrestling(a) and IsOnGround(a, b))) -> (forall c (IsWrestling(c)))","(exists b (exists a (IsWrestling(a) and IsOnGround(a, b)))) -> (exists c (IsWrestling(c)))"
1,,"two girls looking out the window at ""Hair at Hart."" Hence, two people look out a window."," ""Two girls are looking out the window at 'Hair at Hart.'""  "," ""Two people look out a window.""","IsLookingOut(b, a),  IsBeingViewed(c, a)","IsLookingOut(d, a)",[],"[(' the window', ' a window')]","[(' Two girls', ' Two people')]","IsLookingOut(b, a) and IsBeingViewed(c, a)","IsLookingOut(d, a)","(exists b (IsLookingOut(b, a) and IsBeingViewed(c, a))) -> (forall d (IsLookingOut(d, a)))","(exists b (exists a (exists c (IsLookingOut(b, a) and IsBeingViewed(c, a))))) -> (exists a (exists d (IsLookingOut(d, a))))"
1,,"A man visiting a friend in the hospital. Therefore, a man in a hospital receives a visiting friend."," ""A man is visiting a friend in the hospital.""  "," ""A man in a hospital receives a visiting friend.""","IsVisiting(a, c),  IsInHospital(c)","IsInHospital(a),  ReceivesVisitingFriend(a, d)",[],"[(' A man', ' A man'), (' the hospital', ' a hospital')]",[],"IsVisiting(a, c) and IsInHospital(c)","IsInHospital(a) and ReceivesVisitingFriend(a, d)","(IsVisiting(a, c) and IsInHospital(c)) -> (IsInHospital(a) and ReceivesVisitingFriend(a, d))","(exists a (exists c (IsVisiting(a, c) and IsInHospital(c)))) -> (exists d (exists a (IsInHospital(a) and ReceivesVisitingFriend(a, d))))"
1,,"A schoolgirl is jumping over a low hurdle. Consequently, a girl is jumping over a hurdle."," ""A schoolgirl is jumping over a low hurdle.""  "," ""A girl is jumping over a hurdle.""","IsSchoolgirl(a),  IsJumping(a),  IsOverHurdle(a, b),  IsLowHurdle(b)","IsGirl(c),  IsJumping(c),  IsOverHurdle(c, d),  IsHurdle(d)","[('IsSchoolgirl(a)', 'IsGirl(c)'), ('IsSchoolgirl(a)', '  IsJumping(c)'), ('  IsOverHurdle(c, d)', '  IsJumping(a)'), ('  IsLowHurdle(b)', '  IsJumping(c)')]",[],"[(' A schoolgirl', ' A girl'), (' a low hurdle', ' a hurdle')]","IsSchoolgirl(a) and IsJumping(a) and IsOverHurdle(a, b) and IsLowHurdle(b)","IsGirl(c) and IsJumping(c) and IsOverHurdle(c, d) and IsHurdle(d)","(exists b (exists a (IsSchoolgirl(a) and IsJumping(a) and IsOverHurdle(a, b) and IsLowHurdle(b))) & (forall a (forall c (IsSchoolgirl(a) -> IsGirl(c)))) & (forall a (forall c (IsSchoolgirl(a) ->   IsJumping(c)))) & (forall a (forall d (forall c (  IsOverHurdle(c, d) ->   IsJumping(a))))) & (forall b (forall c (  IsLowHurdle(b) ->   IsJumping(c))))) -> (forall d (forall c (IsGirl(c) and IsJumping(c) and IsOverHurdle(c, d) and IsHurdle(d))))","(exists b (exists a (IsSchoolgirl(a) and IsJumping(a) and IsOverHurdle(a, b) and IsLowHurdle(b))) & (forall f (forall e (IsSchoolgirl(e) -> IsGirl(f)))) & (forall g (forall h (IsSchoolgirl(g) ->   IsJumping(h)))) & (forall k (forall i (forall j (  IsOverHurdle(i,j) ->   IsJumping(k))))) & (forall m (forall l (  IsLowHurdle(l) ->   IsJumping(m))))) -> (exists d (exists c (IsGirl(c) and IsJumping(c) and IsOverHurdle(c, d) and IsHurdle(d))))"
1,,"Young Asian girl is sitting on the ground in rubble. Hence, the young Asian girl is outside in the rubble."," ""A young Asian girl is sitting on the ground in rubble.""  "," ""The young Asian girl is outside in the rubble.""","IsYoung(a),  IsAsian(a),  IsSitting(a, c),  IsInRubble(a, b)","IsYoung(a),  IsAsian(a),  IsOutside(a),  IsInRubble(a, b)","[('  IsInRubble(a, b)', '  IsOutside(a)')]","[(' A young Asian girl', ' The young Asian girl'), (' rubble', ' the rubble')]",[],"IsYoung(a) and IsAsian(a) and IsSitting(a, c) and IsInRubble(a, b)","IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a, b)","(IsYoung(a) and IsAsian(a) and IsSitting(a, c) and IsInRubble(a, b) & (forall b (forall a (  IsInRubble(a, b) ->   IsOutside(a))))) -> (IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a, b))","(exists b (exists a (exists c (IsYoung(a) and IsAsian(a) and IsSitting(a, c) and IsInRubble(a, b)))) & (forall g (forall f (  IsInRubble(f,g) ->   IsOutside(f))))) -> (exists b (exists a (IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a, b))))"
1,,"A group of women sing together while wearing matching black dresses. Thus, there are women singing."," ""A group of women sings together while wearing matching black dresses.""  "," ""There are women singing.""","SingsTogether(a),  WearsMatchingBlackDresses(a)",Sings(c),"[('SingsTogether(a)', 'Sings(c)'), ('Sings(c)', 'SingsTogether(a)'), ('  WearsMatchingBlackDresses(a)', 'Sings(c)')]",[],"[(' A group of women', ' women'), (' matching black dresses', ' women')]",SingsTogether(a) and WearsMatchingBlackDresses(a),Sings(c),(exists a (SingsTogether(a) and WearsMatchingBlackDresses(a)) & (forall a (forall c (SingsTogether(a) -> Sings(c)))) & (forall a (forall c (Sings(c) -> SingsTogether(a)))) & (forall a (forall c (  WearsMatchingBlackDresses(a) -> Sings(c))))) -> (forall c (Sings(c))),(exists a (SingsTogether(a) and WearsMatchingBlackDresses(a)) & (forall d (forall e (SingsTogether(d) -> Sings(e)))) & (forall g (forall f (Sings(f) -> SingsTogether(g)))) & (forall h (forall i (  WearsMatchingBlackDresses(h) -> Sings(i))))) -> (exists c (Sings(c)))
1,,Two boys in running clothes stretching. This implies that the boys are stretching.," ""Two boys in running clothes are stretching.""  "," ""The boys are preparing for a run.""","IsInRunningClothes(a),  AreStretching(a)","ArePreparing(a),  IsForRun(c)","[('ArePreparing(a)', '  AreStretching(a)')]","[(' Two boys', ' The boys')]",[],IsInRunningClothes(a) and AreStretching(a),ArePreparing(a) and IsForRun(c),(IsInRunningClothes(a) and AreStretching(a) & (forall a (ArePreparing(a) ->   AreStretching(a)))) -> (ArePreparing(a) and IsForRun(c)),(exists a (IsInRunningClothes(a) and AreStretching(a)) & (forall e (ArePreparing(e) ->   AreStretching(e)))) -> (exists a (exists c (ArePreparing(a) and IsForRun(c))))
1,,A group of young men in a gym take turns scoring in basketball. This implies that guys are indoors.," ""A group of young men in a gym takes turns scoring in basketball.""  "," ""Young men are indoors.""","IsInGym(a),  TakesTurnsScoring(a,c)",IsIndoors(d),"[('IsInGym(a)', 'IsIndoors(d)'), ('IsIndoors(d)', 'IsInGym(a)')]",[],"[(' A group of young men', ' Young men')]","IsInGym(a) and TakesTurnsScoring(a,c)",IsIndoors(d),"(exists a (IsInGym(a) and TakesTurnsScoring(a,c)) & (forall d (forall a (IsInGym(a) -> IsIndoors(d)))) & (forall a (forall d (IsIndoors(d) -> IsInGym(a))))) -> (forall d (IsIndoors(d)))","(exists a (exists c (IsInGym(a) and TakesTurnsScoring(a,c))) & (forall f (forall e (IsInGym(e) -> IsIndoors(f)))) & (forall g (forall h (IsIndoors(g) -> IsInGym(h))))) -> (exists d (IsIndoors(d)))"
1,,"An Eastern vendor sits by his stall with a rooster nearby. Consequently, a rooster near a vendor."," ""An Eastern vendor sits by his stall with a rooster nearby.""  "," ""A rooster is near a vendor.""","IsEastern(b),  SitsBy(b,c),  IsNearby(a,c)","IsNear(a,d)","[('IsEastern(b)', 'IsNear(a,d)')]","[(' a rooster', ' A rooster')]","[(' An Eastern vendor', ' a vendor')]","IsEastern(b) and SitsBy(b,c) and IsNearby(a,c)","IsNear(a,d)","(exists b (IsEastern(b) and SitsBy(b,c) and IsNearby(a,c)) & (forall b (forall d (forall a (IsEastern(b) -> IsNear(a,d)))))) -> (forall d (IsNear(a,d)))","(exists b (exists a (exists c (IsEastern(b) and SitsBy(b,c) and IsNearby(a,c)))) & (forall g (forall h (forall f (IsEastern(f) -> IsNear(g,h)))))) -> (exists d (exists a (IsNear(a,d))))"
1,,"A bird is perched on a tree branch. Thus, a bird is perching in a tree."," ""A bird is perched on a tree branch.""  "," ""A bird is perching in a tree.""","IsPerched(a, b)","IsPerching(a, c)","[('IsPerched(a, b)', 'IsPerching(a, c)')]","[(' A bird', ' A bird')]","[(' a tree branch', ' a tree')]","IsPerched(a, b)","IsPerching(a, c)","(exists b (IsPerched(a, b)) & (forall b (forall a (forall c (IsPerched(a, b) -> IsPerching(a, c)))))) -> (forall c (IsPerching(a, c)))","(exists b (exists a (IsPerched(a, b))) & (forall f (forall d (forall e (IsPerched(d,e) -> IsPerching(d,f)))))) -> (exists a (exists c (IsPerching(a, c))))"
1,,"A man in an overcoat putting on his gloves at a subway station. Therefore, a person is in the subway station."," ""A man in an overcoat is putting on his gloves at a subway station.""  "," ""A person is in the subway station.""","IsInOvercoat(b),  IsPuttingOn(c,b),  IsAtLocation(b,a)",IsInSubwayStation(d),"[('  IsAtLocation(b,a)', 'IsInSubwayStation(d)')]","[(' subway station', ' the subway station')]","[(' A man in an overcoat', ' A person')]","IsInOvercoat(b) and IsPuttingOn(c,b) and IsAtLocation(b,a)",IsInSubwayStation(d),"(exists b (IsInOvercoat(b) and IsPuttingOn(c,b) and IsAtLocation(b,a)) & (forall b (forall d (forall a (  IsAtLocation(b,a) -> IsInSubwayStation(d)))))) -> (forall d (IsInSubwayStation(d)))","(exists b (exists a (exists c (IsInOvercoat(b) and IsPuttingOn(c,b) and IsAtLocation(b,a)))) & (forall g (forall h (forall f (  IsAtLocation(f,g) -> IsInSubwayStation(h)))))) -> (exists d (IsInSubwayStation(d)))"
1,,"Person with umbrella observes flooded streets with cars in the water. Consequently, a person is outside."," ""A person with an umbrella observes flooded streets with cars in the water.""  "," ""A person is outside.""","IsObserving(a, b),  IsInWater(c, d),  HasUmbrella(a)",IsOutside(e),[],[],"[(' A person with an umbrella', ' A person')]","HasUmbrella(a) and IsObserving(a, b) and IsInWater(c, d)",IsOutside(e),"(exists a (HasUmbrella(a) and IsObserving(a, b) and IsInWater(c, d))) -> (forall e (IsOutside(e)))","(exists b (exists d (exists a (exists c (HasUmbrella(a) and IsObserving(a, b) and IsInWater(c, d)))))) -> (exists e (IsOutside(e)))"
1,,A group of people are camping out on some rocks. This implies that people are outdoors.," ""A group of people are camping out on some rocks.""  "," ""People are outdoors.""","IsCampingOut(a, b)",IsOutdoors(c),"[('IsCampingOut(a, b)', 'IsOutdoors(c)'), ('IsOutdoors(c)', 'IsCampingOut(a, b)')]",[],"[(' A group of people', ' People')]","IsCampingOut(a, b)",IsOutdoors(c),"(exists a (IsCampingOut(a, b)) & (forall b (forall a (forall c (IsCampingOut(a, b) -> IsOutdoors(c))))) & (forall b (forall a (forall c (IsOutdoors(c) -> IsCampingOut(a, b)))))) -> (forall c (IsOutdoors(c)))","(exists b (exists a (IsCampingOut(a, b))) & (forall f (forall d (forall e (IsCampingOut(d,e) -> IsOutdoors(f))))) & (forall g (forall h (forall i (IsOutdoors(g) -> IsCampingOut(h,i)))))) -> (exists c (IsOutdoors(c)))"
1,,A choir made up of varying ages of people are performing. This implies that the choir is singing.," ""A choir made up of varying ages of people is performing.""  "," ""The choir is singing.""","IsMadeUpOf(a, b),  IsPerforming(a)",IsSinging(a),"[('IsMadeUpOf(a, b)', 'IsSinging(a)'), ('  IsPerforming(a)', 'IsSinging(a)'), ('IsSinging(a)', '  IsPerforming(a)')]","[(' A choir', ' The choir')]",[],"IsMadeUpOf(a, b) and IsPerforming(a)",IsSinging(a),"(IsMadeUpOf(a, b) and IsPerforming(a) & (forall b (forall a (IsMadeUpOf(a, b) -> IsSinging(a)))) & (forall a (  IsPerforming(a) -> IsSinging(a))) & (forall a (IsSinging(a) ->   IsPerforming(a)))) -> (IsSinging(a))","(exists b (exists a (IsMadeUpOf(a, b) and IsPerforming(a))) & (forall d (forall e (IsMadeUpOf(d,e) -> IsSinging(d)))) & (forall f (  IsPerforming(f) -> IsSinging(f))) & (forall g (IsSinging(g) ->   IsPerforming(g)))) -> (exists a (IsSinging(a)))"
1,,A man scales a rock climbing wall. It follows that a man rock climbing.," ""A man scales a rock climbing wall.""  "," ""A man is rock climbing.""","IsMan(a),  Scales(a, b)","IsMan(a),  IsRockClimbing(a)","[('IsMan(a)', '  Scales(a, b)')]","[(' A man', ' A man')]",[],"IsMan(a) and Scales(a, b)",IsMan(a) and IsRockClimbing(a),"(IsMan(a) and Scales(a, b) & (forall b (forall a (IsMan(a) ->   Scales(a, b))))) -> (IsMan(a) and IsRockClimbing(a))","(exists b (exists a (IsMan(a) and Scales(a, b))) & (forall d (forall c (IsMan(c) ->   Scales(c,d))))) -> (exists a (IsMan(a) and IsRockClimbing(a)))"
1,,"A little white dog runs outside, their ears blown back in the wind. It follows that there is an animal outside."," ""A little white dog runs outside.""  "," ""There is an animal outside.""","IsLittle(a),  IsWhite(a),  RunsOutside(a)","IsAnimal(b),  IsOutside(b)","[('IsLittle(a)', 'IsAnimal(b)'), ('  IsWhite(a)', 'IsAnimal(b)'), ('  RunsOutside(a)', 'IsAnimal(b)'), ('  RunsOutside(a)', '  IsOutside(b)'), ('  IsOutside(b)', '  RunsOutside(a)')]",[],"[(' A little white dog', ' an animal')]",IsLittle(a) and IsWhite(a) and RunsOutside(a),IsAnimal(b) and IsOutside(b),(exists a (IsLittle(a) and IsWhite(a) and RunsOutside(a)) & (forall b (forall a (IsLittle(a) -> IsAnimal(b)))) & (forall b (forall a (  IsWhite(a) -> IsAnimal(b)))) & (forall b (forall a (  RunsOutside(a) -> IsAnimal(b)))) & (forall b (forall a (  RunsOutside(a) ->   IsOutside(b)))) & (forall b (forall a (  IsOutside(b) ->   RunsOutside(a))))) -> (forall b (IsAnimal(b) and IsOutside(b))),(exists a (IsLittle(a) and IsWhite(a) and RunsOutside(a)) & (forall d (forall c (IsLittle(c) -> IsAnimal(d)))) & (forall f (forall e (  IsWhite(e) -> IsAnimal(f)))) & (forall g (forall h (  RunsOutside(g) -> IsAnimal(h)))) & (forall i (forall j (  RunsOutside(i) ->   IsOutside(j)))) & (forall k (forall l (  IsOutside(k) ->   RunsOutside(l))))) -> (exists b (IsAnimal(b) and IsOutside(b)))
1,,"A bearded man sits near a white van. As a consequence, a man sitting outside near a van."," ""A bearded man sits near a white van.""  "," ""A man sits outside near a van.""","IsBearded(a),  IsNear(a, b),  IsWhite(b)","IsSitting(c),  IsOutside(c),  IsNear(c, d)",[],[],"[(' A bearded man', ' A man'), (' a white van', ' a van')]","IsBearded(a) and IsNear(a, b) and IsWhite(b)","IsSitting(c) and IsOutside(c) and IsNear(c, d)","(exists b (exists a (IsBearded(a) and IsNear(a, b) and IsWhite(b)))) -> (forall d (forall c (IsSitting(c) and IsOutside(c) and IsNear(c, d))))","(exists b (exists a (IsBearded(a) and IsNear(a, b) and IsWhite(b)))) -> (exists d (exists c (IsSitting(c) and IsOutside(c) and IsNear(c, d))))"
1,,"Two children wearing hooded tops laughing with each other. Thus, children laugh."," ""Two children wearing hooded tops are laughing with each other.""  "," ""Children laugh.""","IsWearingHoodedTops(a),  IsLaughingWithEachOther(a)",IsLaughing(c),"[('IsWearingHoodedTops(a)', 'IsLaughing(c)'), ('  IsLaughingWithEachOther(a)', 'IsLaughing(c)')]",[],"[(' Two children', ' Children')]",IsWearingHoodedTops(a) and IsLaughingWithEachOther(a),IsLaughing(c),(exists a (IsWearingHoodedTops(a) and IsLaughingWithEachOther(a)) & (forall a (forall c (IsWearingHoodedTops(a) -> IsLaughing(c)))) & (forall a (forall c (  IsLaughingWithEachOther(a) -> IsLaughing(c))))) -> (forall c (IsLaughing(c))),(exists a (IsWearingHoodedTops(a) and IsLaughingWithEachOther(a)) & (forall d (forall e (IsWearingHoodedTops(d) -> IsLaughing(e)))) & (forall g (forall f (  IsLaughingWithEachOther(f) -> IsLaughing(g))))) -> (exists c (IsLaughing(c)))
1,,"A man in glasses in a basement. Thus, the basement has a man in it."," ""A man in glasses is in a basement.""  "," ""The basement has a man in it.""","IsWearingGlasses(b),  IsInBasement(b)","IsInBasement(c),  HasMan(a)","[('IsWearingGlasses(b)', 'IsInBasement(c)'), ('IsWearingGlasses(b)', '  HasMan(a)'), ('  IsInBasement(b)', '  HasMan(a)'), ('  HasMan(a)', '  IsInBasement(b)')]","[(' a basement', ' The basement')]","[(' A man in glasses', ' a man')]",IsWearingGlasses(b) and IsInBasement(b),HasMan(a) and IsInBasement(c),(exists b (IsWearingGlasses(b) and IsInBasement(b)) & (forall b (forall c (IsWearingGlasses(b) -> IsInBasement(c)))) & (forall b (forall a (IsWearingGlasses(b) ->   HasMan(a)))) & (forall b (forall a (  IsInBasement(b) ->   HasMan(a)))) & (forall b (forall a (  HasMan(a) ->   IsInBasement(b))))) -> (forall c (HasMan(a) and IsInBasement(c))),(exists b (IsWearingGlasses(b) and IsInBasement(b)) & (forall f (forall e (IsWearingGlasses(e) -> IsInBasement(f)))) & (forall g (forall h (IsWearingGlasses(g) ->   HasMan(h)))) & (forall i (forall j (  IsInBasement(i) ->   HasMan(j)))) & (forall k (forall l (  HasMan(k) ->   IsInBasement(l))))) -> (exists a (exists c (HasMan(a) and IsInBasement(c))))
1,,A man in a white shirt speaks into a microphone as other men gather behind him at a public event. This implies that a man in a white shirt is making a speech in front of a crowd.," ""A man in a white shirt is speaking into a microphone.""  "," ""A man in a white shirt is making a speech in front of a crowd.""","IsInWhiteShirt(a),  IsSpeakingInto(a, b)","IsInWhiteShirt(a),  IsMakingSpeech(a),  IsInFrontOf(a, c)","[('IsInWhiteShirt(a)', '  IsMakingSpeech(a)'), ('  IsSpeakingInto(a, b)', '  IsMakingSpeech(a)'), ('  IsInFrontOf(a, c)', '  IsSpeakingInto(a, b)')]","[(' A man in a white shirt', ' A man in a white shirt')]",[],"IsInWhiteShirt(a) and IsSpeakingInto(a, b)","IsInWhiteShirt(a) and IsMakingSpeech(a) and IsInFrontOf(a, c)","(IsInWhiteShirt(a) and IsSpeakingInto(a, b) & (forall a (IsInWhiteShirt(a) ->   IsMakingSpeech(a))) & (forall b (forall a (  IsSpeakingInto(a, b) ->   IsMakingSpeech(a)))) & (forall b (forall a (forall c (  IsInFrontOf(a, c) ->   IsSpeakingInto(a, b)))))) -> (IsInWhiteShirt(a) and IsMakingSpeech(a) and IsInFrontOf(a, c))","(exists b (exists a (IsInWhiteShirt(a) and IsSpeakingInto(a, b))) & (forall d (IsInWhiteShirt(d) ->   IsMakingSpeech(d))) & (forall f (forall e (  IsSpeakingInto(e,f) ->   IsMakingSpeech(e)))) & (forall g (forall h (forall i (  IsInFrontOf(g,h) ->   IsSpeakingInto(g,i)))))) -> (exists a (exists c (IsInWhiteShirt(a) and IsMakingSpeech(a) and IsInFrontOf(a, c))))"
1,,A brown and white dog is chained up near a red chair. It follows that the dog is chained to a chair.," ""A brown and white dog is chained up near a red chair.""  "," ""The dog is chained to a chair.""","IsBrownAndWhite(a),  IsChainedUp(a),  IsNear(a,b),  IsRed(b)","IsChainedTo(a,c)","[('  IsChainedUp(a)', 'IsChainedTo(a,c)'), ('IsChainedTo(a,c)', '  IsChainedUp(a)')]","[(' A brown and white dog', ' The dog')]","[(' a red chair', ' a chair')]","IsBrownAndWhite(a) and IsChainedUp(a) and IsNear(a,b) and IsRed(b)","IsChainedTo(a,c)","(exists b (IsBrownAndWhite(a) and IsChainedUp(a) and IsNear(a,b) and IsRed(b)) & (forall a (forall c (  IsChainedUp(a) -> IsChainedTo(a,c)))) & (forall a (forall c (IsChainedTo(a,c) ->   IsChainedUp(a))))) -> (forall c (IsChainedTo(a,c)))","(exists b (exists a (IsBrownAndWhite(a) and IsChainedUp(a) and IsNear(a,b) and IsRed(b))) & (forall f (forall e (  IsChainedUp(e) -> IsChainedTo(e,f)))) & (forall g (forall h (IsChainedTo(g,h) ->   IsChainedUp(g))))) -> (exists a (exists c (IsChainedTo(a,c))))"
1,,"This is when daddy taught her how to ride her scooter. Consequently, daddy taught her."," ""Daddy taught her how to ride her scooter.""  "," ""Daddy taught her.""","Taught(a,  b),  KnowsHowToRide(b, c)","Taught(a, b)",[],"[(' Daddy', ' Daddy'), (' her', ' her')]",[],"Taught(a, b) and KnowsHowToRide(b, c)","Taught(a, b)","(Taught(a, b) and KnowsHowToRide(b, c)) -> (Taught(a, b))","(exists b (exists a (exists c (Taught(a, b) and KnowsHowToRide(b, c))))) -> (exists b (exists a (Taught(a, b))))"
1,,"A small girl with short brown hair is pushing a pink scooter over grass with brown leaves with threes in the background. Therefore, the girl is outside."," ""A small girl with short brown hair is pushing a pink scooter over grass with brown leaves.""  "," ""The girl is outside.""","IsSmall(a),  HasShortBrownHair(a),  IsPushing(a,c),  IsOnGrass(a,d),  HasBrownLeaves(d,e)",IsOutside(a),"[('IsOutside(a)', '  IsPushing(a,c)'), ('  IsOnGrass(a,d)', 'IsOutside(a)'), ('IsOutside(a)', '  IsOnGrass(a,d)')]","[(' A small girl', ' The girl')]",[],"IsSmall(a) and HasShortBrownHair(a) and IsPushing(a,c) and IsOnGrass(a,d) and HasBrownLeaves(d,e)",IsOutside(a),"(IsSmall(a) and HasShortBrownHair(a) and IsPushing(a,c) and IsOnGrass(a,d) and HasBrownLeaves(d,e) & (forall a (forall c (IsOutside(a) ->   IsPushing(a,c)))) & (forall d (forall a (  IsOnGrass(a,d) -> IsOutside(a)))) & (forall d (forall a (IsOutside(a) ->   IsOnGrass(a,d))))) -> (IsOutside(a))","(exists e (exists d (exists a (exists c (IsSmall(a) and HasShortBrownHair(a) and IsPushing(a,c) and IsOnGrass(a,d) and HasBrownLeaves(d,e))))) & (forall g (forall h (IsOutside(g) ->   IsPushing(g,h)))) & (forall i (forall j (  IsOnGrass(i,j) -> IsOutside(i)))) & (forall k (forall l (IsOutside(k) ->   IsOnGrass(k,l))))) -> (exists a (IsOutside(a)))"
1,,"A man wearing a black cap is suspended in the air on a swing, as children are swinging on a swing set. Hence, a man in a black hat is swinging with some children."," ""A man wearing a black cap is suspended in the air on a swing.""  "," ""A man in a black hat is swinging with some children.""","IsWearingBlackCap(a),  IsSuspendedInTheAir(a),  IsOnSwing(a,d)","IsInBlackHat(e),  IsSwingingWithChildren(e, f)","[('IsWearingBlackCap(a)', 'IsInBlackHat(e)')]",[],[],"IsWearingBlackCap(a) and IsSuspendedInTheAir(a) and IsOnSwing(a,d)","IsInBlackHat(e) and IsSwingingWithChildren(e, f)","(IsWearingBlackCap(a) and IsSuspendedInTheAir(a) and IsOnSwing(a,d) & (forall a (forall e (IsWearingBlackCap(a) -> IsInBlackHat(e))))) -> (IsInBlackHat(e) and IsSwingingWithChildren(e, f))","(exists d (exists a (IsWearingBlackCap(a) and IsSuspendedInTheAir(a) and IsOnSwing(a,d))) & (forall g (forall h (IsWearingBlackCap(g) -> IsInBlackHat(h))))) -> (exists f (exists e (IsInBlackHat(e) and IsSwingingWithChildren(e, f))))"
1,,"A man with a blue, collared shirt sits in front of another man. This implies that a man sits in front of another man."," ""A man with a blue, collared shirt sits in front of another man.""  "," ""A man sits in front of another man.""","IsWearingBlueShirt(b),  IsCollared(c),  IsSittingInFrontOf(b, a)","IsSittingInFrontOf(d, a)",[],"[(' another man', ' another man')]","[(' A man with a blue', ' A man'), (' another man', ' A man')]","IsWearingBlueShirt(b) and IsCollared(c) and IsSittingInFrontOf(b, a)","IsSittingInFrontOf(d, a)","(exists a (exists b (IsWearingBlueShirt(b) and IsCollared(c) and IsSittingInFrontOf(b, a)))) -> (forall d (IsSittingInFrontOf(d, a)))","(exists b (exists a (exists c (IsWearingBlueShirt(b) and IsCollared(c) and IsSittingInFrontOf(b, a))))) -> (exists a (exists d (IsSittingInFrontOf(d, a))))"
1,,"A young man in an orange shirt, maneuvers a skateboard at the top of a ramp. Therefore, a person rides a skateboard."," ""A young man in an orange shirt maneuvers a skateboard at the top of a ramp.""  "," ""A young man in an orange shirt rides a skateboard.""  ","IsYoung(a),  IsInOrangeShirt(a),  ManeuversSkateboard(a, c),  IsAtTopOfRamp(c, d)","IsYoung(a),  IsInOrangeShirt(a),  RidesSkateboard(a, c)","[('IsYoung(a)', '  RidesSkateboard(a, c)'), ('  ManeuversSkateboard(a, c)', '  RidesSkateboard(a, c)'), ('  RidesSkateboard(a, c)', '  ManeuversSkateboard(a, c)')]","[(' A young man', ' A young man'), (' an orange shirt', ' an orange shirt'), (' a skateboard', ' a skateboard')]",[],"IsYoung(a) and IsInOrangeShirt(a) and ManeuversSkateboard(a, c) and IsAtTopOfRamp(c, d)","IsYoung(a) and IsInOrangeShirt(a) and RidesSkateboard(a, c)","(IsYoung(a) and IsInOrangeShirt(a) and ManeuversSkateboard(a, c) and IsAtTopOfRamp(c, d) & (forall a (forall c (IsYoung(a) ->   RidesSkateboard(a, c)))) & (forall a (forall c (  ManeuversSkateboard(a, c) ->   RidesSkateboard(a, c)))) & (forall a (forall c (  RidesSkateboard(a, c) ->   ManeuversSkateboard(a, c))))) -> (IsYoung(a) and IsInOrangeShirt(a) and RidesSkateboard(a, c))","(exists d (exists a (exists c (IsYoung(a) and IsInOrangeShirt(a) and ManeuversSkateboard(a, c) and IsAtTopOfRamp(c, d)))) & (forall f (forall e (IsYoung(e) ->   RidesSkateboard(e,f)))) & (forall g (forall h (  ManeuversSkateboard(g,h) ->   RidesSkateboard(g,h)))) & (forall i (forall j (  RidesSkateboard(i,j) ->   ManeuversSkateboard(i,j))))) -> (exists a (exists c (IsYoung(a) and IsInOrangeShirt(a) and RidesSkateboard(a, c))))"
1,,"A large group of people walking in a busy city at night. Consequently, people are walking a city."," ""A large group of people is walking in a busy city at night.""  "," ""People are walking in a city.""","IsLarge(a),  IsWalking(a),  IsInBusyCity(b),  IsAtNight(c)","IsWalking(d),  IsInCity(e)",[],[],"[(' A large group of people', ' People'), (' a busy city', ' city')]",IsLarge(a) and IsWalking(a) and IsInBusyCity(b) and IsAtNight(c),IsWalking(d) and IsInCity(e),(exists b (exists a (IsLarge(a) and IsWalking(a) and IsInBusyCity(b) and IsAtNight(c)))) -> (forall e (forall d (IsWalking(d) and IsInCity(e)))),(exists b (exists a (exists c (IsLarge(a) and IsWalking(a) and IsInBusyCity(b) and IsAtNight(c))))) -> (exists d (exists e (IsWalking(d) and IsInCity(e))))
1,,"A group of people are walking by a van. Therefore, some people outdoors."," ""A group of people are walking by a van.""  "," ""Some people are outdoors.""","IsWalkingBy(a, b)",IsOutdoors(c),[],[],"[(' A group of people', ' Some people')]","IsWalkingBy(a, b)",IsOutdoors(c),"(exists a (IsWalkingBy(a, b))) -> (forall c (IsOutdoors(c)))","(exists b (exists a (IsWalkingBy(a, b)))) -> (exists c (IsOutdoors(c)))"
1,,"A white and a black dog fighting in a fenced in room. As a consequence, the dogs are fighting."," ""A white dog and a black dog are fighting in a fenced-in room.""  "," ""The dogs are fighting.""","IsWhiteDogFighting(a),  IsBlackDogFighting(b),  IsInFencedRoom(a),  IsInFencedRoom(b)",IsFighting(d),[],[],"[(' A white dog', ' The dogs'), (' a black dog', ' The dogs')]",IsWhiteDogFighting(a) and IsBlackDogFighting(b) and IsInFencedRoom(a) and IsInFencedRoom(b),IsFighting(d),(exists b (exists a (IsWhiteDogFighting(a) and IsBlackDogFighting(b) and IsInFencedRoom(a) and IsInFencedRoom(b)))) -> (forall d (IsFighting(d))),(exists b (exists a (IsWhiteDogFighting(a) and IsBlackDogFighting(b) and IsInFencedRoom(a) and IsInFencedRoom(b)))) -> (exists d (IsFighting(d)))
1,,"A white greyhound dog wearing a muzzle runs around a track. Hence, the dog is racing other dogs."," ""A white greyhound dog wearing a muzzle runs around a track.""  "," ""The dog is racing other dogs.""","IsWhite(a),  IsGreyhound(a),  IsWearingMuzzle(a),  IsRunningAround(a, c)","IsRacing(d, e)",[],[],"[(' A white greyhound dog', ' The dog'), (' A white greyhound dog', ' other dogs')]","IsWhite(a) and IsGreyhound(a) and IsWearingMuzzle(a) and IsRunningAround(a, c)","IsRacing(d, e)","(exists a (IsWhite(a) and IsGreyhound(a) and IsWearingMuzzle(a) and IsRunningAround(a, c))) -> (forall e (forall d (IsRacing(d, e))))","(exists a (exists c (IsWhite(a) and IsGreyhound(a) and IsWearingMuzzle(a) and IsRunningAround(a, c)))) -> (exists d (exists e (IsRacing(d, e))))"
1,,The pitcher is pitching the ball in a game of baseball. It follows that the pitcher throws the ball.," ""The pitcher is pitching the ball in a game of baseball.""  "," ""The pitcher throws the ball.""","IsPitching(a, b),  IsInGame(a, c)","IsThrowing(a, b)","[('IsPitching(a, b)', 'IsThrowing(a, b)'), ('IsThrowing(a, b)', 'IsPitching(a, b)'), ('  IsInGame(a, c)', 'IsThrowing(a, b)')]","[(' The pitcher', ' The pitcher'), (' the ball', ' the ball')]",[],"IsPitching(a, b) and IsInGame(a, c)","IsThrowing(a, b)","(IsPitching(a, b) and IsInGame(a, c) & (forall b (forall a (IsPitching(a, b) -> IsThrowing(a, b)))) & (forall b (forall a (IsThrowing(a, b) -> IsPitching(a, b)))) & (forall b (forall a (forall c (  IsInGame(a, c) -> IsThrowing(a, b)))))) -> (IsThrowing(a, b))","(exists b (exists a (exists c (IsPitching(a, b) and IsInGame(a, c)))) & (forall d (forall e (IsPitching(d,e) -> IsThrowing(d,e)))) & (forall g (forall f (IsThrowing(f,g) -> IsPitching(f,g)))) & (forall h (forall i (forall j (  IsInGame(h,i) -> IsThrowing(h,j)))))) -> (exists b (exists a (IsThrowing(a, b))))"
1,,"Girl in a red coat, blue head wrap and jeans is making a snow angel. As a consequence, a girl outside plays in the snow."," ""A girl in a red coat, blue head wrap, and jeans is making a snow angel.""  "," ""A girl outside plays in the snow.""","IsInRedCoat(a),  IsInBlueHeadWrap(a),  IsInJeans(a),  IsMakingSnowAngel(a)","IsOutside(e),  IsPlayingInSnow(e)",[],[],"[(' A girl in a red coat', ' A girl')]",IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a),IsOutside(e) and IsPlayingInSnow(e),(exists a (IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a))) -> (forall e (IsOutside(e) and IsPlayingInSnow(e))),(exists a (IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a))) -> (exists e (IsOutside(e) and IsPlayingInSnow(e)))
1,,"Men in an office with computers and a projector screen. Consequently, there are computers and a projector screen in the room."," ""There are men in an office with computers and a projector screen.""  "," ""There are computers and a projector screen in the room.""","HasComputers(d),  HasProjectorScreen(d),  IsInOffice(c)","HasComputers(e),  HasProjectorScreen(e)","[('  IsInOffice(c)', '  HasProjectorScreen(e)')]","[(' computers', ' computers'), (' projector screen', ' a projector screen')]",[],IsInOffice(c) and HasComputers(d) and HasProjectorScreen(d),HasComputers(e) and HasProjectorScreen(e),(IsInOffice(c) and HasComputers(d) and HasProjectorScreen(d) & (forall e (forall c (  IsInOffice(c) ->   HasProjectorScreen(e))))) -> (HasComputers(e) and HasProjectorScreen(e)),(exists d (exists c (IsInOffice(c) and HasComputers(d) and HasProjectorScreen(d))) & (forall g (forall h (  IsInOffice(g) ->   HasProjectorScreen(h))))) -> (exists e (HasComputers(e) and HasProjectorScreen(e)))
1,,"A small child in a red jacket is sitting on a man's shoulders and holding his head. Therefore, the child's hands are on the man's head."," ""A small child in a red jacket is sitting on a man's shoulders and holding the man's head.""  "," ""The child's hands are on the man's head.""","IsSmall(b),  IsInRedJacket(b),  IsSittingOn(b,d),  IsHolding(b,a)","IsOn(e, a)",[],"[("" the man's head."", "" the man's head"")]",[],"IsSmall(b) and IsInRedJacket(b) and IsSittingOn(b,d) and IsHolding(b,a)","IsOn(e, a)","(IsSmall(b) and IsInRedJacket(b) and IsSittingOn(b,d) and IsHolding(b,a)) -> (IsOn(e, a))","(exists b (exists a (exists d (IsSmall(b) and IsInRedJacket(b) and IsSittingOn(b,d) and IsHolding(b,a))))) -> (exists a (exists e (IsOn(e, a))))"
1,,Three girls are standing and talking to each other. It follows that three girls are talking.," ""Three girls are standing and talking to each other.""  "," ""Three girls are talking.""","IsStanding(a),  IsTalkingToEachOther(a)",IsTalking(a),[],"[(' Three girls', ' Three girls')]",[],IsStanding(a) and IsTalkingToEachOther(a),IsTalking(a),(IsStanding(a) and IsTalkingToEachOther(a)) -> (IsTalking(a)),(exists a (IsStanding(a) and IsTalkingToEachOther(a))) -> (exists a (IsTalking(a)))
1,,"a man with a cap and not wearing shirt is laying a wooden bench. Consequently, a man relaxes on a bench."," ""A man with a cap and not wearing a shirt is laying on a wooden bench.""  "," ""A man relaxes on a bench.""","IsWearingCap(a),  IsNotWearingShirt(a),  IsLayingOnBench(a,b)","IsRelaxing(c),  IsOnBench(c,d)",[],[],"[(' A man with a cap', ' A man'), (' a wooden bench', ' a bench')]","IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOnBench(a,b)","IsRelaxing(c) and IsOnBench(c,d)","(exists b (exists a (IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOnBench(a,b)))) -> (forall d (forall c (IsRelaxing(c) and IsOnBench(c,d))))","(exists b (exists a (IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOnBench(a,b)))) -> (exists d (exists c (IsRelaxing(c) and IsOnBench(c,d))))"
1,,"A man in a red shirt is being filmed by another man on a sports field with a huge audience of people watching and cheering. Therefore, the man is being filmed by another man."," ""A man in a red shirt is being filmed by another man.""  "," ""The man in a red shirt is being filmed by another man.""","IsInRedShirt(a),  IsBeingFilmed(a, b)","IsInRedShirt(a),  IsBeingFilmed(a, b)",[],"[(' A man in a red shirt', ' The man in a red shirt'), (' another man', ' another man')]",[],"IsInRedShirt(a) and IsBeingFilmed(a, b)","IsInRedShirt(a) and IsBeingFilmed(a, b)","(IsInRedShirt(a) and IsBeingFilmed(a, b)) -> (IsInRedShirt(a) and IsBeingFilmed(a, b))","(exists b (exists a (IsInRedShirt(a) and IsBeingFilmed(a, b)))) -> (exists b (exists a (IsInRedShirt(a) and IsBeingFilmed(a, b))))"
1,,"A man in a suit cheering in a library in front of children. Thus, a guy is cheering near some children."," ""A man in a suit is cheering in a library in front of children.""  "," ""A guy is cheering near some children.""","IsInSuit(a),  IsCheering(a),  IsInLibrary(a),  IsInFrontOf(a, c)","IsCheering(d),  IsNear(d, e)",[],[],"[(' children', ' some children')]","IsInSuit(a) and IsCheering(a) and IsInLibrary(a) and IsInFrontOf(a, c)","IsCheering(d) and IsNear(d, e)","(exists c (IsInSuit(a) and IsCheering(a) and IsInLibrary(a) and IsInFrontOf(a, c))) -> (forall e (IsCheering(d) and IsNear(d, e)))","(exists a (exists c (IsInSuit(a) and IsCheering(a) and IsInLibrary(a) and IsInFrontOf(a, c)))) -> (exists d (exists e (IsCheering(d) and IsNear(d, e))))"
1,,A man in suit waiting for the green light. This implies that a man waits at a red light.," ""A man in a suit is waiting for the green light.""  "," ""A man waits at a red light.""","IsInSuit(a),  IsWaiting(a),  IsGreen(b)","IsWaiting(c),  IsAtRedLight(c)",[],[],"[(' A man in a suit', ' A man')]",IsInSuit(a) and IsWaiting(a) and IsGreen(b),IsWaiting(c) and IsAtRedLight(c),(exists a (IsInSuit(a) and IsWaiting(a) and IsGreen(b))) -> (forall c (IsWaiting(c) and IsAtRedLight(c))),(exists b (exists a (IsInSuit(a) and IsWaiting(a) and IsGreen(b)))) -> (exists c (IsWaiting(c) and IsAtRedLight(c)))
1,,"A man smokes while leaning against a pillar, which has a ""missing person"" flier posted on it. Thus, a guy smoking against a wall with a flier on it."," ""A man smokes while leaning against a pillar with a 'missing person' flier posted on it.""  "," ""A guy smoking against a wall has a flier on it.""","IsSmoking(a),  IsLeaningAgainst(a, b),  HasFlier(c, b)","IsSmoking(a),  IsLeaningAgainst(a, d),  HasFlier(e, d)",[],"[(' A man', ' A guy')]","[("" a 'missing person' flier"", ' a flier')]","IsSmoking(a) and IsLeaningAgainst(a, b) and HasFlier(c, b)","IsSmoking(a) and IsLeaningAgainst(a, d) and HasFlier(e, d)","(exists c (IsSmoking(a) and IsLeaningAgainst(a, b) and HasFlier(c, b))) -> (forall e (IsSmoking(a) and IsLeaningAgainst(a, d) and HasFlier(e, d)))","(exists b (exists a (exists c (IsSmoking(a) and IsLeaningAgainst(a, b) and HasFlier(c, b))))) -> (exists d (exists a (exists e (IsSmoking(a) and IsLeaningAgainst(a, d) and HasFlier(e, d)))))"
1,,"A woman is standing at a podium. Thus, a person is at a podium."," ""A woman is standing at a podium.""  "," ""A person is at a podium.""","IsStanding(b),  IsAt(b,a)","IsAt(c,a)","[('IsStanding(b)', 'IsAt(c,a)')]","[(' a podium', ' a podium')]","[(' A woman', ' A person')]","IsStanding(b) and IsAt(b,a)","IsAt(c,a)","(exists b (IsStanding(b) and IsAt(b,a)) & (forall b (forall a (forall c (IsStanding(b) -> IsAt(c,a)))))) -> (forall c (IsAt(c,a)))","(exists b (exists a (IsStanding(b) and IsAt(b,a))) & (forall f (forall d (forall e (IsStanding(d) -> IsAt(e,f)))))) -> (exists a (exists c (IsAt(c,a))))"
1,,Four boys are about to be hit by an approaching wave. It follows that a wave is about hit some boys.," ""A wave is about to hit four boys.""  "," ""A wave is about to hit some boys.""","IsAboutToHit(a, b)","IsAboutToHit(a, c)",[],"[(' A wave', ' A wave')]","[(' four boys', ' some boys')]","IsAboutToHit(a, b)","IsAboutToHit(a, c)","(exists b (IsAboutToHit(a, b))) -> (forall c (IsAboutToHit(a, c)))","(exists b (exists a (IsAboutToHit(a, b)))) -> (exists a (exists c (IsAboutToHit(a, c))))"
1,,"people are sitting on a bench in front of buildings. Thus, some people are seated on a bench outside."," ""Some people are sitting on a bench in front of buildings.""  "," ""Some people are seated on a bench outside.""","IsSitting(a,b),  IsInFrontOf(a,c)","IsSeated(a,b)","[('IsSeated(a,b)', 'IsSitting(a,b)')]","[(' Some people', ' Some people'), (' a bench', ' a bench')]",[],"IsSitting(a,b) and IsInFrontOf(a,c)","IsSeated(a,b)","(IsSitting(a,b) and IsInFrontOf(a,c) & (forall b (forall a (IsSeated(a,b) -> IsSitting(a,b))))) -> (IsSeated(a,b))","(exists b (exists a (exists c (IsSitting(a,b) and IsInFrontOf(a,c)))) & (forall d (forall e (IsSeated(d,e) -> IsSitting(d,e))))) -> (exists b (exists a (IsSeated(a,b))))"
1,,The skateboarder is jumping his board in the air while another skateboarder watches. This implies that a skateboarder is jumping.," ""A skateboarder is jumping his board in the air.""  "," ""A skateboarder is jumping.""","IsSkateboarding(a),  IsJumping(b),  IsInTheAir(b)","IsSkateboarding(a),  IsJumping(a)","[('IsSkateboarding(a)', '  IsJumping(a)')]","[(' A skateboarder', ' A skateboarder')]",[],IsSkateboarding(a) and IsJumping(b) and IsInTheAir(b),IsSkateboarding(a) and IsJumping(a),(IsSkateboarding(a) and IsJumping(b) and IsInTheAir(b) & (forall a (IsSkateboarding(a) ->   IsJumping(a)))) -> (IsSkateboarding(a) and IsJumping(a)),(exists b (exists a (IsSkateboarding(a) and IsJumping(b) and IsInTheAir(b))) & (forall d (IsSkateboarding(d) ->   IsJumping(d)))) -> (exists a (IsSkateboarding(a) and IsJumping(a)))
1,,"A man wearing a black hat and coat makes a face with a crowd behind him. As a consequence, a guy is standing near a crowd of people."," ""A man wearing a black hat and coat makes a face with a crowd behind him.""  "," ""A guy is standing near a crowd of people.""","IsWearingBlackHat(a),  IsWearingCoat(a),  MakesFace(a,d),  IsBehind(e,a)","IsStandingNear(a, f)",[],"[(' A man', ' A guy')]","[(' a crowd', ' a crowd of people')]","IsWearingBlackHat(a) and IsWearingCoat(a) and MakesFace(a,d) and IsBehind(e,a)","IsStandingNear(a, f)","(exists e (IsWearingBlackHat(a) and IsWearingCoat(a) and MakesFace(a,d) and IsBehind(e,a))) -> (forall f (IsStandingNear(a, f)))","(exists d (exists a (exists e (IsWearingBlackHat(a) and IsWearingCoat(a) and MakesFace(a,d) and IsBehind(e,a))))) -> (exists f (exists a (IsStandingNear(a, f))))"
1,,"A group of soldiers march in a parade. Thus, a group of people march in a parade."," ""A group of soldiers marches in a parade.""  "," ""A group of people marches in a parade.""","IsInParade(b),  IsMarching(b)","IsInParade(c),  IsMarching(c)","[('  IsMarching(c)', 'IsInParade(b)'), ('  IsMarching(b)', 'IsInParade(c)')]","[(' a parade', ' a parade')]","[(' A group of soldiers', ' A group of people')]",IsInParade(a) and IsMarching(b),IsInParade(a) and IsMarching(c),(exists b (IsInParade(a) and IsMarching(b)) & (forall b (forall c (  IsMarching(c) -> IsInParade(b)))) & (forall b (forall c (  IsMarching(b) -> IsInParade(c))))) -> (forall c (IsInParade(a) and IsMarching(c))),(exists b (exists a (IsInParade(a) and IsMarching(b))) & (forall d (forall e (  IsMarching(d) -> IsInParade(e)))) & (forall g (forall f (  IsMarching(f) -> IsInParade(g))))) -> (exists a (exists c (IsInParade(a) and IsMarching(c))))
1,,The 3 dogs are cruising down the street. This implies that three dogs together.," ""Three dogs are cruising down the street.""  "," ""Three dogs are together.""","IsCruising(a, b)",IsTogether(a),[],"[(' Three dogs', ' Three dogs')]",[],"IsCruising(a, b)",IsTogether(a),"(IsCruising(a, b)) -> (IsTogether(a))","(exists b (exists a (IsCruising(a, b)))) -> (exists a (IsTogether(a)))"
1,,"The gentleman is speaking while the others are listening. As a consequence, the man is being given respect."," ""The gentleman is speaking while the others are listening.""  "," ""The gentleman is being given respect.""","IsSpeaking(a),  IsListening(b)",IsGivenRespect(a),[],"[(' The gentleman', ' The gentleman')]",[],IsSpeaking(a) and IsListening(b),IsGivenRespect(a),(IsSpeaking(a) and IsListening(b)) -> (IsGivenRespect(a)),(exists b (exists a (IsSpeaking(a) and IsListening(b)))) -> (exists a (IsGivenRespect(a)))
1,,"One child in black is walking down a hill covered in white snow while 2 children are on their knees. Thus, there are three children in this picture, and they are all outside."," ""One child in black is walking down a hill covered in white snow and two children are on their knees.""  "," ""Three children are outside.""","IsInBlack(a),  IsWalking(a),  IsOnHill(a, b),  IsCoveredInWhite(c),  IsOnKnees(d)",AreOutside(e),"[('IsInBlack(a)', 'AreOutside(e)'), ('  IsWalking(a)', 'AreOutside(e)')]",[],[],"IsInBlack(a) and IsWalking(a) and IsOnHill(a, b) and IsCoveredInWhite(c) and IsOnKnees(d)",AreOutside(e),"(IsInBlack(a) and IsWalking(a) and IsOnHill(a, b) and IsCoveredInWhite(c) and IsOnKnees(d) & (forall a (forall e (IsInBlack(a) -> AreOutside(e)))) & (forall a (forall e (  IsWalking(a) -> AreOutside(e))))) -> (AreOutside(e))","(exists b (exists d (exists a (exists c (IsInBlack(a) and IsWalking(a) and IsOnHill(a, b) and IsCoveredInWhite(c) and IsOnKnees(d))))) & (forall g (forall f (IsInBlack(f) -> AreOutside(g)))) & (forall h (forall i (  IsWalking(h) -> AreOutside(i))))) -> (exists e (AreOutside(e)))"
1,,A group of people are sight seeing and taking pictures. It follows that there are a group of people., A group of people are sightseeing and taking pictures.  , There are a group of people.,"IsSightseeing(a),  IsTakingPictures(a)",IsGroupOfPeople(a),"[('IsSightseeing(a)', 'IsGroupOfPeople(a)'), ('  IsTakingPictures(a)', 'IsGroupOfPeople(a)')]","[(' A group of people', ' a group of people')]",[],IsSightseeing(a) and IsTakingPictures(a),IsGroupOfPeople(a),(IsSightseeing(a) and IsTakingPictures(a) & (forall a (IsSightseeing(a) -> IsGroupOfPeople(a))) & (forall a (  IsTakingPictures(a) -> IsGroupOfPeople(a)))) -> (IsGroupOfPeople(a)),(exists a (IsSightseeing(a) and IsTakingPictures(a)) & (forall e (IsSightseeing(e) -> IsGroupOfPeople(e))) & (forall f (  IsTakingPictures(f) -> IsGroupOfPeople(f)))) -> (exists a (IsGroupOfPeople(a)))
1,,"Army men grilling a lot of meat while his troop looks on. Hence, some of the people here have been in the armed forces."," ""Army men are grilling a lot of meat.""  "," ""Some of the people here have been in the armed forces.""","Grilling(b),  IsArmyMan(a)",IsInArmedForces(c),[],[],"[(' Army men', ' the armed forces')]",IsArmyMan(a) and Grilling(b),IsInArmedForces(c),(IsArmyMan(a) and Grilling(b)) -> (IsInArmedForces(c)),(exists b (exists a (IsArmyMan(a) and Grilling(b)))) -> (exists c (IsInArmedForces(c)))
1,,"The basketball player in red is challenging the player in white for the ball. Consequently, people are playing basketball."," ""The basketball player in red is challenging the player in white for the ball.""  "," ""People are playing basketball.""","IsInRed(a),  IsInWhite(b),  IsChallenging(a,b),  IsFor(c)","IsPlaying(d, e)",[],[],"[(' The basketball player in red', ' basketball'), (' the ball', ' basketball')]","IsInRed(a) and IsInWhite(b) and IsChallenging(a,b) and IsFor(c)","IsPlaying(d, e)","(exists c (exists a (IsInRed(a) and IsInWhite(b) and IsChallenging(a,b) and IsFor(c)))) -> (forall e (IsPlaying(d, e)))","(exists b (exists a (exists c (IsInRed(a) and IsInWhite(b) and IsChallenging(a,b) and IsFor(c))))) -> (exists d (exists e (IsPlaying(d, e))))"
1,,"A older man with gray hair wearing a gray suit next to a green and yellow taxi. Thus, a older man with gray hair wearing a gray suit."," ""An older man with gray hair is wearing a gray suit.""  "," ""An older man with gray hair is next to a green and yellow taxi.""","IsOlder(a),  HasGrayHair(a),  IsWearingGraySuit(a)","IsOlder(a),  HasGrayHair(a),  IsNextTo(a,d)",[],"[(' An older man', ' An older man'), (' gray hair', ' gray hair')]",[],IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a),"IsOlder(a) and HasGrayHair(a) and IsNextTo(a,d)","(IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a)) -> (IsOlder(a) and HasGrayHair(a) and IsNextTo(a,d))","(exists a (IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a))) -> (exists d (exists a (IsOlder(a) and HasGrayHair(a) and IsNextTo(a,d))))"
1,,"A man drops something, reaching for it while a woman in a beige blazer discusses an important topic. Hence, a woman is talking while a man is reaching for something."," ""A woman in a beige blazer discusses an important topic while a man drops something and reaches for it.""  "," ""A woman is talking while a man is reaching for something.""","IsInBeigeBlazer(c),  DiscussesTopic(c,d),  DropsSomething(a,b),  ReachesFor(a,b)","IsTalking(e),  ReachesFor(a,b)","[('  DiscussesTopic(c,d)', 'IsTalking(e)'), ('IsTalking(e)', '  DiscussesTopic(c,d)'), ('  ReachesFor(a,b)', 'IsTalking(e)'), ('IsTalking(e)', '  ReachesFor(a,b)')]","[(' a man', ' a man'), (' something', ' something')]","[(' A woman in a beige blazer', ' A woman')]","IsInBeigeBlazer(c) and DiscussesTopic(c,d) and DropsSomething(a,b) and ReachesFor(a,b)","IsTalking(e) and ReachesFor(a,b)","(exists c (IsInBeigeBlazer(c) and DiscussesTopic(c,d) and DropsSomething(a,b) and ReachesFor(a,b)) & (forall e (forall d (forall c (  DiscussesTopic(c,d) -> IsTalking(e))))) & (forall d (forall e (forall c (IsTalking(e) ->   DiscussesTopic(c,d))))) & (forall b (forall a (forall e (  ReachesFor(a,b) -> IsTalking(e))))) & (forall b (forall a (forall e (IsTalking(e) ->   ReachesFor(a,b)))))) -> (forall e (IsTalking(e) and ReachesFor(a,b)))","(exists b (exists a (exists d (exists c (IsInBeigeBlazer(c) and DiscussesTopic(c,d) and DropsSomething(a,b) and ReachesFor(a,b))))) & (forall g (forall h (forall f (  DiscussesTopic(f,g) -> IsTalking(h))))) & (forall k (forall i (forall j (IsTalking(i) ->   DiscussesTopic(j,k))))) & (forall m (forall n (forall l (  ReachesFor(l,m) -> IsTalking(n))))) & (forall o (forall p (forall q (IsTalking(o) ->   ReachesFor(p,q)))))) -> (exists b (exists a (exists e (IsTalking(e) and ReachesFor(a,b)))))"
1,,A crowd watching a skateboarder. This implies that a person is skateboarding.," ""A crowd is watching a skateboarder.""  "," ""A person is skateboarding.""","IsWatching(a,b)",IsSkateboarding(c),[],[],"[(' a skateboarder', ' A person')]","IsWatching(a,b)",IsSkateboarding(c),"(exists b (IsWatching(a,b))) -> (forall c (IsSkateboarding(c)))","(exists b (exists a (IsWatching(a,b)))) -> (exists c (IsSkateboarding(c)))"
1,,"A male guitar player is vigorously singing a not to a song in a poorly lit room. As a consequence, a man is singing indoors."," ""A male guitar player is singing vigorously indoors.""  "," ""A man is singing indoors.""","IsMale(b),  PlaysGuitar(b),  IsSingingVigorously(b),  IsIndoors(a)","IsMale(c),  IsSinging(c),  IsIndoors(a)","[('  PlaysGuitar(b)', '  IsSinging(c)'), ('  IsSingingVigorously(b)', '  IsSinging(c)')]","[(' indoors', ' indoors')]","[(' A male guitar player', ' A man')]",IsMale(b) and PlaysGuitar(b) and IsSingingVigorously(b) and IsIndoors(a),IsMale(c) and IsSinging(c) and IsIndoors(a),(exists b (IsMale(b) and PlaysGuitar(b) and IsSingingVigorously(b) and IsIndoors(a)) & (forall b (forall c (  PlaysGuitar(b) ->   IsSinging(c)))) & (forall b (forall c (  IsSingingVigorously(b) ->   IsSinging(c))))) -> (forall c (IsMale(c) and IsSinging(c) and IsIndoors(a))),(exists b (exists a (IsMale(b) and PlaysGuitar(b) and IsSingingVigorously(b) and IsIndoors(a))) & (forall d (forall e (  PlaysGuitar(d) ->   IsSinging(e)))) & (forall g (forall f (  IsSingingVigorously(f) ->   IsSinging(g))))) -> (exists a (exists c (IsMale(c) and IsSinging(c) and IsIndoors(a))))
1,,"The sun breaks through the trees as a child rides a swing. Thus, a child rides a swing in the daytime."," ""The sun breaks through the trees as a child rides a swing.""  "," ""A child rides a swing in the daytime.""","BreaksThrough(c, d),  Rides(a, b)","Rides(a, b),  IsInDaytime(a, e)",[],"[(' a child', ' A child'), (' a swing', ' a swing')]",[],"BreaksThrough(c, d) and Rides(a, b)","Rides(a, b) and IsInDaytime(a, e)","(BreaksThrough(c, d) and Rides(a, b)) -> (Rides(a, b) and IsInDaytime(a, e))","(exists b (exists a (exists d (exists c (BreaksThrough(c, d) and Rides(a, b)))))) -> (exists b (exists a (exists e (Rides(a, b) and IsInDaytime(a, e)))))"
