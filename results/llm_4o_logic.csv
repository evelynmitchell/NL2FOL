label,updated_label,articles,Claim,Implication,Referring Expressions - Claim,Referring Expressions - Implication,Property Implications,Equal Entities,Subset Entities,Claim Lfs,Implication Lfs,Logical Form,Logical Form 2
0,false causality,"Giving 10% of your income to the Church will free a child’s soul from Limbo into Heaven, so give your money!", Giving 10% of your income to the Church will free a child’s soul from Limbo into Heaven.  , You should give your money.,"IsGiven(a,b),  IsInLimbo(c),  IsInHeaven(c)","IsGiven(f, g)",[],[],"[(' Your income', ' You'), (' Your income', ' your money')]","(IsGiven(a,b) and IsInLimbo(c)) and IsInHeaven(c)","IsGiven(f, g)","(exists a ((IsGiven(a,b) and IsInLimbo(c)) and IsInHeaven(c))) -> (forall g (forall f (IsGiven(f, g))))","(exists b (exists c (exists a ((IsGiven(a,b) and IsInLimbo(c)) and IsInHeaven(c))))) -> (exists g (exists f (IsGiven(f, g))))"
0,appeal to emotion,"If everyone lived his or her life exactly like Jesus lived his life, the world would be a beautiful place!"," ""Jesus lived a beautiful life."""," ""Living like Jesus creates a beautiful world.""",LivedBeautifulLife(a),CreatesBeautifulWorld(x),[],"[(' Jesus', ' Jesus')]",[],LivedBeautifulLife(a),LivingLike(a) and CreatesBeautifulWorld(c),(LivedBeautifulLife(a)) -> (LivingLike(a) and CreatesBeautifulWorld(c)),(exists a (LivedBeautifulLife(a))) -> (exists c (exists a (LivingLike(a) and CreatesBeautifulWorld(c))))
0,appeal to emotion,"I know you don’t like the kitty-cat sweater that Grandma knitted for you, but she worked so hard on it and it will make her happy to see you wear it in the family holiday photo."," ""Grandma worked hard on the kitty-cat sweater.""  "," ""You should wear the kitty-cat sweater in the family holiday photo.""","WorkedHardOn(b, a)","IsWearing(c, a),  IsInFamilyHolidayPhoto(a, d)","[('IsWearing(c, a)', 'WorkedHardOn(b, a)')]","[(' kitty-cat sweater', ' kitty-cat sweater')]",[],"WorkedHardOn(b, a)","IsWearing(c, a) and IsInFamilyHolidayPhoto(a, d)","(WorkedHardOn(b, a) & (forall b (forall a (forall c (IsWearing(c, a) -> WorkedHardOn(b, a)))))) -> (IsWearing(c, a) and IsInFamilyHolidayPhoto(a, d))","(exists b (exists a (WorkedHardOn(b, a))) & (forall g (forall f (forall e (IsWearing(e,f) -> WorkedHardOn(g,f)))))) -> (exists a (exists d (exists c (IsWearing(c, a) and IsInFamilyHolidayPhoto(a, d)))))"
0,ad populum,"Dave wants you to break into the spooky cabin with him. “Everyone does it,” he claims. What fallacy has he committed?", Everyone breaks into the spooky cabin.  , You should break into the spooky cabin.,"BreaksInto(a, b),  IsSpooky(b)","BreaksInto(a, b),  IsSpooky(b)",[],"[(' You', ' Everyone'), (' spooky cabin', ' spooky cabin')]",[],"IsSpooky(b) and BreaksInto(a, b)","BreaksInto(a, b) and IsSpooky(b)","(IsSpooky(b) and BreaksInto(a, b)) -> (BreaksInto(a, b) and IsSpooky(b))","(exists b (exists a (IsSpooky(b) and BreaksInto(a, b)))) -> (exists b (exists a (BreaksInto(a, b) and IsSpooky(b))))"
0,fallacy of credibility,"Ms. Drayer, the smartest person in the universe, says the debate is the best class, therefore it is."," ""Ms. Drayer says the debate is the best class.""  "," ""The debate is the best class.""","Says(c, a),  IsTheBestClass(a, b)","IsTheBestClass(a, b)",[],"[(' the debate', ' The debate'), (' the best class', ' the best class')]",[],"Says(c, a) and IsTheBestClass(a, b)","IsTheBestClass(a, b)","(Says(c, a) and IsTheBestClass(a, b)) -> (IsTheBestClass(a, b))","(exists b (exists a (exists c (Says(c, a) and IsTheBestClass(a, b))))) -> (exists b (exists a (IsTheBestClass(a, b))))"
0,faulty generalization,Why did the blond cross the road?  Because she saw a shoe sale!," ""The blonde saw a shoe sale.""  "," ""The blonde crossed the road for a shoe sale.""",SawShoeSale(a),"CrossedRoad(a),  IsForShoeSale(a)",[],"[(' The blonde', ' The blonde')]",[],SawShoeSale(a),CrossedRoad(a) and IsForShoeSale(a),(SawShoeSale(a)) -> (CrossedRoad(a) and IsForShoeSale(a)),(exists a (SawShoeSale(a))) -> (exists a (CrossedRoad(a) and IsForShoeSale(a)))
0,appeal to emotion,"Timmy: Mom, what if I don’t believe in God?
Mom: Then you burn in Hell forever.  Why do you ask?
Timmy: No reason.
", Timmy does not believe in God   , Timmy burns in Hell forever,"DoesNotBelieveIn(a, b)","BurnsIn(a, c),  IsInHellForever(a)",[],"[(' Timmy', ' Timmy')]",[],"DoesNotBelieveIn(a, b)","BurnsIn(a, c) and IsInHellForever(a)","(DoesNotBelieveIn(a, b)) -> (BurnsIn(a, c) and IsInHellForever(a))","(exists b (exists a (DoesNotBelieveIn(a, b)))) -> (exists c (exists a (BurnsIn(a, c) and IsInHellForever(a))))"
0,false dilemma,"""If you never gave money to charity, then you must be a greedy millionaire."" What is this?"," ""You never gave money to charity."""," ""You are a greedy millionaire.""","Gave(b, c)","IsGreedy(d),  IsMillionaire(d)",[],"[(' You', ' You')]",[],"~Gave(b, c)",IsGreedy(d) and IsMillionaire(d),"(~Gave(b, c)) -> (IsGreedy(d) and IsMillionaire(d))","(exists b (exists c (~Gave(b, c)))) -> (exists d (IsGreedy(d) and IsMillionaire(d)))"
0,fallacy of extension,Caroline says that she is going to have lunch with the new girl. Jenna says that she can't believe that Caroline is ditching her old friends for the new girl.," ""Caroline is going to have lunch with the new girl.""  "," ""Caroline is ditching her old friends for the new girl.""","IsGoingToHaveLunchWith(a, b)","IsDitchingFor(a, b),  IsOldFriends(d)",[],"[(' Caroline', ' Caroline'), (' the new girl', ' the new girl')]",[],"IsGoingToHaveLunchWith(a, b)","IsDitchingFor(a, b) and IsOldFriends(d)","(IsGoingToHaveLunchWith(a, b)) -> (IsDitchingFor(a, b) and IsOldFriends(d))","(exists b (exists a (IsGoingToHaveLunchWith(a, b)))) -> (exists b (exists d (exists a (IsDitchingFor(a, b) and IsOldFriends(d)))))"
0,faulty generalization,"""You can never give anyone a break. If you do, they'll walk all over you."""," ""If you give anyone a break, they'll walk all over you.""  "," ""You should never give anyone a break.""","GivesBreak(a, b),  WalksOver(c, a)","GivesBreak(a, b)",[],"[(' You', ' You'), (' anyone', ' anyone'), (' you', ' You')]","[(' You', ' anyone'), (' anyone', ' You'), (' you', ' anyone')]","GivesBreak(a, b) and WalksOver(c, a)","GivesBreak(a, b) and ~IsGiven(a, b)","(exists b (exists a (GivesBreak(a, b) and WalksOver(c, a)))) -> (exists a (forall b (GivesBreak(a, b) and ~IsGiven(a, b))))","(exists b (exists c (exists a (GivesBreak(a, b) and WalksOver(c, a))))) -> (exists b (exists a (GivesBreak(a, b) and ~IsGiven(a, b))))"
0,false causality,"Believing that ""runs"" occur to statistically independent phenomena such as routine wheel spirits.", Runs occur to statistically independent phenomena such as routine wheel spins.  , Runs occur predictably.,"OccurDueTo(a, b),  AreRoutineWheelSpins(c)",OccurPredictably(d),[],[],[],"OccurDueTo(a, b) and AreRoutineWheelSpins(c)",OccurPredictably(d),"(OccurDueTo(a, b) and AreRoutineWheelSpins(c)) -> (OccurPredictably(d))","(exists b (exists c (exists a (OccurDueTo(a, b) and AreRoutineWheelSpins(c))))) -> (exists d (OccurPredictably(d)))"
0,false causality,"I broke a mirror earlier in the day, and then I received an F on my history final. Therefore, I received the F because I broke the mirror.", I broke a mirror and received an F on my history final.  , Breaking a mirror causes receiving an F on a history final.,"Broke(a),  ReceivedF(b)","Broke(a),  CausesReceivingF(c, d)",[],"[(' A mirror', ' A mirror')]","[(' my history final', ' a history final')]",Broke(a) and ReceivedF(b),"Broke(a) and CausesReceivingF(c, d)","(exists b (Broke(a) and ReceivedF(b))) -> (forall d (Broke(a) and CausesReceivingF(c, d)))","(exists b (exists a (Broke(a) and ReceivedF(b)))) -> (exists c (exists d (exists a (Broke(a) and CausesReceivingF(c, d)))))"
0,fallacy of extension,"Charlie: I think we should put more money into schools. Quality public education is so important.
Bob: So you’re saying we should cut military spending and spend it instead on more spiral notebooks and crayons? I guess you want our country to be a weak, defenseless target for terrorists.
Charlie: Creo que deberíamos invertir más dinero en las escuelas. La educación pública de calidad es muy importante.

Bob: ¿Entonces estás diciendo que deberíamos recortar el gasto militar y gastarlo en más cuadernos de espiral y crayones? Supongo que quiere que nuestro país sea un objetivo débil e indefenso para los terroristas.", Quality public education is very important.," Investing more money into schools will make the country a weak, defenseless target for terrorists.",IsImportant(a),"IsInvestedIn(b, c),  IsWeak(d),  IsDefenseless(d),  IsTargetFor(d, e)",[],[],"[(' Quality public education', ' schools')]",IsImportant(a),"IsInvestedIn(b, c) and (IsWeak(d) and IsDefenseless(d) and IsTargetFor(d, e))","(exists a (IsImportant(a))) -> (forall c (IsInvestedIn(b, c) and (IsWeak(d) and IsDefenseless(d) and IsTargetFor(d, e))))","(exists a (IsImportant(a))) -> (exists e (exists b (exists d (exists c (IsInvestedIn(b, c) and (IsWeak(d) and IsDefenseless(d) and IsTargetFor(d, e)))))))"
0,false causality,"Cellphones weren’t invented before I was born. Now, they are everywhere! Therefore, cellphones were created because I was born.", Cellphones are everywhere., Cellphones were created because I was born.,AreEverywhere(a),"WereCreated(a),  WasBorn(b)",[],"[(' Cellphones', ' Cellphones')]",[],AreEverywhere(a),WasBorn(b) and WereCreated(a),(AreEverywhere(a)) -> (WasBorn(b) and WereCreated(a)),(exists a (AreEverywhere(a))) -> (exists b (exists a (WasBorn(b) and WereCreated(a))))
0,ad hominem,Ms. Baker assigned me a lot of homework because she’s a witch!," ""Ms. Baker assigned a lot of homework and Ms. Baker is a witch.""  "," ""Ms. Baker assigned a lot of homework.""","AssignedHomework(a, b),  IsWitch(a)","AssignedHomework(a, b)",[],"[(' Ms. Baker', ' Ms. Baker'), (' a lot of homework', ' a lot of homework')]",[],"AssignedHomework(a, b) and IsWitch(a)","AssignedHomework(a, b)","(AssignedHomework(a, b) and IsWitch(a)) -> (AssignedHomework(a, b))","(exists b (exists a (AssignedHomework(a, b) and IsWitch(a)))) -> (exists b (exists a (AssignedHomework(a, b))))"
0,fallacy of credibility,"My dad went to school, so he knows everything about the education system."," ""Dad went to school.""  "," ""Dad knows everything about the education system.""",IsAtSchool(a),KnowsAboutEducationSystem(a),[],"[(' Dad', ' Dad')]","[(' school', ' the education system')]",IsAtSchool(a),KnowsAboutEducationSystem(a),(IsAtSchool(a)) -> (KnowsAboutEducationSystem(a)),(exists a (IsAtSchool(a))) -> (exists a (KnowsAboutEducationSystem(a)))
0,ad populum,Everyone is doing the Low-Carb Diet., Everyone is doing the Low-Carb Diet.  , You should do the Low-Carb Diet.,IsDoingLowCarbDiet(a),ShouldDo(b),[],[],[],IsDoingLowCarbDiet(a),ShouldDo(b),(IsDoingLowCarbDiet(a)) -> (ShouldDo(b)),(exists a (IsDoingLowCarbDiet(a))) -> (exists b (ShouldDo(b)))
0,fallacy of extension,"Parent: You need to clean out your backpack.
Child: You know I have ADD! Why can’t you just accept me as I am?", The child has ADD.  , The parent should accept the child as the child is.,HasADD(a),"AcceptsAsIs(b, c)",[],[],[],HasADD(a),"AcceptsAsIs(b, c)","(HasADD(a)) -> (AcceptsAsIs(b, c))","(exists a (HasADD(a))) -> (exists b (exists c (AcceptsAsIs(b, c))))"
0,fallacy of credibility,"X has been around for years now.
Y is new.
Therefore, Y is better than X.", Y is new  , Y is better than X,IsNew(a),"IsBetterThan(a, b)",[],"[(' Y', ' Y')]",[],IsNew(a),"IsBetterThan(a, b)","(IsNew(a)) -> (IsBetterThan(a, b))","(exists a (IsNew(a))) -> (exists b (exists a (IsBetterThan(a, b))))"
0,false causality,"""Right when I sneezed, the power went off. I must've caused the outage."" Bragged Zohaw."," ""Zohaw sneezed and the power went off."""," ""Zohaw caused the power outage.""","Sneezed(a),  PowerWentOff(b)",CausedPowerOutage(a),[],"[(' Zohaw', ' Zohaw')]",[],Sneezed(a) and PowerWentOff(b),CausedPowerOutage(a),(Sneezed(a) and PowerWentOff(b)) -> (CausedPowerOutage(a)),(exists b (exists a (Sneezed(a) and PowerWentOff(b)))) -> (exists a (CausedPowerOutage(a)))
0,equivocation,"I like my steak rare. But I don’t care for aardvark steak, even though it’s the rarest steak in the world.", Aardvark steak is the rarest steak in the world.  , I don't like aardvark steak.,"IsRarest(a),  IsInWorld(a)",DoesNotLike(x),[],"[(' Aardvark steak', ' Aardvark steak'), (' Aardvark steak', ' steak')]",[],IsRarest(a) and IsInWorld(a),DoesNotLike(x),(IsRarest(a) and IsInWorld(a)) -> (DoesNotLike(x)),(exists a (IsRarest(a) and IsInWorld(a))) -> (exists x (DoesNotLike(x)))
0,faulty generalization,"If you allow the students to redo this one test, they will always want to redo all future tests"," ""The students want to redo this one test.""  "," ""Students will always want to redo all future tests.""","WantsToRedo(a, b)","WantsToRedo(a, c)",[],"[(' The students', ' Students')]",[],"WantsToRedo(a, b)","WantsToRedo(a, c)","(WantsToRedo(a, b)) -> (WantsToRedo(a, c))","(exists b (exists a (WantsToRedo(a, b)))) -> (exists c (exists a (WantsToRedo(a, c))))"
0,fallacy of relevance,"There is no need for additional taxes for education. Every year we throw more money into education, and all they do is hire more management and build more buildings. None of the money actually reaches the classroom or is really used for education.", More money is spent on hiring management and building construction in education.  , Additional taxes for education are unnecessary.,"IsSpentOn(b, c),  IsSpentOn(b, d)","IsFor(e, a),  IsUnnecessary(e)",[],"[(' education', ' education')]",[],"IsSpentOn(b, c) and IsSpentOn(b, d)","IsFor(e, a) and IsUnnecessary(e)","(IsSpentOn(b, c) and IsSpentOn(b, d)) -> (IsFor(e, a) and IsUnnecessary(e))","(exists b (exists d (exists c (IsSpentOn(b, c) and IsSpentOn(b, d))))) -> (exists a (exists e (IsFor(e, a) and IsUnnecessary(e))))"
0,false causality,Believing that the cause of the Reformation was simply Martin Luther posting his theses," ""The cause of the Reformation was Martin Luther posting his theses.""  "," ""The Reformation was caused by Martin Luther posting his theses.""","PostedTheses(a, b),  IsCauseOf(c, Reformation)","PostedTheses(a, c),  IsCausedBy(b, a)",[],"[(' Martin Luther', ' Martin Luther'), (' The Reformation', ' his theses'), (' his theses', ' his theses')]","[(' Martin Luther', ' The Reformation'), (' his theses', ' Martin Luther')]","PostedTheses(a, b) and IsCauseOf(c, Reformation)","PostedTheses(a, c) and IsCausedBy(b, a)","(exists b (exists a (PostedTheses(a, b) and IsCauseOf(c, Reformation)))) -> (exists a (forall b (PostedTheses(a, c) and IsCausedBy(b, a))))","(exists b (exists c (exists a (PostedTheses(a, b) and IsCauseOf(c, Reformation))))) -> (exists b (exists c (exists a (PostedTheses(a, c) and IsCausedBy(b, a)))))"
0,false causality,The party was going great! Then Gerald showed up and little by little people started collecting their coats and heading home. Gerald ruined the party., Gerald ruined the party.  , People left the party because Gerald showed up.,"Ruined(a, b)","Left(c, b),  ShowedUp(a)","[('Left(c, b)', 'Ruined(a, b)'), ('Ruined(a, b)', '  ShowedUp(a)'), ('  ShowedUp(a)', 'Ruined(a, b)')]","[(' Gerald', ' Gerald'), (' the party', ' the party')]","[(' Gerald', ' People')]","Ruined(a, b)","ShowedUp(a) and Left(c, b)","(exists a (Ruined(a, b)) & (forall b (forall a (forall c (Left(c, b) -> Ruined(a, b))))) & (forall b (forall a (Ruined(a, b) ->   ShowedUp(a)))) & (forall b (forall a (  ShowedUp(a) -> Ruined(a, b))))) -> (forall c (ShowedUp(a) and Left(c, b)))","(exists b (exists a (Ruined(a, b))) & (forall f (forall d (forall e (Left(d,e) -> Ruined(f,e))))) & (forall h (forall g (Ruined(g,h) ->   ShowedUp(g)))) & (forall i (forall j (  ShowedUp(i) -> Ruined(i,j))))) -> (exists b (exists c (exists a (ShowedUp(a) and Left(c, b)))))"
0,fallacy of logic,"I can’t stop eating these chocolates.  I really love chocolate, or I seriously lack willpower.  I know I really love chocolate; therefore, I cannot lack willpower."," ""I really love chocolate."""," ""I cannot lack willpower.""",LovesChocolate(a),HasWillpower(a),[],"[(' I', ' I')]",[],LovesChocolate(a),~HasWillpower(a),(LovesChocolate(a)) -> (~HasWillpower(a)),(exists a (LovesChocolate(a))) -> (exists a (~HasWillpower(a)))
0,false causality,"Shortly after MySpace became popular, U.S. soldiers found Saddam Hussein.", MySpace became popular shortly before U.S. soldiers found Saddam Hussein.  , MySpace becoming popular is related to U.S. soldiers finding Saddam Hussein.,"BecamePopular(a),  Found(c, b)","BecamePopular(a),  Found(c, b)",[],"[(' MySpace', ' MySpace'), (' U.S. soldiers', ' U.S. soldiers'), (' Saddam Hussein', ' Saddam Hussein')]",[],"BecamePopular(a) and Found(c, b)","BecamePopular(a) and Found(c, b)","(BecamePopular(a) and Found(c, b)) -> (BecamePopular(a) and Found(c, b))","(exists b (exists c (exists a (BecamePopular(a) and Found(c, b))))) -> (exists b (exists c (exists a (BecamePopular(a) and Found(c, b)))))"
0,false causality,Jimmy isn't at school today. He must be on a family trip.," ""Jimmy isn't at school today.""  "," ""Jimmy is on a family trip.""","IsNotAt(a, b)","IsOn(a, c)",[],"[(' Jimmy', ' Jimmy')]",[],"IsNotAt(a, b)","IsOn(a, c)","(IsNotAt(a, b)) -> (IsOn(a, c))","(exists b (exists a (IsNotAt(a, b)))) -> (exists c (exists a (IsOn(a, c))))"
0,circular reasoning,"I am athletic because I run, and I run because I'm athletic.", I am athletic and I run.  , Athletic people run.,"IsAthletic(a),  Runs(a)","IsAthletic(b),  Runs(b)",[],[],[],IsAthletic(a) and Runs(a),IsAthletic(b) and Runs(b),(IsAthletic(a) and Runs(a)) -> (IsAthletic(b) and Runs(b)),(exists a (IsAthletic(a) and Runs(a))) -> (exists b (IsAthletic(b) and Runs(b)))
0,false causality,You know Jane Fonda’s exercise videos must be worth the money. Look at the great shape she’s in.," ""Jane Fonda is in great shape.""  "," ""Jane Fonda’s exercise videos are worth the money.""",IsInGreatShape(a),IsWorthTheMoney(c),[],[],"[(' Jane Fonda', "" Jane Fonda's exercise videos"")]",IsInGreatShape(a),IsWorthTheMoney(c),(exists a (IsInGreatShape(a))) -> (forall c (IsWorthTheMoney(c))),(exists a (IsInGreatShape(a))) -> (exists c (IsWorthTheMoney(c)))
0,fallacy of credibility,Albert Einstein was extremely impressed with this theory.," ""Albert Einstein was extremely impressed with this theory.""  "," ""The theory is highly remarkable.""","IsImpressedWith(a, b)",IsRemarkable(c),"[('IsImpressedWith(a, b)', 'IsRemarkable(c)')]",[],[],"IsImpressedWith(a, b)",IsRemarkable(c),"(IsImpressedWith(a, b) & (forall b (forall c (forall a (IsImpressedWith(a, b) -> IsRemarkable(c)))))) -> (IsRemarkable(c))","(exists b (exists a (IsImpressedWith(a, b))) & (forall f (forall d (forall e (IsImpressedWith(d,e) -> IsRemarkable(f)))))) -> (exists c (IsRemarkable(c)))"
0,false causality,“I sneezed exactly at the same time the power went off. My sneeze must’ve done something to make the power go off. “," ""I sneezed at the same time the power went off."""," ""The sneeze made the power go off.""","Sneezed(b),  PowerWentOff(a)","MadePowerGoOff(c),  PowerWentOff(a)",[],"[(' the power', ' the power')]",[],Sneezed(b) and PowerWentOff(a),MadePowerGoOff(c) and PowerWentOff(a),(Sneezed(b) and PowerWentOff(a)) -> (MadePowerGoOff(c) and PowerWentOff(a)),(exists b (exists a (Sneezed(b) and PowerWentOff(a)))) -> (exists a (exists c (MadePowerGoOff(c) and PowerWentOff(a))))
0,faulty generalization,"It’s getting late, and we still have to decide on the school budget. What do you say we just leave it as is and we can call it a night?", It is getting late and we have to decide on the school budget.  , Leave the school budget as it is.,"IsLate(b),  HaveToDecideOn(b, a)",LeaveAsIs(a),[],"[(' the school budget', ' School budget')]",[],"IsLate(b) and HaveToDecideOn(b, a)",LeaveAsIs(a),"(IsLate(b) and HaveToDecideOn(b, a)) -> (LeaveAsIs(a))","(exists b (exists a (IsLate(b) and HaveToDecideOn(b, a)))) -> (exists a (LeaveAsIs(a)))"
0,ad hominem,"Speaker 1 (Democrat): “Donald Trump is a known adulterer. It reflects badly on his character, and suggests he might not be trustworthy.”
Speaker 2 (Republican): “What about Bill Clinton? You didn’t seem to care when he cheated.”"," ""Donald Trump is a known adulterer.""  "," ""Donald Trump might not be trustworthy.""",IsAdulterer(a),IsNotTrustworthy(a),"[('IsAdulterer(a)', 'IsNotTrustworthy(a)')]","[(' Donald Trump', ' Donald Trump')]",[],IsAdulterer(a),~IsTrustworthy(a),(IsAdulterer(a) & (forall a (IsAdulterer(a) -> IsNotTrustworthy(a)))) -> (~IsTrustworthy(a)),(exists a (IsAdulterer(a)) & (forall c (IsAdulterer(c) -> IsNotTrustworthy(c)))) -> (exists a (~IsTrustworthy(a)))
0,ad hominem,"I hope I presented my argument clearly.  Now, my opponent will attempt to refute my argument by his own fallacious, incoherent, illogical version of history."," ""My opponent's version of history is fallacious, incoherent, and illogical."""," ""My opponent's argument is invalid.""","IsFallacious(a),  IsIncoherent(a),  IsIllogical(a)",IsInvalid(b),[],[],[],IsFallacious(a) and IsIncoherent(a) and IsIllogical(a),IsInvalid(b),(IsFallacious(a) and IsIncoherent(a) and IsIllogical(a)) -> (IsInvalid(b)),(exists a (IsFallacious(a) and IsIncoherent(a) and IsIllogical(a))) -> (exists b (IsInvalid(b)))
0,false causality,"Every time we sacrifice virgins, it rains. Therefore, sacrificing virgins causes it to rain."," ""Every time we sacrifice virgins, it rains.""  "," ""Sacrificing virgins causes it to rain.""","IsSacrificed(a),  CausesRain(a)","IsSacrificed(a),  CausesRain(a)",[],"[(' Virgins', ' Virgins')]",[],IsSacrificed(a) and CausesRain(a),IsSacrificed(a) and CausesRain(a),(IsSacrificed(a) and CausesRain(a)) -> (IsSacrificed(a) and CausesRain(a)),(exists a (IsSacrificed(a) and CausesRain(a))) -> (exists a (IsSacrificed(a) and CausesRain(a)))
0,ad hominem,"Salesman: This car gets better than average gas mileage and is one of the most reliable cars according to Consumer Reports.
Will: I doubt it—you obviously just want to sell me that car.
"," ""The car gets better than average gas mileage and is one of the most reliable cars according to Consumer Reports.""  "," ""The salesman wants to sell Will that car.""","GetsBetterGasMileage(a, b),  IsOneOfMostReliable(a, c),  AccordingTo(a, d)","WantsToSell(e, f, g)","[('  IsOneOfMostReliable(a, c)', 'WantsToSell(e, f, g)')]",[],[],"GetsBetterGasMileage(a, b) and IsOneOfMostReliable(a, c) and AccordingTo(a, d)","WantsToSell(e, f, g)","(GetsBetterGasMileage(a, b) and IsOneOfMostReliable(a, c) and AccordingTo(a, d) & (forall c (forall f (forall a (forall e (forall g (  IsOneOfMostReliable(a, c) -> WantsToSell(e, f, g)))))))) -> (WantsToSell(e, f, g))","(exists b (exists c (exists d (exists a (GetsBetterGasMileage(a, b) and IsOneOfMostReliable(a, c) and AccordingTo(a, d))))) & (forall h (forall l (forall i (forall k (forall j (  IsOneOfMostReliable(h,i) -> WantsToSell(j,k,l)))))))) -> (exists g (exists f (exists e (WantsToSell(e, f, g)))))"
0,fallacy of relevance,Labor unions in America are just as bad as Russia under Stalin!, Labor unions in America are as bad as Russia under Stalin.  , Labor unions in America are extremely oppressive.,"IsInAmerica(a),  IsUnderStalin(b)","IsInAmerica(c),  IsOppressive(c)","[('  IsUnderStalin(b)', '  IsOppressive(c)')]",[],[],IsInAmerica(a) and IsUnderStalin(b),IsInAmerica(c) and IsOppressive(c),(IsInAmerica(a) and IsUnderStalin(b) & (forall b (forall c (  IsUnderStalin(b) ->   IsOppressive(c))))) -> (IsInAmerica(c) and IsOppressive(c)),(exists b (exists a (IsInAmerica(a) and IsUnderStalin(b))) & (forall d (forall e (  IsUnderStalin(d) ->   IsOppressive(e))))) -> (exists c (IsInAmerica(c) and IsOppressive(c)))
0,ad populum,"""Everyone was driving over the speed limit, so I shouldn't have gotten a ticket for it!"" is an example of which logical fallacy?", Everyone was driving over the speed limit.  , I should not have gotten a ticket for driving over the speed limit.,"IsDrivingOverSpeedLimit(b),  IsSpeedLimit(a)","IsGivenTicket(c, d),  IsDrivingOverSpeedLimit(c),  IsSpeedLimit(a)",[],"[(' speed limit', ' speed limit')]","[(' Everyone', ' I')]",IsDrivingOverSpeedLimit(b),"IsDrivingOverSpeedLimit(c) and ~IsGivenTicket(c, d)","(exists b (IsDrivingOverSpeedLimit(b))) -> (forall c (IsDrivingOverSpeedLimit(c) and ~IsGivenTicket(c, d)))","(exists b (IsDrivingOverSpeedLimit(b))) -> (exists d (exists c (IsDrivingOverSpeedLimit(c) and ~IsGivenTicket(c, d))))"
0,ad hominem,Why would you trust Paris Hilton to sell health food? She drinks and parties and has multiple partners.," ""Paris Hilton drinks, parties, and has multiple partners."""," ""Paris Hilton cannot be trusted to sell health food.""","Drinks(a),  Parties(a),  HasMultiplePartners(a)","CannotBeTrusted(a),  Sells(c)","[('CannotBeTrusted(a)', 'Drinks(a)'), ('CannotBeTrusted(a)', '  Parties(a)')]","[(' Paris Hilton', ' Paris Hilton')]",[],Drinks(a) and Parties(a) and HasMultiplePartners(a),CannotBeTrusted(a) and ~Sells(c),(Drinks(a) and Parties(a) and HasMultiplePartners(a) & (forall a (CannotBeTrusted(a) -> Drinks(a))) & (forall a (CannotBeTrusted(a) ->   Parties(a)))) -> (CannotBeTrusted(a) and ~Sells(c)),(exists a (Drinks(a) and Parties(a) and HasMultiplePartners(a)) & (forall d (CannotBeTrusted(d) -> Drinks(d))) & (forall e (CannotBeTrusted(e) ->   Parties(e)))) -> (exists c (exists a (CannotBeTrusted(a) and ~Sells(c))))
0,false causality,"“Yesterday, I walked under a ladder with an open umbrella indoors while spilling salt in front of a black cat. And I forgot to knock on wood with my lucky dice. That must be why I’m having such a bad day today. It’s bad luck.”"," ""I walked under a ladder, had an open umbrella indoors, spilled salt in front of a black cat, and forgot to knock on wood with lucky dice."""," ""I'm having a bad day because of bad luck.""","WalkedUnder(a),  HasOpenUmbrella(b),  SpilledSaltInFrontOf(c, d),  ForgotToKnockOnWood(e),  HasLuckyDice(f)","HasBadDay(g, h),  HasBadLuck(g, i)","[('  SpilledSaltInFrontOf(c, d)', 'HasBadDay(g, h)')]",[],[],"WalkedUnder(a) and HasOpenUmbrella(b) and SpilledSaltInFrontOf(c, d) and ForgotToKnockOnWood(e) and HasLuckyDice(f)","HasBadDay(g, h) and HasBadLuck(g, i)","(WalkedUnder(a) and HasOpenUmbrella(b) and SpilledSaltInFrontOf(c, d) and ForgotToKnockOnWood(e) and HasLuckyDice(f) & (forall h (forall g (forall d (forall c (  SpilledSaltInFrontOf(c, d) -> HasBadDay(g, h))))))) -> (HasBadDay(g, h) and HasBadLuck(g, i))","(exists c (exists f (exists a (exists b (exists e (exists d (WalkedUnder(a) and HasOpenUmbrella(b) and SpilledSaltInFrontOf(c, d) and ForgotToKnockOnWood(e) and HasLuckyDice(f))))))) & (forall m (forall j (forall k (forall l (  SpilledSaltInFrontOf(j,k) -> HasBadDay(l,m))))))) -> (exists i (exists h (exists g (HasBadDay(g, h) and HasBadLuck(g, i)))))"
0,faulty generalization,"A car makes less pollution than a bus. Therefore, cars are less of a pollution problem than buses"," ""A car makes less pollution than a bus.""  "," ""Cars are less of a pollution problem than buses.""","MakesLessPollutionThan(a, b)","IsLessOfPollutionProblemThan(c, e)",[],[],"[(' A car', ' Cars'), (' a bus', ' buses')]","MakesLessPollutionThan(a, b)","IsLessOfPollutionProblemThan(c, e)","(exists b (exists a (MakesLessPollutionThan(a, b)))) -> (forall e (forall c (IsLessOfPollutionProblemThan(c, e))))","(exists b (exists a (MakesLessPollutionThan(a, b)))) -> (exists e (exists c (IsLessOfPollutionProblemThan(c, e))))"
0,appeal to emotion,"Preys on people’s emotions and sensitivities, can turn into a slippery slope"," ""Preying on people's emotions and sensitivities can turn into a slippery slope."""," ""Preying on people's emotions leads to a slippery slope.""","IsPreyedOn(a),  IsPreyedOn(c),  TurnsInto(b)","IsPreyedOn(a),  LeadsTo(b)","[('  IsPreyedOn(c)', '  LeadsTo(b)')]","[("" People's emotions"", "" People's emotions""), (' slippery slope', ' slippery slope')]",[],(IsPreyedOn(a) and IsPreyedOn(c)) and TurnsInto(b),IsPreyedOn(a) and LeadsTo(b),((IsPreyedOn(a) and IsPreyedOn(c)) and TurnsInto(b) & (forall b (forall c (  IsPreyedOn(c) ->   LeadsTo(b))))) -> (IsPreyedOn(a) and LeadsTo(b)),(exists b (exists c (exists a ((IsPreyedOn(a) and IsPreyedOn(c)) and TurnsInto(b)))) & (forall d (forall e (  IsPreyedOn(d) ->   LeadsTo(e))))) -> (exists b (exists a (IsPreyedOn(a) and LeadsTo(b))))
0,fallacy of logic,"Bats are mammals. Bats can fly. Pigs are also mammals, therefore pigs can fly."," ""Bats are mammals and bats can fly. Pigs are mammals.""  "," ""Pigs can fly.""","IsMammal(b),  CanFly(b),  IsMammal(a)",CanFly(a),[],"[(' Pigs', ' mammals'), (' pigs', ' Pigs')]",[],IsMammal(b) and CanFly(b) and IsMammal(a),CanFly(a),(IsMammal(b) and CanFly(b) and IsMammal(a)) -> (CanFly(a)),(exists b (exists a (IsMammal(b) and CanFly(b) and IsMammal(a)))) -> (exists a (CanFly(a)))
0,intentional,The Geo Metro is a superior car because it averages 43 miles per gallon., The Geo Metro averages 43 miles per gallon.  , The Geo Metro is a superior car.,Averages43MilesPerGallon(a),IsSuperiorCar(a),[],"[(' The Geo Metro', ' The Geo Metro')]",[],Averages43MilesPerGallon(a),IsSuperiorCar(a),(Averages43MilesPerGallon(a)) -> (IsSuperiorCar(a)),(exists a (Averages43MilesPerGallon(a))) -> (exists a (IsSuperiorCar(a)))
0,fallacy of relevance,"“While you may have concerns about my votes about the environment, I can assure you that I am an open minded individual. What we should really discuss is my record on votes that expanded educational opportunities for all children."""," ""I am an open-minded individual."""," ""My votes about the environment are not as important as my record on votes that expanded educational opportunities for all children.""",IsOpenMinded(a),"AreAbout(c, d),  AreNotAsImportant(c, e),  AreRelatedTo(f, g),  AreFor(h)",[],[],[],IsOpenMinded(a),"(AreAbout(c, d) and AreNotAsImportant(c, e)) and (AreRelatedTo(f, g) and AreFor(h))","(IsOpenMinded(a)) -> ((AreAbout(c, d) and AreNotAsImportant(c, e)) and (AreRelatedTo(f, g) and AreFor(h)))","(exists a (IsOpenMinded(a))) -> (exists h (exists c (exists f (exists e (exists g (exists d ((AreAbout(c, d) and AreNotAsImportant(c, e)) and (AreRelatedTo(f, g) and AreFor(h)))))))))"
0,intentional,"Fish are the easiest pets to keep; they are inexpensive and require no maintenance at all. Plus, they are really pretty and soothing to watch."," Fish are inexpensive, require no maintenance, and are pretty and soothing to watch.  ", Fish are the easiest pets to keep.,"IsInexpensive(a),  RequiresNoMaintenance(a),  IsPretty(a),  IsSoothingToWatch(a)",IsTheEasiestToKeep(a),"[('IsTheEasiestToKeep(a)', 'IsInexpensive(a)'), ('IsTheEasiestToKeep(a)', '  RequiresNoMaintenance(a)')]","[(' Fish', ' Fish')]","[(' Fish', ' pets')]",IsInexpensive(a) and RequiresNoMaintenance(a) and IsPretty(a) and IsSoothingToWatch(a),IsTheEasiestToKeep(a),(IsInexpensive(a) and RequiresNoMaintenance(a) and IsPretty(a) and IsSoothingToWatch(a) & (forall a (IsTheEasiestToKeep(a) -> IsInexpensive(a))) & (forall a (IsTheEasiestToKeep(a) ->   RequiresNoMaintenance(a)))) -> (IsTheEasiestToKeep(a)),(exists a (IsInexpensive(a) and RequiresNoMaintenance(a) and IsPretty(a) and IsSoothingToWatch(a)) & (forall c (IsTheEasiestToKeep(c) -> IsInexpensive(c))) & (forall d (IsTheEasiestToKeep(d) ->   RequiresNoMaintenance(d)))) -> (exists a (IsTheEasiestToKeep(a)))
0,intentional,I am only slightly obese.  That is perfectly normal here in America., Being slightly obese is perfectly normal in America.  , Being slightly obese is acceptable in America.,"IsObese(x),  IsNormal(x),  IsInAmerica(x)","IsObese(x),  IsAcceptable(x),  IsInAmerica(x)",[],"[(' America', ' America')]",[],IsObese(x) and IsNormal(x) and IsInAmerica(x),IsObese(x) and IsInAmerica(x) and IsAcceptable(x),(IsObese(x) and IsNormal(x) and IsInAmerica(x)) -> (IsObese(x) and IsInAmerica(x) and IsAcceptable(x)),(exists x (IsObese(x) and IsNormal(x) and IsInAmerica(x))) -> (exists x (IsObese(x) and IsInAmerica(x) and IsAcceptable(x)))
0,ad populum,"Most people think the world is flat, therefore it is flat.", Most people think the world is flat.  , The world is flat.,"IsFlat(a),  ThinksFlat(b, a)",IsFlat(a),[],"[(' the world', ' The world')]",[],"ThinksFlat(b, a)",IsFlat(a),"(ThinksFlat(b, a)) -> (IsFlat(a))","(exists b (exists a (ThinksFlat(b, a)))) -> (exists a (IsFlat(a)))"
0,appeal to emotion,You have to give me a passing grade. I spent 150 hours on that project and missed every party this quarter.," ""I spent 150 hours on that project and missed every party this quarter.""  "," ""You have to give me a passing grade.""","SpentHoursOn(a, b),  MissedParty(a, c)","Give(e, f, g)",[],[],[],"SpentHoursOn(a, b) and MissedParty(a, c)","Give(e, f, g)","(SpentHoursOn(a, b) and MissedParty(a, c)) -> (Give(e, f, g))","(exists b (exists c (exists a (SpentHoursOn(a, b) and MissedParty(a, c))))) -> (exists g (exists f (exists e (Give(e, f, g)))))"
0,ad populum,"I guess I should buy my 12 year old daughter an iPhone. Everyone at her school has one, and I want her to fit in with the other kids.", Every kid at the daughter's school has an iPhone.  , You should buy the 12-year-old daughter an iPhone.,HasIPhone(b),"Buy(d, a),  Is12YearOld(e)",[],"[(' iPhone.', ' iPhone')]",[],HasIPhone(b),"Is12YearOld(e) and Buy(d, a)","(HasIPhone(b)) -> (Is12YearOld(e) and Buy(d, a))","(exists b (HasIPhone(b))) -> (exists a (exists d (exists e (Is12YearOld(e) and Buy(d, a)))))"
0,intentional,Kerry’s plan will raise taxes by at least $900 billion his first hundred days., Kerry's plan will raise taxes by at least $900 billion in his first hundred days.  , Taxes will increase by $900 billion in Kerry's first hundred days.,"WillRaise(x, a),  IsAtLeast(b),  InFirstHundredDays(x, d)","WillIncrease(a),  IsBy(b),  InKerryFirstHundredDays(a, e)","[('  IsAtLeast(b)', 'WillIncrease(a)')]","[(' taxes', ' Taxes'), (' $900 billion', ' $900 billion')]","[("" Kerry's plan"", "" Kerry's first hundred days"")]","WillRaise(c, a) and IsAtLeast(b) and InFirstHundredDays(c, d)","WillIncrease(a) and IsBy(b) and InKerryFirstHundredDays(a, e)","(exists c (WillRaise(c, a) and IsAtLeast(b) and InFirstHundredDays(c, d)) & (forall b (forall a (  IsAtLeast(b) -> WillIncrease(a))))) -> (forall e (WillIncrease(a) and IsBy(b) and InKerryFirstHundredDays(a, e)))","(exists b (exists a (exists d (exists c (WillRaise(c, a) and IsAtLeast(b) and InFirstHundredDays(c, d))))) & (forall h (forall g (  IsAtLeast(g) -> WillIncrease(h))))) -> (exists b (exists e (exists a (WillIncrease(a) and IsBy(b) and InKerryFirstHundredDays(a, e)))))"
0,fallacy of extension,"If you told a person, ""I think we should all stay inside to bend the curve of COVID-19"" and they replied, ""so I guess you want people to lose their jobs then,"" what logical fallacy are they using?"," ""I think we should all stay inside to bend the curve of COVID-19.""  "," ""You want people to lose their jobs.""","Think(a),  ShouldStayInside(b),  BendsCurve(c),  IsCOVID19(c)","Wants(e, JobsLost(f,a))",[],"[(' people', ' I')]",[],Think(a) and ShouldStayInside(b) and (BendsCurve(c) and IsCOVID19(c)),"Wants(e, JobsLost(f,a))","(Think(a) and ShouldStayInside(b) and (BendsCurve(c) and IsCOVID19(c))) -> (Wants(e, JobsLost(f,a)))","(exists b (exists c (exists a (Think(a) and ShouldStayInside(b) and (BendsCurve(c) and IsCOVID19(c)))))) -> (exists a (exists f (exists e (Wants(e, JobsLost(f,a))))))"
0,appeal to emotion,"Power lines cause cancer. I met a little boy with cancer who lived just 20 miles from a power line who looked into my eyes and said, in his weak voice, “Please do whatever you can so that other kids won’t have to go through what I am going through.” I urge you to vote for this bill to tear down all power lines and replace them with monkeys on treadmills.", A little boy with cancer lived 20 miles from a power line., Power lines should be replaced with monkeys on treadmills.,"HasCancer(b),  LivedNearPowerLine(b),  Is20MilesFromPowerLine(b)","ShouldBeReplacedWith(a, c),  AreOn(d, c)",[],"[(' power line', ' Power lines')]",[],HasCancer(b) and LivedNearPowerLine(b) and Is20MilesFromPowerLine(b),"ShouldBeReplacedWith(a, c) and AreOn(d, c)","(HasCancer(b) and LivedNearPowerLine(b) and Is20MilesFromPowerLine(b)) -> (ShouldBeReplacedWith(a, c) and AreOn(d, c))","(exists b (HasCancer(b) and LivedNearPowerLine(b) and Is20MilesFromPowerLine(b))) -> (exists c (exists d (exists a (ShouldBeReplacedWith(a, c) and AreOn(d, c)))))"
0,ad hominem,"Student: Hey, Professor Moore, we shouldn't have to read this book by Freud. Everyone knows he used cocaine."," ""Freud used cocaine.""  "," ""Students shouldn't have to read this book by Freud.""","Used(a, b)","ShouldRead(c, d),  IsBy(d, a)",[],"[(' Freud', ' Freud')]",[],"Used(a, b)","ShouldRead(c, d) and ~IsBy(d, a)","(Used(a, b)) -> (ShouldRead(c, d) and ~IsBy(d, a))","(exists b (exists a (Used(a, b)))) -> (exists a (exists d (exists c (ShouldRead(c, d) and ~IsBy(d, a)))))"
0,false causality,"Our house was burglarized right after that new family moved in next door. Therefore, that new family must have been involved.", The new family moved in next door.  , The new family was involved in the burglary.,"IsNew(a),  MovedIn(a)","IsNew(a),  InvolvedIn(a, c)","[('  MovedIn(a)', 'IsNew(a)')]","[(' The new family', ' The new family')]",[],IsNew(a) and MovedIn(a),"IsNew(a) and InvolvedIn(a, c)","(IsNew(a) and MovedIn(a) & (forall a (  MovedIn(a) -> IsNew(a)))) -> (IsNew(a) and InvolvedIn(a, c))","(exists a (IsNew(a) and MovedIn(a)) & (forall d (  MovedIn(d) -> IsNew(d)))) -> (exists c (exists a (IsNew(a) and InvolvedIn(a, c))))"
0,circular reasoning,"Witchcraft remains our most urgent spiritual problem because it threatens
our very souls."," ""Witchcraft is our most urgent spiritual problem.""  "," ""Witchcraft threatens our very souls.""",IsProblem(a),"Threatens(a, c)","[('IsProblem(a)', 'Threatens(a, c)'), ('Threatens(a, c)', 'IsProblem(a)')]","[(' Witchcraft', ' Witchcraft')]",[],IsProblem(a),"Threatens(a, c)","(IsProblem(a) & (forall c (forall a (IsProblem(a) -> Threatens(a, c)))) & (forall c (forall a (Threatens(a, c) -> IsProblem(a))))) -> (Threatens(a, c))","(exists a (IsProblem(a)) & (forall d (forall e (IsProblem(d) -> Threatens(d,e)))) & (forall g (forall f (Threatens(f,g) -> IsProblem(f))))) -> (exists c (exists a (Threatens(a, c))))"
0,false dilemma,"Senator Jill: ""We'll have to cut education funding this year.""
Senator Bill: ""Why?""
Senator Jill: ""Well, either we cut the social programs or we live with a huge deficit and we can't live with the deficit."""," ""We have to cut education funding this year."""," ""We have to cut the social programs.""","HaveToCut(b),  IsThisYear(c)",HaveToCut(d),[],[],"[(' education funding', ' Social programs')]",HaveToCut(b) and IsThisYear(c),HaveToCut(d),(exists b (HaveToCut(b) and IsThisYear(c))) -> (forall d (HaveToCut(d))),(exists b (exists c (HaveToCut(b) and IsThisYear(c)))) -> (exists d (HaveToCut(d)))
0,appeal to emotion,"""You'll make the right decision because you have something that not many people do: you have heart.""?"," ""You have heart, which not many people have."""," ""You'll make the right decision.""","HasHeart(a),  ManyPeopleDoNotHave(b)",WillMakeDecision(a),[],"[(' You', ' You')]",[],HasHeart(a) and ManyPeopleDoNotHave(b),WillMakeDecision(a),(HasHeart(a) and ManyPeopleDoNotHave(b)) -> (WillMakeDecision(a)),(exists b (exists a (HasHeart(a) and ManyPeopleDoNotHave(b)))) -> (exists a (WillMakeDecision(a)))
0,faulty generalization,Christine has a terrible experience with a boyfriend. She decides that all boys are mean. This is an example of which logical fallacy?," ""Christine has a terrible experience with a boyfriend."""," ""All boys are mean.""","HasTerribleExperience(a),  HasBoyfriend(a)",IsMean(d),[],[],"[(' boyfriend', ' Boys')]",HasTerribleExperience(a) and HasBoyfriend(a),Boys(d) and IsMean(d),(HasTerribleExperience(a) and HasBoyfriend(a)) -> (Boys(d) and IsMean(d)),(exists a (HasTerribleExperience(a) and HasBoyfriend(a))) -> (exists d (Boys(d) and IsMean(d)))
0,circular reasoning,Smoking pot is against the law because it's wrong; I know it's wrong because it is against the law.," ""Smoking pot is against the law."""," ""Smoking pot is wrong.""",IsAgainstTheLaw(a),IsWrong(a),[],"[(' Smoking pot', ' Smoking pot')]",[],IsAgainstTheLaw(a),IsWrong(a),(IsAgainstTheLaw(a)) -> (IsWrong(a)),(exists a (IsAgainstTheLaw(a))) -> (exists a (IsWrong(a)))
0,circular reasoning,"""You can't give me a D because I'm an A student!"""," ""I am an A student.""  "," ""I cannot receive a D grade.""",IsAStudent(a),CannotReceiveDGrade(a),"[('CannotReceiveDGrade(a)', 'IsAStudent(a)')]","[(' I', ' I')]",[],IsAStudent(a),CannotReceiveDGrade(a),(IsAStudent(a) & (forall a (CannotReceiveDGrade(a) -> IsAStudent(a)))) -> (CannotReceiveDGrade(a)),(exists a (IsAStudent(a)) & (forall d (CannotReceiveDGrade(d) -> IsAStudent(d)))) -> (exists a (CannotReceiveDGrade(a)))
0,fallacy of logic,People who buy stocks are no different from people who bet on horse racing. They both risk their money with little chance of making a big profit., People who buy stocks risk their money with little chance of making a big profit.  , Buying stocks is like betting on horse racing.,"BuysStocks(a),  RisksMoney(a, b),  HasLittleChanceOfMakingBigProfit(a, c)","Buys(d),  BetsOn(e)","[('Buys(d)', 'BuysStocks(a)'), ('Buys(d)', '  RisksMoney(a, b)'), ('Buys(d)', '  HasLittleChanceOfMakingBigProfit(a, c)')]",[],[],"BuysStocks(a) and (RisksMoney(a, b) and HasLittleChanceOfMakingBigProfit(a, c))",Buys(d) and BetsOn(e),"(BuysStocks(a) and (RisksMoney(a, b) and HasLittleChanceOfMakingBigProfit(a, c)) & (forall d (forall a (Buys(d) -> BuysStocks(a)))) & (forall b (forall d (forall a (Buys(d) ->   RisksMoney(a, b))))) & (forall c (forall d (forall a (Buys(d) ->   HasLittleChanceOfMakingBigProfit(a, c)))))) -> (Buys(d) and BetsOn(e))","(exists b (exists c (exists a (BuysStocks(a) and (RisksMoney(a, b) and HasLittleChanceOfMakingBigProfit(a, c))))) & (forall g (forall f (Buys(f) -> BuysStocks(g)))) & (forall i (forall h (forall j (Buys(h) ->   RisksMoney(i,j))))) & (forall m (forall k (forall l (Buys(k) ->   HasLittleChanceOfMakingBigProfit(l,m)))))) -> (exists d (exists e (Buys(d) and BetsOn(e))))"
0,appeal to emotion,"I cannot get a job because the public education system failed me;  I have to steal to  survive.  It is society's fault, not mine.", The public education system failed me., I have to steal to survive due to society's fault.,"Failed(a, b)","HaveToSteal(a),  Survive(a),  IsDueTo(c)",[],"[(' me', ' I')]",[],"Failed(a, b)",(HaveToSteal(a) and Survive(a)) and IsDueTo(c),"(Failed(a, b)) -> ((HaveToSteal(a) and Survive(a)) and IsDueTo(c))","(exists b (exists a (Failed(a, b)))) -> (exists c (exists a ((HaveToSteal(a) and Survive(a)) and IsDueTo(c))))"
0,faulty generalization,"Trump presents a dark image of America if Clinton is elected, with “Syrian refugees flooding in, illegal immigrants convicted of crimes staying.”", Syrian refugees are flooding in and illegal immigrants convicted of crimes are staying.  , America will be dark if Clinton is elected.,"AreFloodingIn(a),  AreConvictedOfCrimes(b),  AreStaying(b)","IsDark(d),  IsElected(e)","[('  IsElected(e)', 'AreFloodingIn(a)')]",[],[],AreFloodingIn(a) and (AreConvictedOfCrimes(b) and AreStaying(b)),IsElected(e) and IsDark(d),(AreFloodingIn(a) and (AreConvictedOfCrimes(b) and AreStaying(b)) & (forall a (forall e (  IsElected(e) -> AreFloodingIn(a))))) -> (IsElected(e) and IsDark(d)),(exists b (exists a (AreFloodingIn(a) and (AreConvictedOfCrimes(b) and AreStaying(b)))) & (forall g (forall f (  IsElected(f) -> AreFloodingIn(g))))) -> (exists d (exists e (IsElected(e) and IsDark(d))))
0,ad hominem,"Charlie: Fast food is filled with salt, fat, and added sugars. We need better regulation of the industry.
Bob: That my be, but you're such a hypocrite! I saw you devour a Triple-Baconator, super-sized fries, and 64oz of soda yesterday!"," ""Charlie ate a Triple-Baconator, super-sized fries, and 64oz of soda."""," ""We need better regulation of the fast food industry.""","Ate(a, b),  Ate(a, c),  Ate(a, d)","NeedsBetterRegulation(e, g)",[],[],"[(' Triple-Baconator', ' fast food industry'), (' fries', ' fast food industry')]","Ate(a, b) and Ate(a, c) and Ate(a, d)","NeedsBetterRegulation(e, g)","(exists c (exists b (Ate(a, b) and Ate(a, c) and Ate(a, d)))) -> (forall g (NeedsBetterRegulation(e, g)))","(exists b (exists c (exists d (exists a (Ate(a, b) and Ate(a, c) and Ate(a, d)))))) -> (exists g (exists e (NeedsBetterRegulation(e, g))))"
0,faulty generalization,Christine has a terrible experience with a boyfriend. She decides that all boys are mean., Christine's boyfriend was mean., All boys are mean.,IsMean(a),IsMean(b),[],[],"[("" Christine's boyfriend"", ' All boys')]",IsMean(a),IsBoy(b) and IsMean(b),(exists a (IsMean(a))) -> (forall b (IsBoy(b) and IsMean(b))),(exists a (IsMean(a))) -> (exists b (IsBoy(b) and IsMean(b)))
0,intentional,"Barbara believes the marketing agency's office is haunted. The cleaning crew once said they heard a other-worldly noise late at night. Since no one could prove that it wasn't a ghost, the office must be haunted.", The marketing agency's office is haunted.  , The office is haunted.,IsHaunted(a),IsHaunted(b),[],[],"[("" The marketing agency's office"", ' The office')]",IsHaunted(a),IsHaunted(b),(exists a (IsHaunted(a))) -> (forall b (IsHaunted(b))),(exists a (IsHaunted(a))) -> (exists b (IsHaunted(b)))
0,ad populum,"I am voting for Pepitone for President because the rest of my family is voting for her, and I don't want to be the only one not doing so.", The rest of my family is voting for Pepitone for President.  , I should vote for Pepitone for President.,"IsVotingFor(c, a),  IsCandidateForPresident(a, b)","IsVotingFor(d, a),  IsCandidateForPresident(a, b)",[],"[(' Pepitone', ' Pepitone'), (' President', ' President')]",[],"IsVotingFor(c, a) and IsCandidateForPresident(a, b)","IsVotingFor(d, a) and IsCandidateForPresident(a, b)","(IsVotingFor(c, a) and IsCandidateForPresident(a, b)) -> (IsVotingFor(d, a) and IsCandidateForPresident(a, b))","(exists b (exists a (exists c (IsVotingFor(c, a) and IsCandidateForPresident(a, b))))) -> (exists b (exists d (exists a (IsVotingFor(d, a) and IsCandidateForPresident(a, b)))))"
0,fallacy of credibility,"“I admire the president for being a good role model.” REPLY: “But the New York Times says he’s a lousy role model, so you’re wrong.”"," ""The New York Times says the president is a lousy role model.""  "," ""The president is not a good role model.""","IsLousyRoleModel(a),  IsSaidBy(c, a)",IsNotAGoodRoleModel(a),"[('IsLousyRoleModel(a)', 'IsNotAGoodRoleModel(a)'), ('IsNotAGoodRoleModel(a)', 'IsLousyRoleModel(a)')]","[(' the president', ' The president'), (' a good role model', ' role model')]",[],"IsSaidBy(c, a) and IsLousyRoleModel(a)",IsNotAGoodRoleModel(a),"(IsSaidBy(c, a) and IsLousyRoleModel(a) & (forall a (IsLousyRoleModel(a) -> IsNotAGoodRoleModel(a))) & (forall a (IsNotAGoodRoleModel(a) -> IsLousyRoleModel(a)))) -> (IsNotAGoodRoleModel(a))","(exists a (exists c (IsSaidBy(c, a) and IsLousyRoleModel(a))) & (forall f (IsLousyRoleModel(f) -> IsNotAGoodRoleModel(f))) & (forall g (IsNotAGoodRoleModel(g) -> IsLousyRoleModel(g)))) -> (exists a (IsNotAGoodRoleModel(a)))"
0,faulty generalization,The numbers on gun violence speak for themselves. We should ban guns in the country!," ""The numbers on gun violence speak for themselves.""  "," ""The country should ban guns.""",RelateToGunViolence(a),"Ban(c, d)",[],[],[],RelateToGunViolence(a),"Ban(c, d)","(RelateToGunViolence(a)) -> (Ban(c, d))","(exists a (RelateToGunViolence(a))) -> (exists d (exists c (Ban(c, d))))"
0,false causality,"“The temperature has dropped this morning, and I also have a headache. Therefore, the cold weather must be causing my headache. “"," ""The temperature has dropped this morning, and I have a headache.""  "," ""The cold weather causes my headache.""","HasDropped(a),  HasHeadache(b)","IsCold(d),  CausesHeadache(d, e)",[],[],[],HasDropped(a) and HasHeadache(b),"IsCold(d) and CausesHeadache(d, e)","(HasDropped(a) and HasHeadache(b)) -> (IsCold(d) and CausesHeadache(d, e))","(exists b (exists a (HasDropped(a) and HasHeadache(b)))) -> (exists d (exists e (IsCold(d) and CausesHeadache(d, e))))"
0,ad hominem,"My teacher says the Earth is flat, so it definitely is flat."," ""My teacher says the Earth is flat.""  "," ""The Earth is flat.""","SaysFlatEarth(b, a)",IsFlat(a),[],"[(' the Earth', ' The Earth')]",[],"SaysFlatEarth(b, a)",IsFlat(a),"(SaysFlatEarth(b, a)) -> (IsFlat(a))","(exists b (exists a (SaysFlatEarth(b, a)))) -> (exists a (IsFlat(a)))"
0,equivocation,"The fallacy of equivocation occurs when a key term or phrase in an argument is used in an ambiguous way, with one meaning in one portion of the argument and then another meaning in another portion of the argument.", A key term or phrase in an argument is used in an ambiguous way.  , The fallacy of equivocation occurs.,"IsUsedAmbiguously(a),  IsInArgument(a, b)",IsOccurring(c),"[('IsUsedAmbiguously(a)', 'IsOccurring(c)'), ('IsOccurring(c)', 'IsUsedAmbiguously(a)')]",[],[],"IsUsedAmbiguously(a) and IsInArgument(a, b)",IsOccurring(c),"(IsUsedAmbiguously(a) and IsInArgument(a, b) & (forall c (forall a (IsUsedAmbiguously(a) -> IsOccurring(c)))) & (forall a (forall c (IsOccurring(c) -> IsUsedAmbiguously(a))))) -> (IsOccurring(c))","(exists b (exists a (IsUsedAmbiguously(a) and IsInArgument(a, b))) & (forall d (forall e (IsUsedAmbiguously(d) -> IsOccurring(e)))) & (forall g (forall f (IsOccurring(f) -> IsUsedAmbiguously(g))))) -> (exists c (IsOccurring(c)))"
0,faulty generalization,When you have too little or unrepresentative data to make claim., There is too little or unrepresentative data to make a claim.  , A claim cannot be made.,"IsTooLittle(a),  IsUnrepresentative(a),  MakesClaim(b)",CannotBeMade(c),[],[],[],(IsTooLittle(a) or IsUnrepresentative(a)) and ~MakesClaim(b),CannotBeMade(c),((IsTooLittle(a) or IsUnrepresentative(a)) and ~MakesClaim(b)) -> (CannotBeMade(c)),(exists b (exists a ((IsTooLittle(a) or IsUnrepresentative(a)) and ~MakesClaim(b)))) -> (exists c (CannotBeMade(c)))
0,ad populum,"The majority of people believe advertisers should spend more money on billboards, so billboards are objectively the best form of advertisement."," ""The majority of people believe advertisers should spend more money on billboards.""  "," ""Billboards are the best form of advertisement.""","Believes(b, SpendMoreMoney(c, a))",IsBestFormOfAdvertisement(a),[],"[(' billboards', ' Billboards')]","[(' billboards', ' form of advertisement')]","Believes(b, SpendMoreMoney(c, a))",IsBestFormOfAdvertisement(a),"(Believes(b, SpendMoreMoney(c, a))) -> (IsBestFormOfAdvertisement(a))","(exists b (exists a (exists c (Believes(b, SpendMoreMoney(c, a)))))) -> (exists a (IsBestFormOfAdvertisement(a)))"
0,faulty generalization,"If we ban Hummers because they are bad for the environment, eventually the government will ban all cars, so we should not ban Hummers.", Hummers are bad for the environment.  , The government will ban all cars.,IsBadForEnvironment(a),"WillBan(c, d)",[],[],"[(' Hummers', ' all cars')]",IsBadForEnvironment(a),"WillBan(c, d)","(exists a (IsBadForEnvironment(a))) -> (forall d (WillBan(c, d)))","(exists a (IsBadForEnvironment(a))) -> (exists d (exists c (WillBan(c, d))))"
0,ad hominem,"My opponent raised a good point, but can we trust him? I mean he just moved to town only 5 months ago, how much could he really know?"," ""My opponent just moved to town 5 months ago."""," ""We cannot trust my opponent.""","MovedTo(a, b)","CannotTrust(c, a)",[],"[(' My opponent', ' my opponent')]",[],"MovedTo(a, b)","CannotTrust(c, a)","(MovedTo(a, b)) -> (CannotTrust(c, a))","(exists b (exists a (MovedTo(a, b)))) -> (exists a (exists c (CannotTrust(c, a))))"
0,false dilemma,"Either you can save your money to buy a new car for yourself, or you can just take an Uber around for the rest of your life."," ""You can save money to buy a new car or take an Uber for the rest of your life.""  "," ""You will take an Uber for the rest of your life without saving money to buy a new car.""","SaveMoney(a, b),  BuyNewCar(a, c),  TakeUber(a, d),  ForRestOfLife(a, e)","TakeUber(a, d),  ForRestOfLife(a, e),  NotSaveMoney(a, b),  NotBuyNewCar(a, c)","[('  TakeUber(a, d)', '  NotBuyNewCar(a, c)')]","[(' You', ' You'), (' money', ' money'), (' a new car', ' a new car'), (' an Uber', ' an Uber'), (' your life', ' your life')]","[(' your life', ' You')]","(SaveMoney(a, b) and BuyNewCar(a, c)) or (TakeUber(a, d) and ForRestOfLife(a, e))","TakeUber(a, d) and ForRestOfLife(a, e) and NotSaveMoney(a, b) and NotBuyNewCar(a, c)","(exists e ((SaveMoney(a, b) and BuyNewCar(a, c)) or (TakeUber(a, d) and ForRestOfLife(a, e))) & (forall c (forall d (forall a (  TakeUber(a, d) ->   NotBuyNewCar(a, c)))))) -> (exists e (forall a (TakeUber(a, d) and ForRestOfLife(a, e) and NotSaveMoney(a, b) and NotBuyNewCar(a, c))))","(exists c (exists a (exists b (exists e (exists d ((SaveMoney(a, b) and BuyNewCar(a, c)) or (TakeUber(a, d) and ForRestOfLife(a, e))))))) & (forall h (forall g (forall f (  TakeUber(f,g) ->   NotBuyNewCar(f,h)))))) -> (exists c (exists a (exists b (exists e (exists d (TakeUber(a, d) and ForRestOfLife(a, e) and NotSaveMoney(a, b) and NotBuyNewCar(a, c)))))))"
0,false causality,"Matthieu was the only player on the team who didn't grow a playoff beard, and thus he ended up getting injured.", Matthieu was the only player on the team who didn't grow a playoff beard.  , Players who don't grow a playoff beard get injured.,"DidNotGrowPlayoffBeard(b),  IsOnTeam(c),  IsPlayer(c)","DoesNotGrowPlayoffBeard(d),  IsInjured(d)","[('DoesNotGrowPlayoffBeard(d)', 'DidNotGrowPlayoffBeard(b)')]","[(' playoff beard', ' playoff beard')]","[(' the only player on the team', ' Players')]",IsOnTeam(c) and IsPlayer(c) and (b = c) and DidNotGrowPlayoffBeard(b),DoesNotGrowPlayoffBeard(d) and IsInjured(d),(exists c (IsOnTeam(c) and IsPlayer(c) and (b = c) and DidNotGrowPlayoffBeard(b)) & (forall b (forall d (DoesNotGrowPlayoffBeard(d) -> DidNotGrowPlayoffBeard(b))))) -> (forall d (DoesNotGrowPlayoffBeard(d) and IsInjured(d))),(exists b (exists c (IsOnTeam(c) and IsPlayer(c) and (b = c) and DidNotGrowPlayoffBeard(b))) & (forall f (forall e (DoesNotGrowPlayoffBeard(e) -> DidNotGrowPlayoffBeard(f))))) -> (exists d (DoesNotGrowPlayoffBeard(d) and IsInjured(d)))
0,intentional,"John: Members of the UbaTuba White Men's Club are upstanding citizens of the community.
Marvin: Then why are there so many of these members in jail?
John: They were never true UbaTuba White Men's Club members.
Marvin: What’s a true UbaTuba White Men's Club member?
John: Those who don't go to jail.
", Many UbaTuba White Men's Club members are in jail.  , True UbaTuba White Men's Club members do not go to jail.,"IsMemberOfClub(b),  IsInJail(b)","IsTrueMemberOfClub(c),  DoesNotGoToJail(c)",[],"[(' jail', ' jail')]","[("" UbaTuba White Men's Club members"", "" True UbaTuba White Men's Club members"")]",IsMemberOfClub(b) and IsInJail(b),IsTrueMemberOfClub(c) and DoesNotGoToJail(c),(exists b (IsMemberOfClub(b) and IsInJail(b))) -> (forall c (IsTrueMemberOfClub(c) and DoesNotGoToJail(c))),(exists b (IsMemberOfClub(b) and IsInJail(b))) -> (exists c (IsTrueMemberOfClub(c) and DoesNotGoToJail(c)))
0,faulty generalization,"""Animal experimentation reduces our respect for life. If we don't respect life, we are likely to be more and more tolerant of violent acts like war and murder. Soon our society will become a battlefield in which everyone constantly fears for their lives. It will be the end of civilization. To prevent this terrible consequence, we should make animal experimentation illegal right now."""," ""Animal experimentation reduces our respect for life.""  "," ""Animal experimentation will end civilization""","Reduces(a, b)","WillEnd(a,c)",[],"[(' Animal experimentation', ' Animal experimentation')]",[],"Reduces(a, b)","WillEnd(a,c)","(Reduces(a, b)) -> (WillEnd(a,c))","(exists b (exists a (Reduces(a, b)))) -> (exists c (exists a (WillEnd(a,c))))"
0,false causality,You know Jane Fonda's exercise videos must be worth the money. Look at the great shape she's in.," ""Jane Fonda is in great shape.""  "," ""Jane Fonda's exercise videos are worth the money.""",IsInGreatShape(a),IsWorthTheMoney(a),[],"[("" Jane Fonda's exercise videos"", ' Jane Fonda')]",[],IsInGreatShape(a),IsWorthTheMoney(a),(IsInGreatShape(a)) -> (IsWorthTheMoney(a)),(exists a (IsInGreatShape(a))) -> (exists a (IsWorthTheMoney(a)))
0,faulty generalization,"Asians make lousy athletes, but do well at the Math Olympiad.", Asians do well at the Math Olympiad.  , Asians make lousy athletes.,"DoesWellAt(a, b)","MakeLousy(a, c)",[],"[(' Asians', ' Asians')]",[],"DoesWellAt(a, b)","MakeLousy(a, c)","(DoesWellAt(a, b)) -> (MakeLousy(a, c))","(exists b (exists a (DoesWellAt(a, b)))) -> (exists c (exists a (MakeLousy(a, c))))"
0,false dilemma,"“Caldwell Hall is in bad shape. Either we tear it down and put up a new building, or we continue to risk students’ safety. Obviously we shouldn’t risk anyone’s safety, so we must tear the building down.”", Caldwell Hall is in bad shape.  , The building must be torn down.,IsInBadShape(a),MustBeTornDown(b),[],[],[],IsInBadShape(a),MustBeTornDown(b),(IsInBadShape(a)) -> (MustBeTornDown(b)),(exists a (IsInBadShape(a))) -> (exists b (MustBeTornDown(b)))
0,faulty generalization,Did you really vote for Donald as class treasurer? Didn't you hear that his uncle was imprisoned for embezzling $1.5 million?," ""Donald’s uncle was imprisoned for embezzling $1.5 million.""  "," ""Donald should not be class treasurer.""","IsImprisoned(a),  Embezzled(a, b)",IsNotClassTreasurer(c),[],[],[],"IsImprisoned(a) and Embezzled(a, b)",IsNotClassTreasurer(c),"(IsImprisoned(a) and Embezzled(a, b)) -> (IsNotClassTreasurer(c))","(exists b (exists a (IsImprisoned(a) and Embezzled(a, b)))) -> (exists c (IsNotClassTreasurer(c)))"
0,fallacy of logic,"If the ozone layer is destroyed, many people will get cancer and suffer from other illnesses.  The ozone layer is being protected, not destroyed.  So, many people will be spared the pain of cancer and other illnesses."," The ozone layer is being protected, not destroyed.  ", Many people will be spared the pain of cancer and other illnesses.,"IsProtected(a),  IsNotDestroyed(a)","IsSparedPain(b, c),  IsSparedPain(b, d)","[('IsProtected(a)', 'IsSparedPain(b, c)'), ('IsSparedPain(b, c)', 'IsProtected(a)'), ('  IsNotDestroyed(a)', 'IsSparedPain(b, c)')]",[],[],IsProtected(a) and IsNotDestroyed(a),"IsSparedPain(b, c) and IsSparedPain(b, d)","(IsProtected(a) and IsNotDestroyed(a) & (forall b (forall c (forall a (IsProtected(a) -> IsSparedPain(b, c))))) & (forall b (forall a (forall c (IsSparedPain(b, c) -> IsProtected(a))))) & (forall b (forall c (forall a (  IsNotDestroyed(a) -> IsSparedPain(b, c)))))) -> (IsSparedPain(b, c) and IsSparedPain(b, d))","(exists a (IsProtected(a) and IsNotDestroyed(a)) & (forall g (forall f (forall e (IsProtected(e) -> IsSparedPain(f,g))))) & (forall i (forall h (forall j (IsSparedPain(h,i) -> IsProtected(j))))) & (forall m (forall k (forall l (  IsNotDestroyed(k) -> IsSparedPain(l,m)))))) -> (exists b (exists d (exists c (IsSparedPain(b, c) and IsSparedPain(b, d)))))"
0,faulty generalization,"Broccoli has significantly less fat than the leading candy bar! Plus, it's nowhere near as hot as Hot Cheetos!", Broccoli has significantly less fat than the leading candy bar., Broccoli is healthier than Hot Cheetos.,"HasLessFat(a, b)","IsHealthier(a, c)","[('IsHealthier(a, c)', 'HasLessFat(a, b)')]","[(' Broccoli', ' Broccoli')]",[],"HasLessFat(a, b)","IsHealthier(a, c)","(HasLessFat(a, b) & (forall b (forall c (forall a (IsHealthier(a, c) -> HasLessFat(a, b)))))) -> (IsHealthier(a, c))","(exists b (exists a (HasLessFat(a, b))) & (forall f (forall d (forall e (IsHealthier(d,e) -> HasLessFat(d,f)))))) -> (exists c (exists a (IsHealthier(a, c))))"
0,fallacy of relevance,You're complaining because you have to walk to school? I used to have to give my parents my entire paycheck.," ""I used to give my parents my entire paycheck.""  "," ""You should not complain about having to walk to school.""","UsedToGive(a, b, c)","ShouldNotComplain(d),  HasToWalkTo(e)",[],[],[],"UsedToGive(a, b, c)",ShouldNotComplain(d) and HasToWalkTo(e),"(UsedToGive(a, b, c)) -> (ShouldNotComplain(d) and HasToWalkTo(e))","(exists b (exists c (exists a (UsedToGive(a, b, c))))) -> (exists d (exists e (ShouldNotComplain(d) and HasToWalkTo(e))))"
0,fallacy of extension,Robot 2 (Blue) has been refuting all of Robot 1's (Orange) arguments. Robot 1 launches the above counterargument. What is this fallacy?, Robot 2 refutes all of Robot 1's arguments.  , Robot 1's counterargument contains a fallacy.,"Refutes(a, b)","Contains(c, d)",[],[],[],"Refutes(a, b)","Contains(c, d)","(Refutes(a, b)) -> (Contains(c, d))","(exists b (exists a (Refutes(a, b)))) -> (exists d (exists c (Contains(c, d))))"
0,ad hominem,Personally attacking someone to shift attention away from your views is, Personally attacking someone shifts attention away from your views  , You should personally attack someone to shift attention away from your views,"IsPersonallyAttacked(a),  IsAwayFrom(b)","IsPersonallyAttacked(a),  IsAwayFrom(b)",[],"[(' Someone', ' Someone'), (' your views', ' your views')]",[],IsPersonallyAttacked(a) and IsAwayFrom(b),IsPersonallyAttacked(a) and IsAwayFrom(b),(IsPersonallyAttacked(a) and IsAwayFrom(b)) -> (IsPersonallyAttacked(a) and IsAwayFrom(b)),(exists b (exists a (IsPersonallyAttacked(a) and IsAwayFrom(b)))) -> (exists b (exists a (IsPersonallyAttacked(a) and IsAwayFrom(b))))
0,ad hominem,"""She's such a mean teacher and person – that's why she wouldn't raise my grade ONE percent!"""," ""She is a mean teacher and person.""  "," ""She didn't raise my grade by one percent because she is mean.""","IsMean(a),  IsTeacher(a),  IsPerson(a)","DidNotRaiseGrade(a, d),  IsMean(a)","[('IsMean(a)', 'DidNotRaiseGrade(a, d)'), ('DidNotRaiseGrade(a, d)', 'IsMean(a)'), ('  IsTeacher(a)', '  IsMean(a)'), ('  IsPerson(a)', 'DidNotRaiseGrade(a, d)'), ('DidNotRaiseGrade(a, d)', '  IsPerson(a)'), ('  IsMean(a)', '  IsPerson(a)')]","[(' She', ' She')]",[],IsMean(a) and IsTeacher(a) and IsPerson(a),"DidNotRaiseGrade(a, d) and IsMean(a)","(IsMean(a) and IsTeacher(a) and IsPerson(a) & (forall d (forall a (IsMean(a) -> DidNotRaiseGrade(a, d)))) & (forall d (forall a (DidNotRaiseGrade(a, d) -> IsMean(a)))) & (forall a (  IsTeacher(a) ->   IsMean(a))) & (forall d (forall a (  IsPerson(a) -> DidNotRaiseGrade(a, d)))) & (forall d (forall a (DidNotRaiseGrade(a, d) ->   IsPerson(a)))) & (forall a (  IsMean(a) ->   IsPerson(a)))) -> (DidNotRaiseGrade(a, d) and IsMean(a))","(exists a (IsMean(a) and IsTeacher(a) and IsPerson(a)) & (forall f (forall e (IsMean(e) -> DidNotRaiseGrade(e,f)))) & (forall h (forall g (DidNotRaiseGrade(g,h) -> IsMean(g)))) & (forall i (  IsTeacher(i) ->   IsMean(i))) & (forall j (forall k (  IsPerson(j) -> DidNotRaiseGrade(j,k)))) & (forall m (forall l (DidNotRaiseGrade(l,m) ->   IsPerson(l)))) & (forall n (  IsMean(n) ->   IsPerson(n)))) -> (exists d (exists a (DidNotRaiseGrade(a, d) and IsMean(a))))"
0,appeal to emotion,"If you don't buy the black pencils, you will get made fun of. You will not be chosen for group projects.", You will get made fun of and not be chosen for group projects if you don't buy the black pencils., You should buy the black pencils.,"IsMadeFunOf(a),  IsNotChosenForGroupProjects(a),  BuysBlackPencils(a)",BuysBlackPencils(a),[],"[(' You', ' You'), (' black pencils', ' the black pencils')]",[],~BuysBlackPencils(a) and (IsMadeFunOf(a) and IsNotChosenForGroupProjects(a)),BuysBlackPencils(a),(~BuysBlackPencils(a) and (IsMadeFunOf(a) and IsNotChosenForGroupProjects(a))) -> (BuysBlackPencils(a)),(exists a (~BuysBlackPencils(a) and (IsMadeFunOf(a) and IsNotChosenForGroupProjects(a)))) -> (exists a (BuysBlackPencils(a)))
0,faulty generalization,"Jeff's mom is concerned when she finds out that he skipped class one day. She tells him that she is concerned that since he skipped one class, he will start skipping more frequently. Then he will drop out altogether, never graduate or get into college, and end up unemployed and living at home for the rest of his life. What type of fallacy has Jeff's mom committed?", Jeff skipped one class.  ," Jeff will drop out, never graduate, not get into college, end up unemployed, and live at home for the rest of his life.","Skipped(a, b)","WillDropOut(a),  WillNeverGraduate(a),  WillNotGetInto(a, c),  WillEndUpUnemployed(a),  WillLiveAt(a, d),  WillLiveFor(a, e)",[],"[(' Jeff', ' Jeff')]",[],"Skipped(a, b)","WillDropOut(a) and WillNeverGraduate(a) and WillNotGetInto(a, c) and WillEndUpUnemployed(a) and WillLiveAt(a, d) and WillLiveFor(a, e)","(Skipped(a, b)) -> (WillDropOut(a) and WillNeverGraduate(a) and WillNotGetInto(a, c) and WillEndUpUnemployed(a) and WillLiveAt(a, d) and WillLiveFor(a, e))","(exists b (exists a (Skipped(a, b)))) -> (exists e (exists c (exists d (exists a (WillDropOut(a) and WillNeverGraduate(a) and WillNotGetInto(a, c) and WillEndUpUnemployed(a) and WillLiveAt(a, d) and WillLiveFor(a, e))))))"
0,ad hominem,"How can you tell me I should exercise to lose weight? All you do is sit behind a desk all day. I've never seen you do a lick of exercise.

Identify the logical fallacy commited in this argument."," ""You sit behind a desk all day and never exercise.""  "," ""You cannot tell me to exercise to lose weight.""","SitsBehindDesk(a),  NeverExercises(a)","CannotTellToExercise(a, c),  HasWeight(a, d)",[],"[(' You', ' You')]",[],SitsBehindDesk(a) and NeverExercises(a),"CannotTellToExercise(a, c) and HasWeight(a, d)","(SitsBehindDesk(a) and NeverExercises(a)) -> (CannotTellToExercise(a, c) and HasWeight(a, d))","(exists a (SitsBehindDesk(a) and NeverExercises(a))) -> (exists c (exists d (exists a (CannotTellToExercise(a, c) and HasWeight(a, d)))))"
0,fallacy of logic,"""We both like music, so we should get married."""," ""We both like music.""  "," ""We should get married.""",LikesMusic(a),ShouldGetMarried(a),[],"[(' We', ' We')]",[],LikesMusic(a),ShouldGetMarried(a),(LikesMusic(a)) -> (ShouldGetMarried(a)),(exists a (LikesMusic(a))) -> (exists a (ShouldGetMarried(a)))
0,ad hominem,"Brandon: We should have tastier lunches!
Jaylen: Don't listen to him! He's a terrible person! I saw him trip another student and steal his lunch money!"," ""Brandon is a terrible person who tripped another student and stole the student's lunch money.""  "," ""We should not listen to Brandon.""","IsTerriblePerson(a),  Tripped(a, b),  Stole(a, c)",ShouldNotListenTo(a),"[('IsTerriblePerson(a)', 'ShouldNotListenTo(a)'), ('ShouldNotListenTo(a)', 'IsTerriblePerson(a)')]","[(' Brandon', ' Brandon')]",[],"IsTerriblePerson(a) and Tripped(a, b) and Stole(a, c)",ShouldNotListenTo(a),"(IsTerriblePerson(a) and Tripped(a, b) and Stole(a, c) & (forall a (IsTerriblePerson(a) -> ShouldNotListenTo(a))) & (forall a (ShouldNotListenTo(a) -> IsTerriblePerson(a)))) -> (ShouldNotListenTo(a))","(exists b (exists c (exists a (IsTerriblePerson(a) and Tripped(a, b) and Stole(a, c)))) & (forall e (IsTerriblePerson(e) -> ShouldNotListenTo(e))) & (forall f (ShouldNotListenTo(f) -> IsTerriblePerson(f)))) -> (exists a (ShouldNotListenTo(a)))"
0,ad hominem,Of course Marx' theories about the ideal society are bunk. The guy spent all his time in the library.," ""Marx spent all his time in the library.""  "," ""Marx's theories about the ideal society are bunk.""","SpentTimeIn(b, c)","TheoriesAbout(d, e)",[],[],[],"SpentTimeIn(b, c)","TheoriesAbout(d, e)","(SpentTimeIn(b, c)) -> (TheoriesAbout(d, e))","(exists b (exists c (SpentTimeIn(b, c)))) -> (exists d (exists e (TheoriesAbout(d, e))))"
0,fallacy of relevance,"I'm tailgating her, because she cut me off!", She cut me off.  , I am tailgating her.,"CutOff(a, b)","Tailgating(c, d)",[],[],[],"CutOff(a, b)","Tailgating(c, d)","(CutOff(a, b)) -> (Tailgating(c, d))","(exists b (exists a (CutOff(a, b)))) -> (exists d (exists c (Tailgating(c, d))))"
0,faulty generalization,President Petutti ordered a military strike that killed many civilians. He is no different than any other mass murder and he belongs in prison!, President Petutti ordered a military strike that killed many civilians., President Petutti is a mass murderer and belongs in prison.,"Ordered(a, b),  Killed(b, c)","IsMassMurderer(a),  BelongsIn(a, e)","[('IsMassMurderer(a)', 'Ordered(a, b)')]","[(' President Petutti', ' President Petutti')]",[],"Ordered(a, b) and Killed(b, c)","IsMassMurderer(a) and BelongsIn(a, e)","(Ordered(a, b) and Killed(b, c) & (forall b (forall a (IsMassMurderer(a) -> Ordered(a, b))))) -> (IsMassMurderer(a) and BelongsIn(a, e))","(exists b (exists c (exists a (Ordered(a, b) and Killed(b, c)))) & (forall g (forall f (IsMassMurderer(f) -> Ordered(f,g))))) -> (exists e (exists a (IsMassMurderer(a) and BelongsIn(a, e))))"
1,,"Coach talks with football player, other players and crowd in background. Thus, a football coach talks with his player in front of the team and the crowd.", A football coach talks with his player in front of the team and the crowd.  , A football coach talks with his player.,"TalksWith(a, b),  IsInFrontOf(a, c),  IsInFrontOf(a, d)","TalksWith(a, b)",[],"[(' Football coach', ' Football coach'), (' his player', ' his player')]",[],"TalksWith(a, b) and IsInFrontOf(a, c) and IsInFrontOf(a, d)","TalksWith(a, b)","(TalksWith(a, b) and IsInFrontOf(a, c) and IsInFrontOf(a, d)) -> (TalksWith(a, b))","(exists b (exists c (exists d (exists a (TalksWith(a, b) and IsInFrontOf(a, c) and IsInFrontOf(a, d)))))) -> (exists b (exists a (TalksWith(a, b))))"
1,,"Two men watching one man make a golf putt on the set of Sports Center. As a consequence, people watching sports."," ""Two men are watching one man make a golf putt on the set of Sports Center.""  "," ""People are watching sports.""","IsWatching(a,b),  IsMaking(b,c),  IsOnSet(d,e)","IsWatching(f,g)",[],[],"[(' Two men', ' People'), (' one man', ' People'), (' golf putt', ' sports'), (' set', ' sports')]","IsWatching(a,b) and IsMaking(b,c) and IsOnSet(d,e)","IsWatching(f,g)","(exists d (exists c (exists b (exists a (IsWatching(a,b) and IsMaking(b,c) and IsOnSet(d,e)))))) -> (forall g (forall f (IsWatching(f,g))))","(exists c (exists a (exists b (exists e (exists d (IsWatching(a,b) and IsMaking(b,c) and IsOnSet(d,e))))))) -> (exists g (exists f (IsWatching(f,g))))"
1,,"Six women wait to use a port-o-john in a field. Thus, women are outside."," ""Six women wait to use a port-o-john in a field.""  "," ""Women are outside.""","WaitsToUse(a, b),  IsIn(a, c)",IsOutside(d),"[('WaitsToUse(a, b)', 'IsOutside(d)'), ('  IsIn(a, c)', 'IsOutside(d)')]",[],"[(' Six women', ' Women')]","WaitsToUse(a, b) and IsIn(a, c)",IsOutside(d),"(exists a (WaitsToUse(a, b) and IsIn(a, c)) & (forall b (forall d (forall a (WaitsToUse(a, b) -> IsOutside(d))))) & (forall c (forall d (forall a (  IsIn(a, c) -> IsOutside(d)))))) -> (forall d (IsOutside(d)))","(exists b (exists c (exists a (WaitsToUse(a, b) and IsIn(a, c)))) & (forall g (forall f (forall e (WaitsToUse(e,f) -> IsOutside(g))))) & (forall i (forall h (forall j (  IsIn(h,i) -> IsOutside(j)))))) -> (exists d (IsOutside(d)))"
1,,Women wearing a black top and glasses speaking into a blue tipped microphone with another woman beside her writing. It follows that one woman speaking into a microphone while a second woman writes beside her.," ""A woman wearing a black top and glasses is speaking into a blue-tipped microphone, and another woman is writing beside her."""," ""One woman speaks into a microphone while a second woman writes beside her.""","WearsBlackTop(a),  WearsGlasses(a),  SpeaksInto(a, b),  WritesBeside(c, a)","SpeaksInto(d, e),  WritesBeside(f, d)","[('  WritesBeside(c, a)', 'SpeaksInto(d, e)'), ('SpeaksInto(d, e)', '  WritesBeside(c, a)')]",[],"[(' A woman wearing a black top and glasses', ' One woman'), (' blue-tipped microphone', ' microphone')]","WearsBlackTop(a) and WearsGlasses(a) and SpeaksInto(a, b) and WritesBeside(c, a)","SpeaksInto(d, e) and WritesBeside(f, d)","(exists b (exists a (WearsBlackTop(a) and WearsGlasses(a) and SpeaksInto(a, b) and WritesBeside(c, a))) & (forall e (forall a (forall d (forall c (  WritesBeside(c, a) -> SpeaksInto(d, e)))))) & (forall c (forall a (forall d (forall e (SpeaksInto(d, e) ->   WritesBeside(c, a))))))) -> (forall e (forall d (SpeaksInto(d, e) and WritesBeside(f, d))))","(exists b (exists c (exists a (WearsBlackTop(a) and WearsGlasses(a) and SpeaksInto(a, b) and WritesBeside(c, a)))) & (forall i (forall h (forall g (forall j (  WritesBeside(g,h) -> SpeaksInto(i,j)))))) & (forall m (forall k (forall l (forall n (SpeaksInto(k,l) ->   WritesBeside(m,n))))))) -> (exists f (exists d (exists e (SpeaksInto(d, e) and WritesBeside(f, d)))))"
1,,"One tan girl with a wool hat is running and leaning over an object, while another person in a wool hat is sitting on the ground. Therefore, a tan girl runs leans over an object."," ""A tan girl with a wool hat is running and leaning over an object.""  "," ""A tan girl runs and leans over an object.""","IsTan(b),  WearsWoolHat(b),  IsRunning(b),  IsLeaningOver(b, a)","IsTan(d),  Runs(d),  LeansOver(d, a)","[('IsTan(b)', '  Runs(d)'), ('  Runs(d)', 'IsTan(b)'), ('  IsRunning(b)', 'IsTan(d)'), ('IsTan(d)', '  IsRunning(b)'), ('  IsRunning(b)', '  Runs(d)'), ('  Runs(d)', '  IsRunning(b)'), ('  IsRunning(b)', '  LeansOver(d, a)'), ('  IsLeaningOver(b, a)', 'IsTan(d)'), ('  Runs(d)', '  IsLeaningOver(b, a)'), ('  IsLeaningOver(b, a)', '  LeansOver(d, a)'), ('  LeansOver(d, a)', '  IsLeaningOver(b, a)')]","[(' object', ' an object')]","[(' wool hat', ' an object')]","IsTan(b) and WearsWoolHat(b) and IsRunning(b) and IsLeaningOver(b, a)","IsTan(d) and Runs(d) and LeansOver(d, a)","(IsTan(b) and WearsWoolHat(b) and IsRunning(b) and IsLeaningOver(b, a) & (forall b (forall d (IsTan(b) ->   Runs(d)))) & (forall b (forall d (  Runs(d) -> IsTan(b)))) & (forall b (forall d (  IsRunning(b) -> IsTan(d)))) & (forall b (forall d (IsTan(d) ->   IsRunning(b)))) & (forall b (forall d (  IsRunning(b) ->   Runs(d)))) & (forall b (forall d (  Runs(d) ->   IsRunning(b)))) & (forall b (forall d (forall a (  IsRunning(b) ->   LeansOver(d, a))))) & (forall b (forall d (forall a (  IsLeaningOver(b, a) -> IsTan(d))))) & (forall b (forall d (forall a (  Runs(d) ->   IsLeaningOver(b, a))))) & (forall b (forall d (forall a (  IsLeaningOver(b, a) ->   LeansOver(d, a))))) & (forall b (forall d (forall a (  LeansOver(d, a) ->   IsLeaningOver(b, a)))))) -> (IsTan(d) and Runs(d) and LeansOver(d, a))","(exists b (exists a (IsTan(b) and WearsWoolHat(b) and IsRunning(b) and IsLeaningOver(b, a))) & (forall g (forall f (IsTan(f) ->   Runs(g)))) & (forall i (forall h (  Runs(h) -> IsTan(i)))) & (forall j (forall k (  IsRunning(j) -> IsTan(k)))) & (forall m (forall l (IsTan(l) ->   IsRunning(m)))) & (forall o (forall n (  IsRunning(n) ->   Runs(o)))) & (forall q (forall p (  Runs(p) ->   IsRunning(q)))) & (forall r (forall t (forall s (  IsRunning(r) ->   LeansOver(s,t))))) & (forall v (forall u (forall w (  IsLeaningOver(u,v) -> IsTan(w))))) & (forall y (forall z (forall x (  Runs(x) ->   IsLeaningOver(y,z))))) & (  IsLeaningOver({,|) ->   LeansOver(},|)) & (  LeansOver(~,) ->   IsLeaningOver(,))) -> (exists d (exists a (IsTan(d) and Runs(d) and LeansOver(d, a))))"
1,,A scientist studies a slide in order to work on her new creation. It follows that a scientist studies a slide that is related to her invention.," ""A scientist studies a slide related to her invention."""," ""A scientist works on her new creation.""","StudiesSlide(a),  RelatedToInvention(b, c)","WorksOn(a, d),  IsNewCreation(d)",[],"[(' A scientist', ' A scientist')]",[],"StudiesSlide(a) and RelatedToInvention(b, c)","WorksOn(a, d) and IsNewCreation(d)","(StudiesSlide(a) and RelatedToInvention(b, c)) -> (WorksOn(a, d) and IsNewCreation(d))","(exists b (exists c (exists a (StudiesSlide(a) and RelatedToInvention(b, c))))) -> (exists d (exists a (WorksOn(a, d) and IsNewCreation(d))))"
1,,"A red dog jumps and catches a tennis ball in its mouth. Consequently, a dog catching a ball.", A red dog jumps and catches a tennis ball.  , A dog catches a ball.,"IsRed(a),  Jumps(a),  Catches(b)",Catches(c),[],"[(' A dog', ' A red dog')]","[(' a tennis ball', ' a ball')]","IsRed(a) and Jumps(a) and Catches(a, b)","Catches(a, c)","(exists b (IsRed(a) and Jumps(a) and Catches(a, b))) -> (forall c (Catches(a, c)))","(exists b (exists a (IsRed(a) and Jumps(a) and Catches(a, b)))) -> (exists c (exists a (Catches(a, c))))"
1,,"A group of dogs stand in the snow. Thus, there are animals outdoors.", A group of dogs stand in the snow.  , There are animals outdoors.,"Stand(a),  IsInSnow(a)",IsOutdoors(c),"[('Stand(a)', 'IsOutdoors(c)'), ('  IsInSnow(a)', 'IsOutdoors(c)')]",[],"[(' Group of dogs', ' Animals')]",Stand(a) and IsInSnow(a),IsOutdoors(c),(exists a (Stand(a) and IsInSnow(a)) & (forall c (forall a (Stand(a) -> IsOutdoors(c)))) & (forall c (forall a (  IsInSnow(a) -> IsOutdoors(c))))) -> (forall c (IsOutdoors(c))),(exists a (Stand(a) and IsInSnow(a)) & (forall f (forall e (Stand(e) -> IsOutdoors(f)))) & (forall h (forall g (  IsInSnow(g) -> IsOutdoors(h))))) -> (exists c (IsOutdoors(c)))
1,,This person looks to be snowboarding on a very small pile of snow on a sunny cold day. This implies that young snowboarder sizing up their next jump.," ""This person is snowboarding on a very small pile of snow on a sunny cold day.""  "," ""The young snowboarder is sizing up the next jump.""","IsSnowboarding(a),  IsOnPileOfSnow(a, b),  IsSmallPileOfSnow(b),  IsSunnyDay(c),  IsColdDay(c)","IsYoung(d),  IsSizingUpJump(d, e)","[('IsYoung(d)', 'IsSnowboarding(a)')]",[],[],"IsSnowboarding(a) and IsOnPileOfSnow(a, b) and IsSmallPileOfSnow(b) and IsSunnyDay(c) and IsColdDay(c)","IsYoung(d) and IsSizingUpJump(d, e)","(IsSnowboarding(a) and IsOnPileOfSnow(a, b) and IsSmallPileOfSnow(b) and IsSunnyDay(c) and IsColdDay(c) & (forall d (forall a (IsYoung(d) -> IsSnowboarding(a))))) -> (IsYoung(d) and IsSizingUpJump(d, e))","(exists b (exists c (exists a (IsSnowboarding(a) and IsOnPileOfSnow(a, b) and IsSmallPileOfSnow(b) and IsSunnyDay(c) and IsColdDay(c)))) & (forall g (forall f (IsYoung(f) -> IsSnowboarding(g))))) -> (exists d (exists e (IsYoung(d) and IsSizingUpJump(d, e))))"
1,,"A large number of people are watching men dressed in kilts, one of whom has thrown a long pole. As a consequence, people watch men in kilts.", One man dressed in a kilt has thrown a long pole.  , People watch men in kilts.,"IsDressedInKilt(a),  HasThrownPole(a)","Watches(d, e),  IsInKilts(e)","[('IsDressedInKilt(a)', '  IsInKilts(e)'), ('  HasThrownPole(a)', 'Watches(d, e)'), ('  HasThrownPole(a)', '  IsInKilts(e)')]",[],"[(' One man', ' People'), (' One man', ' men'), (' kilt', ' kilts')]",IsDressedInKilt(a) and HasThrownPole(a),"Watches(d, e) and IsInKilts(e)","(exists a (IsDressedInKilt(a) and HasThrownPole(a)) & (forall e (forall a (IsDressedInKilt(a) ->   IsInKilts(e)))) & (forall e (forall d (forall a (  HasThrownPole(a) -> Watches(d, e))))) & (forall e (forall a (  HasThrownPole(a) ->   IsInKilts(e))))) -> (forall e (forall d (Watches(d, e) and IsInKilts(e))))","(exists a (IsDressedInKilt(a) and HasThrownPole(a)) & (forall h (forall g (IsDressedInKilt(g) ->   IsInKilts(h)))) & (forall i (forall j (forall k (  HasThrownPole(i) -> Watches(j,k))))) & (forall m (forall l (  HasThrownPole(l) ->   IsInKilts(m))))) -> (exists d (exists e (Watches(d, e) and IsInKilts(e))))"
1,,"A boy is riding down the road between two cows. Consequently, a boy, a road and two cows."," ""A boy is riding down the road between two cows.""  "," ""There is a boy, a road, and two cows.""","IsRidingDown(a, c),  IsBetween(a, b)","Exists(a),  Exists(d),  Exists(b)","[('IsRidingDown(a, c)', 'Exists(a)'), ('IsRidingDown(a, c)', '  Exists(d)'), ('IsRidingDown(a, c)', '  Exists(b)'), ('  IsBetween(a, b)', 'Exists(a)'), ('  IsBetween(a, b)', '  Exists(d)')]","[(' A boy', ' A boy'), (' two cows', ' two cows')]",[],"IsRidingDown(a, c) and IsBetween(a, b)",Exists(a) and Exists(d) and Exists(b),"(IsRidingDown(a, c) and IsBetween(a, b) & (forall c (forall a (IsRidingDown(a, c) -> Exists(a)))) & (forall c (forall d (forall a (IsRidingDown(a, c) ->   Exists(d))))) & (forall b (forall c (forall a (IsRidingDown(a, c) ->   Exists(b))))) & (forall b (forall a (  IsBetween(a, b) -> Exists(a)))) & (forall b (forall d (forall a (  IsBetween(a, b) ->   Exists(d)))))) -> (Exists(a) and Exists(d) and Exists(b))","(exists b (exists c (exists a (IsRidingDown(a, c) and IsBetween(a, b)))) & (forall f (forall e (IsRidingDown(e,f) -> Exists(e)))) & (forall i (forall h (forall g (IsRidingDown(g,h) ->   Exists(i))))) & (forall j (forall k (forall l (IsRidingDown(j,k) ->   Exists(l))))) & (forall m (forall n (  IsBetween(m,n) -> Exists(m)))) & (forall q (forall o (forall p (  IsBetween(o,p) ->   Exists(q)))))) -> (exists b (exists d (exists a (Exists(a) and Exists(d) and Exists(b)))))"
1,,A bald man is getting out of a small blue car. It follows that the man is bald.," ""A bald man is getting out of a small blue car.""  "," ""The man is bald.""","IsBald(a),  IsGettingOutOf(a, b)",IsBald(c),"[('  IsGettingOutOf(a, b)', 'IsBald(c)')]",[],"[(' A bald man', ' The man')]","IsBald(a) and IsGettingOutOf(a, b)",IsBald(c),"(exists a (IsBald(a) and IsGettingOutOf(a, b)) & (forall b (forall c (forall a (  IsGettingOutOf(a, b) -> IsBald(c)))))) -> (forall c (IsBald(c)))","(exists b (exists a (IsBald(a) and IsGettingOutOf(a, b))) & (forall f (forall d (forall e (  IsGettingOutOf(d,e) -> IsBald(f)))))) -> (exists c (IsBald(c)))"
1,,"Young boys in green and blue jerseys kick around a soccer ball while other soccer games take place in the background. Thus, young boys kicking around a soccer ball."," ""Young boys are wearing green and blue jerseys and kicking around a soccer ball."""," ""Young boys are kicking around a soccer ball.""","IsYoung(a),  IsWearing(a, c),  IsKicking(a, b)","IsYoung(a),  IsKicking(a, b)","[('  IsKicking(a, b)', 'IsYoung(a)'), ('  IsWearing(a, c)', 'IsYoung(a)'), ('  IsKicking(a, b)', 'IsYoung(a)'), ('IsYoung(a)', '  IsKicking(a, b)')]","[(' Young boys', ' Young boys'), (' soccer ball', ' soccer ball')]",[],"IsYoung(a) and IsWearing(a, c) and IsKicking(a, b)","IsYoung(a) and IsKicking(a, b)","(IsYoung(a) and IsWearing(a, c) and IsKicking(a, b) & (forall b (forall a (  IsKicking(a, b) -> IsYoung(a)))) & (forall c (forall a (  IsWearing(a, c) -> IsYoung(a)))) & (forall b (forall a (  IsKicking(a, b) -> IsYoung(a)))) & (forall b (forall a (IsYoung(a) ->   IsKicking(a, b))))) -> (IsYoung(a) and IsKicking(a, b))","(exists b (exists c (exists a (IsYoung(a) and IsWearing(a, c) and IsKicking(a, b)))) & (forall d (forall e (  IsKicking(d,e) -> IsYoung(d)))) & (forall g (forall f (  IsWearing(f,g) -> IsYoung(f)))) & (forall i (forall h (  IsKicking(h,i) -> IsYoung(h)))) & (forall j (forall k (IsYoung(j) ->   IsKicking(j,k))))) -> (exists b (exists a (IsYoung(a) and IsKicking(a, b))))"
1,,"A girl playing a violin along with a group of people. Consequently, a girl is playing an instrument.", A girl is playing a violin with a group of people.  , A girl is playing an instrument.,"IsPlayingViolin(a),  IsWithGroupOfPeople(a)",IsPlayingInstrument(a),"[('IsPlayingViolin(a)', 'IsPlayingInstrument(a)')]","[(' A girl', ' A girl')]","[(' a violin', ' an instrument'), (' a group of people', ' A girl')]",IsPlayingViolin(a) and IsWithGroupOfPeople(a),IsPlayingInstrument(a),(IsPlayingViolin(a) and IsWithGroupOfPeople(a) & (forall a (IsPlayingViolin(a) -> IsPlayingInstrument(a)))) -> (IsPlayingInstrument(a)),(exists a (IsPlayingViolin(a) and IsWithGroupOfPeople(a)) & (forall e (IsPlayingViolin(e) -> IsPlayingInstrument(e)))) -> (exists a (IsPlayingInstrument(a)))
1,,Two small boys in blue soccer uniforms use a wooden set of steps to wash their hands in an adult-sized bathroom. It follows that two boys washing their hands.," ""Two small boys in blue soccer uniforms use a wooden set of steps to wash their hands in an adult-sized bathroom.""  "," ""Two boys are washing their hands.""","IsSmall(b),  IsInBlueSoccerUniforms(b),  UsesWoodenSetOfSteps(b),  IsInAdultSizedBathroom(e)","IsTwo(f),  IsWashingHands(f)","[('IsSmall(b)', 'IsTwo(f)'), ('IsSmall(b)', '  IsWashingHands(f)')]","[(' their hands', ' their hands')]","[(' Two small boys', ' Two boys')]",IsSmall(b) and IsInBlueSoccerUniforms(b) and UsesWoodenSetOfSteps(b) and IsInAdultSizedBathroom(e),IsTwo(f) and IsWashingHands(f),(exists b (IsSmall(b) and IsInBlueSoccerUniforms(b) and UsesWoodenSetOfSteps(b) and IsInAdultSizedBathroom(e)) & (forall b (forall f (IsSmall(b) -> IsTwo(f)))) & (forall b (forall f (IsSmall(b) ->   IsWashingHands(f))))) -> (forall f (IsTwo(f) and IsWashingHands(f))),(exists b (exists e (IsSmall(b) and IsInBlueSoccerUniforms(b) and UsesWoodenSetOfSteps(b) and IsInAdultSizedBathroom(e))) & (forall h (forall g (IsSmall(g) -> IsTwo(h)))) & (forall i (forall j (IsSmall(i) ->   IsWashingHands(j))))) -> (exists f (IsTwo(f) and IsWashingHands(f)))
1,,A soccer player in white kicks a ball as another soccer player lunges towards the ball and a third soccer player in red follows close by. This implies that there are three soccer players.," A soccer player in white kicks a ball, another soccer player lunges towards the ball, and a third soccer player in red follows close by.  ", There are three soccer players.,"IsInWhite(a),  Kicks(a, b),  LungesTowards(c, d),  IsInRed(e),  FollowsCloseBy(e)",IsSoccerPlayer(f),"[('  Kicks(a, b)', 'IsSoccerPlayer(f)'), ('IsSoccerPlayer(f)', '  Kicks(a, b)'), ('  LungesTowards(c, d)', 'IsSoccerPlayer(f)'), ('  IsInRed(e)', 'IsSoccerPlayer(f)'), ('  FollowsCloseBy(e)', 'IsSoccerPlayer(f)')]",[],"[(' A soccer player in white', ' Three soccer players'), (' a third soccer player in red.', ' Three soccer players')]","IsInWhite(a) and Kicks(a, b) and LungesTowards(c, d) and IsInRed(e) and FollowsCloseBy(e)",IsSoccerPlayer(f),"(exists e (exists a (IsInWhite(a) and Kicks(a, b) and LungesTowards(c, d) and IsInRed(e) and FollowsCloseBy(e))) & (forall b (forall f (forall a (  Kicks(a, b) -> IsSoccerPlayer(f))))) & (forall b (forall f (forall a (IsSoccerPlayer(f) ->   Kicks(a, b))))) & (forall f (forall d (forall c (  LungesTowards(c, d) -> IsSoccerPlayer(f))))) & (forall f (forall e (  IsInRed(e) -> IsSoccerPlayer(f)))) & (forall f (forall e (  FollowsCloseBy(e) -> IsSoccerPlayer(f))))) -> (forall f (IsSoccerPlayer(f)))","(exists c (exists a (exists b (exists e (exists d (IsInWhite(a) and Kicks(a, b) and LungesTowards(c, d) and IsInRed(e) and FollowsCloseBy(e)))))) & (forall i (forall h (forall g (  Kicks(g,h) -> IsSoccerPlayer(i))))) & (forall j (forall k (forall l (IsSoccerPlayer(j) ->   Kicks(k,l))))) & (forall m (forall o (forall n (  LungesTowards(m,n) -> IsSoccerPlayer(o))))) & (forall q (forall p (  IsInRed(p) -> IsSoccerPlayer(q)))) & (forall r (forall s (  FollowsCloseBy(r) -> IsSoccerPlayer(s))))) -> (exists f (IsSoccerPlayer(f)))"
1,,"Children playing a video game together. Thus, the kids are indoors playing a video game."," ""Children are playing a video game together.""  "," ""The kids are indoors playing a video game.""","IsPlaying(a, b),  AreTogether(a)","IsIndoors(a),  IsPlaying(a, b)","[('IsPlaying(a, b)', 'IsIndoors(a)'), ('IsIndoors(a)', 'IsPlaying(a, b)'), ('IsIndoors(a)', '  AreTogether(a)'), ('  AreTogether(a)', '  IsPlaying(a, b)'), ('  IsPlaying(a, b)', '  AreTogether(a)')]","[(' Children', ' The kids'), (' video game', ' video game')]",[],"IsPlaying(a, b) and AreTogether(a)","IsIndoors(a) and IsPlaying(a, b)","(IsPlaying(a, b) and AreTogether(a) & (forall b (forall a (IsPlaying(a, b) -> IsIndoors(a)))) & (forall b (forall a (IsIndoors(a) -> IsPlaying(a, b)))) & (forall a (IsIndoors(a) ->   AreTogether(a))) & (forall b (forall a (  AreTogether(a) ->   IsPlaying(a, b)))) & (forall b (forall a (  IsPlaying(a, b) ->   AreTogether(a))))) -> (IsIndoors(a) and IsPlaying(a, b))","(exists b (exists a (IsPlaying(a, b) and AreTogether(a))) & (forall d (forall e (IsPlaying(d,e) -> IsIndoors(d)))) & (forall g (forall f (IsIndoors(f) -> IsPlaying(f,g)))) & (forall h (IsIndoors(h) ->   AreTogether(h))) & (forall i (forall j (  AreTogether(i) ->   IsPlaying(i,j)))) & (forall k (forall l (  IsPlaying(k,l) ->   AreTogether(k))))) -> (exists b (exists a (IsIndoors(a) and IsPlaying(a, b))))"
1,,Two people in coats kiss on the side of a road. This implies that people show their appreciation for another.," ""Two people in coats kiss on the side of a road.""  "," ""People show appreciation for one another.""","IsInCoats(a),  Kiss(a),  IsOnSideOfRoad(a)","ShowAppreciation(e, f)",[],[],"[(' Two people', ' People')]",IsInCoats(a) and Kiss(a) and IsOnSideOfRoad(a),"ShowAppreciation(e, f)","(exists a (IsInCoats(a) and Kiss(a) and IsOnSideOfRoad(a))) -> (forall e (ShowAppreciation(e, f)))","(exists a (IsInCoats(a) and Kiss(a) and IsOnSideOfRoad(a))) -> (exists f (exists e (ShowAppreciation(e, f))))"
1,,Woman reading a book with a grocery tote. It follows that a woman is reading.," ""A woman is reading a book with a grocery tote."""," ""A woman is reading.""","IsReading(a),  HasGroceryTote(a)",IsReading(a),[],"[(' A woman', ' A woman')]",[],IsReading(a) and HasGroceryTote(a),IsReading(a),(IsReading(a) and HasGroceryTote(a)) -> (IsReading(a)),(exists a (IsReading(a) and HasGroceryTote(a))) -> (exists a (IsReading(a)))
1,,"A man wearing a brown hoodie is shopping for snacks. As a consequence, the man is wearing brown."," ""A man wearing a brown hoodie is shopping for snacks.""  "," ""The man is wearing brown.""","IsWearing(a, b),  IsShoppingFor(a, c)",IsWearingBrown(d),"[('IsWearing(a, b)', 'IsWearingBrown(d)'), ('  IsShoppingFor(a, c)', 'IsWearingBrown(d)')]",[],[],"IsWearing(a, b) and IsShoppingFor(a, c)",IsWearingBrown(d),"(IsWearing(a, b) and IsShoppingFor(a, c) & (forall b (forall d (forall a (IsWearing(a, b) -> IsWearingBrown(d))))) & (forall c (forall d (forall a (  IsShoppingFor(a, c) -> IsWearingBrown(d)))))) -> (IsWearingBrown(d))","(exists b (exists c (exists a (IsWearing(a, b) and IsShoppingFor(a, c)))) & (forall g (forall f (forall e (IsWearing(e,f) -> IsWearingBrown(g))))) & (forall i (forall h (forall j (  IsShoppingFor(h,i) -> IsWearingBrown(j)))))) -> (exists d (IsWearingBrown(d)))"
1,,"A young man in a blue T-shirt and sweatpants stands over a stove and looks at the camera while another young man stands behind him. As a consequence, a man is in front of a camera.", A young man in a blue T-shirt and sweatpants stands over a stove and looks at the camera while another young man stands behind him.  , A man is in front of a camera.,"IsYoung(b),  IsInBlueTShirt(b),  IsInSweatpants(b),  StandsOver(b, e),  LooksAt(b, a),  IsYoung(f),  StandsBehind(f, b)","IsInFrontOf(g, a)","[('  LooksAt(b, a)', 'IsInFrontOf(g, a)')]","[(' camera', ' a camera')]","[(' A young man', ' A man'), (' another young man', ' A man')]","IsYoung(b) and IsInBlueTShirt(b) and IsInSweatpants(b) and StandsOver(b, e) and LooksAt(b, a) and IsYoung(f) and StandsBehind(f, b)","IsInFrontOf(g, a)","(exists f (exists b (IsYoung(b) and IsInBlueTShirt(b) and IsInSweatpants(b) and StandsOver(b, e) and LooksAt(b, a) and IsYoung(f) and StandsBehind(f, b))) & (forall b (forall g (forall a (  LooksAt(b, a) -> IsInFrontOf(g, a)))))) -> (forall g (IsInFrontOf(g, a)))","(exists b (exists a (exists f (exists e (IsYoung(b) and IsInBlueTShirt(b) and IsInSweatpants(b) and StandsOver(b, e) and LooksAt(b, a) and IsYoung(f) and StandsBehind(f, b))))) & (forall i (forall j (forall k (  LooksAt(i,j) -> IsInFrontOf(k,j)))))) -> (exists g (exists a (IsInFrontOf(g, a))))"
1,,"This church choir sings to the masses as they sing joyous songs from the book at a church. Therefore, the church is filled with song.", The church choir sings joyous songs from the book at a church.  , The church is filled with song.,"Sings(a, b),  FromBook(b, c),  AtChurch(a, d)","IsFilledWithSong(e, f)","[('Sings(a, b)', 'IsFilledWithSong(e, f)'), ('IsFilledWithSong(e, f)', 'Sings(a, b)'), ('  AtChurch(a, d)', 'IsFilledWithSong(e, f)')]",[],"[(' The church choir', ' The church'), (' joyous songs', ' song')]","Sings(a, b) and FromBook(b, c) and AtChurch(a, d)","IsFilledWithSong(e, f)","(exists b (exists a (Sings(a, b) and FromBook(b, c) and AtChurch(a, d))) & (forall b (forall f (forall e (forall a (Sings(a, b) -> IsFilledWithSong(e, f)))))) & (forall b (forall a (forall f (forall e (IsFilledWithSong(e, f) -> Sings(a, b)))))) & (forall e (forall f (forall d (forall a (  AtChurch(a, d) -> IsFilledWithSong(e, f))))))) -> (forall f (forall e (IsFilledWithSong(e, f))))","(exists b (exists c (exists d (exists a (Sings(a, b) and FromBook(b, c) and AtChurch(a, d))))) & (forall i (forall h (forall g (forall j (Sings(g,h) -> IsFilledWithSong(i,j)))))) & (forall m (forall k (forall l (forall n (IsFilledWithSong(k,l) -> Sings(m,n)))))) & (forall q (forall o (forall r (forall p (  AtChurch(o,p) -> IsFilledWithSong(q,r))))))) -> (exists f (exists e (IsFilledWithSong(e, f))))"
1,,"A man and a woman are standing at the side of an inflatable climbing structure. As a consequence, a man and a woman are standing.", A man and a woman are standing at the side of an inflatable climbing structure.  , A man and a woman are standing.,"IsStandingAt(a, c),  IsStandingAt(b, c),  IsSideOf(c, d)","IsStanding(e),  IsStanding(a)","[('IsStandingAt(a, c)', '  IsStanding(a)'), ('  IsStandingAt(b, c)', 'IsStanding(e)')]","[(' a woman', ' woman')]","[(' A man', ' Man')]","IsStandingAt(a, c) and IsStandingAt(b, c) and IsSideOf(c, d)",IsStanding(e) and IsStanding(a),"(exists b (IsStandingAt(a, c) and IsStandingAt(b, c) and IsSideOf(c, d)) & (forall c (forall a (IsStandingAt(a, c) ->   IsStanding(a)))) & (forall b (forall e (forall c (  IsStandingAt(b, c) -> IsStanding(e)))))) -> (forall e (IsStanding(e) and IsStanding(a)))","(exists b (exists c (exists d (exists a (IsStandingAt(a, c) and IsStandingAt(b, c) and IsSideOf(c, d))))) & (forall h (forall g (IsStandingAt(g,h) ->   IsStanding(g)))) & (forall i (forall j (forall k (  IsStandingAt(i,j) -> IsStanding(k)))))) -> (exists a (exists e (IsStanding(e) and IsStanding(a))))"
1,,An asian teenager wearing a white shirt with black stripes is sitting on the steps with his face resting on his hand. This implies that the teenager is seated.," ""An Asian teenager wearing a white shirt with black stripes is sitting on the steps with his face resting on his hand.""  "," ""The teenager is seated.""","IsAsian(a),  IsWearing(a, b),  IsSittingOn(a, c),  IsResting(d, e)",IsSeated(a),"[('  IsWearing(a, b)', 'IsSeated(a)'), ('  IsSittingOn(a, c)', 'IsSeated(a)'), ('IsSeated(a)', '  IsSittingOn(a, c)')]","[(' The teenager', ' Asian teenager')]",[],"IsAsian(a) and IsWearing(a, b) and IsSittingOn(a, c) and IsResting(d, e)",IsSeated(a),"(IsAsian(a) and IsWearing(a, b) and IsSittingOn(a, c) and IsResting(d, e) & (forall b (forall a (  IsWearing(a, b) -> IsSeated(a)))) & (forall c (forall a (  IsSittingOn(a, c) -> IsSeated(a)))) & (forall c (forall a (IsSeated(a) ->   IsSittingOn(a, c))))) -> (IsSeated(a))","(exists c (exists a (exists b (exists e (exists d (IsAsian(a) and IsWearing(a, b) and IsSittingOn(a, c) and IsResting(d, e)))))) & (forall h (forall g (  IsWearing(g,h) -> IsSeated(g)))) & (forall i (forall j (  IsSittingOn(i,j) -> IsSeated(i)))) & (forall k (forall l (IsSeated(k) ->   IsSittingOn(k,l))))) -> (exists a (IsSeated(a)))"
1,,"Boy in red and black shirt walks through grass. Therefore, the boy is walking."," ""The boy in the red and black shirt walks through grass.""  "," ""The boy is walking.""","IsInRedAndBlackShirt(a),  WalksThroughGrass(a)",IsWalking(c),"[('  WalksThroughGrass(a)', 'IsWalking(c)')]",[],"[(' The boy in the red and black shirt', ' The boy')]",IsInRedAndBlackShirt(a) and WalksThroughGrass(a),IsWalking(c),(exists a (IsInRedAndBlackShirt(a) and WalksThroughGrass(a)) & (forall c (forall a (  WalksThroughGrass(a) -> IsWalking(c))))) -> (forall c (IsWalking(c))),(exists a (IsInRedAndBlackShirt(a) and WalksThroughGrass(a)) & (forall d (forall e (  WalksThroughGrass(d) -> IsWalking(e))))) -> (exists c (IsWalking(c)))
1,,"These girls are having a great time looking for seashells. As a consequence, the girls are happy."," ""The girls are having a great time looking for seashells.""  "," ""The girls are happy.""","HavingGreatTime(a),  LookingForSeashells(a)",IsHappy(a),"[('HavingGreatTime(a)', 'IsHappy(a)'), ('IsHappy(a)', 'HavingGreatTime(a)'), ('  LookingForSeashells(a)', 'IsHappy(a)')]","[(' The girls', ' The girls')]",[],HavingGreatTime(a) and LookingForSeashells(a),IsHappy(a),(HavingGreatTime(a) and LookingForSeashells(a) & (forall a (HavingGreatTime(a) -> IsHappy(a))) & (forall a (IsHappy(a) -> HavingGreatTime(a))) & (forall a (  LookingForSeashells(a) -> IsHappy(a)))) -> (IsHappy(a)),(exists a (HavingGreatTime(a) and LookingForSeashells(a)) & (forall c (HavingGreatTime(c) -> IsHappy(c))) & (forall d (IsHappy(d) -> HavingGreatTime(d))) & (forall e (  LookingForSeashells(e) -> IsHappy(e)))) -> (exists a (IsHappy(a)))
1,,"Small girl in a pink dress is playing electronic drum pads with sticks. Consequently, a girl is playing electronic drums."," ""A small girl in a pink dress is playing electronic drum pads with sticks.""  "," ""A girl is playing electronic drums.""","IsSmall(a),  IsInPinkDress(a),  IsPlayingDrumPads(a),  IsPlayedWith(c, d)",IsPlayingElectronicDrums(e),"[('  IsPlayingDrumPads(a)', 'IsPlayingElectronicDrums(e)'), ('  IsPlayedWith(c, d)', 'IsPlayingElectronicDrums(e)'), ('IsPlayingElectronicDrums(e)', '  IsPlayedWith(c, d)')]",[],"[(' A small girl', ' A girl'), (' electronic drum pads', ' electronic drums')]","IsSmall(a) and IsInPinkDress(a) and IsPlayingDrumPads(a) and IsPlayedWith(c, d)",IsPlayingElectronicDrums(e),"(exists a (IsSmall(a) and IsInPinkDress(a) and IsPlayingDrumPads(a) and IsPlayedWith(c, d)) & (forall e (forall a (  IsPlayingDrumPads(a) -> IsPlayingElectronicDrums(e)))) & (forall e (forall d (forall c (  IsPlayedWith(c, d) -> IsPlayingElectronicDrums(e))))) & (forall c (forall d (forall e (IsPlayingElectronicDrums(e) ->   IsPlayedWith(c, d)))))) -> (forall e (IsPlayingElectronicDrums(e)))","(exists c (exists d (exists a (IsSmall(a) and IsInPinkDress(a) and IsPlayingDrumPads(a) and IsPlayedWith(c, d)))) & (forall h (forall g (  IsPlayingDrumPads(g) -> IsPlayingElectronicDrums(h)))) & (forall i (forall j (forall k (  IsPlayedWith(i,j) -> IsPlayingElectronicDrums(k))))) & (forall m (forall l (forall n (IsPlayingElectronicDrums(l) ->   IsPlayedWith(m,n)))))) -> (exists e (IsPlayingElectronicDrums(e)))"
1,,"A blond woman with a tattoo of on an angel on her arm walking down the street, a concrete wall in the background. As a consequence, a person with a tattoo."," ""A blond woman has a tattoo of an angel on her arm."""," ""A person with a tattoo is a blond woman.""","IsBlond(a),  HasTattoo(a),  OfAngel(b),  OnArm(b)","HasTattoo(e),  IsBlond(a)","[('IsBlond(a)', 'HasTattoo(e)'), ('  OfAngel(b)', 'HasTattoo(e)'), ('HasTattoo(e)', '  OfAngel(b)'), ('  OnArm(b)', 'HasTattoo(e)')]","[(' Blond woman', ' blond woman')]",[],IsBlond(a) and HasTattoo(a) and OfAngel(b) and OnArm(b),HasTattoo(e) and IsBlond(a),(IsBlond(a) and HasTattoo(a) and OfAngel(b) and OnArm(b) & (forall e (forall a (IsBlond(a) -> HasTattoo(e)))) & (forall b (forall e (  OfAngel(b) -> HasTattoo(e)))) & (forall b (forall e (HasTattoo(e) ->   OfAngel(b)))) & (forall b (forall e (  OnArm(b) -> HasTattoo(e))))) -> (HasTattoo(e) and IsBlond(a)),(exists b (exists a (IsBlond(a) and HasTattoo(a) and OfAngel(b) and OnArm(b))) & (forall h (forall g (IsBlond(g) -> HasTattoo(h)))) & (forall i (forall j (  OfAngel(i) -> HasTattoo(j)))) & (forall k (forall l (HasTattoo(k) ->   OfAngel(l)))) & (forall m (forall n (  OnArm(m) -> HasTattoo(n))))) -> (exists a (exists e (HasTattoo(e) and IsBlond(a))))
1,,"A tan dog chases a black and white soccer ball. Therefore, a dog is chasing a ball.", A tan dog chases a black and white soccer ball.  , A dog is chasing a ball.,"IsTan(b),  Chases(b, a),  IsBlackAndWhite(a)","IsChasing(c, a)",[],"[(' a ball', ' black and white soccer ball')]","[(' Tan dog', ' A dog')]","IsTan(b) and Chases(b, a) and IsBlackAndWhite(a)","IsChasing(c, a)","(exists b (IsTan(b) and Chases(b, a) and IsBlackAndWhite(a))) -> (forall c (IsChasing(c, a)))","(exists b (exists a (IsTan(b) and Chases(b, a) and IsBlackAndWhite(a)))) -> (exists a (exists c (IsChasing(c, a))))"
1,,"A dusty boy runs along a dirt path through the grass. As a consequence, a boy is outside running."," ""A dusty boy runs along a dirt path through the grass.""  "," ""A boy is outside running.""","IsDusty(a),  Runs(a),  IsOnDirtPath(a),  IsThroughGrass(a)","IsOutside(d),  IsRunning(d)","[('IsDusty(a)', 'IsOutside(d)'), ('IsDusty(a)', '  IsRunning(d)'), ('  Runs(a)', 'IsOutside(d)'), ('IsOutside(d)', '  Runs(a)'), ('  Runs(a)', '  IsRunning(d)'), ('  IsOnDirtPath(a)', 'IsOutside(d)'), ('  IsOnDirtPath(a)', '  IsRunning(d)'), ('  IsThroughGrass(a)', 'IsOutside(d)'), ('  IsThroughGrass(a)', '  IsRunning(d)')]",[],"[(' A dusty boy', ' A boy')]",IsDusty(a) and Runs(a) and IsOnDirtPath(a) and IsThroughGrass(a),IsOutside(d) and IsRunning(d),(exists a (IsDusty(a) and Runs(a) and IsOnDirtPath(a) and IsThroughGrass(a)) & (forall d (forall a (IsDusty(a) -> IsOutside(d)))) & (forall d (forall a (IsDusty(a) ->   IsRunning(d)))) & (forall d (forall a (  Runs(a) -> IsOutside(d)))) & (forall d (forall a (IsOutside(d) ->   Runs(a)))) & (forall d (forall a (  Runs(a) ->   IsRunning(d)))) & (forall d (forall a (  IsOnDirtPath(a) -> IsOutside(d)))) & (forall d (forall a (  IsOnDirtPath(a) ->   IsRunning(d)))) & (forall d (forall a (  IsThroughGrass(a) -> IsOutside(d)))) & (forall d (forall a (  IsThroughGrass(a) ->   IsRunning(d))))) -> (forall d (IsOutside(d) and IsRunning(d))),(exists a (IsDusty(a) and Runs(a) and IsOnDirtPath(a) and IsThroughGrass(a)) & (forall f (forall e (IsDusty(e) -> IsOutside(f)))) & (forall h (forall g (IsDusty(g) ->   IsRunning(h)))) & (forall i (forall j (  Runs(i) -> IsOutside(j)))) & (forall k (forall l (IsOutside(k) ->   Runs(l)))) & (forall m (forall n (  Runs(m) ->   IsRunning(n)))) & (forall o (forall p (  IsOnDirtPath(o) -> IsOutside(p)))) & (forall q (forall r (  IsOnDirtPath(q) ->   IsRunning(r)))) & (forall t (forall s (  IsThroughGrass(s) -> IsOutside(t)))) & (forall v (forall u (  IsThroughGrass(u) ->   IsRunning(v))))) -> (exists d (IsOutside(d) and IsRunning(d)))
1,,"A guy with a football, a crowd watching him. Consequently, there is a guy holding a football."," ""A guy is holding a football."""," ""A crowd watches a guy with a football.""","IsHolding(a, b)","IsWatching(c, a),  HasFootball(a)","[('IsHolding(a, b)', '  HasFootball(a)')]","[(' A guy', ' a guy'), (' a football', ' a football')]","[(' A guy', ' A crowd')]","IsHolding(a, b)","IsWatching(c, a) and HasFootball(a)","(exists a (IsHolding(a, b)) & (forall b (forall a (IsHolding(a, b) ->   HasFootball(a))))) -> (forall c (IsWatching(c, a) and HasFootball(a)))","(exists b (exists a (IsHolding(a, b))) & (forall f (forall e (IsHolding(e,f) ->   HasFootball(e))))) -> (exists a (exists c (IsWatching(c, a) and HasFootball(a))))"
1,,Two women are tending to their herd of animals including cows and goats near a building made primarily of stone. It follows that the two women are taking care of a herd of animals.," ""Two women are tending to their herd of animals including cows and goats near a building made primarily of stone."""," ""The two women are taking care of a herd of animals.""","IsTendingTo(a, b),  Includes(b, c),  Includes(b, d),  IsNear(a, e),  IsMadeOf(e, stone)","IsTakingCareOf(a, f)","[('IsTendingTo(a, b)', 'IsTakingCareOf(a, f)'), ('  Includes(b, c)', 'IsTakingCareOf(a, f)')]","[(' Two women', ' The two women')]","[(' cows', ' a herd of animals'), (' goats', ' a herd of animals')]","IsTendingTo(a, b) and Includes(b, c) and Includes(b, d) and IsNear(a, e) and IsMadeOf(e, stone)","IsTakingCareOf(a, f)","(exists d (exists c (IsTendingTo(a, b) and Includes(b, c) and Includes(b, d) and IsNear(a, e) and IsMadeOf(e, stone))) & (forall b (forall f (forall a (IsTendingTo(a, b) -> IsTakingCareOf(a, f))))) & (forall b (forall a (forall f (forall c (  Includes(b, c) -> IsTakingCareOf(a, f))))))) -> (forall f (IsTakingCareOf(a, f)))","(exists c (exists a (exists b (exists e (exists d (IsTendingTo(a, b) and Includes(b, c) and Includes(b, d) and IsNear(a, e) and IsMadeOf(e, stone)))))) & (forall i (forall h (forall j (IsTendingTo(h,i) -> IsTakingCareOf(h,j))))) & (forall m (forall k (forall l (forall n (  Includes(k,l) -> IsTakingCareOf(m,n))))))) -> (exists f (exists a (IsTakingCareOf(a, f))))"
1,,"A boy and girl play together on a pile or rocks in a residential area. Thus, the boy and girl are outside."," ""A boy and girl play together on a pile of rocks in a residential area.""  "," ""The boy and girl are outside.""","PlayTogether(a, b),  IsOnPileOfRocks(a),  IsOnPileOfRocks(b),  IsInResidentialArea(a),  IsInResidentialArea(b)","IsOutside(e),  IsOutside(a)","[('PlayTogether(a, b)', '  IsOutside(a)'), ('  IsOnPileOfRocks(a)', '  IsOutside(a)'), ('  IsOnPileOfRocks(b)', 'IsOutside(e)'), ('  IsInResidentialArea(a)', 'IsOutside(e)'), ('  IsInResidentialArea(a)', '  IsOutside(a)'), ('  IsInResidentialArea(b)', 'IsOutside(e)'), ('  IsInResidentialArea(b)', '  IsOutside(a)')]","[(' girl', ' girl')]",[],"PlayTogether(a, b) and IsOnPileOfRocks(a) and IsOnPileOfRocks(b) and IsInResidentialArea(a) and IsInResidentialArea(b)",IsOutside(e) and IsOutside(a),"(PlayTogether(a, b) and IsOnPileOfRocks(a) and IsOnPileOfRocks(b) and IsInResidentialArea(a) and IsInResidentialArea(b) & (forall b (forall a (PlayTogether(a, b) ->   IsOutside(a)))) & (forall a (  IsOnPileOfRocks(a) ->   IsOutside(a))) & (forall b (forall e (  IsOnPileOfRocks(b) -> IsOutside(e)))) & (forall e (forall a (  IsInResidentialArea(a) -> IsOutside(e)))) & (forall a (  IsInResidentialArea(a) ->   IsOutside(a))) & (forall b (forall e (  IsInResidentialArea(b) -> IsOutside(e)))) & (forall b (forall a (  IsInResidentialArea(b) ->   IsOutside(a))))) -> (IsOutside(e) and IsOutside(a))","(exists b (exists a (PlayTogether(a, b) and IsOnPileOfRocks(a) and IsOnPileOfRocks(b) and IsInResidentialArea(a) and IsInResidentialArea(b))) & (forall g (forall f (PlayTogether(f,g) ->   IsOutside(f)))) & (forall h (  IsOnPileOfRocks(h) ->   IsOutside(h))) & (forall i (forall j (  IsOnPileOfRocks(i) -> IsOutside(j)))) & (forall k (forall l (  IsInResidentialArea(k) -> IsOutside(l)))) & (forall m (  IsInResidentialArea(m) ->   IsOutside(m))) & (forall o (forall n (  IsInResidentialArea(n) -> IsOutside(o)))) & (forall q (forall p (  IsInResidentialArea(p) ->   IsOutside(q))))) -> (exists a (exists e (IsOutside(e) and IsOutside(a))))"
1,,"A boy stands in the middle of a crowd of teenagers. Thus, a person stands in the middle of a crowd of teenagers.", A boy stands in the middle of a crowd of teenagers.  , A person stands in the middle of a crowd of teenagers.,"IsInMiddle(b, a),  IsInCrowd(b, c)","IsInMiddle(d, a),  IsInCrowd(d, e)",[],"[(' the middle', ' middle')]","[(' A boy', ' A person'), (' A boy', ' teenagers'), (' a crowd of teenagers', ' crowd'), (' a crowd of teenagers', ' teenagers')]","IsInMiddle(b, a) and IsInCrowd(b, c)","IsInMiddle(d, a) and IsInCrowd(d, e)","(exists c (exists b (IsInMiddle(b, a) and IsInCrowd(b, c)))) -> (forall e (forall d (IsInMiddle(d, a) and IsInCrowd(d, e))))","(exists b (exists c (exists a (IsInMiddle(b, a) and IsInCrowd(b, c))))) -> (exists e (exists d (exists a (IsInMiddle(d, a) and IsInCrowd(d, e)))))"
1,,"Two men are standing in a boat. Thus, some people are in a boat.", Two men are in a boat.  , Some people are in a boat.,IsInBoat(b),IsInBoat(c),[],"[(' a boat', ' a boat')]","[(' Two men', ' Some people')]",IsInBoat(b),IsInBoat(c),(exists b (IsInBoat(b))) -> (forall c (IsInBoat(c))),(exists b (IsInBoat(b))) -> (exists c (IsInBoat(c)))
1,,An Asian woman dressed in a colorful outfit laughing. It follows that a woman is wearing colorful clothing.," ""An Asian woman is dressed in a colorful outfit and laughing.""  "," ""A woman is wearing colorful clothing.""","IsAsian(a),  IsDressedIn(a, b),  IsLaughing(a)","IsWearing(c, d)","[('  IsDressedIn(a, b)', 'IsWearing(c, d)')]",[],"[(' Asian woman', ' A woman'), (' colorful outfit', ' colorful clothing')]","IsAsian(a) and IsDressedIn(a, b) and IsLaughing(a)","IsWearing(c, d)","(exists b (exists a (IsAsian(a) and IsDressedIn(a, b) and IsLaughing(a))) & (forall b (forall c (forall d (forall a (  IsDressedIn(a, b) -> IsWearing(c, d))))))) -> (forall d (forall c (IsWearing(c, d))))","(exists b (exists a (IsAsian(a) and IsDressedIn(a, b) and IsLaughing(a))) & (forall h (forall g (forall f (forall e (  IsDressedIn(e,f) -> IsWearing(g,h))))))) -> (exists d (exists c (IsWearing(c, d))))"
1,,"A woman in black reviews a message as she walks to work. Hence, the woman in black has a job."," ""A woman in black reviews a message while walking to work.""  "," ""The woman in black has a job.""","IsInBlack(a),  ReviewsMessage(a),  WalksToWork(a)","IsInBlack(d),  HasJob(d)","[('IsInBlack(a)', '  HasJob(d)'), ('  ReviewsMessage(a)', '  HasJob(d)'), ('IsInBlack(d)', '  WalksToWork(a)'), ('  WalksToWork(a)', '  HasJob(d)')]",[],[],IsInBlack(a) and ReviewsMessage(a) and WalksToWork(a),IsInBlack(d) and HasJob(d),(IsInBlack(a) and ReviewsMessage(a) and WalksToWork(a) & (forall d (forall a (IsInBlack(a) ->   HasJob(d)))) & (forall d (forall a (  ReviewsMessage(a) ->   HasJob(d)))) & (forall d (forall a (IsInBlack(d) ->   WalksToWork(a)))) & (forall d (forall a (  WalksToWork(a) ->   HasJob(d))))) -> (IsInBlack(d) and HasJob(d)),(exists a (IsInBlack(a) and ReviewsMessage(a) and WalksToWork(a)) & (forall g (forall f (IsInBlack(f) ->   HasJob(g)))) & (forall i (forall h (  ReviewsMessage(h) ->   HasJob(i)))) & (forall j (forall k (IsInBlack(j) ->   WalksToWork(k)))) & (forall m (forall l (  WalksToWork(l) ->   HasJob(m))))) -> (exists d (IsInBlack(d) and HasJob(d)))
1,,"A shirtless man rock climbs. As a consequence, a man is outside.", A shirtless man rock climbs.  , A man is outside.,"IsShirtless(a),  RockClimbs(a)",IsOutside(b),"[('  RockClimbs(a)', 'IsOutside(b)')]",[],"[(' A shirtless man', ' A man')]",IsShirtless(a) and RockClimbs(a),IsOutside(b),(exists a (IsShirtless(a) and RockClimbs(a)) & (forall b (forall a (  RockClimbs(a) -> IsOutside(b))))) -> (forall b (IsOutside(b))),(exists a (IsShirtless(a) and RockClimbs(a)) & (forall d (forall c (  RockClimbs(c) -> IsOutside(d))))) -> (exists b (IsOutside(b)))
1,,"A man wearing a kilt has thrown a large pole. Therefore, a man is wearing a skirt."," ""A man wearing a kilt has thrown a large pole."""," ""A man is wearing a skirt.""","IsWearingKilt(a),  HasThrown(a,b),  IsLarge(b)","IsWearing(c, d)","[('  HasThrown(a,b)', 'IsWearing(c, d)')]",[],"[(' A man wearing a kilt', ' A man'), (' A man wearing a kilt', ' a skirt')]","IsWearingKilt(a) and HasThrown(a,b) and IsLarge(b)","IsWearing(c, d)","(exists a (IsWearingKilt(a) and HasThrown(a,b) and IsLarge(b)) & (forall b (forall c (forall d (forall a (  HasThrown(a,b) -> IsWearing(c, d))))))) -> (forall d (forall c (IsWearing(c, d))))","(exists b (exists a (IsWearingKilt(a) and HasThrown(a,b) and IsLarge(b))) & (forall h (forall g (forall f (forall e (  HasThrown(e,f) -> IsWearing(g,h))))))) -> (exists d (exists c (IsWearing(c, d))))"
1,,"A man in a blue t-shirt is taking a picture while a woman with an umbrella walks behind him. Consequently, a man is taking a picture outdoors while a woman walks behind him."," ""A man in a blue t-shirt is taking a picture outdoors while a woman with an umbrella walks behind him."""," ""A man is taking a picture outdoors while a woman walks behind him.""","IsInBlueTShirt(a),  IsTakingPicture(a,b),  IsOutdoors(a),  IsWithUmbrella(c),  WalksBehind(c,a)","IsTakingPicture(d,b),  IsOutdoors(d),  WalksBehind(e,d)","[('IsInBlueTShirt(a)', '  WalksBehind(e,d)'), ('  IsOutdoors(d)', '  IsTakingPicture(a,b)'), ('  IsOutdoors(a)', 'IsTakingPicture(d,b)'), ('IsTakingPicture(d,b)', '  IsOutdoors(a)'), ('  IsWithUmbrella(c)', '  IsOutdoors(d)'), ('  IsWithUmbrella(c)', '  WalksBehind(e,d)'), ('IsTakingPicture(d,b)', '  WalksBehind(c,a)'), ('  WalksBehind(c,a)', '  IsOutdoors(d)'), ('  IsOutdoors(d)', '  WalksBehind(c,a)')]","[(' A man in a blue t-shirt', ' him'), (' a picture', ' a picture'), (' him', ' him')]","[(' A man in a blue t-shirt', ' A man'), (' a woman with an umbrella', ' a woman')]","IsInBlueTShirt(a) and IsTakingPicture(a,b) and IsOutdoors(a) and IsWithUmbrella(c) and WalksBehind(c,a)","IsTakingPicture(d,b) and IsOutdoors(d) and WalksBehind(e,d)","(exists c (exists a (IsInBlueTShirt(a) and IsTakingPicture(a,b) and IsOutdoors(a) and IsWithUmbrella(c) and WalksBehind(c,a))) & (forall e (forall d (forall a (IsInBlueTShirt(a) ->   WalksBehind(e,d))))) & (forall b (forall d (forall a (  IsOutdoors(d) ->   IsTakingPicture(a,b))))) & (forall b (forall d (forall a (  IsOutdoors(a) -> IsTakingPicture(d,b))))) & (forall b (forall d (forall a (IsTakingPicture(d,b) ->   IsOutdoors(a))))) & (forall d (forall c (  IsWithUmbrella(c) ->   IsOutdoors(d)))) & (forall e (forall d (forall c (  IsWithUmbrella(c) ->   WalksBehind(e,d))))) & (forall b (forall a (forall d (forall c (IsTakingPicture(d,b) ->   WalksBehind(c,a)))))) & (forall a (forall d (forall c (  WalksBehind(c,a) ->   IsOutdoors(d))))) & (forall a (forall d (forall c (  IsOutdoors(d) ->   WalksBehind(c,a)))))) -> (forall e (forall d (IsTakingPicture(d,b) and IsOutdoors(d) and WalksBehind(e,d))))","(exists b (exists c (exists a (IsInBlueTShirt(a) and IsTakingPicture(a,b) and IsOutdoors(a) and IsWithUmbrella(c) and WalksBehind(c,a)))) & (forall i (forall h (forall g (IsInBlueTShirt(g) ->   WalksBehind(h,i))))) & (forall j (forall k (forall l (  IsOutdoors(j) ->   IsTakingPicture(k,l))))) & (forall m (forall o (forall n (  IsOutdoors(m) -> IsTakingPicture(n,o))))) & (forall q (forall r (forall p (IsTakingPicture(p,q) ->   IsOutdoors(r))))) & (forall t (forall s (  IsWithUmbrella(s) ->   IsOutdoors(t)))) & (forall v (forall u (forall w (  IsWithUmbrella(u) ->   WalksBehind(v,w))))) & (forall y (forall z (forall x (IsTakingPicture(x,y) ->   WalksBehind(z,{))))) & (  WalksBehind(|,}) ->   IsOutdoors(~)) & (  IsOutdoors() ->   WalksBehind(,))) -> (exists b (exists d (exists e (IsTakingPicture(d,b) and IsOutdoors(d) and WalksBehind(e,d)))))"
1,,"A child and a parent or older sibling going for a hike. Consequently, two people are going for a hike."," ""A child and a parent or older sibling are going for a hike.""  "," ""Two people are going for a hike.""","IsGoingFor(b, a),  IsGoingFor(c, a),  IsGoingFor(d, a)","IsGoingFor(e, a)",[],"[(' hike', ' a hike')]",[],"(IsGoingFor(b, a) and (IsGoingFor(c, a) or IsGoingFor(d, a)))","IsGoingFor(e, a)","((IsGoingFor(b, a) and (IsGoingFor(c, a) or IsGoingFor(d, a)))) -> (IsGoingFor(e, a))","(exists b (exists c (exists d (exists a ((IsGoingFor(b, a) and (IsGoingFor(c, a) or IsGoingFor(d, a)))))))) -> (exists a (exists e (IsGoingFor(e, a))))"
1,,"Two kids in black trunks bouncing on a wet trampoline. Consequently, children play on trampolines outdoors."," ""Two kids in black trunks are bouncing on a wet trampoline.""  "," ""Children play on trampolines outdoors.""","IsInBlackTrunks(a),  IsBouncing(a),  IsWet(c)","IsPlaying(d),  IsOnTrampolines(d),  IsOutdoors(f)","[('  IsBouncing(a)', 'IsPlaying(d)'), ('  IsBouncing(a)', '  IsOnTrampolines(d)'), ('  IsOnTrampolines(d)', '  IsBouncing(a)')]",[],"[(' Two kids', ' Children'), (' wet trampoline', ' trampolines')]",IsInBlackTrunks(a) and IsBouncing(a) and IsWet(c),IsPlaying(d) and IsOnTrampolines(d) and IsOutdoors(f),(exists a (IsInBlackTrunks(a) and IsBouncing(a) and IsWet(c)) & (forall d (forall a (  IsBouncing(a) -> IsPlaying(d)))) & (forall d (forall a (  IsBouncing(a) ->   IsOnTrampolines(d)))) & (forall d (forall a (  IsOnTrampolines(d) ->   IsBouncing(a))))) -> (forall d (IsPlaying(d) and IsOnTrampolines(d) and IsOutdoors(f))),(exists c (exists a (IsInBlackTrunks(a) and IsBouncing(a) and IsWet(c))) & (forall h (forall g (  IsBouncing(g) -> IsPlaying(h)))) & (forall i (forall j (  IsBouncing(i) ->   IsOnTrampolines(j)))) & (forall k (forall l (  IsOnTrampolines(k) ->   IsBouncing(l))))) -> (exists f (exists d (IsPlaying(d) and IsOnTrampolines(d) and IsOutdoors(f))))
1,,"2 people with backpacks are at a table with a woman with a beige blazer sitting behind it. Thus, 2 people are at a table."," ""Two people with backpacks are at a table."""," ""Two people are at a table.""","IsWithBackpacks(b),  IsAtTable(b)",IsAtTable(c),"[('IsWithBackpacks(b)', 'IsAtTable(c)')]","[(' table', ' table')]","[(' Two people with backpacks', ' Two people')]",IsWithBackpacks(b) and IsAtTable(b),IsAtTable(c),(exists b (IsWithBackpacks(b) and IsAtTable(b)) & (forall b (forall c (IsWithBackpacks(b) -> IsAtTable(c))))) -> (forall c (IsAtTable(c))),(exists b (IsWithBackpacks(b) and IsAtTable(b)) & (forall d (forall e (IsWithBackpacks(d) -> IsAtTable(e))))) -> (exists c (IsAtTable(c)))
1,,"A group stands and watches two men, apparently dressed in some sort of costume, wrestle on the ground. It follows that there are people wrestling."," ""Two men are dressed in costume and wrestling on the ground.""  "," ""There are people wrestling.""","IsDressedInCostume(a),  IsWrestlingOnGround(a)",IsWrestling(d),"[('IsDressedInCostume(a)', 'IsWrestling(d)')]",[],"[(' Two men', ' People')]",IsDressedInCostume(a) and IsWrestlingOnGround(a),IsWrestling(d),(exists a (IsDressedInCostume(a) and IsWrestlingOnGround(a)) & (forall d (forall a (IsDressedInCostume(a) -> IsWrestling(d))))) -> (forall d (IsWrestling(d))),(exists a (IsDressedInCostume(a) and IsWrestlingOnGround(a)) & (forall f (forall e (IsDressedInCostume(e) -> IsWrestling(f))))) -> (exists d (IsWrestling(d)))
1,,"two girls looking out the window at ""Hair at Hart."" Hence, two people look out a window."," Two girls are looking out the window at ""Hair at Hart.""  ", Two people look out a window.,"IsLookingOut(b, a),  IsLookingAt(b, c)","IsLookingOut(d, a)",[],"[(' the window', ' window')]","[(' Two girls', ' Two people')]","IsLookingOut(b, a) and IsLookingAt(b, c)","IsLookingOut(d, a)","(exists b (IsLookingOut(b, a) and IsLookingAt(b, c))) -> (forall d (IsLookingOut(d, a)))","(exists b (exists c (exists a (IsLookingOut(b, a) and IsLookingAt(b, c))))) -> (exists d (exists a (IsLookingOut(d, a))))"
1,,"A man visiting a friend in the hospital. Therefore, a man in a hospital receives a visiting friend.", A man visits a friend in the hospital.  , A man in a hospital receives a visit from a friend.,"Visits(c, a),  IsInHospital(a)","IsInHospital(d),  ReceivesVisit(d, e),  FromFriend(e, a)",[],"[(' friend', ' a friend'), (' hospital', ' hospital')]",[],"Visits(c, a) and IsInHospital(a)","IsInHospital(d) and ReceivesVisit(d, e) and FromFriend(e, a)","(Visits(c, a) and IsInHospital(a)) -> (IsInHospital(d) and ReceivesVisit(d, e) and FromFriend(e, a))","(exists a (exists c (Visits(c, a) and IsInHospital(a)))) -> (exists a (exists d (exists e (IsInHospital(d) and ReceivesVisit(d, e) and FromFriend(e, a)))))"
1,,"A schoolgirl is jumping over a low hurdle. Consequently, a girl is jumping over a hurdle."," ""A schoolgirl is jumping over a low hurdle.""  "," ""A girl is jumping over a hurdle.""","IsJumpingOver(a, b),  IsLow(b)","IsJumpingOver(c, d)",[],[],"[(' A schoolgirl', ' A girl'), (' low hurdle', ' a hurdle')]","IsSchoolgirl(a) and IsJumpingOver(a, b) and IsLow(b)","IsJumpingOver(c, d)","(exists b (exists a (IsSchoolgirl(a) and IsJumpingOver(a, b) and IsLow(b)))) -> (forall d (forall c (IsJumpingOver(c, d))))","(exists b (exists a (IsSchoolgirl(a) and IsJumpingOver(a, b) and IsLow(b)))) -> (exists d (exists c (IsJumpingOver(c, d))))"
1,,"Young Asian girl is sitting on the ground in rubble. Hence, the young Asian girl is outside in the rubble."," ""A young Asian girl is sitting on the ground in rubble.""  "," ""The young Asian girl is outside in rubble.""","IsYoung(b),  IsAsian(b),  IsSittingOn(b, c),  IsInRubble(b)","IsYoung(d),  IsAsian(d),  IsInRubble(d)","[('IsYoung(d)', '  IsSittingOn(b, c)')]","[(' rubble', ' rubble')]",[],"IsYoung(b) and IsAsian(b) and IsSittingOn(b, c) and IsInRubble(b)",IsYoung(d) and IsAsian(d) and IsInRubble(d),"(IsYoung(b) and IsAsian(b) and IsSittingOn(b, c) and IsInRubble(b) & (forall b (forall d (forall c (IsYoung(d) ->   IsSittingOn(b, c)))))) -> (IsYoung(d) and IsAsian(d) and IsInRubble(d))","(exists b (exists c (IsYoung(b) and IsAsian(b) and IsSittingOn(b, c) and IsInRubble(b))) & (forall g (forall f (forall e (IsYoung(e) ->   IsSittingOn(f,g)))))) -> (exists d (IsYoung(d) and IsAsian(d) and IsInRubble(d)))"
1,,"A group of women sing together while wearing matching black dresses. Thus, there are women singing."," ""A group of women sing together wearing matching black dresses.""  "," ""There are women singing.""","SingTogether(a),  WearMatchingBlackDresses(a)","AreWomen(c),  AreSinging(c)","[('SingTogether(a)', 'AreWomen(c)'), ('AreWomen(c)', 'SingTogether(a)'), ('SingTogether(a)', '  AreSinging(c)'), ('  AreSinging(c)', 'SingTogether(a)'), ('  WearMatchingBlackDresses(a)', '  AreSinging(c)')]",[],"[(' A group of women', ' Women')]",SingTogether(a) and WearMatchingBlackDresses(a),AreWomen(c) and AreSinging(c),(exists a (SingTogether(a) and WearMatchingBlackDresses(a)) & (forall c (forall a (SingTogether(a) -> AreWomen(c)))) & (forall a (forall c (AreWomen(c) -> SingTogether(a)))) & (forall c (forall a (SingTogether(a) ->   AreSinging(c)))) & (forall a (forall c (  AreSinging(c) -> SingTogether(a)))) & (forall c (forall a (  WearMatchingBlackDresses(a) ->   AreSinging(c))))) -> (forall c (AreWomen(c) and AreSinging(c))),(exists a (SingTogether(a) and WearMatchingBlackDresses(a)) & (forall d (forall e (SingTogether(d) -> AreWomen(e)))) & (forall g (forall f (AreWomen(f) -> SingTogether(g)))) & (forall i (forall h (SingTogether(h) ->   AreSinging(i)))) & (forall j (forall k (  AreSinging(j) -> SingTogether(k)))) & (forall m (forall l (  WearMatchingBlackDresses(l) ->   AreSinging(m))))) -> (exists c (AreWomen(c) and AreSinging(c)))
1,,Two boys in running clothes stretching. This implies that the boys are stretching.," ""Two boys in running clothes are stretching.""  "," ""The boys are stretching.""","IsInRunningClothes(a),  IsStretching(a)",IsStretching(c),[],[],"[(' Two boys', ' The boys')]",IsInRunningClothes(a) and IsStretching(a),IsStretching(c),(exists a (IsInRunningClothes(a) and IsStretching(a))) -> (forall c (IsStretching(c))),(exists a (IsInRunningClothes(a) and IsStretching(a))) -> (exists c (IsStretching(c)))
1,,A group of young men in a gym take turns scoring in basketball. This implies that guys are indoors., A group of young men in a gym take turns scoring in basketball.  , Guys are indoors.,"IsInGym(a),  TakesTurnsScoring(a),  IsInBasketball(c)",IsIndoors(d),"[('IsInGym(a)', 'IsIndoors(d)'), ('IsIndoors(d)', 'IsInGym(a)'), ('  TakesTurnsScoring(a)', 'IsIndoors(d)'), ('IsIndoors(d)', '  TakesTurnsScoring(a)'), ('  IsInBasketball(c)', 'IsIndoors(d)')]",[],"[(' A group of young men', ' Guys')]",IsInGym(a) and TakesTurnsScoring(a) and IsInBasketball(c),IsIndoors(d),(exists a (IsInGym(a) and TakesTurnsScoring(a) and IsInBasketball(c)) & (forall d (forall a (IsInGym(a) -> IsIndoors(d)))) & (forall d (forall a (IsIndoors(d) -> IsInGym(a)))) & (forall d (forall a (  TakesTurnsScoring(a) -> IsIndoors(d)))) & (forall d (forall a (IsIndoors(d) ->   TakesTurnsScoring(a)))) & (forall d (forall c (  IsInBasketball(c) -> IsIndoors(d))))) -> (forall d (IsIndoors(d))),(exists c (exists a (IsInGym(a) and TakesTurnsScoring(a) and IsInBasketball(c))) & (forall g (forall f (IsInGym(f) -> IsIndoors(g)))) & (forall i (forall h (IsIndoors(h) -> IsInGym(i)))) & (forall j (forall k (  TakesTurnsScoring(j) -> IsIndoors(k)))) & (forall m (forall l (IsIndoors(l) ->   TakesTurnsScoring(m)))) & (forall o (forall n (  IsInBasketball(n) -> IsIndoors(o))))) -> (exists d (IsIndoors(d)))
1,,"An Eastern vendor sits by his stall with a rooster nearby. Consequently, a rooster near a vendor."," ""An Eastern vendor sits by his stall with a rooster nearby.""  "," ""There is a rooster near a vendor.""","IsEastern(a),  SitsBy(a, c),  IsNearby(b, c)","IsNear(b, a)",[],"[(' vendor', ' Eastern vendor'), (' rooster', ' Rooster')]",[],"IsEastern(a) and SitsBy(a, c) and IsNearby(b, c)","IsNear(b, a)","(IsEastern(a) and SitsBy(a, c) and IsNearby(b, c)) -> (IsNear(b, a))","(exists b (exists c (exists a (IsEastern(a) and SitsBy(a, c) and IsNearby(b, c))))) -> (exists b (exists a (IsNear(b, a))))"
1,,"A bird is perched on a tree branch. Thus, a bird is perching in a tree."," ""A bird is perched on a tree branch.""  "," ""A bird is perching in a tree.""","IsPerchedOn(a, b)","IsPerchingIn(a, c)",[],"[(' A bird', ' A bird')]","[(' tree branch', ' a tree')]","IsPerchedOn(a, b)","IsPerchingIn(a, c)","(exists b (IsPerchedOn(a, b))) -> (forall c (IsPerchingIn(a, c)))","(exists b (exists a (IsPerchedOn(a, b)))) -> (exists c (exists a (IsPerchingIn(a, c))))"
1,,"A man in an overcoat putting on his gloves at a subway station. Therefore, a person is in the subway station.", A man in an overcoat is putting on gloves at a subway station.  , A person is in the subway station.,"IsInOvercoat(b),  IsPuttingOnGloves(b),  IsAtSubwayStation(b)",IsInSubwayStation(d),"[('IsInOvercoat(b)', 'IsInSubwayStation(d)'), ('  IsPuttingOnGloves(b)', 'IsInSubwayStation(d)'), ('  IsAtSubwayStation(b)', 'IsInSubwayStation(d)')]","[(' subway station', ' subway station')]","[(' A man in an overcoat', ' A person')]",IsInOvercoat(b) and IsPuttingOnGloves(b) and IsAtSubwayStation(b),IsInSubwayStation(d),(exists b (IsInOvercoat(b) and IsPuttingOnGloves(b) and IsAtSubwayStation(b)) & (forall b (forall d (IsInOvercoat(b) -> IsInSubwayStation(d)))) & (forall b (forall d (  IsPuttingOnGloves(b) -> IsInSubwayStation(d)))) & (forall b (forall d (  IsAtSubwayStation(b) -> IsInSubwayStation(d))))) -> (forall d (IsInSubwayStation(d))),(exists b (IsInOvercoat(b) and IsPuttingOnGloves(b) and IsAtSubwayStation(b)) & (forall f (forall e (IsInOvercoat(e) -> IsInSubwayStation(f)))) & (forall h (forall g (  IsPuttingOnGloves(g) -> IsInSubwayStation(h)))) & (forall i (forall j (  IsAtSubwayStation(i) -> IsInSubwayStation(j))))) -> (exists d (IsInSubwayStation(d)))
1,,"Person with umbrella observes flooded streets with cars in the water. Consequently, a person is outside."," ""The streets are flooded with cars in the water.""  "," ""A person is outside because of the flooded streets.""","AreFloodedWith(a, b),  IsInWater(b)","IsOutside(d),  AreFlooded(a)","[('AreFloodedWith(a, b)', 'IsOutside(d)'), ('AreFloodedWith(a, b)', '  AreFlooded(a)'), ('  IsInWater(b)', 'IsOutside(d)'), ('  IsInWater(b)', '  AreFlooded(a)'), ('  AreFlooded(a)', '  IsInWater(b)')]","[(' flooded streets', ' The streets')]",[],"AreFloodedWith(a, b) and IsInWater(b)",AreFlooded(a) and IsOutside(d),"(AreFloodedWith(a, b) and IsInWater(b) & (forall b (forall d (forall a (AreFloodedWith(a, b) -> IsOutside(d))))) & (forall b (forall a (AreFloodedWith(a, b) ->   AreFlooded(a)))) & (forall b (forall d (  IsInWater(b) -> IsOutside(d)))) & (forall b (forall a (  IsInWater(b) ->   AreFlooded(a)))) & (forall b (forall a (  AreFlooded(a) ->   IsInWater(b))))) -> (AreFlooded(a) and IsOutside(d))","(exists b (exists a (AreFloodedWith(a, b) and IsInWater(b))) & (forall h (forall g (forall f (AreFloodedWith(f,g) -> IsOutside(h))))) & (forall i (forall j (AreFloodedWith(i,j) ->   AreFlooded(i)))) & (forall k (forall l (  IsInWater(k) -> IsOutside(l)))) & (forall m (forall n (  IsInWater(m) ->   AreFlooded(n)))) & (forall o (forall p (  AreFlooded(o) ->   IsInWater(p))))) -> (exists d (exists a (AreFlooded(a) and IsOutside(d))))"
1,,A group of people are camping out on some rocks. This implies that people are outdoors., A group of people are camping on some rocks.  , People are outdoors.,"IsCampingOn(a, b)",IsOutdoors(c),"[('IsCampingOn(a, b)', 'IsOutdoors(c)')]",[],"[(' A group of people', ' People')]","IsCampingOn(a, b)",IsOutdoors(c),"(exists a (IsCampingOn(a, b)) & (forall b (forall c (forall a (IsCampingOn(a, b) -> IsOutdoors(c)))))) -> (forall c (IsOutdoors(c)))","(exists b (exists a (IsCampingOn(a, b))) & (forall g (forall f (forall e (IsCampingOn(e,f) -> IsOutdoors(g)))))) -> (exists c (IsOutdoors(c)))"
1,,A choir made up of varying ages of people are performing. This implies that the choir is singing.," ""A choir made up of varying ages of people is performing.""  "," ""The choir is singing.""","IsPerforming(a),  IsMadeUpOfVaryingAges(a, b)",IsSinging(c),"[('IsPerforming(a)', 'IsSinging(c)'), ('IsSinging(c)', 'IsPerforming(a)')]",[],[],"IsMadeUpOfVaryingAges(a, b) and IsPerforming(a)",IsSinging(c),"(IsMadeUpOfVaryingAges(a, b) and IsPerforming(a) & (forall c (forall a (IsPerforming(a) -> IsSinging(c)))) & (forall a (forall c (IsSinging(c) -> IsPerforming(a))))) -> (IsSinging(c))","(exists b (exists a (IsMadeUpOfVaryingAges(a, b) and IsPerforming(a))) & (forall d (forall e (IsPerforming(d) -> IsSinging(e)))) & (forall g (forall f (IsSinging(f) -> IsPerforming(g))))) -> (exists c (IsSinging(c)))"
1,,A man scales a rock climbing wall. It follows that a man rock climbing.," ""A man scales a rock climbing wall.""  "," ""A man is rock climbing.""","Scales(a, b)",IsRockClimbing(a),"[('Scales(a, b)', 'IsRockClimbing(a)')]","[(' A man', ' A man')]",[],"Scales(a, b)",IsRockClimbing(a),"(Scales(a, b) & (forall b (forall a (Scales(a, b) -> IsRockClimbing(a))))) -> (IsRockClimbing(a))","(exists b (exists a (Scales(a, b))) & (forall d (forall c (Scales(c,d) -> IsRockClimbing(c))))) -> (exists a (IsRockClimbing(a)))"
1,,"A little white dog runs outside, their ears blown back in the wind. It follows that there is an animal outside."," A little white dog runs outside, their ears blown back in the wind.  ", There is an animal outside.,"IsLittle(x),  IsWhite(x),  RunsOutside(x),  AreBlownBackInWind(b)",IsOutside(d),"[('IsLittle(x)', 'IsOutside(d)'), ('  IsWhite(x)', 'IsOutside(d)'), ('  RunsOutside(x)', 'IsOutside(d)'), ('  AreBlownBackInWind(b)', 'IsOutside(d)')]",[],"[(' A little white dog', ' An animal')]",IsLittle(a) and IsWhite(a) and RunsOutside(a) and AreBlownBackInWind(b),IsOutside(d),(exists a (IsLittle(a) and IsWhite(a) and RunsOutside(a) and AreBlownBackInWind(b)) & (forall x (forall d (IsLittle(x) -> IsOutside(d)))) & (forall x (forall d (  IsWhite(x) -> IsOutside(d)))) & (forall x (forall d (  RunsOutside(x) -> IsOutside(d)))) & (forall b (forall d (  AreBlownBackInWind(b) -> IsOutside(d))))) -> (forall d (IsOutside(d))),(exists b (exists a (IsLittle(a) and IsWhite(a) and RunsOutside(a) and AreBlownBackInWind(b))) & (forall f (forall e (IsLittle(e) -> IsOutside(f)))) & (forall h (forall g (  IsWhite(g) -> IsOutside(h)))) & (forall i (forall j (  RunsOutside(i) -> IsOutside(j)))) & (forall k (forall l (  AreBlownBackInWind(k) -> IsOutside(l))))) -> (exists d (IsOutside(d)))
1,,"A bearded man sits near a white van. As a consequence, a man sitting outside near a van."," ""A bearded man sits near a white van.""  "," ""A man is sitting outside near a van.""","IsBearded(a),  SitsNear(a, b),  IsWhiteVan(b)","IsSittingOutside(c),  SitsNear(c, d)",[],[],"[(' Bearded man', ' A man'), (' white van', ' van')]","IsBearded(a) and SitsNear(a, b) and IsWhiteVan(b)","IsSittingOutside(c) and SitsNear(c, d)","(exists b (exists a (IsBearded(a) and SitsNear(a, b) and IsWhiteVan(b)))) -> (forall d (forall c (IsSittingOutside(c) and SitsNear(c, d))))","(exists b (exists a (IsBearded(a) and SitsNear(a, b) and IsWhiteVan(b)))) -> (exists d (exists c (IsSittingOutside(c) and SitsNear(c, d))))"
1,,"Two children wearing hooded tops laughing with each other. Thus, children laugh."," ""Two children wearing hooded tops are laughing with each other.""  "," ""Children laugh.""","IsWearingHoodedTops(a),  AreLaughingWithEachOther(a)",AreLaughing(c),"[('  AreLaughingWithEachOther(a)', 'AreLaughing(c)')]",[],"[(' Two children', ' Children')]",IsWearingHoodedTops(a) and AreLaughingWithEachOther(a),AreLaughing(c),(exists a (IsWearingHoodedTops(a) and AreLaughingWithEachOther(a)) & (forall c (forall a (  AreLaughingWithEachOther(a) -> AreLaughing(c))))) -> (forall c (AreLaughing(c))),(exists a (IsWearingHoodedTops(a) and AreLaughingWithEachOther(a)) & (forall d (forall e (  AreLaughingWithEachOther(d) -> AreLaughing(e))))) -> (exists c (AreLaughing(c)))
1,,"A man in glasses in a basement. Thus, the basement has a man in it."," ""A man is in a basement and wears glasses.""  "," ""The basement has a man in it.""","IsInBasement(a),  WearsGlasses(a)",IsInBasement(a),[],"[(' A man', ' a man')]",[],IsInBasement(a) and WearsGlasses(a),IsInBasement(a),(IsInBasement(a) and WearsGlasses(a)) -> (IsInBasement(a)),(exists a (IsInBasement(a) and WearsGlasses(a))) -> (exists a (IsInBasement(a)))
1,,A man in a white shirt speaks into a microphone as other men gather behind him at a public event. This implies that a man in a white shirt is making a speech in front of a crowd.," ""A man in a white shirt speaks into a microphone at a public event.""  "," ""A man in a white shirt is making a speech in front of a crowd.""","IsInWhiteShirt(a),  SpeaksInto(a, b),  IsAtPublicEvent(a, c)","IsInWhiteShirt(a),  IsMakingSpeech(a, d),  IsInFrontOf(a, e)","[('IsInWhiteShirt(a)', '  IsMakingSpeech(a, d)'), ('  SpeaksInto(a, b)', 'IsInWhiteShirt(a)'), ('IsInWhiteShirt(a)', '  SpeaksInto(a, b)'), ('  SpeaksInto(a, b)', '  IsMakingSpeech(a, d)'), ('  IsAtPublicEvent(a, c)', 'IsInWhiteShirt(a)'), ('IsInWhiteShirt(a)', '  IsAtPublicEvent(a, c)'), ('  IsAtPublicEvent(a, c)', '  IsMakingSpeech(a, d)'), ('  IsMakingSpeech(a, d)', '  IsAtPublicEvent(a, c)')]","[(' A man in a white shirt', ' Man in a white shirt')]",[],"IsInWhiteShirt(a) and SpeaksInto(a, b) and IsAtPublicEvent(a, c)","IsInWhiteShirt(a) and IsMakingSpeech(a, d) and IsInFrontOf(a, e)","(IsInWhiteShirt(a) and SpeaksInto(a, b) and IsAtPublicEvent(a, c) & (forall d (forall a (IsInWhiteShirt(a) ->   IsMakingSpeech(a, d)))) & (forall b (forall a (  SpeaksInto(a, b) -> IsInWhiteShirt(a)))) & (forall b (forall a (IsInWhiteShirt(a) ->   SpeaksInto(a, b)))) & (forall b (forall d (forall a (  SpeaksInto(a, b) ->   IsMakingSpeech(a, d))))) & (forall c (forall a (  IsAtPublicEvent(a, c) -> IsInWhiteShirt(a)))) & (forall c (forall a (IsInWhiteShirt(a) ->   IsAtPublicEvent(a, c)))) & (forall c (forall d (forall a (  IsAtPublicEvent(a, c) ->   IsMakingSpeech(a, d))))) & (forall c (forall d (forall a (  IsMakingSpeech(a, d) ->   IsAtPublicEvent(a, c)))))) -> (IsInWhiteShirt(a) and IsMakingSpeech(a, d) and IsInFrontOf(a, e))","(exists b (exists c (exists a (IsInWhiteShirt(a) and SpeaksInto(a, b) and IsAtPublicEvent(a, c)))) & (forall h (forall g (IsInWhiteShirt(g) ->   IsMakingSpeech(g,h)))) & (forall i (forall j (  SpeaksInto(i,j) -> IsInWhiteShirt(i)))) & (forall k (forall l (IsInWhiteShirt(k) ->   SpeaksInto(k,l)))) & (forall m (forall o (forall n (  SpeaksInto(m,n) ->   IsMakingSpeech(m,o))))) & (forall q (forall p (  IsAtPublicEvent(p,q) -> IsInWhiteShirt(p)))) & (forall r (forall s (IsInWhiteShirt(r) ->   IsAtPublicEvent(r,s)))) & (forall v (forall u (forall t (  IsAtPublicEvent(t,u) ->   IsMakingSpeech(t,v))))) & (forall y (forall x (forall w (  IsMakingSpeech(w,x) ->   IsAtPublicEvent(w,y)))))) -> (exists e (exists d (exists a (IsInWhiteShirt(a) and IsMakingSpeech(a, d) and IsInFrontOf(a, e)))))"
1,,A brown and white dog is chained up near a red chair. It follows that the dog is chained to a chair.," ""A brown and white dog is chained up near a red chair.""  "," ""The dog is chained to a chair.""","IsBrownAndWhite(a),  IsChainedUp(a),  IsNear(a, b)","IsChainedTo(a, c)","[('IsChainedTo(a, c)', '  IsChainedUp(a)')]","[(' The dog', ' Brown and white dog')]","[(' red chair', ' a chair')]","IsBrownAndWhite(a) and IsChainedUp(a) and IsNear(a, b)","IsChainedTo(a, c)","(exists b (IsBrownAndWhite(a) and IsChainedUp(a) and IsNear(a, b)) & (forall c (forall a (IsChainedTo(a, c) ->   IsChainedUp(a))))) -> (forall c (IsChainedTo(a, c)))","(exists b (exists a (IsBrownAndWhite(a) and IsChainedUp(a) and IsNear(a, b))) & (forall f (forall e (IsChainedTo(e,f) ->   IsChainedUp(e))))) -> (exists c (exists a (IsChainedTo(a, c))))"
1,,"This is when daddy taught her how to ride her scooter. Consequently, daddy taught her."," ""Daddy taught her how to ride her scooter.""  "," ""Daddy taught her.""","Taught(a,  b),  HasScooter(b, c)","Taught(a, b)",[],"[(' Daddy', ' Daddy'), (' her', ' her')]",[],"Taught(a, b) and HasScooter(b, c)","Taught(a, b)","(Taught(a, b) and HasScooter(b, c)) -> (Taught(a, b))","(exists b (exists c (exists a (Taught(a, b) and HasScooter(b, c))))) -> (exists b (exists a (Taught(a, b))))"
1,,"A small girl with short brown hair is pushing a pink scooter over grass with brown leaves with threes in the background. Therefore, the girl is outside.", A small girl with short brown hair is pushing a pink scooter over grass with brown leaves with trees in the background., The girl is outside.,"IsSmall(a),  HasShortBrownHair(a),  IsPushing(a, c),  IsPink(c),  IsOverGrass(c, d),  HasBrownLeaves(d, e),  HasTreesInBackground(g, f)",IsOutside(h),"[('IsSmall(a)', 'IsOutside(h)'), ('  IsPushing(a, c)', 'IsOutside(h)'), ('  IsPink(c)', 'IsOutside(h)'), ('  IsOverGrass(c, d)', 'IsOutside(h)'), ('  HasTreesInBackground(g, f)', 'IsOutside(h)')]",[],"[(' A small girl', ' The girl')]","IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, c) and IsPink(c) and IsOverGrass(c, d) and HasBrownLeaves(d, e) and HasTreesInBackground(g, f)",IsOutside(h),"(exists a (IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, c) and IsPink(c) and IsOverGrass(c, d) and HasBrownLeaves(d, e) and HasTreesInBackground(g, f)) & (forall h (forall a (IsSmall(a) -> IsOutside(h)))) & (forall h (forall c (forall a (  IsPushing(a, c) -> IsOutside(h))))) & (forall h (forall c (  IsPink(c) -> IsOutside(h)))) & (forall h (forall d (forall c (  IsOverGrass(c, d) -> IsOutside(h))))) & (forall h (forall g (forall f (  HasTreesInBackground(g, f) -> IsOutside(h)))))) -> (forall h (IsOutside(h)))","(exists c (exists f (exists a (exists e (exists g (exists d (IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, c) and IsPink(c) and IsOverGrass(c, d) and HasBrownLeaves(d, e) and HasTreesInBackground(g, f))))))) & (forall i (forall j (IsSmall(i) -> IsOutside(j)))) & (forall m (forall k (forall l (  IsPushing(k,l) -> IsOutside(m))))) & (forall o (forall n (  IsPink(n) -> IsOutside(o)))) & (forall q (forall r (forall p (  IsOverGrass(p,q) -> IsOutside(r))))) & (forall u (forall t (forall s (  HasTreesInBackground(s,t) -> IsOutside(u)))))) -> (exists h (IsOutside(h)))"
1,,"A man wearing a black cap is suspended in the air on a swing, as children are swinging on a swing set. Hence, a man in a black hat is swinging with some children.", A man wearing a black cap is suspended in the air on a swing while children are swinging on a swing set., A man in a black hat is swinging with some children.,"IsWearingBlackCap(b),  IsSuspendedInAir(b),  IsOnSwing(b),  IsSwinging(a),  IsOnSwingSet(a)","IsInBlackHat(f),  IsSwinging(f),  IsSwinging(a)","[('  IsOnSwing(b)', '  IsSwinging(f)'), ('  IsOnSwingSet(a)', '  IsSwinging(a)'), ('  IsSwinging(a)', '  IsOnSwingSet(a)')]","[(' children', ' children')]",[],IsWearingBlackCap(b) and IsSuspendedInAir(b) and IsOnSwing(b) and IsSwinging(a) and IsOnSwingSet(a),IsInBlackHat(f) and IsSwinging(f) and IsSwinging(a),(IsWearingBlackCap(b) and IsSuspendedInAir(b) and IsOnSwing(b) and IsSwinging(a) and IsOnSwingSet(a) & (forall b (forall f (  IsOnSwing(b) ->   IsSwinging(f)))) & (forall a (  IsOnSwingSet(a) ->   IsSwinging(a))) & (forall a (  IsSwinging(a) ->   IsOnSwingSet(a)))) -> (IsInBlackHat(f) and IsSwinging(f) and IsSwinging(a)),(exists b (exists a (IsWearingBlackCap(b) and IsSuspendedInAir(b) and IsOnSwing(b) and IsSwinging(a) and IsOnSwingSet(a))) & (forall h (forall g (  IsOnSwing(g) ->   IsSwinging(h)))) & (forall i (  IsOnSwingSet(i) ->   IsSwinging(i))) & (forall j (  IsSwinging(j) ->   IsOnSwingSet(j)))) -> (exists f (exists a (IsInBlackHat(f) and IsSwinging(f) and IsSwinging(a))))
1,,"A man with a blue, collared shirt sits in front of another man. This implies that a man sits in front of another man."," ""A man with a blue, collared shirt sits in front of another man.""  "," ""A man sits in front of another man.""","IsWearingCollaredShirt(b),  SitsInFrontOf(b, a)","SitsInFrontOf(d, a)",[],"[(' another man', ' another man')]",[],"IsWearingCollaredShirt(b) and SitsInFrontOf(b, a)","SitsInFrontOf(d, a)","(IsWearingCollaredShirt(b) and SitsInFrontOf(b, a)) -> (SitsInFrontOf(d, a))","(exists b (exists a (IsWearingCollaredShirt(b) and SitsInFrontOf(b, a)))) -> (exists d (exists a (SitsInFrontOf(d, a))))"
1,,"A young man in an orange shirt, maneuvers a skateboard at the top of a ramp. Therefore, a person rides a skateboard."," ""A young man in an orange shirt maneuvers a skateboard at the top of a ramp."""," ""A person rides a skateboard.""","IsYoung(b),  IsInOrangeShirt(b),  ManeuversSkateboard(b),  IsAtTopOfRamp(b)",RidesSkateboard(e),"[('  IsInOrangeShirt(b)', 'RidesSkateboard(e)'), ('  ManeuversSkateboard(b)', 'RidesSkateboard(e)')]","[(' skateboard', ' a skateboard')]","[(' A young man', ' A person')]",IsYoung(b) and IsInOrangeShirt(b) and ManeuversSkateboard(b) and IsAtTopOfRamp(b),RidesSkateboard(e),(exists b (IsYoung(b) and IsInOrangeShirt(b) and ManeuversSkateboard(b) and IsAtTopOfRamp(b)) & (forall b (forall e (  IsInOrangeShirt(b) -> RidesSkateboard(e)))) & (forall b (forall e (  ManeuversSkateboard(b) -> RidesSkateboard(e))))) -> (forall e (RidesSkateboard(e))),(exists b (IsYoung(b) and IsInOrangeShirt(b) and ManeuversSkateboard(b) and IsAtTopOfRamp(b)) & (forall h (forall g (  IsInOrangeShirt(g) -> RidesSkateboard(h)))) & (forall i (forall j (  ManeuversSkateboard(i) -> RidesSkateboard(j))))) -> (exists e (RidesSkateboard(e)))
1,,"A large group of people walking in a busy city at night. Consequently, people are walking a city.", A large group of people are walking in a busy city at night.  , People are walking in a city.,"IsLargeGroupOfPeople(b),  IsWalkingInCity(b,a),  IsAtNight(b,c)","IsWalkingInCity(d,a)",[],"[(' city', ' busy city')]","[(' A large group of people', ' People')]","IsLargeGroupOfPeople(b) and IsWalkingInCity(b,a) and IsAtNight(b,c)","IsWalkingInCity(d,a)","(exists b (IsLargeGroupOfPeople(b) and IsWalkingInCity(b,a) and IsAtNight(b,c))) -> (forall d (IsWalkingInCity(d,a)))","(exists b (exists c (exists a (IsLargeGroupOfPeople(b) and IsWalkingInCity(b,a) and IsAtNight(b,c))))) -> (exists d (exists a (IsWalkingInCity(d,a))))"
1,,"A group of people are walking by a van. Therefore, some people outdoors."," ""A group of people are walking by a van.""  "," ""Some people are outdoors.""","AreWalkingBy(a, b)",AreOutdoors(c),"[('AreWalkingBy(a, b)', 'AreOutdoors(c)')]",[],"[(' A group of people', ' Some people')]","AreWalkingBy(a, b)",AreOutdoors(c),"(exists a (AreWalkingBy(a, b)) & (forall b (forall c (forall a (AreWalkingBy(a, b) -> AreOutdoors(c)))))) -> (forall c (AreOutdoors(c)))","(exists b (exists a (AreWalkingBy(a, b))) & (forall g (forall f (forall e (AreWalkingBy(e,f) -> AreOutdoors(g)))))) -> (exists c (AreOutdoors(c)))"
1,,"A white and a black dog fighting in a fenced in room. As a consequence, the dogs are fighting."," ""A white and a black dog are fighting in a fenced-in room.""  "," ""The dogs are fighting.""","IsFighting(a),  IsInFencedRoom(a)",IsFighting(c),[],[],"[(' A white and a black dog', ' The dogs')]",IsFighting(a) and IsInFencedRoom(a),IsFighting(c),(exists a (IsFighting(a) and IsInFencedRoom(a))) -> (forall c (IsFighting(c))),(exists a (IsFighting(a) and IsInFencedRoom(a))) -> (exists c (IsFighting(c)))
1,,"A white greyhound dog wearing a muzzle runs around a track. Hence, the dog is racing other dogs.", A white greyhound dog wearing a muzzle runs around a track.  , The dog is racing other dogs.,"IsWearing(a,b),  RunsAround(a,c)","IsRacing(d),  IsRacingAgainst(d, e)","[('  RunsAround(a,c)', 'IsRacing(d)'), ('  RunsAround(a,c)', '  IsRacingAgainst(d, e)')]",[],"[(' A white greyhound dog', ' The dog')]","IsWearing(a,b) and RunsAround(a,c)","IsRacing(d) and IsRacingAgainst(d, e)","(exists a (IsWearing(a,b) and RunsAround(a,c)) & (forall c (forall d (forall a (  RunsAround(a,c) -> IsRacing(d))))) & (forall e (forall c (forall d (forall a (  RunsAround(a,c) ->   IsRacingAgainst(d, e))))))) -> (forall d (IsRacing(d) and IsRacingAgainst(d, e)))","(exists b (exists c (exists a (IsWearing(a,b) and RunsAround(a,c)))) & (forall h (forall g (forall f (  RunsAround(f,g) -> IsRacing(h))))) & (forall i (forall j (forall l (forall k (  RunsAround(i,j) ->   IsRacingAgainst(k,l))))))) -> (exists d (exists e (IsRacing(d) and IsRacingAgainst(d, e))))"
1,,The pitcher is pitching the ball in a game of baseball. It follows that the pitcher throws the ball.," ""The pitcher pitches the ball in a game of baseball.""  "," ""The pitcher throws the ball.""","PitchesBall(a, b),  InGameOfBaseball(b, c)","ThrowsBall(a, b)","[('PitchesBall(a, b)', 'ThrowsBall(a, b)')]","[(' The pitcher', ' The pitcher'), (' the ball', ' the ball')]","[(' a game of baseball', ' The pitcher')]","PitchesBall(a, b) and InGameOfBaseball(b, c)","ThrowsBall(a, b)","(exists c (PitchesBall(a, b) and InGameOfBaseball(b, c)) & (forall b (forall a (PitchesBall(a, b) -> ThrowsBall(a, b))))) -> (forall a (ThrowsBall(a, b)))","(exists b (exists c (exists a (PitchesBall(a, b) and InGameOfBaseball(b, c)))) & (forall d (forall e (PitchesBall(d,e) -> ThrowsBall(d,e))))) -> (exists b (exists a (ThrowsBall(a, b))))"
1,,"Girl in a red coat, blue head wrap and jeans is making a snow angel. As a consequence, a girl outside plays in the snow."," ""A girl in a red coat, blue head wrap, and jeans is making a snow angel.""  "," ""A girl outside plays in the snow.""","IsInRedCoat(a),  IsInBlueHeadWrap(a),  IsInJeans(a),  IsMakingSnowAngel(a)","IsOutside(a),  PlaysInSnow(a)","[('IsInRedCoat(a)', 'IsOutside(a)'), ('IsInRedCoat(a)', '  PlaysInSnow(a)'), ('  IsInBlueHeadWrap(a)', 'IsOutside(a)'), ('IsOutside(a)', '  IsInBlueHeadWrap(a)'), ('  IsInBlueHeadWrap(a)', '  PlaysInSnow(a)'), ('  IsInJeans(a)', 'IsOutside(a)'), ('  IsInJeans(a)', '  PlaysInSnow(a)'), ('  IsMakingSnowAngel(a)', 'IsOutside(a)'), ('IsOutside(a)', '  IsMakingSnowAngel(a)'), ('  IsMakingSnowAngel(a)', '  PlaysInSnow(a)'), ('  PlaysInSnow(a)', '  IsMakingSnowAngel(a)')]","[(' A girl', ' A girl')]",[],IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a),IsOutside(a) and PlaysInSnow(a),(IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a) & (forall a (IsInRedCoat(a) -> IsOutside(a))) & (forall a (IsInRedCoat(a) ->   PlaysInSnow(a))) & (forall a (  IsInBlueHeadWrap(a) -> IsOutside(a))) & (forall a (IsOutside(a) ->   IsInBlueHeadWrap(a))) & (forall a (  IsInBlueHeadWrap(a) ->   PlaysInSnow(a))) & (forall a (  IsInJeans(a) -> IsOutside(a))) & (forall a (  IsInJeans(a) ->   PlaysInSnow(a))) & (forall a (  IsMakingSnowAngel(a) -> IsOutside(a))) & (forall a (IsOutside(a) ->   IsMakingSnowAngel(a))) & (forall a (  IsMakingSnowAngel(a) ->   PlaysInSnow(a))) & (forall a (  PlaysInSnow(a) ->   IsMakingSnowAngel(a)))) -> (IsOutside(a) and PlaysInSnow(a)),(exists a (IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a)) & (forall g (IsInRedCoat(g) -> IsOutside(g))) & (forall h (IsInRedCoat(h) ->   PlaysInSnow(h))) & (forall i (  IsInBlueHeadWrap(i) -> IsOutside(i))) & (forall j (IsOutside(j) ->   IsInBlueHeadWrap(j))) & (forall k (  IsInBlueHeadWrap(k) ->   PlaysInSnow(k))) & (forall l (  IsInJeans(l) -> IsOutside(l))) & (forall m (  IsInJeans(m) ->   PlaysInSnow(m))) & (forall n (  IsMakingSnowAngel(n) -> IsOutside(n))) & (forall o (IsOutside(o) ->   IsMakingSnowAngel(o))) & (forall p (  IsMakingSnowAngel(p) ->   PlaysInSnow(p))) & (forall q (  PlaysInSnow(q) ->   IsMakingSnowAngel(q)))) -> (exists a (IsOutside(a) and PlaysInSnow(a)))
1,,"Men in an office with computers and a projector screen. Consequently, there are computers and a projector screen in the room."," ""Men are in an office with computers and a projector screen.""  "," ""There are computers and a projector screen in the room.""","IsInOffice(d),  HasComputers(a),  HasProjectorScreen(a)","HasComputers(a),  HasProjectorScreen(a)","[('IsInOffice(d)', 'HasComputers(a)'), ('IsInOffice(d)', '  HasProjectorScreen(a)'), ('  HasComputers(a)', '  HasProjectorScreen(a)'), ('  HasProjectorScreen(a)', '  HasComputers(a)'), ('  HasProjectorScreen(a)', 'HasComputers(a)'), ('HasComputers(a)', '  HasProjectorScreen(a)')]","[(' room', ' office'), (' computers', ' Computers'), (' projector screen', ' projector screen')]",[],IsInOffice(d) and HasComputers(a) and HasProjectorScreen(a),HasComputers(a) and HasProjectorScreen(a),(IsInOffice(d) and HasComputers(a) and HasProjectorScreen(a) & (forall d (forall a (IsInOffice(d) -> HasComputers(a)))) & (forall d (forall a (IsInOffice(d) ->   HasProjectorScreen(a)))) & (forall a (  HasComputers(a) ->   HasProjectorScreen(a))) & (forall a (  HasProjectorScreen(a) ->   HasComputers(a))) & (forall a (  HasProjectorScreen(a) -> HasComputers(a))) & (forall a (HasComputers(a) ->   HasProjectorScreen(a)))) -> (HasComputers(a) and HasProjectorScreen(a)),(exists d (exists a (IsInOffice(d) and HasComputers(a) and HasProjectorScreen(a))) & (forall h (forall g (IsInOffice(g) -> HasComputers(h)))) & (forall i (forall j (IsInOffice(i) ->   HasProjectorScreen(j)))) & (forall k (  HasComputers(k) ->   HasProjectorScreen(k))) & (forall l (  HasProjectorScreen(l) ->   HasComputers(l))) & (forall m (  HasProjectorScreen(m) -> HasComputers(m))) & (forall n (HasComputers(n) ->   HasProjectorScreen(n)))) -> (exists a (HasComputers(a) and HasProjectorScreen(a)))
1,,"A small child in a red jacket is sitting on a man's shoulders and holding his head. Therefore, the child's hands are on the man's head.", A small child in a red jacket is sitting on a man's shoulders and holding the man's head.  , The child's hands are on the man's head.,"IsSmall(a),  IsInRedJacket(a),  IsSittingOn(a, d),  IsHolding(a, b)","IsOn(a, b)",[],"[("" The child's hands"", ' A small child'), ("" the man's head"", "" the man's head"")]",[],"IsSmall(a) and IsInRedJacket(a) and IsSittingOn(a, d) and IsHolding(a, b)","IsOn(a, b)","(IsSmall(a) and IsInRedJacket(a) and IsSittingOn(a, d) and IsHolding(a, b)) -> (IsOn(a, b))","(exists b (exists d (exists a (IsSmall(a) and IsInRedJacket(a) and IsSittingOn(a, d) and IsHolding(a, b))))) -> (exists b (exists a (IsOn(a, b))))"
1,,Three girls are standing and talking to each other. It follows that three girls are talking.," ""Three girls are standing and talking to each other.""  "," ""Three girls are talking.""","IsStanding(a),  IsTalkingToEachOther(a)",IsTalking(a),"[('  IsTalkingToEachOther(a)', 'IsTalking(a)')]","[(' Three girls', ' Three girls')]",[],IsStanding(a) and IsTalkingToEachOther(a),IsTalking(a),(IsStanding(a) and IsTalkingToEachOther(a) & (forall a (  IsTalkingToEachOther(a) -> IsTalking(a)))) -> (IsTalking(a)),(exists a (IsStanding(a) and IsTalkingToEachOther(a)) & (forall b (  IsTalkingToEachOther(b) -> IsTalking(b)))) -> (exists a (IsTalking(a)))
1,,"a man with a cap and not wearing shirt is laying a wooden bench. Consequently, a man relaxes on a bench.", A man with a cap and not wearing a shirt is laying on a wooden bench., A man relaxes on a bench.,"IsWearingCap(b),  IsNotWearingShirt(b),  IsLayingOn(b, a)","IsRelaxing(c),  IsOn(c, a)","[('IsWearingCap(b)', 'IsRelaxing(c)')]","[(' a bench', ' a wooden bench')]","[(' A man with a cap', ' A man')]","IsWearingCap(b) and IsNotWearingShirt(b) and IsLayingOn(b, a)","IsRelaxing(c) and IsOn(c, a)","(exists b (IsWearingCap(b) and IsNotWearingShirt(b) and IsLayingOn(b, a)) & (forall b (forall c (IsWearingCap(b) -> IsRelaxing(c))))) -> (forall c (IsRelaxing(c) and IsOn(c, a)))","(exists b (exists a (IsWearingCap(b) and IsNotWearingShirt(b) and IsLayingOn(b, a))) & (forall f (forall e (IsWearingCap(e) -> IsRelaxing(f))))) -> (exists a (exists c (IsRelaxing(c) and IsOn(c, a))))"
1,,"A man in a red shirt is being filmed by another man on a sports field with a huge audience of people watching and cheering. Therefore, the man is being filmed by another man.", A man in a red shirt is being filmed on a sports field with a huge audience watching and cheering., The man is being filmed by another man.,"IsInRedShirt(a),  IsBeingFilmed(a),  IsOnSportsField(a),  IsWatching(c),  IsCheering(c)","IsBeingFilmed(d),  IsFilming(e)","[('  IsFilming(e)', '  IsBeingFilmed(a)'), ('  IsFilming(e)', '  IsWatching(c)')]",[],"[(' Man in a red shirt', ' The man')]",IsInRedShirt(a) and IsBeingFilmed(a) and IsOnSportsField(a) and IsWatching(c) and IsCheering(c),IsBeingFilmed(d) and IsFilming(e),(exists a (IsInRedShirt(a) and IsBeingFilmed(a) and IsOnSportsField(a) and IsWatching(c) and IsCheering(c)) & (forall a (forall e (  IsFilming(e) ->   IsBeingFilmed(a)))) & (forall c (forall e (  IsFilming(e) ->   IsWatching(c))))) -> (forall d (IsBeingFilmed(d) and IsFilming(e))),(exists c (exists a (IsInRedShirt(a) and IsBeingFilmed(a) and IsOnSportsField(a) and IsWatching(c) and IsCheering(c))) & (forall g (forall f (  IsFilming(f) ->   IsBeingFilmed(g)))) & (forall i (forall h (  IsFilming(h) ->   IsWatching(i))))) -> (exists d (exists e (IsBeingFilmed(d) and IsFilming(e))))
1,,"A man in a suit cheering in a library in front of children. Thus, a guy is cheering near some children.", A man in a suit is cheering in a library in front of children.  , A guy is cheering near some children.,"IsInSuit(b),  IsCheering(b),  IsInLibrary(b),  IsInFrontOfChildren(b)","IsCheering(d),  IsNearChildren(d)","[('  IsCheering(b)', '  IsNearChildren(d)'), ('  IsInLibrary(b)', 'IsCheering(d)'), ('  IsInLibrary(b)', '  IsNearChildren(d)'), ('  IsInFrontOfChildren(b)', 'IsCheering(d)'), ('  IsInFrontOfChildren(b)', '  IsNearChildren(d)'), ('  IsNearChildren(d)', '  IsInFrontOfChildren(b)')]","[(' some children', ' children')]","[(' Man in a suit', ' A guy')]",IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b),IsCheering(d) and IsNearChildren(d),(exists b (IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b)) & (forall b (forall d (  IsCheering(b) ->   IsNearChildren(d)))) & (forall b (forall d (  IsInLibrary(b) -> IsCheering(d)))) & (forall b (forall d (  IsInLibrary(b) ->   IsNearChildren(d)))) & (forall b (forall d (  IsInFrontOfChildren(b) -> IsCheering(d)))) & (forall b (forall d (  IsInFrontOfChildren(b) ->   IsNearChildren(d)))) & (forall b (forall d (  IsNearChildren(d) ->   IsInFrontOfChildren(b))))) -> (forall d (IsCheering(d) and IsNearChildren(d))),(exists b (IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b)) & (forall g (forall f (  IsCheering(f) ->   IsNearChildren(g)))) & (forall i (forall h (  IsInLibrary(h) -> IsCheering(i)))) & (forall j (forall k (  IsInLibrary(j) ->   IsNearChildren(k)))) & (forall m (forall l (  IsInFrontOfChildren(l) -> IsCheering(m)))) & (forall o (forall n (  IsInFrontOfChildren(n) ->   IsNearChildren(o)))) & (forall q (forall p (  IsNearChildren(p) ->   IsInFrontOfChildren(q))))) -> (exists d (IsCheering(d) and IsNearChildren(d)))
1,,A man in suit waiting for the green light. This implies that a man waits at a red light., A man in a suit waits for the green light.  , A man waits at a red light.,"IsInSuit(a),  WaitsForGreenLight(a)",WaitsAtRedLight(c),"[('  WaitsForGreenLight(a)', 'WaitsAtRedLight(c)')]",[],"[(' A man in a suit', ' A man')]",IsInSuit(a) and WaitsForGreenLight(a),WaitsAtRedLight(c),(exists a (IsInSuit(a) and WaitsForGreenLight(a)) & (forall c (forall a (  WaitsForGreenLight(a) -> WaitsAtRedLight(c))))) -> (forall c (WaitsAtRedLight(c))),(exists a (IsInSuit(a) and WaitsForGreenLight(a)) & (forall f (forall e (  WaitsForGreenLight(e) -> WaitsAtRedLight(f))))) -> (exists c (WaitsAtRedLight(c)))
1,,"A man smokes while leaning against a pillar, which has a ""missing person"" flier posted on it. Thus, a guy smoking against a wall with a flier on it."," ""A man is smoking while leaning against a pillar with a 'missing person' flier posted on it.""  "," ""A guy smoking against a wall with a flier on it.""","IsSmoking(a),  IsLeaningAgainst(a, b),  IsPostedOn(c, b)","IsSmoking(d),  IsAgainst(d, e),  IsOn(f, e)",[],[],"[("" 'missing person' flier"", ' flier')]","IsSmoking(a) and IsLeaningAgainst(a, b) and IsPostedOn(c, b)","IsSmoking(d) and IsAgainst(d, e) and IsOn(f, e)","(exists c (IsSmoking(a) and IsLeaningAgainst(a, b) and IsPostedOn(c, b))) -> (forall f (IsSmoking(d) and IsAgainst(d, e) and IsOn(f, e)))","(exists b (exists c (exists a (IsSmoking(a) and IsLeaningAgainst(a, b) and IsPostedOn(c, b))))) -> (exists f (exists d (exists e (IsSmoking(d) and IsAgainst(d, e) and IsOn(f, e)))))"
1,,"A woman is standing at a podium. Thus, a person is at a podium."," ""A woman is standing at a podium.""  "," ""A person is at a podium.""","IsStandingAt(b, a)","IsAt(c, a)","[('IsStandingAt(b, a)', 'IsAt(c, a)')]","[(' podium', ' podium')]","[(' A woman', ' A person')]","IsStandingAt(b, a)","IsAt(c, a)","(exists b (IsStandingAt(b, a)) & (forall b (forall c (forall a (IsStandingAt(b, a) -> IsAt(c, a)))))) -> (forall c (IsAt(c, a)))","(exists b (exists a (IsStandingAt(b, a))) & (forall f (forall d (forall e (IsStandingAt(d,e) -> IsAt(f,e)))))) -> (exists a (exists c (IsAt(c, a))))"
1,,Four boys are about to be hit by an approaching wave. It follows that a wave is about hit some boys.," ""Four boys are about to be hit by an approaching wave.""  "," ""A wave is about to hit some boys.""","IsApproaching(a),  IsHitByWave(b)","IsAboutToHit(a, c)","[('IsApproaching(a)', 'IsAboutToHit(a, c)'), ('IsAboutToHit(a, c)', '  IsHitByWave(b)')]","[(' wave', ' A wave')]","[(' Four boys', ' some boys')]",IsApproaching(a) and IsHitByWave(b),"IsAboutToHit(a, c)","(exists b (IsApproaching(a) and IsHitByWave(b)) & (forall c (forall a (IsApproaching(a) -> IsAboutToHit(a, c)))) & (forall b (forall c (forall a (IsAboutToHit(a, c) ->   IsHitByWave(b)))))) -> (forall c (IsAboutToHit(a, c)))","(exists b (exists a (IsApproaching(a) and IsHitByWave(b))) & (forall f (forall e (IsApproaching(e) -> IsAboutToHit(e,f)))) & (forall i (forall h (forall g (IsAboutToHit(g,h) ->   IsHitByWave(i)))))) -> (exists c (exists a (IsAboutToHit(a, c))))"
1,,"people are sitting on a bench in front of buildings. Thus, some people are seated on a bench outside."," ""People are sitting on a bench in front of buildings.""  "," ""People are seated on a bench outside.""","IsSittingOn(a, b),  IsInFrontOf(b, c)","IsSeatedOn(a, b),  IsOutside(b, d)","[('IsSittingOn(a, b)', 'IsSeatedOn(a, b)'), ('IsSeatedOn(a, b)', 'IsSittingOn(a, b)'), ('  IsOutside(b, d)', 'IsSittingOn(a, b)')]","[(' People', ' People'), (' bench', ' bench')]",[],"IsSittingOn(a, b) and IsInFrontOf(b, c)","IsSeatedOn(a, b) and IsOutside(b, d)","(IsSittingOn(a, b) and IsInFrontOf(b, c) & (forall b (forall a (IsSittingOn(a, b) -> IsSeatedOn(a, b)))) & (forall b (forall a (IsSeatedOn(a, b) -> IsSittingOn(a, b)))) & (forall b (forall d (forall a (  IsOutside(b, d) -> IsSittingOn(a, b)))))) -> (IsSeatedOn(a, b) and IsOutside(b, d))","(exists b (exists c (exists a (IsSittingOn(a, b) and IsInFrontOf(b, c)))) & (forall f (forall e (IsSittingOn(e,f) -> IsSeatedOn(e,f)))) & (forall h (forall g (IsSeatedOn(g,h) -> IsSittingOn(g,h)))) & (forall i (forall j (forall l (forall k (  IsOutside(i,j) -> IsSittingOn(k,l))))))) -> (exists b (exists d (exists a (IsSeatedOn(a, b) and IsOutside(b, d)))))"
1,,The skateboarder is jumping his board in the air while another skateboarder watches. This implies that a skateboarder is jumping.," ""The skateboarder is jumping his board in the air.""  "," ""A skateboarder is jumping.""","IsJumpingBoard(a),  IsInTheAir(a)",IsJumping(a),"[('IsJumpingBoard(a)', 'IsJumping(a)'), ('  IsInTheAir(a)', 'IsJumping(a)')]","[(' The skateboarder', ' A skateboarder')]",[],IsJumpingBoard(a) and IsInTheAir(a),IsJumping(a),(IsJumpingBoard(a) and IsInTheAir(a) & (forall a (IsJumpingBoard(a) -> IsJumping(a))) & (forall a (  IsInTheAir(a) -> IsJumping(a)))) -> (IsJumping(a)),(exists a (IsJumpingBoard(a) and IsInTheAir(a)) & (forall e (IsJumpingBoard(e) -> IsJumping(e))) & (forall f (  IsInTheAir(f) -> IsJumping(f)))) -> (exists a (IsJumping(a)))
1,,"A man wearing a black hat and coat makes a face with a crowd behind him. As a consequence, a guy is standing near a crowd of people.", A man wearing a black hat and coat makes a face with a crowd behind him., A guy is standing near a crowd of people.,"IsWearingBlackHat(a),  IsWearingCoat(a),  MakesFace(a),  IsBehind(a, e)","IsStandingNear(f, g)",[],[],"[(' A man', ' a crowd of people'), (' crowd', ' a crowd of people')]","IsWearingBlackHat(a) and IsWearingCoat(a) and MakesFace(a) and IsBehind(a, e)","IsStandingNear(f, g)","(exists e (exists a (IsWearingBlackHat(a) and IsWearingCoat(a) and MakesFace(a) and IsBehind(a, e)))) -> (forall g (IsStandingNear(f, g)))","(exists e (exists a (IsWearingBlackHat(a) and IsWearingCoat(a) and MakesFace(a) and IsBehind(a, e)))) -> (exists g (exists f (IsStandingNear(f, g))))"
1,,"A group of soldiers march in a parade. Thus, a group of people march in a parade.", A group of soldiers march in a parade.  , A group of people march in a parade.,MarchesInParade(b),MarchesInParade(c),[],"[(' parade', ' parade')]","[(' A group of soldiers', ' A group of people'), (' parade', ' A group of people')]",MarchesInParade(b),MarchesInParade(c),(exists b (MarchesInParade(b))) -> (forall c (MarchesInParade(c))),(exists b (MarchesInParade(b))) -> (exists c (MarchesInParade(c)))
1,,The 3 dogs are cruising down the street. This implies that three dogs together.," ""The three dogs are cruising down the street.""  "," ""Three dogs are together.""","IsCruisingDown(a, b)",AreTogether(a),"[('IsCruisingDown(a, b)', 'AreTogether(a)')]","[(' The three dogs', ' Three dogs')]",[],"IsCruisingDown(a, b)",AreTogether(a),"(IsCruisingDown(a, b) & (forall b (forall a (IsCruisingDown(a, b) -> AreTogether(a))))) -> (AreTogether(a))","(exists b (exists a (IsCruisingDown(a, b))) & (forall d (forall e (IsCruisingDown(d,e) -> AreTogether(d))))) -> (exists a (AreTogether(a)))"
1,,"The gentleman is speaking while the others are listening. As a consequence, the man is being given respect."," ""The gentleman is speaking while the others are listening."""," ""The man is given respect.""","IsSpeaking(a),  IsListening(b)",IsGivenRespect(c),[],[],"[(' The gentleman', ' The man')]",IsSpeaking(a) and IsListening(b),IsGivenRespect(c),(exists a (IsSpeaking(a) and IsListening(b))) -> (forall c (IsGivenRespect(c))),(exists b (exists a (IsSpeaking(a) and IsListening(b)))) -> (exists c (IsGivenRespect(c)))
1,,"One child in black is walking down a hill covered in white snow while 2 children are on their knees. Thus, there are three children in this picture, and they are all outside."," ""One child is walking down a hill and two children are on their knees."""," ""There are three children outside in this picture.""","IsWalkingDownHill(a),  IsOnKnees(c)",IsOutside(e),"[('IsWalkingDownHill(a)', 'IsOutside(e)'), ('  IsOnKnees(c)', 'IsOutside(e)'), ('IsOutside(e)', '  IsOnKnees(c)')]",[],[],IsWalkingDownHill(a) and IsOnKnees(c),IsOutside(e),(IsWalkingDownHill(a) and IsOnKnees(c) & (forall e (forall a (IsWalkingDownHill(a) -> IsOutside(e)))) & (forall e (forall c (  IsOnKnees(c) -> IsOutside(e)))) & (forall c (forall e (IsOutside(e) ->   IsOnKnees(c))))) -> (IsOutside(e)),(exists c (exists a (IsWalkingDownHill(a) and IsOnKnees(c))) & (forall h (forall g (IsWalkingDownHill(g) -> IsOutside(h)))) & (forall i (forall j (  IsOnKnees(i) -> IsOutside(j)))) & (forall k (forall l (IsOutside(k) ->   IsOnKnees(l))))) -> (exists e (IsOutside(e)))
1,,A group of people are sight seeing and taking pictures. It follows that there are a group of people., A group of people are sightseeing and taking pictures.  , There are a group of people.,"IsSightseeing(a),  IsTakingPictures(a)",Exist(a),"[('IsSightseeing(a)', 'Exist(a)'), ('  IsTakingPictures(a)', 'Exist(a)')]","[(' Group of people', ' A group of people')]",[],IsSightseeing(a) and IsTakingPictures(a),Exist(a),(IsSightseeing(a) and IsTakingPictures(a) & (forall a (IsSightseeing(a) -> Exist(a))) & (forall a (  IsTakingPictures(a) -> Exist(a)))) -> (Exist(a)),(exists a (IsSightseeing(a) and IsTakingPictures(a)) & (forall d (IsSightseeing(d) -> Exist(d))) & (forall e (  IsTakingPictures(e) -> Exist(e)))) -> (exists a (Exist(a)))
1,,"Army men grilling a lot of meat while his troop looks on. Hence, some of the people here have been in the armed forces."," ""An army man is grilling a lot of meat while his troop looks on.""  "," ""Some of the people here have been in the armed forces.""","IsArmyMan(a),  IsGrilling(a, b),  IsLookedOnByTroop(b, c)","IsInArmedForces(d, e)","[('IsArmyMan(a)', 'IsInArmedForces(d, e)'), ('  IsGrilling(a, b)', 'IsInArmedForces(d, e)')]",[],"[(' An army man', ' the armed forces'), (' his troop', ' the armed forces')]","IsArmyMan(a) and IsGrilling(a, b) and IsLookedOnByTroop(b, c)","IsInArmedForces(d, e)","(exists c (exists a (IsArmyMan(a) and IsGrilling(a, b) and IsLookedOnByTroop(b, c))) & (forall e (forall d (forall a (IsArmyMan(a) -> IsInArmedForces(d, e))))) & (forall e (forall b (forall d (forall a (  IsGrilling(a, b) -> IsInArmedForces(d, e))))))) -> (forall e (IsInArmedForces(d, e)))","(exists b (exists c (exists a (IsArmyMan(a) and IsGrilling(a, b) and IsLookedOnByTroop(b, c)))) & (forall h (forall g (forall f (IsArmyMan(f) -> IsInArmedForces(g,h))))) & (forall i (forall j (forall l (forall k (  IsGrilling(i,j) -> IsInArmedForces(k,l))))))) -> (exists d (exists e (IsInArmedForces(d, e))))"
1,,"The basketball player in red is challenging the player in white for the ball. Consequently, people are playing basketball.", The basketball player in red is challenging the player in white for the ball.  , People are playing basketball.,"IsInRed(a),  IsChallenging(a, b),  IsInWhite(b)",IsPlayingBasketball(d),"[('  IsChallenging(a, b)', 'IsPlayingBasketball(d)')]",[],"[(' The basketball player in red', ' People'), (' the player in white', ' People'), (' the ball', ' basketball')]","IsInRed(a) and IsChallenging(a, b) and IsInWhite(b)",IsPlayingBasketball(d),"(exists b (exists a (IsInRed(a) and IsChallenging(a, b) and IsInWhite(b))) & (forall b (forall d (forall a (  IsChallenging(a, b) -> IsPlayingBasketball(d)))))) -> (forall d (IsPlayingBasketball(d)))","(exists b (exists a (IsInRed(a) and IsChallenging(a, b) and IsInWhite(b))) & (forall h (forall g (forall f (  IsChallenging(f,g) -> IsPlayingBasketball(h)))))) -> (exists d (IsPlayingBasketball(d)))"
1,,"A older man with gray hair wearing a gray suit next to a green and yellow taxi. Thus, a older man with gray hair wearing a gray suit."," ""An older man with gray hair is wearing a gray suit.""  "," ""An older man with gray hair is next to a green and yellow taxi.""","IsOlder(a),  HasGrayHair(a),  IsWearingGraySuit(a)","IsOlder(d),  HasGrayHair(d),  IsNextTo(d, e)","[('  HasGrayHair(d)', 'IsOlder(a)'), ('  HasGrayHair(a)', 'IsOlder(d)'), ('IsOlder(d)', '  HasGrayHair(a)'), ('  IsNextTo(d, e)', '  HasGrayHair(a)'), ('IsOlder(d)', '  IsWearingGraySuit(a)'), ('  HasGrayHair(d)', '  IsWearingGraySuit(a)'), ('  IsNextTo(d, e)', '  IsWearingGraySuit(a)')]",[],"[(' Older man', ' Older man with gray hair'), (' gray hair', ' Older man with gray hair')]",IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a),"IsOlder(d) and HasGrayHair(d) and IsNextTo(d, e)","(exists a (IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a)) & (forall d (forall a (  HasGrayHair(d) -> IsOlder(a)))) & (forall d (forall a (  HasGrayHair(a) -> IsOlder(d)))) & (forall d (forall a (IsOlder(d) ->   HasGrayHair(a)))) & (forall a (forall d (forall e (  IsNextTo(d, e) ->   HasGrayHair(a))))) & (forall d (forall a (IsOlder(d) ->   IsWearingGraySuit(a)))) & (forall d (forall a (  HasGrayHair(d) ->   IsWearingGraySuit(a)))) & (forall a (forall d (forall e (  IsNextTo(d, e) ->   IsWearingGraySuit(a)))))) -> (forall d (IsOlder(d) and HasGrayHair(d) and IsNextTo(d, e)))","(exists a (IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a)) & (forall g (forall f (  HasGrayHair(f) -> IsOlder(g)))) & (forall i (forall h (  HasGrayHair(h) -> IsOlder(i)))) & (forall j (forall k (IsOlder(j) ->   HasGrayHair(k)))) & (forall m (forall l (forall n (  IsNextTo(l,m) ->   HasGrayHair(n))))) & (forall o (forall p (IsOlder(o) ->   IsWearingGraySuit(p)))) & (forall q (forall r (  HasGrayHair(q) ->   IsWearingGraySuit(r)))) & (forall u (forall t (forall s (  IsNextTo(s,t) ->   IsWearingGraySuit(u)))))) -> (exists d (exists e (IsOlder(d) and HasGrayHair(d) and IsNextTo(d, e))))"
1,,"A man drops something, reaching for it while a woman in a beige blazer discusses an important topic. Hence, a woman is talking while a man is reaching for something."," ""A woman in a beige blazer discusses an important topic while a man reaches for something.""  "," ""A woman is talking while a man is reaching for something.""","IsInBeigeBlazer(c),  DiscussesTopic(c, d),  ReachesFor(a, b)","IsTalking(e),  IsReachingFor(a, b)","[('IsInBeigeBlazer(c)', 'IsTalking(e)'), ('  DiscussesTopic(c, d)', 'IsTalking(e)'), ('IsTalking(e)', '  DiscussesTopic(c, d)'), ('  ReachesFor(a, b)', 'IsTalking(e)'), ('IsTalking(e)', '  ReachesFor(a, b)'), ('  ReachesFor(a, b)', '  IsReachingFor(a, b)'), ('  IsReachingFor(a, b)', '  ReachesFor(a, b)')]","[(' a man', ' a man'), (' something', ' something')]","[(' A woman in a beige blazer', ' A woman'), (' an important topic', ' something'), (' a man', ' something')]","IsInBeigeBlazer(c) and DiscussesTopic(c, d) and ReachesFor(a, b)","IsTalking(e) and IsReachingFor(a, b)","(exists a (exists d (exists c (IsInBeigeBlazer(c) and DiscussesTopic(c, d) and ReachesFor(a, b)))) & (forall e (forall c (IsInBeigeBlazer(c) -> IsTalking(e)))) & (forall e (forall d (forall c (  DiscussesTopic(c, d) -> IsTalking(e))))) & (forall c (forall d (forall e (IsTalking(e) ->   DiscussesTopic(c, d))))) & (forall b (forall e (forall a (  ReachesFor(a, b) -> IsTalking(e))))) & (forall b (forall a (forall e (IsTalking(e) ->   ReachesFor(a, b))))) & (forall b (forall a (  ReachesFor(a, b) ->   IsReachingFor(a, b)))) & (forall b (forall a (  IsReachingFor(a, b) ->   ReachesFor(a, b))))) -> (exists a (forall b (forall e (IsTalking(e) and IsReachingFor(a, b)))))","(exists b (exists a (exists d (exists c (IsInBeigeBlazer(c) and DiscussesTopic(c, d) and ReachesFor(a, b))))) & (forall g (forall f (IsInBeigeBlazer(f) -> IsTalking(g)))) & (forall i (forall h (forall j (  DiscussesTopic(h,i) -> IsTalking(j))))) & (forall m (forall k (forall l (IsTalking(k) ->   DiscussesTopic(l,m))))) & (forall o (forall p (forall n (  ReachesFor(n,o) -> IsTalking(p))))) & (forall q (forall r (forall s (IsTalking(q) ->   ReachesFor(r,s))))) & (forall u (forall t (  ReachesFor(t,u) ->   IsReachingFor(t,u)))) & (forall v (forall w (  IsReachingFor(v,w) ->   ReachesFor(v,w))))) -> (exists b (exists a (exists e (IsTalking(e) and IsReachingFor(a, b)))))"
1,,A crowd watching a skateboarder. This implies that a person is skateboarding., A crowd is watching., A person is skateboarding.,IsWatching(a),IsSkateboarding(b),[],[],[],IsWatching(a),IsSkateboarding(b),(IsWatching(a)) -> (IsSkateboarding(b)),(exists a (IsWatching(a))) -> (exists b (IsSkateboarding(b)))
1,,"A male guitar player is vigorously singing a not to a song in a poorly lit room. As a consequence, a man is singing indoors."," ""A male guitar player is singing a song in a poorly lit room.""  "," ""A man is singing indoors.""","IsMale(a),  PlaysGuitar(a),  IsSinging(a, b),  IsInRoom(a, c),  IsPoorlyLit(c)","IsSinging(d),  IsIndoors(d)","[('IsMale(a)', 'IsSinging(d)'), ('IsMale(a)', '  IsIndoors(d)'), ('  PlaysGuitar(a)', 'IsSinging(d)'), ('  IsSinging(a, b)', '  IsIndoors(d)'), ('  IsIndoors(d)', '  IsSinging(a, b)'), ('  IsInRoom(a, c)', 'IsSinging(d)'), ('  IsInRoom(a, c)', '  IsIndoors(d)'), ('  IsIndoors(d)', '  IsInRoom(a, c)')]",[],"[(' A male guitar player', ' A man'), (' a poorly lit room', ' indoors')]","IsMale(a) and PlaysGuitar(a) and IsSinging(a, b) and IsInRoom(a, c) and IsPoorlyLit(c)",IsSinging(d) and IsIndoors(d),"(exists a (IsMale(a) and PlaysGuitar(a) and IsSinging(a, b) and IsInRoom(a, c) and IsPoorlyLit(c)) & (forall d (forall a (IsMale(a) -> IsSinging(d)))) & (forall d (forall a (IsMale(a) ->   IsIndoors(d)))) & (forall d (forall a (  PlaysGuitar(a) -> IsSinging(d)))) & (forall b (forall d (forall a (  IsSinging(a, b) ->   IsIndoors(d))))) & (forall b (forall d (forall a (  IsIndoors(d) ->   IsSinging(a, b))))) & (forall c (forall d (forall a (  IsInRoom(a, c) -> IsSinging(d))))) & (forall c (forall d (forall a (  IsInRoom(a, c) ->   IsIndoors(d))))) & (forall c (forall d (forall a (  IsIndoors(d) ->   IsInRoom(a, c)))))) -> (forall d (IsSinging(d) and IsIndoors(d)))","(exists b (exists c (exists a (IsMale(a) and PlaysGuitar(a) and IsSinging(a, b) and IsInRoom(a, c) and IsPoorlyLit(c)))) & (forall g (forall f (IsMale(f) -> IsSinging(g)))) & (forall i (forall h (IsMale(h) ->   IsIndoors(i)))) & (forall j (forall k (  PlaysGuitar(j) -> IsSinging(k)))) & (forall m (forall l (forall n (  IsSinging(l,m) ->   IsIndoors(n))))) & (forall q (forall o (forall p (  IsIndoors(o) ->   IsSinging(p,q))))) & (forall r (forall t (forall s (  IsInRoom(r,s) -> IsSinging(t))))) & (forall v (forall u (forall w (  IsInRoom(u,v) ->   IsIndoors(w))))) & (forall y (forall z (forall x (  IsIndoors(x) ->   IsInRoom(y,z)))))) -> (exists d (IsSinging(d) and IsIndoors(d)))"
1,,"The sun breaks through the trees as a child rides a swing. Thus, a child rides a swing in the daytime."," ""The sun breaks through the trees as a child rides a swing.""  "," ""A child rides a swing in the daytime.""","BreaksThrough(c, d),  Rides(a, b)","Rides(a, b),  IsInDaytime(a)","[('BreaksThrough(c, d)', 'Rides(a, b)'), ('BreaksThrough(c, d)', '  IsInDaytime(a)'), ('  Rides(a, b)', '  IsInDaytime(a)')]","[(' a child', ' A child'), (' a swing', ' a swing')]",[],"BreaksThrough(c, d) and Rides(a, b)","Rides(a, b) and IsInDaytime(a)","(BreaksThrough(c, d) and Rides(a, b) & (forall b (forall a (forall d (forall c (BreaksThrough(c, d) -> Rides(a, b)))))) & (forall a (forall d (forall c (BreaksThrough(c, d) ->   IsInDaytime(a))))) & (forall b (forall a (  Rides(a, b) ->   IsInDaytime(a))))) -> (Rides(a, b) and IsInDaytime(a))","(exists b (exists a (exists d (exists c (BreaksThrough(c, d) and Rides(a, b))))) & (forall i (forall h (forall g (forall j (BreaksThrough(g,h) -> Rides(i,j)))))) & (forall m (forall k (forall l (BreaksThrough(k,l) ->   IsInDaytime(m))))) & (forall o (forall n (  Rides(n,o) ->   IsInDaytime(n))))) -> (exists b (exists a (Rides(a, b) and IsInDaytime(a))))"
