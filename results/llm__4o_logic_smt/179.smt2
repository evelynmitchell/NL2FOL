(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInRedShirt (BoundSet) Bool)
(declare-fun IsFilming (BoundSet) Bool)
(declare-fun IsOnSportsField (BoundSet) Bool)
(declare-fun IsWatching (BoundSet) Bool)
(declare-fun IsCheering (BoundSet) Bool)
(declare-fun IsBeingFilmed (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (and (IsInRedShirt b) (and (IsFilming a) (and (IsOnSportsField c) (and (IsWatching d) (IsCheering d))))))))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (=> (IsBeingFilmed f) (IsInRedShirt g)))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (IsFilming h) (IsInRedShirt i)))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (IsBeingFilmed j) (IsFilming k)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (IsBeingFilmed l) (IsOnSportsField m)))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (=> (IsWatching n) (IsBeingFilmed o)))) (and (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (IsBeingFilmed p) (IsWatching q)))) (and (forall ((s BoundSet)) (forall ((r BoundSet)) (=> (IsFilming r) (IsWatching s)))) (and (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsCheering t) (IsBeingFilmed u)))) (forall ((w BoundSet)) (forall ((v BoundSet)) (=> (IsBeingFilmed v) (IsCheering w))))))))))))) (exists ((a BoundSet)) (exists ((e BoundSet)) (and (IsFilming a) (IsBeingFilmed e)))))))
(check-sat)
(get-model)