(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsInBlueTShirt (BoundSet) Bool)
(declare-fun IsTakingPicture (BoundSet) Bool)
(declare-fun IsOutdoors (BoundSet) Bool)
(declare-fun WalksBehind (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsInBlueTShirt a) (IsTakingPicture a))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsInBlueTShirt g) (IsTakingPicture h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsTakingPicture i) (IsInBlueTShirt j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsOutdoors k) (IsInBlueTShirt l)))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((m BoundSet)) (=> (IsInBlueTShirt m) (WalksBehind n o))))) (and (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (IsOutdoors p) (IsTakingPicture q)))) (forall ((s BoundSet)) (forall ((r BoundSet)) (forall ((t BoundSet)) (=> (IsTakingPicture r) (WalksBehind s t))))))))))) (exists ((f BoundSet)) (exists ((e BoundSet)) (exists ((c BoundSet)) (and (IsTakingPicture c) (and (IsOutdoors c) (WalksBehind e f)))))))))
(check-sat)
(get-model)