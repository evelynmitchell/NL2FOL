(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun { () BoundSet)
(declare-fun | () BoundSet)
(declare-fun } () BoundSet)
(declare-fun WalkedUnder (BoundSet BoundSet) Bool)
(declare-fun HadOpenUmbrellaIndoors (BoundSet BoundSet) Bool)
(declare-fun SpilledSaltInFrontOf (BoundSet BoundSet) Bool)
(declare-fun ForgotToKnockOnWood (BoundSet BoundSet) Bool)
(declare-fun HasLuckyDice (BoundSet BoundSet) Bool)
(declare-fun CauseBadDay (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((g BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((f BoundSet)) (exists ((e BoundSet)) (and (WalkedUnder a b) (and (HadOpenUmbrellaIndoors a c) (and (SpilledSaltInFrontOf a e) (and (ForgotToKnockOnWood a f) (HasLuckyDice a g))))))))))) (and (forall ((j BoundSet)) (forall ((l BoundSet)) (forall ((k BoundSet)) (forall ((m BoundSet)) (=> (WalkedUnder j k) (CauseBadDay l m)))))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((p BoundSet)) (forall ((q BoundSet)) (=> (CauseBadDay n o) (WalkedUnder p q)))))) (and (forall ((s BoundSet)) (forall ((u BoundSet)) (forall ((r BoundSet)) (forall ((t BoundSet)) (=> (CauseBadDay r s) (HadOpenUmbrellaIndoors t u)))))) (and (forall ((x BoundSet)) (forall ((y BoundSet)) (forall ((w BoundSet)) (forall ((v BoundSet)) (=> (CauseBadDay v w) (SpilledSaltInFrontOf x y)))))) (forall ((z BoundSet)) (=> (CauseBadDay z {) (HasLuckyDice | })))))))) (exists ((i BoundSet)) (exists ((h BoundSet)) (CauseBadDay h i))))))
(check-sat)
(get-model)