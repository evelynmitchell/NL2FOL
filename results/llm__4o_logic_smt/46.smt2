(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInexpensive (BoundSet) Bool)
(declare-fun RequiresNoMaintenance (BoundSet) Bool)
(declare-fun AreEasiestPets (BoundSet) Bool)
(declare-fun ArePetsToKeep (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsInexpensive a) (RequiresNoMaintenance a))) (and (forall ((c BoundSet)) (=> (IsInexpensive c) (AreEasiestPets c))) (and (forall ((d BoundSet)) (=> (AreEasiestPets d) (IsInexpensive d))) (and (forall ((e BoundSet)) (=> (IsInexpensive e) (ArePetsToKeep e))) (and (forall ((f BoundSet)) (=> (ArePetsToKeep f) (IsInexpensive f))) (and (forall ((g BoundSet)) (=> (RequiresNoMaintenance g) (AreEasiestPets g))) (and (forall ((h BoundSet)) (=> (AreEasiestPets h) (RequiresNoMaintenance h))) (and (forall ((i BoundSet)) (=> (RequiresNoMaintenance i) (ArePetsToKeep i))) (forall ((j BoundSet)) (=> (ArePetsToKeep j) (RequiresNoMaintenance j))))))))))) (exists ((a BoundSet)) (and (AreEasiestPets a) (ArePetsToKeep a))))))
(check-sat)
(get-model)