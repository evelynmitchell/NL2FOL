(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsProtected (BoundSet) Bool)
(declare-fun WillBeSpared (BoundSet BoundSet) Bool)
(declare-fun IsPainful (BoundSet) Bool)
(declare-fun IsCancer (BoundSet) Bool)
(declare-fun IsIllness (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (IsProtected a)) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsProtected f) (WillBeSpared g h))))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsProtected i) (IsPainful j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsProtected k) (IsCancer l)))) (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsProtected m) (IsIllness n)))))))) (exists ((e BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (and (WillBeSpared b c) (or (IsCancer d) (IsIllness e))))))))))
(check-sat)
(get-model)