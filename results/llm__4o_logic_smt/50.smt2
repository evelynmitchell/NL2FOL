(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsAtHerSchool (BoundSet) Bool)
(declare-fun HasAnIPhone (BoundSet) Bool)
(declare-fun Is12YearsOld (BoundSet) Bool)
(declare-fun ShouldBuyIPhone (BoundSet) Bool)
(declare-fun IsDaughter (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsAtHerSchool a) (HasAnIPhone a))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (=> (Is12YearsOld f) (IsAtHerSchool g)))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (ShouldBuyIPhone h) (IsAtHerSchool i)))) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (ShouldBuyIPhone j) (HasAnIPhone k))))))) (exists ((d BoundSet)) (and (Is12YearsOld d) (and (IsDaughter d) (ShouldBuyIPhone d)))))))
(check-sat)
(get-model)