(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsYoung (BoundSet) Bool)
(declare-fun WearsGreenAndBlueJerseys (BoundSet) Bool)
(declare-fun KicksSoccerBall (BoundSet) Bool)
(declare-fun InvolvedInSoccerGames (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsYoung a) (and (WearsGreenAndBlueJerseys a) (KicksSoccerBall a)))) (and (forall ((e BoundSet)) (=> (InvolvedInSoccerGames e) (IsYoung e))) (and (forall ((f BoundSet)) (=> (InvolvedInSoccerGames f) (WearsGreenAndBlueJerseys f))) (and (forall ((g BoundSet)) (=> (KicksSoccerBall g) (IsYoung g))) (and (forall ((h BoundSet)) (=> (KicksSoccerBall h) (InvolvedInSoccerGames h))) (forall ((i BoundSet)) (=> (InvolvedInSoccerGames i) (KicksSoccerBall i)))))))) (exists ((a BoundSet)) (and (IsYoung a) (InvolvedInSoccerGames a))))))
(check-sat)
(get-model)