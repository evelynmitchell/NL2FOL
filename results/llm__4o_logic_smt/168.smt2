(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsYoung (BoundSet) Bool)
(declare-fun IsInOrangeShirt (BoundSet) Bool)
(declare-fun ManeuversSkateboard (BoundSet) Bool)
(declare-fun IsAtTopOfRamp (BoundSet) Bool)
(declare-fun RidesSkateboard (BoundSet) Bool)
(assert (not (=> (and (exists ((b BoundSet)) (and (IsYoung b) (and (IsInOrangeShirt b) (and (ManeuversSkateboard b) (IsAtTopOfRamp b))))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (RidesSkateboard h) (IsYoung i)))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (RidesSkateboard j) (IsInOrangeShirt k)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (ManeuversSkateboard l) (RidesSkateboard m)))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (=> (RidesSkateboard n) (ManeuversSkateboard o)))) (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (RidesSkateboard p) (IsAtTopOfRamp q))))))))) (exists ((a BoundSet)) (RidesSkateboard a)))))
(check-sat)
(get-model)