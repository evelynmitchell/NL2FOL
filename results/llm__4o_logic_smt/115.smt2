(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInWhite (BoundSet) Bool)
(declare-fun Kicks (BoundSet BoundSet) Bool)
(declare-fun LungesTowards (BoundSet BoundSet) Bool)
(declare-fun IsInRed (BoundSet) Bool)
(declare-fun FollowsCloseBy (BoundSet) Bool)
(declare-fun IsSoccerPlayer (BoundSet) Bool)
(assert (not (=> (and (exists ((b BoundSet)) (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((e BoundSet)) (and (IsInWhite a) (and (Kicks a b) (and (LungesTowards c d) (and (IsInRed e) (FollowsCloseBy e)))))))))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsSoccerPlayer g) (IsInWhite h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (Kicks i j) (IsSoccerPlayer k))))) (and (forall ((n BoundSet)) (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (IsSoccerPlayer l) (Kicks m n))))) (and (forall ((q BoundSet)) (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsSoccerPlayer o) (LungesTowards p q))))) (and (forall ((s BoundSet)) (forall ((r BoundSet)) (=> (IsInRed r) (IsSoccerPlayer s)))) (and (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsSoccerPlayer t) (IsInRed u)))) (and (forall ((w BoundSet)) (forall ((v BoundSet)) (=> (FollowsCloseBy v) (IsSoccerPlayer w)))) (forall ((x BoundSet)) (forall ((y BoundSet)) (=> (IsSoccerPlayer x) (FollowsCloseBy y)))))))))))) (exists ((f BoundSet)) (IsSoccerPlayer f)))))
(check-sat)
(get-model)