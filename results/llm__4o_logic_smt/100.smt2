(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun TalksWith (BoundSet BoundSet) Bool)
(declare-fun InFrontOfTeam (BoundSet BoundSet) Bool)
(declare-fun InFrontOfCrowd (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (and (TalksWith a b) (and (InFrontOfTeam a b) (InFrontOfCrowd a b))))) (and (forall ((f BoundSet)) (forall ((e BoundSet)) (=> (TalksWith e f) (InFrontOfTeam e f)))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (InFrontOfTeam g h) (TalksWith g h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (TalksWith i j) (InFrontOfCrowd i j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (InFrontOfTeam k l) (TalksWith k l)))) (and (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (InFrontOfCrowd m n) (InFrontOfTeam m n)))) (and (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (InFrontOfCrowd o p) (TalksWith o p)))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (TalksWith q r) (InFrontOfCrowd q r)))) (and (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (InFrontOfCrowd s t) (InFrontOfTeam s t)))) (forall ((u BoundSet)) (forall ((v BoundSet)) (=> (InFrontOfTeam u v) (InFrontOfCrowd u v))))))))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (TalksWith a b) (and (InFrontOfTeam a b) (InFrontOfCrowd a b))))))))
(check-sat)
(get-model)