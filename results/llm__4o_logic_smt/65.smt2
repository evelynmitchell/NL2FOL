(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun Ate (BoundSet BoundSet) Bool)
(declare-fun IsYesterday (BoundSet) Bool)
(declare-fun NeedsBetterRegulation (BoundSet) Bool)
(assert (not (=> (and (exists ((b BoundSet)) (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((e BoundSet)) (and (Ate a b) (and (Ate a c) (and (Ate a d) (IsYesterday e))))))))) (and (forall ((g BoundSet)) (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (NeedsBetterRegulation g) (Ate h i))))) (and (forall ((j BoundSet)) (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (Ate j k) (NeedsBetterRegulation l))))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((m BoundSet)) (=> (NeedsBetterRegulation m) (Ate n o))))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (forall ((p BoundSet)) (=> (Ate p q) (NeedsBetterRegulation r))))) (and (forall ((s BoundSet)) (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (NeedsBetterRegulation s) (Ate t u))))) (forall ((w BoundSet)) (forall ((v BoundSet)) (=> (NeedsBetterRegulation v) (IsYesterday w)))))))))) (exists ((f BoundSet)) (NeedsBetterRegulation f)))))
(check-sat)
(get-model)