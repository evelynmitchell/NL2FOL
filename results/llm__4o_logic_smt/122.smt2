(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun { () BoundSet)
(declare-fun | () BoundSet)
(declare-fun IsStandingAt (BoundSet BoundSet) Bool)
(declare-fun IsAtSide (BoundSet BoundSet) Bool)
(declare-fun IsStanding (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (and (IsStandingAt a c) (and (IsStandingAt b c) (IsAtSide c d))))))) (and (forall ((f BoundSet)) (forall ((e BoundSet)) (=> (IsStanding e) (IsStandingAt e f)))) (and (forall ((g BoundSet)) (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (IsStandingAt g h) (IsStanding i))))) (and (forall ((j BoundSet)) (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsStanding j) (IsStandingAt k l))))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((m BoundSet)) (=> (IsStandingAt m n) (IsStanding o))))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (forall ((p BoundSet)) (=> (IsStanding p) (IsStandingAt q r))))) (and (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (IsStandingAt s t) (IsStanding s)))) (and (forall ((u BoundSet)) (forall ((v BoundSet)) (=> (IsStanding u) (IsStandingAt u v)))) (and (forall ((x BoundSet)) (forall ((y BoundSet)) (forall ((w BoundSet)) (=> (IsStanding w) (IsAtSide x y))))) (forall ((z BoundSet)) (=> (IsStanding z) (IsAtSide { |)))))))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsStanding a) (IsStanding b)))))))
(check-sat)
(get-model)