(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsDressedInKilt (BoundSet) Bool)
(declare-fun HasThrownPole (BoundSet) Bool)
(declare-fun Watches (BoundSet BoundSet) Bool)
(declare-fun IsInKilts (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsDressedInKilt a) (HasThrownPole a))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsDressedInKilt f) (Watches g h))))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (Watches i j) (IsDressedInKilt k))))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (IsInKilts l) (IsDressedInKilt m)))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (HasThrownPole n) (Watches o p))))) (and (forall ((q BoundSet)) (forall ((s BoundSet)) (forall ((r BoundSet)) (=> (Watches q r) (HasThrownPole s))))) (and (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (HasThrownPole t) (IsInKilts u)))) (forall ((w BoundSet)) (forall ((v BoundSet)) (=> (IsInKilts v) (HasThrownPole w))))))))))) (exists ((d BoundSet)) (exists ((c BoundSet)) (and (Watches c d) (IsInKilts d)))))))
(check-sat)
(get-model)