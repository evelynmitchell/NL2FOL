(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun HasSignificantlyLessFatThan (BoundSet BoundSet) Bool)
(declare-fun IsNotAsHotAs (BoundSet BoundSet) Bool)
(declare-fun IsHealthierChoiceThan (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (and (HasSignificantlyLessFatThan a b) (IsNotAsHotAs a c))))) (and (forall ((d BoundSet)) (forall ((e BoundSet)) (=> (HasSignificantlyLessFatThan d e) (IsHealthierChoiceThan d e)))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (=> (IsHealthierChoiceThan f g) (HasSignificantlyLessFatThan f g)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (forall ((h BoundSet)) (=> (HasSignificantlyLessFatThan h i) (IsHealthierChoiceThan h j))))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (forall ((m BoundSet)) (=> (IsHealthierChoiceThan k l) (HasSignificantlyLessFatThan k m))))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsNotAsHotAs n o) (IsHealthierChoiceThan n p))))) (and (forall ((q BoundSet)) (forall ((s BoundSet)) (forall ((r BoundSet)) (=> (IsHealthierChoiceThan q r) (IsNotAsHotAs q s))))) (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsHealthierChoiceThan t u) (IsNotAsHotAs t u))))))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (and (IsHealthierChoiceThan a b) (IsHealthierChoiceThan a c))))))))
(check-sat)
(get-model)