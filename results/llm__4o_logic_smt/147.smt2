(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsYoung (BoundSet) Bool)
(declare-fun IsAsian (BoundSet) Bool)
(declare-fun IsSittingOnGround (BoundSet) Bool)
(declare-fun IsInRubble (BoundSet) Bool)
(declare-fun IsOutside (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsYoung a) (and (IsAsian a) (and (IsSittingOnGround a) (IsInRubble a))))) (and (forall ((d BoundSet)) (=> (IsAsian d) (IsYoung d))) (and (forall ((e BoundSet)) (=> (IsOutside e) (IsYoung e))) (and (forall ((f BoundSet)) (=> (IsYoung f) (IsInRubble f))) (and (forall ((g BoundSet)) (=> (IsInRubble g) (IsYoung g))) (and (forall ((h BoundSet)) (=> (IsAsian h) (IsYoung h))) (and (forall ((i BoundSet)) (=> (IsAsian i) (IsOutside i))) (and (forall ((j BoundSet)) (=> (IsOutside j) (IsAsian j))) (and (forall ((k BoundSet)) (=> (IsAsian k) (IsInRubble k))) (and (forall ((l BoundSet)) (=> (IsInRubble l) (IsAsian l))) (and (forall ((m BoundSet)) (=> (IsSittingOnGround m) (IsYoung m))) (and (forall ((n BoundSet)) (=> (IsYoung n) (IsSittingOnGround n))) (and (forall ((o BoundSet)) (=> (IsSittingOnGround o) (IsAsian o))) (and (forall ((p BoundSet)) (=> (IsAsian p) (IsSittingOnGround p))) (and (forall ((q BoundSet)) (=> (IsSittingOnGround q) (IsOutside q))) (and (forall ((r BoundSet)) (=> (IsOutside r) (IsSittingOnGround r))) (and (forall ((s BoundSet)) (=> (IsSittingOnGround s) (IsInRubble s))) (and (forall ((t BoundSet)) (=> (IsInRubble t) (IsSittingOnGround t))) (and (forall ((u BoundSet)) (=> (IsInRubble u) (IsYoung u))) (and (forall ((v BoundSet)) (=> (IsYoung v) (IsInRubble v))) (and (forall ((w BoundSet)) (=> (IsInRubble w) (IsAsian w))) (and (forall ((x BoundSet)) (=> (IsAsian x) (IsInRubble x))) (and (forall ((y BoundSet)) (=> (IsInRubble y) (IsOutside y))) (forall ((z BoundSet)) (=> (IsOutside z) (IsInRubble z)))))))))))))))))))))))))) (exists ((a BoundSet)) (and (IsYoung a) (and (IsAsian a) (and (IsOutside a) (IsInRubble a))))))))
(check-sat)
(get-model)