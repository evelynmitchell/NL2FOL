(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun Drinks (BoundSet) Bool)
(declare-fun Parties (BoundSet) Bool)
(declare-fun HasMultiplePartners (BoundSet) Bool)
(declare-fun CannotBeTrusted (BoundSet) Bool)
(declare-fun Sell (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (Drinks a) (and (Parties a) (HasMultiplePartners a)))) (and (forall ((c BoundSet)) (=> (Drinks c) (CannotBeTrusted c))) (and (forall ((d BoundSet)) (=> (CannotBeTrusted d) (Drinks d))) (and (forall ((f BoundSet)) (forall ((e BoundSet)) (=> (Drinks e) (Sell e f)))) (and (forall ((g BoundSet)) (=> (Parties g) (CannotBeTrusted g))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (Parties h) (Sell h i)))) (and (forall ((j BoundSet)) (=> (HasMultiplePartners j) (CannotBeTrusted j))) (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (HasMultiplePartners k) (Sell k l))))))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (CannotBeTrusted a) (not (Sell a b))))))))
(check-sat)
(get-model)