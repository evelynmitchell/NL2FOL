(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun PlaysTogether (BoundSet BoundSet) Bool)
(declare-fun IsOnPileOfRocks (BoundSet) Bool)
(declare-fun IsInResidentialArea (BoundSet) Bool)
(declare-fun IsOutside (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (and (PlaysTogether a b) (and (IsOnPileOfRocks a) (and (IsOnPileOfRocks b) (IsInResidentialArea c))))))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsOutside f) (PlaysTogether g h))))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsOutside i) (PlaysTogether i j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsOutside k) (IsOnPileOfRocks l)))) (and (forall ((m BoundSet)) (=> (IsOutside m) (IsOnPileOfRocks m))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (=> (IsOutside n) (IsOnPileOfRocks o)))) (and (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (IsOutside p) (IsOnPileOfRocks q)))) (and (forall ((s BoundSet)) (forall ((r BoundSet)) (=> (IsInResidentialArea r) (IsOutside s)))) (and (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsOutside t) (IsInResidentialArea u)))) (forall ((w BoundSet)) (forall ((v BoundSet)) (=> (IsOutside v) (IsInResidentialArea w))))))))))))) (exists ((a BoundSet)) (exists ((e BoundSet)) (and (IsOutside e) (IsOutside a)))))))
(check-sat)
(get-model)