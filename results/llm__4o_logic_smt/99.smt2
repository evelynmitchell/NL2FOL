(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun Ordered (BoundSet BoundSet) Bool)
(declare-fun Killed (BoundSet BoundSet) Bool)
(declare-fun IsMassMurderer (BoundSet) Bool)
(declare-fun BelongsInPrison (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (and (Ordered a b) (Killed b c))))) (and (forall ((f BoundSet)) (forall ((e BoundSet)) (=> (Ordered e f) (IsMassMurderer e)))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsMassMurderer g) (Ordered g h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (Ordered i j) (BelongsInPrison i)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (BelongsInPrison k) (Ordered k l)))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((m BoundSet)) (=> (Killed m n) (IsMassMurderer o))))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (forall ((p BoundSet)) (=> (IsMassMurderer p) (Killed q r))))) (and (forall ((s BoundSet)) (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (Killed s t) (BelongsInPrison u))))) (forall ((x BoundSet)) (forall ((w BoundSet)) (forall ((v BoundSet)) (=> (BelongsInPrison v) (Killed w x))))))))))))) (exists ((a BoundSet)) (and (IsMassMurderer a) (BelongsInPrison a))))))
(check-sat)
(get-model)