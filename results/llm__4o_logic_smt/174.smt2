(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInRedCoat (BoundSet) Bool)
(declare-fun IsInBlueHeadWrap (BoundSet) Bool)
(declare-fun IsInJeans (BoundSet) Bool)
(declare-fun IsMakingSnowAngel (BoundSet) Bool)
(declare-fun IsOutside (BoundSet) Bool)
(declare-fun IsPlayingInSnow (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsInRedCoat a) (and (IsInBlueHeadWrap a) (and (IsInJeans a) (IsMakingSnowAngel a))))) (and (forall ((g BoundSet)) (=> (IsInRedCoat g) (IsOutside g))) (and (forall ((h BoundSet)) (=> (IsOutside h) (IsInRedCoat h))) (and (forall ((i BoundSet)) (=> (IsInRedCoat i) (IsPlayingInSnow i))) (and (forall ((j BoundSet)) (=> (IsPlayingInSnow j) (IsInRedCoat j))) (and (forall ((k BoundSet)) (=> (IsInBlueHeadWrap k) (IsOutside k))) (and (forall ((l BoundSet)) (=> (IsOutside l) (IsInBlueHeadWrap l))) (and (forall ((m BoundSet)) (=> (IsInBlueHeadWrap m) (IsPlayingInSnow m))) (and (forall ((n BoundSet)) (=> (IsPlayingInSnow n) (IsInBlueHeadWrap n))) (and (forall ((o BoundSet)) (=> (IsInJeans o) (IsOutside o))) (and (forall ((p BoundSet)) (=> (IsOutside p) (IsInJeans p))) (and (forall ((q BoundSet)) (=> (IsInJeans q) (IsPlayingInSnow q))) (and (forall ((r BoundSet)) (=> (IsPlayingInSnow r) (IsInJeans r))) (and (forall ((s BoundSet)) (=> (IsMakingSnowAngel s) (IsOutside s))) (and (forall ((t BoundSet)) (=> (IsOutside t) (IsMakingSnowAngel t))) (and (forall ((u BoundSet)) (=> (IsMakingSnowAngel u) (IsPlayingInSnow u))) (forall ((v BoundSet)) (=> (IsPlayingInSnow v) (IsMakingSnowAngel v))))))))))))))))))) (exists ((a BoundSet)) (and (IsOutside a) (IsPlayingInSnow a))))))
(check-sat)
(get-model)