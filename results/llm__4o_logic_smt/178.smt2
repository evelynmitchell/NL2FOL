(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun { () BoundSet)
(declare-fun | () BoundSet)
(declare-fun } () BoundSet)
(declare-fun IsWearingCap (BoundSet) Bool)
(declare-fun IsNotWearingShirt (BoundSet) Bool)
(declare-fun IsLayingOnBench (BoundSet) Bool)
(declare-fun Relaxes (BoundSet) Bool)
(declare-fun IsOnBench (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsWearingCap a) (and (IsNotWearingShirt a) (IsLayingOnBench a)))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (=> (IsWearingCap f) (Relaxes g)))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (Relaxes h) (IsWearingCap i)))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (IsWearingCap j) (IsOnBench k)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (IsOnBench l) (IsWearingCap m)))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (=> (IsNotWearingShirt n) (Relaxes o)))) (and (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (Relaxes p) (IsNotWearingShirt q)))) (and (forall ((s BoundSet)) (forall ((r BoundSet)) (=> (IsNotWearingShirt r) (IsOnBench s)))) (and (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsOnBench t) (IsNotWearingShirt u)))) (and (forall ((w BoundSet)) (forall ((v BoundSet)) (=> (IsLayingOnBench v) (Relaxes w)))) (and (forall ((x BoundSet)) (forall ((y BoundSet)) (=> (Relaxes x) (IsLayingOnBench y)))) (and (forall ((z BoundSet)) (=> (IsLayingOnBench z) (IsOnBench {))) (=> (IsOnBench |) (IsLayingOnBench })))))))))))))) (exists ((d BoundSet)) (and (Relaxes d) (IsOnBench d))))))
(check-sat)
(get-model)