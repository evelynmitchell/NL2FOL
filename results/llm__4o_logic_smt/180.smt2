(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun { () BoundSet)
(declare-fun | () BoundSet)
(declare-fun IsInSuit (BoundSet) Bool)
(declare-fun IsCheering (BoundSet) Bool)
(declare-fun IsInLibrary (BoundSet) Bool)
(declare-fun IsInFrontOfChildren (BoundSet) Bool)
(declare-fun IsNearChildren (BoundSet) Bool)
(assert (not (=> (and (exists ((b BoundSet)) (and (IsInSuit b) (and (IsCheering b) (and (IsInLibrary b) (IsInFrontOfChildren b))))) (and (forall ((f BoundSet)) (forall ((e BoundSet)) (=> (IsInSuit e) (IsCheering f)))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsNearChildren g) (IsInSuit h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsCheering i) (IsNearChildren j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsNearChildren k) (IsCheering l)))) (and (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsInLibrary m) (IsCheering n)))) (and (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsCheering o) (IsInLibrary p)))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (IsInLibrary q) (IsNearChildren r)))) (and (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (IsNearChildren s) (IsInLibrary t)))) (and (forall ((u BoundSet)) (forall ((v BoundSet)) (=> (IsInFrontOfChildren u) (IsCheering v)))) (and (forall ((x BoundSet)) (forall ((w BoundSet)) (=> (IsCheering w) (IsInFrontOfChildren x)))) (and (forall ((z BoundSet)) (forall ((y BoundSet)) (=> (IsInFrontOfChildren y) (IsNearChildren z)))) (=> (IsNearChildren {) (IsInFrontOfChildren |)))))))))))))) (exists ((d BoundSet)) (and (IsCheering d) (IsNearChildren d))))))
(check-sat)
(get-model)