(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInWhiteShirt (BoundSet) Bool)
(declare-fun IsSpeakingIntoMicrophone (BoundSet) Bool)
(declare-fun IsMakingSpeech (BoundSet) Bool)
(declare-fun IsInFrontOfCrowd (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsInWhiteShirt a) (IsSpeakingIntoMicrophone a))) (and (forall ((e BoundSet)) (=> (IsInWhiteShirt e) (IsMakingSpeech e))) (and (forall ((f BoundSet)) (=> (IsMakingSpeech f) (IsInWhiteShirt f))) (and (forall ((g BoundSet)) (=> (IsInWhiteShirt g) (IsInFrontOfCrowd g))) (and (forall ((h BoundSet)) (=> (IsInFrontOfCrowd h) (IsInWhiteShirt h))) (and (forall ((i BoundSet)) (=> (IsSpeakingIntoMicrophone i) (IsInWhiteShirt i))) (and (forall ((j BoundSet)) (=> (IsInWhiteShirt j) (IsSpeakingIntoMicrophone j))) (and (forall ((k BoundSet)) (=> (IsSpeakingIntoMicrophone k) (IsMakingSpeech k))) (and (forall ((l BoundSet)) (=> (IsMakingSpeech l) (IsSpeakingIntoMicrophone l))) (and (forall ((m BoundSet)) (=> (IsSpeakingIntoMicrophone m) (IsInFrontOfCrowd m))) (forall ((n BoundSet)) (=> (IsInFrontOfCrowd n) (IsSpeakingIntoMicrophone n))))))))))))) (exists ((a BoundSet)) (and (IsInWhiteShirt a) (and (IsMakingSpeech a) (IsInFrontOfCrowd a)))))))
(check-sat)
(get-model)