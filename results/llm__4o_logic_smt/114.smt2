(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsSmall (BoundSet) Bool)
(declare-fun IsInBlueSoccerUniforms (BoundSet) Bool)
(declare-fun IsUsing (BoundSet BoundSet) Bool)
(declare-fun IsInAdultSizedBathroom (BoundSet) Bool)
(declare-fun IsWashing (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (IsSmall b) (and (IsInBlueSoccerUniforms b) (and (IsUsing d a) (IsInAdultSizedBathroom a))))))) (and (forall ((g BoundSet)) (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (IsSmall g) (IsWashing h i))))) (and (forall ((j BoundSet)) (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsWashing j k) (IsSmall l))))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((m BoundSet)) (=> (IsInBlueSoccerUniforms m) (IsWashing n o))))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (forall ((p BoundSet)) (=> (IsWashing p q) (IsInBlueSoccerUniforms r))))) (forall ((s BoundSet)) (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsWashing s t) (IsInAdultSizedBathroom u)))))))))) (exists ((f BoundSet)) (exists ((a BoundSet)) (IsWashing f a))))))
(check-sat)
(get-model)