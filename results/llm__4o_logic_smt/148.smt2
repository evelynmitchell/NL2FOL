(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun SingTogether (BoundSet) Bool)
(declare-fun WearingMatchingBlackDresses (BoundSet) Bool)
(declare-fun AreWomen (BoundSet) Bool)
(declare-fun AreSinging (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (SingTogether a) (WearingMatchingBlackDresses a))) (and (forall ((d BoundSet)) (forall ((e BoundSet)) (=> (SingTogether d) (AreWomen e)))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (=> (AreWomen f) (SingTogether g)))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (SingTogether h) (AreSinging i)))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (AreSinging j) (SingTogether k)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (WearingMatchingBlackDresses l) (AreWomen m)))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (=> (AreWomen n) (WearingMatchingBlackDresses o)))) (and (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (WearingMatchingBlackDresses p) (AreSinging q)))) (forall ((s BoundSet)) (forall ((r BoundSet)) (=> (AreSinging r) (WearingMatchingBlackDresses s)))))))))))) (exists ((c BoundSet)) (and (AreWomen c) (AreSinging c))))))
(check-sat)
(get-model)