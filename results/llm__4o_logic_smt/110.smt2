(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsRidingDownRoad (BoundSet) Bool)
(declare-fun IsBetweenTwoCows (BoundSet) Bool)
(declare-fun Exists (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsRidingDownRoad a) (IsBetweenTwoCows a))) (and (forall ((e BoundSet)) (=> (IsRidingDownRoad e) (Exists e))) (and (forall ((f BoundSet)) (=> (Exists f) (IsRidingDownRoad f))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsRidingDownRoad g) (Exists h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (Exists i) (IsRidingDownRoad j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsRidingDownRoad k) (Exists l)))) (and (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (Exists m) (IsRidingDownRoad n)))) (and (forall ((o BoundSet)) (=> (IsBetweenTwoCows o) (Exists o))) (and (forall ((p BoundSet)) (=> (Exists p) (IsBetweenTwoCows p))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (IsBetweenTwoCows q) (Exists r)))) (and (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (Exists s) (IsBetweenTwoCows t)))) (and (forall ((u BoundSet)) (forall ((v BoundSet)) (=> (IsBetweenTwoCows u) (Exists v)))) (forall ((x BoundSet)) (forall ((w BoundSet)) (=> (Exists w) (IsBetweenTwoCows x)))))))))))))))) (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (Exists a) (and (Exists d) (Exists b)))))))))
(check-sat)
(get-model)