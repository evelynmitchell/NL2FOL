(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInMarket (BoundSet) Bool)
(declare-fun IsLookingAt (BoundSet BoundSet) Bool)
(declare-fun ( (Bool) Bool)
(declare-fun IsFood (BoundSet) Bool)
(declare-fun IsMan (BoundSet) Bool)
(declare-fun IsWoman (BoundSet) Bool)
(declare-fun IsGroceryShopping (BoundSet) Bool)
(assert (not (=> (and (exists ((b BoundSet)) (exists ((c BoundSet)) (exists ((a BoundSet)) (and (exists ((e BoundSet)) (( (and (IsInMarket b) (IsLookingAt a c)))) (IsFood e))))) (and (forall ((h BoundSet)) (forall ((i BoundSet)) (=> (IsInMarket h) (IsMan i)))) (and (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (IsWoman j) (IsLookingAt j k)))) (forall ((m BoundSet)) (forall ((l BoundSet)) (=> (IsGroceryShopping l) (IsFood m))))))) (exists ((g BoundSet)) (exists ((a BoundSet)) (exists ((f BoundSet)) (and (IsGroceryShopping g) (and (IsMan f) (IsWoman a)))))))))
(check-sat)
(get-model)