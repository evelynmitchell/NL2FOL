(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsSkipped (BoundSet) Bool)
(declare-fun WillDropOutOfSchool (BoundSet) Bool)
(declare-fun WillNeverGraduate (BoundSet) Bool)
(declare-fun WillEndUpUnemployed (BoundSet) Bool)
(declare-fun WillStartSkippingMoreClasses (BoundSet) Bool)
(declare-fun ( (Bool) Bool)
(declare-fun WillLiveAtHome (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (IsSkipped a)) (and (forall ((f BoundSet)) (=> (IsSkipped f) (WillDropOutOfSchool f))) (and (forall ((g BoundSet)) (=> (WillDropOutOfSchool g) (IsSkipped g))) (and (forall ((h BoundSet)) (=> (IsSkipped h) (WillNeverGraduate h))) (and (forall ((i BoundSet)) (=> (WillNeverGraduate i) (IsSkipped i))) (and (forall ((j BoundSet)) (=> (IsSkipped j) (WillEndUpUnemployed j))) (forall ((k BoundSet)) (=> (WillEndUpUnemployed k) (IsSkipped k))))))))) (and (exists ((a BoundSet)) (( (and (WillStartSkippingMoreClasses a) (WillDropOutOfSchool a)))) (and (or (WillNeverGraduate a) (WillEndUpUnemployed a)) (WillLiveAtHome a))))))
(check-sat)
(get-model)