(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsSpent (BoundSet BoundSet) Bool)
(declare-fun IsEnjoyed (BoundSet BoundSet) Bool)
(declare-fun IsYoung (BoundSet) Bool)
(assert (not (=> (and (exists ((b BoundSet)) (exists ((a BoundSet)) (IsSpent a b))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (forall ((e BoundSet)) (forall ((f BoundSet)) (=> (IsSpent e f) (IsEnjoyed g h)))))) (forall ((k BoundSet)) (forall ((i BoundSet)) (forall ((j BoundSet)) (forall ((l BoundSet)) (=> (IsEnjoyed i j) (IsSpent k l)))))))) (exists ((c BoundSet)) (exists ((d BoundSet)) (and (IsYoung c) (IsEnjoyed c d)))))))
(check-sat)
(get-model)