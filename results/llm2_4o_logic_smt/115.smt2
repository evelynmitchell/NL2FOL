(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsInWhite (BoundSet) Bool)
(declare-fun KicksBall (BoundSet) Bool)
(declare-fun LungesTowardsBall (BoundSet) Bool)
(declare-fun IsInRed (BoundSet) Bool)
(declare-fun FollowsClose (BoundSet) Bool)
(declare-fun AreSoccerPlayers (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (and (IsInWhite a) (and (KicksBall a) (and (LungesTowardsBall c) (and (IsInRed d) (FollowsClose d)))))))) (and (forall ((g BoundSet)) (forall ((f BoundSet)) (=> (IsInWhite f) (AreSoccerPlayers g)))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (AreSoccerPlayers h) (IsInWhite i)))) (and (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (AreSoccerPlayers j) (KicksBall k)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (AreSoccerPlayers l) (LungesTowardsBall m)))) (and (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (AreSoccerPlayers n) (IsInRed o)))) (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (AreSoccerPlayers p) (FollowsClose q)))))))))) (exists ((e BoundSet)) (AreSoccerPlayers e)))))
(check-sat)
(get-model)