(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsUsedInAmbiguousWay (BoundSet) Bool)
(declare-fun IsInArgument (BoundSet BoundSet) Bool)
(declare-fun IsInMeaning (BoundSet BoundSet) Bool)
(declare-fun IsInPortion (BoundSet BoundSet) Bool)
(declare-fun Occurs (BoundSet) Bool)
(assert (not (=> (and (exists ((e BoundSet)) (exists ((f BoundSet)) (exists ((c BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (exists ((a BoundSet)) (and (IsUsedInAmbiguousWay a) (and (IsInArgument b a) (and (IsInMeaning a c) (and (IsInPortion a d) (and (IsInMeaning a e) (IsInPortion a f)))))))))))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (IsUsedInAmbiguousWay h) (Occurs i)))) (and (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (Occurs j) (IsUsedInAmbiguousWay k)))) (and (forall ((l BoundSet)) (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsInArgument l m) (Occurs n))))) (and (forall ((q BoundSet)) (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (Occurs o) (IsInArgument p q))))) (and (forall ((s BoundSet)) (forall ((r BoundSet)) (forall ((t BoundSet)) (=> (Occurs r) (IsInMeaning s t))))) (and (forall ((u BoundSet)) (forall ((v BoundSet)) (forall ((w BoundSet)) (=> (Occurs u) (IsInPortion v w))))) (forall ((z BoundSet)) (forall ((y BoundSet)) (forall ((x BoundSet)) (=> (Occurs x) (IsInPortion y z)))))))))))) (exists ((g BoundSet)) (Occurs g)))))
(check-sat)
(get-model)