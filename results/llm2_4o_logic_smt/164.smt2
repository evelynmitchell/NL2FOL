(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun Taught (BoundSet BoundSet) Bool)
(declare-fun RidesScooter (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (Taught a b) (RidesScooter b c))))) (and (forall ((e BoundSet)) (forall ((g BoundSet)) (forall ((f BoundSet)) (forall ((d BoundSet)) (=> (RidesScooter d e) (Taught f g)))))) (forall ((j BoundSet)) (forall ((i BoundSet)) (forall ((k BoundSet)) (forall ((h BoundSet)) (=> (Taught h i) (RidesScooter j k)))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (Taught a b))))))
(check-sat)
(get-model)