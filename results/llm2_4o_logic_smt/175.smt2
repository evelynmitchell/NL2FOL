(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsInOffice (BoundSet) Bool)
(declare-fun HasComputers (BoundSet) Bool)
(declare-fun HasProjectorScreen (BoundSet) Bool)
(declare-fun IsInRoom (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (and (IsInOffice c) (and (HasComputers c) (HasProjectorScreen c)))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsInRoom g) (IsInOffice h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsInRoom i) (IsInOffice j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsInRoom k) (HasComputers l)))) (and (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsInRoom m) (HasComputers n)))) (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsInRoom o) (HasProjectorScreen p))))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsInRoom a) (IsInRoom b)))))))
(check-sat)
(get-model)