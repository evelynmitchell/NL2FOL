(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsRed (BoundSet) Bool)
(declare-fun Jumps (BoundSet) Bool)
(declare-fun Catches (BoundSet BoundSet) Bool)
(declare-fun InMouth (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsRed a) (and (Jumps a) (and (Catches a b) (InMouth b c))))))) (and (forall ((g BoundSet)) (forall ((f BoundSet)) (forall ((h BoundSet)) (=> (Catches f g) (IsRed h))))) (and (forall ((i BoundSet)) (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (Catches i j) (Jumps k))))) (and (forall ((l BoundSet)) (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((m BoundSet)) (=> (InMouth l m) (Catches n o)))))) (forall ((q BoundSet)) (forall ((s BoundSet)) (forall ((r BoundSet)) (forall ((p BoundSet)) (=> (Catches p q) (InMouth r s)))))))))) (exists ((e BoundSet)) (exists ((d BoundSet)) (Catches d e))))))
(check-sat)
(get-model)