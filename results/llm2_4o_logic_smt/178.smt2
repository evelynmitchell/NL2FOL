(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsWearingCap (BoundSet) Bool)
(declare-fun IsNotWearingShirt (BoundSet) Bool)
(declare-fun IsLayingOnBench (BoundSet) Bool)
(declare-fun IsRelaxing (BoundSet) Bool)
(declare-fun IsOnBench (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsWearingCap a) (and (IsNotWearingShirt a) (IsLayingOnBench a)))) (and (forall ((e BoundSet)) (forall ((f BoundSet)) (=> (IsRelaxing e) (IsWearingCap f)))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsOnBench g) (IsWearingCap h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsRelaxing i) (IsNotWearingShirt j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsOnBench k) (IsNotWearingShirt l)))) (and (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsLayingOnBench m) (IsRelaxing n)))) (and (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsRelaxing o) (IsLayingOnBench p)))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (IsLayingOnBench q) (IsOnBench r)))) (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (IsOnBench s) (IsLayingOnBench t)))))))))))) (exists ((c BoundSet)) (and (IsRelaxing c) (IsOnBench c))))))
(check-sat)
(get-model)