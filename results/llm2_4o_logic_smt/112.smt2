(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsYoung (BoundSet) Bool)
(declare-fun Wears (BoundSet BoundSet) Bool)
(declare-fun Kicks (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsYoung a) (and (Wears a c) (Kicks a b)))))) (and (forall ((e BoundSet)) (forall ((d BoundSet)) (=> (Kicks d e) (IsYoung d)))) (and (forall ((g BoundSet)) (forall ((f BoundSet)) (=> (IsYoung f) (Wears f g)))) (and (forall ((j BoundSet)) (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (Kicks h i) (Wears h j))))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (Kicks k l) (IsYoung k)))) (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsYoung m) (Kicks m n))))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsYoung a) (Kicks a b)))))))
(check-sat)
(get-model)