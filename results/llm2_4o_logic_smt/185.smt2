(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun bench () BoundSet)
(declare-fun IsSittingOn (BoundSet BoundSet) Bool)
(declare-fun IsInFrontOf (BoundSet BoundSet) Bool)
(declare-fun IsSeatedOn (BoundSet BoundSet) Bool)
(declare-fun IsOutside (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsSittingOn a b) (IsInFrontOf b c))))) (and (forall ((e BoundSet)) (forall ((g BoundSet)) (forall ((f BoundSet)) (forall ((h BoundSet)) (=> (IsSittingOn e f) (IsSeatedOn g h)))))) (and (forall ((l BoundSet)) (forall ((i BoundSet)) (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (IsSeatedOn i j) (IsSittingOn k l)))))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((m BoundSet)) (=> (IsSittingOn m n) (IsOutside o))))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (forall ((p BoundSet)) (=> (IsOutside p) (IsSittingOn q r))))) (and (forall ((s BoundSet)) (forall ((u BoundSet)) (forall ((v BoundSet)) (forall ((t BoundSet)) (=> (IsSeatedOn s t) (IsInFrontOf u v)))))) (forall ((w BoundSet)) (forall ((y BoundSet)) (forall ((x BoundSet)) (=> (IsOutside w) (IsInFrontOf x y))))))))))) (exists ((d BoundSet)) (and (IsSeatedOn d bench) (IsOutside d))))))
(check-sat)
(get-model)