(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsSmall (BoundSet) Bool)
(declare-fun IsInBlueSoccerUniforms (BoundSet) Bool)
(declare-fun IsUsingStepsToWashHands (BoundSet BoundSet) Bool)
(declare-fun IsInAdultSizedBathroom (BoundSet) Bool)
(declare-fun IsWashingHands (BoundSet) Bool)
(assert (not (=> (and (exists ((d BoundSet)) (exists ((b BoundSet)) (and (IsSmall b) (and (IsInBlueSoccerUniforms b) (and (IsUsingStepsToWashHands b d) (IsInAdultSizedBathroom b)))))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsWashingHands g) (IsSmall h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsWashingHands i) (IsInBlueSoccerUniforms j)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((k BoundSet)) (=> (IsWashingHands k) (IsUsingStepsToWashHands l m))))) (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (IsWashingHands n) (IsInAdultSizedBathroom o)))))))) (exists ((f BoundSet)) (IsWashingHands f)))))
(check-sat)
(get-model)