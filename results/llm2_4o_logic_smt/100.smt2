(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun TalksWith (BoundSet BoundSet) Bool)
(declare-fun InFrontOf (BoundSet BoundSet) Bool)
(declare-fun TalksOpenlyWith (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (TalksWith a b) (and (InFrontOf a c) (InFrontOf a d))))))) (and (forall ((e BoundSet)) (forall ((f BoundSet)) (=> (TalksWith e f) (TalksOpenlyWith e f)))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (TalksOpenlyWith g h) (TalksWith g h)))) (and (forall ((i BoundSet)) (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (InFrontOf i j) (TalksOpenlyWith i k))))) (and (forall ((l BoundSet)) (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (TalksOpenlyWith l m) (InFrontOf l n))))) (and (forall ((q BoundSet)) (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (InFrontOf o p) (TalksOpenlyWith o q))))) (forall ((s BoundSet)) (forall ((r BoundSet)) (forall ((t BoundSet)) (=> (TalksOpenlyWith r s) (InFrontOf r t))))))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (TalksOpenlyWith a b))))))
(check-sat)
(get-model)