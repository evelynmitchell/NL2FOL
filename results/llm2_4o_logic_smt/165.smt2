(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun { () BoundSet)
(declare-fun IsSmall (BoundSet) Bool)
(declare-fun HasShortBrownHair (BoundSet) Bool)
(declare-fun IsPushing (BoundSet BoundSet) Bool)
(declare-fun IsPink (BoundSet) Bool)
(declare-fun IsOverGrassWithBrownLeaves (BoundSet BoundSet) Bool)
(declare-fun HasTrees (BoundSet) Bool)
(declare-fun IsInBackground (BoundSet) Bool)
(declare-fun IsOutside (BoundSet) Bool)
(assert (not (=> (and (exists ((e BoundSet)) (exists ((c BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (exists ((a BoundSet)) (and (IsSmall a) (and (HasShortBrownHair a) (and (IsPushing a b) (and (IsPink b) (and (IsOverGrassWithBrownLeaves b c) (and (HasTrees d) (IsInBackground e)))))))))))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsOutside g) (IsSmall h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsOutside i) (HasShortBrownHair j)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((k BoundSet)) (=> (IsOutside k) (IsPushing l m))))) (and (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (IsOutside n) (IsPink o)))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (forall ((p BoundSet)) (=> (IsOverGrassWithBrownLeaves p q) (IsOutside r))))) (and (forall ((s BoundSet)) (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsOutside s) (IsOverGrassWithBrownLeaves t u))))) (and (forall ((v BoundSet)) (forall ((w BoundSet)) (=> (HasTrees v) (IsOutside w)))) (and (forall ((y BoundSet)) (forall ((x BoundSet)) (=> (IsOutside x) (HasTrees y)))) (forall ((z BoundSet)) (=> (IsOutside z) (IsInBackground {)))))))))))) (exists ((f BoundSet)) (IsOutside f)))))
(check-sat)
(get-model)