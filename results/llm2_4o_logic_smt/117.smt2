(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsInCoat (BoundSet) Bool)
(declare-fun KissOnSideOfRoad (BoundSet) Bool)
(declare-fun ShowAppreciation (BoundSet BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsInCoat a) (KissOnSideOfRoad a))) (and (forall ((g BoundSet)) (forall ((i BoundSet)) (forall ((j BoundSet)) (forall ((h BoundSet)) (=> (ShowAppreciation g h i) (IsInCoat j)))))) (and (forall ((l BoundSet)) (forall ((n BoundSet)) (forall ((m BoundSet)) (forall ((k BoundSet)) (=> (KissOnSideOfRoad k) (ShowAppreciation l m n)))))) (forall ((q BoundSet)) (forall ((r BoundSet)) (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (ShowAppreciation o p q) (KissOnSideOfRoad r))))))))) (exists ((e BoundSet)) (exists ((f BoundSet)) (exists ((d BoundSet)) (ShowAppreciation d e f)))))))
(check-sat)
(get-model)