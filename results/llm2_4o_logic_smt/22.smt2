(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsSpentOnEducation (BoundSet) Bool)
(declare-fun IsForHiringManagement (BoundSet) Bool)
(declare-fun IsForBuildingBuildings (BoundSet) Bool)
(declare-fun IsNotNeededForEducation (BoundSet) Bool)
(assert (not (=> (and (exists ((b BoundSet)) (and (IsSpentOnEducation b) (and (IsForHiringManagement b) (IsForBuildingBuildings b)))) (and (forall ((g BoundSet)) (forall ((f BoundSet)) (=> (IsNotNeededForEducation f) (IsSpentOnEducation g)))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (IsNotNeededForEducation h) (IsForHiringManagement i)))) (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (IsNotNeededForEducation j) (IsForBuildingBuildings k))))))) (exists ((e BoundSet)) (IsNotNeededForEducation e)))))
(check-sat)
(get-model)