(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsWearingBlackCap (BoundSet) Bool)
(declare-fun IsSuspendedInAir (BoundSet) Bool)
(declare-fun IsOnSwing (BoundSet) Bool)
(declare-fun IsWithChildren (BoundSet) Bool)
(declare-fun IsInBlackHat (BoundSet) Bool)
(declare-fun IsSwinging (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsWearingBlackCap a) (and (IsSuspendedInAir a) (IsOnSwing a)))) (and (forall ((g BoundSet)) (forall ((f BoundSet)) (=> (IsWithChildren f) (IsWearingBlackCap g)))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (IsWithChildren h) (IsSuspendedInAir i)))) (and (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (IsOnSwing j) (IsInBlackHat k)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (IsSwinging l) (IsOnSwing m)))) (and (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (IsOnSwing n) (IsWithChildren o)))) (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (IsWithChildren p) (IsOnSwing q)))))))))) (exists ((d BoundSet)) (and (IsInBlackHat d) (and (IsSwinging d) (IsWithChildren d)))))))
(check-sat)
(get-model)