(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsYoung (BoundSet) Bool)
(declare-fun IsInOrangeShirt (BoundSet) Bool)
(declare-fun ManeuversSkateboard (BoundSet) Bool)
(declare-fun IsAtTopOfRamp (BoundSet) Bool)
(declare-fun RidesSkateboard (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((d BoundSet)) (and (IsYoung a) (and (IsInOrangeShirt a) (and (ManeuversSkateboard a) (IsAtTopOfRamp d)))))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (RidesSkateboard g) (IsYoung h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (RidesSkateboard i) (IsInOrangeShirt j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (ManeuversSkateboard k) (RidesSkateboard l)))) (and (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (RidesSkateboard m) (ManeuversSkateboard n)))) (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (RidesSkateboard o) (IsAtTopOfRamp p))))))))) (exists ((e BoundSet)) (RidesSkateboard e)))))
(check-sat)
(get-model)