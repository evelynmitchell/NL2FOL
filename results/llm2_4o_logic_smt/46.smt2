(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInexpensive (BoundSet) Bool)
(declare-fun RequiresNoMaintenance (BoundSet) Bool)
(declare-fun IsEasiestToKeep (BoundSet) Bool)
(declare-fun IsPet (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsInexpensive a) (RequiresNoMaintenance a))) (and (forall ((c BoundSet)) (=> (IsInexpensive c) (IsEasiestToKeep c))) (and (forall ((d BoundSet)) (=> (IsEasiestToKeep d) (IsInexpensive d))) (and (forall ((e BoundSet)) (=> (IsInexpensive e) (IsPet e))) (and (forall ((f BoundSet)) (=> (IsPet f) (IsInexpensive f))) (and (forall ((g BoundSet)) (=> (RequiresNoMaintenance g) (IsEasiestToKeep g))) (and (forall ((h BoundSet)) (=> (IsEasiestToKeep h) (RequiresNoMaintenance h))) (and (forall ((i BoundSet)) (=> (RequiresNoMaintenance i) (IsPet i))) (forall ((j BoundSet)) (=> (IsPet j) (RequiresNoMaintenance j))))))))))) (exists ((a BoundSet)) (and (IsEasiestToKeep a) (IsPet a))))))
(check-sat)
(get-model)