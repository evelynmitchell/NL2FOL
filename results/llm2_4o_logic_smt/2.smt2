(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun WorkedHardOn (BoundSet BoundSet) Bool)
(declare-fun Wear (BoundSet BoundSet) Bool)
(declare-fun IsInFamilyHolidayPhoto (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (WorkedHardOn b a))) (and (forall ((e BoundSet)) (forall ((g BoundSet)) (forall ((f BoundSet)) (=> (WorkedHardOn e f) (Wear g f))))) (and (forall ((j BoundSet)) (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (WorkedHardOn h i) (IsInFamilyHolidayPhoto j))))) (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((k BoundSet)) (=> (IsInFamilyHolidayPhoto k) (WorkedHardOn l m)))))))) (exists ((c BoundSet)) (exists ((a BoundSet)) (and (Wear c a) (IsInFamilyHolidayPhoto a)))))))
(check-sat)
(get-model)