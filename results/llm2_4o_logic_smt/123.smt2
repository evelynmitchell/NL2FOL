(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsAsian (BoundSet) Bool)
(declare-fun IsTeenager (BoundSet) Bool)
(declare-fun IsWearing (BoundSet BoundSet) Bool)
(declare-fun IsSittingOn (BoundSet BoundSet) Bool)
(declare-fun IsResting (BoundSet BoundSet) Bool)
(declare-fun IsSeated (BoundSet) Bool)
(assert (not (=> (and (exists ((e BoundSet)) (exists ((c BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (exists ((a BoundSet)) (and (IsAsian b) (and (IsTeenager b) (and (IsWearing b c) (and (IsSittingOn b a) (IsResting d e)))))))))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsSeated g) (IsAsian h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsTeenager i) (IsSeated j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsSeated k) (IsTeenager l)))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((m BoundSet)) (=> (IsSeated m) (IsWearing n o))))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (forall ((p BoundSet)) (=> (IsSittingOn p q) (IsSeated r))))) (and (forall ((s BoundSet)) (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsSeated s) (IsSittingOn t u))))) (forall ((v BoundSet)) (forall ((x BoundSet)) (forall ((w BoundSet)) (=> (IsSeated v) (IsResting w x)))))))))))) (exists ((a BoundSet)) (IsSeated a)))))
(check-sat)
(get-model)