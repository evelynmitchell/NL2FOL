(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsFallacious (BoundSet) Bool)
(declare-fun IsIncoherent (BoundSet) Bool)
(declare-fun IsIllogical (BoundSet) Bool)
(declare-fun IsOpponent (BoundSet) Bool)
(declare-fun UsesToRefute (BoundSet BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsFallacious a) (and (IsIncoherent a) (IsIllogical a)))) (and (forall ((e BoundSet)) (forall ((f BoundSet)) (=> (IsFallacious e) (IsOpponent f)))) (and (forall ((g BoundSet)) (forall ((i BoundSet)) (forall ((j BoundSet)) (forall ((h BoundSet)) (=> (IsFallacious g) (UsesToRefute h i j)))))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsIncoherent k) (IsOpponent l)))) (and (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsIncoherent m) (IsFallacious n)))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsIncoherent o) (UsesToRefute p q r)))))) (and (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (IsIllogical s) (IsOpponent t)))) (and (forall ((u BoundSet)) (forall ((v BoundSet)) (=> (IsIllogical u) (IsFallacious v)))) (forall ((w BoundSet)) (forall ((z BoundSet)) (forall ((y BoundSet)) (forall ((x BoundSet)) (=> (IsIllogical w) (UsesToRefute x y z)))))))))))))) (exists ((c BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (IsOpponent b) (and (IsFallacious c) (UsesToRefute b c d)))))))))
(check-sat)
(get-model)