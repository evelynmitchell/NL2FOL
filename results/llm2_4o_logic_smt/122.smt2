(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun { () BoundSet)
(declare-fun IsStandingAtSide (BoundSet BoundSet) Bool)
(declare-fun IsAtSideOf (BoundSet BoundSet) Bool)
(declare-fun IsStanding (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (IsStandingAtSide a c) (and (IsStandingAtSide b c) (IsAtSideOf c d))))))) (and (forall ((e BoundSet)) (forall ((f BoundSet)) (=> (IsStandingAtSide e f) (IsStanding e)))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsStanding g) (IsStandingAtSide g h)))) (and (forall ((i BoundSet)) (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (IsStanding i) (IsStandingAtSide j k))))) (and (forall ((l BoundSet)) (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsStandingAtSide l m) (IsStanding n))))) (and (forall ((q BoundSet)) (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsStanding o) (IsStandingAtSide p q))))) (and (forall ((s BoundSet)) (forall ((r BoundSet)) (=> (IsStandingAtSide r s) (IsStanding r)))) (and (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsStanding t) (IsStandingAtSide t u)))) (and (forall ((v BoundSet)) (forall ((x BoundSet)) (forall ((w BoundSet)) (=> (IsStanding v) (IsAtSideOf w x))))) (forall ((z BoundSet)) (forall ((y BoundSet)) (=> (IsStanding y) (IsAtSideOf z {))))))))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsStanding a) (IsStanding b)))))))
(check-sat)
(get-model)