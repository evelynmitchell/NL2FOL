(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsYoung (BoundSet) Bool)
(declare-fun IsAsian (BoundSet) Bool)
(declare-fun IsSittingOnGround (BoundSet) Bool)
(declare-fun IsInRubble (BoundSet) Bool)
(declare-fun IsOutside (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsYoung a) (and (IsAsian a) (and (IsSittingOnGround a) (IsInRubble a))))) (and (forall ((d BoundSet)) (=> (IsOutside d) (IsYoung d))) (and (forall ((e BoundSet)) (=> (IsInRubble e) (IsYoung e))) (and (forall ((f BoundSet)) (=> (IsOutside f) (IsAsian f))) (and (forall ((g BoundSet)) (=> (IsInRubble g) (IsAsian g))) (and (forall ((h BoundSet)) (=> (IsSittingOnGround h) (IsAsian h))) (and (forall ((i BoundSet)) (=> (IsSittingOnGround i) (IsOutside i))) (and (forall ((j BoundSet)) (=> (IsOutside j) (IsSittingOnGround j))) (and (forall ((k BoundSet)) (=> (IsInRubble k) (IsSittingOnGround k))) (and (forall ((l BoundSet)) (=> (IsInRubble l) (IsYoung l))) (and (forall ((m BoundSet)) (=> (IsYoung m) (IsInRubble m))) (and (forall ((n BoundSet)) (=> (IsInRubble n) (IsAsian n))) (and (forall ((o BoundSet)) (=> (IsInRubble o) (IsOutside o))) (forall ((p BoundSet)) (=> (IsOutside p) (IsInRubble p)))))))))))))))) (exists ((a BoundSet)) (and (IsYoung a) (and (IsAsian a) (and (IsOutside a) (IsInRubble a))))))))
(check-sat)
(get-model)