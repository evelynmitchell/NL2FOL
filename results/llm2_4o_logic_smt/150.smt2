(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun InGroupOfYoungMen (BoundSet) Bool)
(declare-fun TakesTurnsScoringInBasketball (BoundSet) Bool)
(declare-fun InGym (BoundSet) Bool)
(declare-fun IsIndoors (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (InGroupOfYoungMen a) (and (TakesTurnsScoringInBasketball a) (InGym a)))) (and (forall ((g BoundSet)) (forall ((f BoundSet)) (=> (InGroupOfYoungMen f) (IsIndoors g)))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (IsIndoors h) (InGroupOfYoungMen i)))) (and (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (TakesTurnsScoringInBasketball j) (IsIndoors k)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (IsIndoors l) (TakesTurnsScoringInBasketball m)))) (and (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (InGym n) (IsIndoors o)))) (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (IsIndoors p) (InGym q)))))))))) (exists ((d BoundSet)) (IsIndoors d)))))
(check-sat)
(get-model)