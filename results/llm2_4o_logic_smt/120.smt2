(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun { () BoundSet)
(declare-fun | () BoundSet)
(declare-fun IsInBlueTShirtAndSweatpants (BoundSet) Bool)
(declare-fun IsStandingOver (BoundSet BoundSet) Bool)
(declare-fun IsLookingAt (BoundSet BoundSet) Bool)
(declare-fun IsStandingBehind (BoundSet BoundSet) Bool)
(declare-fun IsInFrontOf (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (IsInBlueTShirtAndSweatpants a) (and (IsStandingOver a b) (and (IsLookingAt a c) (IsStandingBehind d a)))))))) (and (forall ((g BoundSet)) (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (IsInBlueTShirtAndSweatpants g) (IsInFrontOf h i))))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (IsInFrontOf j k) (IsInBlueTShirtAndSweatpants l))))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((m BoundSet)) (forall ((p BoundSet)) (=> (IsInFrontOf m n) (IsStandingOver o p)))))) (and (forall ((q BoundSet)) (forall ((s BoundSet)) (forall ((r BoundSet)) (forall ((t BoundSet)) (=> (IsLookingAt q r) (IsInFrontOf s t)))))) (and (forall ((u BoundSet)) (forall ((v BoundSet)) (forall ((x BoundSet)) (forall ((w BoundSet)) (=> (IsInFrontOf u v) (IsLookingAt w x)))))) (forall ((z BoundSet)) (forall ((y BoundSet)) (=> (IsInFrontOf y z) (IsStandingBehind { |)))))))))) (exists ((e BoundSet)) (exists ((f BoundSet)) (IsInFrontOf e f))))))
(check-sat)
(get-model)