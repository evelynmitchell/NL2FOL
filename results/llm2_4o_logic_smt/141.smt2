(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsInBlackTrunks (BoundSet) Bool)
(declare-fun IsBouncing (BoundSet) Bool)
(declare-fun IsWet (BoundSet) Bool)
(declare-fun IsPlaying (BoundSet) Bool)
(declare-fun IsOnTrampolines (BoundSet) Bool)
(declare-fun IsOutdoors (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (and (IsInBlackTrunks a) (and (IsBouncing a) (IsWet c))))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsPlaying g) (IsInBlackTrunks h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsOnTrampolines i) (IsInBlackTrunks j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsOutdoors k) (IsInBlackTrunks l)))) (and (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsBouncing m) (IsPlaying n)))) (and (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsPlaying o) (IsBouncing p)))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (IsOnTrampolines q) (IsBouncing r)))) (and (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (IsOutdoors s) (IsBouncing t)))) (and (forall ((u BoundSet)) (forall ((v BoundSet)) (=> (IsPlaying u) (IsWet v)))) (and (forall ((w BoundSet)) (forall ((x BoundSet)) (=> (IsOnTrampolines w) (IsWet x)))) (forall ((z BoundSet)) (forall ((y BoundSet)) (=> (IsOutdoors y) (IsWet z)))))))))))))) (exists ((f BoundSet)) (exists ((d BoundSet)) (and (IsPlaying d) (and (IsOnTrampolines d) (IsOutdoors f))))))))
(check-sat)
(get-model)