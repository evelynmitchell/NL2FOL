(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun { () BoundSet)
(declare-fun | () BoundSet)
(declare-fun } () BoundSet)
(declare-fun PlaysTogether (BoundSet BoundSet) Bool)
(declare-fun IsOn (BoundSet BoundSet) Bool)
(declare-fun IsIn (BoundSet BoundSet) Bool)
(declare-fun IsOutside (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (PlaysTogether b a) (and (IsOn c b) (and (IsOn c a) (IsIn d c)))))))) (and (forall ((g BoundSet)) (forall ((f BoundSet)) (forall ((h BoundSet)) (=> (IsOutside f) (PlaysTogether g h))))) (and (forall ((i BoundSet)) (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (IsOutside i) (PlaysTogether j k))))) (and (forall ((l BoundSet)) (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsOutside l) (IsOn m n))))) (and (forall ((q BoundSet)) (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsOutside o) (IsOn p q))))) (and (forall ((s BoundSet)) (forall ((r BoundSet)) (forall ((t BoundSet)) (=> (IsOutside r) (IsOn s t))))) (and (forall ((u BoundSet)) (forall ((v BoundSet)) (forall ((w BoundSet)) (=> (IsOutside u) (IsOn v w))))) (and (forall ((z BoundSet)) (forall ((y BoundSet)) (forall ((x BoundSet)) (=> (IsOutside x) (IsIn y z))))) (=> (IsOutside {) (IsIn | })))))))))) (exists ((e BoundSet)) (exists ((a BoundSet)) (and (IsOutside e) (IsOutside a)))))))
(check-sat)
(get-model)