(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun AreFloodingIn (BoundSet) Bool)
(declare-fun AreIllegal (BoundSet) Bool)
(declare-fun AreConvictedOf (BoundSet BoundSet) Bool)
(declare-fun IsElected (BoundSet) Bool)
(declare-fun HasDarkImage (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (AreFloodingIn a) (and (AreIllegal b) (AreConvictedOf b c)))))) (and (forall ((g BoundSet)) (forall ((f BoundSet)) (=> (AreFloodingIn f) (IsElected g)))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (AreFloodingIn h) (HasDarkImage i)))) (and (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (HasDarkImage j) (AreFloodingIn k)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (AreIllegal l) (IsElected m)))) (forall ((o BoundSet)) (forall ((n BoundSet)) (forall ((p BoundSet)) (=> (HasDarkImage n) (AreConvictedOf o p)))))))))) (exists ((e BoundSet)) (exists ((d BoundSet)) (and (IsElected e) (HasDarkImage d)))))))
(check-sat)
(get-model)