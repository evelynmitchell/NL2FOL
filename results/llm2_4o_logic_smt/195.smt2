(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsOlder (BoundSet) Bool)
(declare-fun HasGrayHair (BoundSet) Bool)
(declare-fun IsWearingGraySuit (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsOlder a) (and (HasGrayHair a) (IsWearingGraySuit a)))) (and (forall ((d BoundSet)) (=> (IsOlder d) (IsWearingGraySuit d))) (and (forall ((e BoundSet)) (=> (HasGrayHair e) (IsOlder e))) (and (forall ((f BoundSet)) (=> (IsOlder f) (HasGrayHair f))) (and (forall ((g BoundSet)) (=> (IsWearingGraySuit g) (HasGrayHair g))) (and (forall ((h BoundSet)) (=> (IsWearingGraySuit h) (IsOlder h))) (and (forall ((i BoundSet)) (=> (IsOlder i) (IsWearingGraySuit i))) (forall ((j BoundSet)) (=> (IsWearingGraySuit j) (HasGrayHair j)))))))))) (exists ((a BoundSet)) (and (IsOlder a) (and (HasGrayHair a) (IsWearingGraySuit a)))))))
(check-sat)
(get-model)