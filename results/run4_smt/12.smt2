(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun a () UnboundSet)
(declare-fun IsHispanic (UnboundSet) Bool)
(declare-fun IsWearingRedPlaidShirt (BoundSet) Bool)
(declare-fun WorksOnSewing (BoundSet) Bool)
(declare-fun IsWearing (BoundSet) Bool)
(declare-fun IsSewing (BoundSet) Bool)
(assert (not (=> (exists ((c BoundSet)) (exists ((b BoundSet)) (and (IsHispanic a) (and (IsWearingRedPlaidShirt b) (WorksOnSewing c))))) (and (exists ((f BoundSet)) (exists ((e BoundSet)) (and (IsWearing e) (IsSewing f)))) (and (forall ((e BoundSet)) (forall ((b BoundSet)) (=> (IsWearingRedPlaidShirt b) (IsWearing e)))) (and (forall ((e BoundSet)) (forall ((b BoundSet)) (=> (IsWearing e) (IsWearingRedPlaidShirt b)))) (and (forall ((f BoundSet)) (forall ((c BoundSet)) (=> (WorksOnSewing c) (IsSewing f)))) (forall ((f BoundSet)) (forall ((c BoundSet)) (=> (IsSewing f) (WorksOnSewing c)))))))))))
(check-sat)
(get-model)