(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsSoccerPlayerInWhite (BoundSet) Bool)
(declare-fun KicksBall (BoundSet) Bool)
(declare-fun LungesTowardsBall (BoundSet) Bool)
(declare-fun FollowsClose (BoundSet) Bool)
(declare-fun IsSoccerPlayerInRed (BoundSet) Bool)
(declare-fun AreThreeSoccerPlayers (BoundSet) Bool)
(assert (not (=> (and (exists ((x BoundSet)) (exists ((a BoundSet)) (exists ((y BoundSet)) (and (IsSoccerPlayerInWhite a) (and (KicksBall a) (and (LungesTowardsBall x) (and (FollowsClose y) (IsSoccerPlayerInRed y)))))))) (and (forall ((d BoundSet)) (forall ((c BoundSet)) (=> (IsSoccerPlayerInWhite c) (AreThreeSoccerPlayers d)))) (and (forall ((e BoundSet)) (forall ((f BoundSet)) (=> (KicksBall e) (AreThreeSoccerPlayers f)))) (and (forall ((h BoundSet)) (forall ((g BoundSet)) (=> (FollowsClose g) (AreThreeSoccerPlayers h)))) (forall ((j BoundSet)) (forall ((i BoundSet)) (=> (IsSoccerPlayerInRed i) (AreThreeSoccerPlayers j)))))))) (exists ((b BoundSet)) (AreThreeSoccerPlayers b)))))
(check-sat)
(get-model)