(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun ControlsLand (BoundSet BoundSet) Bool)
(declare-fun In (BoundSet BoundSet) Bool)
(declare-fun HasCoastlines (BoundSet BoundSet) Bool)
(declare-fun IsRising (BoundSet) Bool)
(declare-fun IsMelting (BoundSet) Bool)
(declare-fun IsBeginning (BoundSet) Bool)
(declare-fun IsFor (BoundSet BoundSet) Bool)
(declare-fun IsGainingGround (BoundSet) Bool)
(declare-fun Dominates (BoundSet BoundSet) Bool)
(declare-fun ( (Bool) Bool)
(assert (not (=> (and (exists ((h BoundSet)) (exists ((g BoundSet)) (exists ((i BoundSet)) (exists ((f BoundSet)) (exists ((j BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((e BoundSet)) (and (ControlsLand d e) (and (In e a) (and (HasCoastlines f g) (and (IsRising h) (and (IsMelting b) (and (IsBeginning i) (and (IsFor i j) (IsGainingGround c)))))))))))))))))) (and (forall ((m BoundSet)) (forall ((n BoundSet)) (=> (IsRising m) (IsMelting n)))) (and (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsMelting o) (IsRising p)))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (IsRising q) (IsMelting r)))) (and (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (IsMelting s) (IsBeginning t)))) (forall ((v BoundSet)) (forall ((u BoundSet)) (=> (Dominates u v) (IsGainingGround u))))))))) (exists ((k BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (exists ((c BoundSet)) (( (and (IsMelting b) (IsRising k)))) (Dominates c a))))))))
(check-sat)
(get-model)