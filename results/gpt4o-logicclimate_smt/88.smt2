(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun HasCreptUp (BoundSet) Bool)
(declare-fun IsHighTide (BoundSet) Bool)
(declare-fun IsBriskWind (BoundSet) Bool)
(declare-fun SendsWater (BoundSet BoundSet) Bool)
(declare-fun Floods (BoundSet BoundSet) Bool)
(declare-fun OccursDuring (BoundSet) Bool)
(declare-fun ( (Bool) Bool)
(assert (not (=> (and (exists ((f BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (exists ((e BoundSet)) (exists ((a BoundSet)) (and (HasCreptUp f) (and (IsHighTide a) (and (IsBriskWind b) (and (SendsWater c d) (SendsWater c e))))))))))) (and (forall ((j BoundSet)) (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (HasCreptUp h) (Floods i j))))) (and (forall ((k BoundSet)) (=> (OccursDuring k) (IsBriskWind k))) (and (forall ((m BoundSet)) (forall ((l BoundSet)) (=> (Floods l m) (SendsWater l m)))) (and (forall ((o BoundSet)) (forall ((p BoundSet)) (forall ((n BoundSet)) (=> (Floods n o) (SendsWater n p))))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (forall ((s BoundSet)) (=> (SendsWater q r) (Floods q s))))) (and (forall ((t BoundSet)) (forall ((v BoundSet)) (forall ((u BoundSet)) (=> (Floods t u) (SendsWater t v))))) (and (forall ((x BoundSet)) (forall ((w BoundSet)) (=> (SendsWater w x) (Floods w x)))) (forall ((y BoundSet)) (forall ((z BoundSet)) (=> (Floods y z) (SendsWater y z)))))))))))) (exists ((d BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (exists ((e BoundSet)) (and (exists ((a BoundSet)) (( (and (OccursDuring a) (OccursDuring b)))) (and (Floods c d) (Floods c e))))))))))
(check-sat)
(get-model)