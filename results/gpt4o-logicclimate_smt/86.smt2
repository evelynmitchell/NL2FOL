(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun ProvidesIdeology (BoundSet BoundSet BoundSet) Bool)
(declare-fun ProvidesMoney (BoundSet BoundSet BoundSet) Bool)
(declare-fun ProvidesHeadlines (BoundSet BoundSet BoundSet) Bool)
(declare-fun BenefitsFrom (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((d BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (exists ((e BoundSet)) (exists ((a BoundSet)) (and (ProvidesIdeology a b c) (and (ProvidesMoney a b d) (ProvidesHeadlines a b e)))))))) (forall ((j BoundSet)) (forall ((k BoundSet)) (forall ((l BoundSet)) (=> (ProvidesMoney j k l) (BenefitsFrom j k)))))) (exists ((b BoundSet)) (exists ((a BoundSet)) (exists ((f BoundSet)) (exists ((g BoundSet)) (and (BenefitsFrom a f) (and (BenefitsFrom a g) (BenefitsFrom a b))))))))))
(check-sat)
(get-model)