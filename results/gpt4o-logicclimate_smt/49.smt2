(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun 1.5 () BoundSet)
(declare-fun IsLimited (BoundSet BoundSet) Bool)
(declare-fun IsPossibleWithin (BoundSet BoundSet) Bool)
(declare-fun Requires (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (and (IsLimited a 1.5) (and (IsPossibleWithin a b) (IsPossibleWithin a c)))))) (and (forall ((h BoundSet)) (forall ((f BoundSet)) (forall ((g BoundSet)) (=> (IsLimited f g) (Requires f h))))) (and (forall ((j BoundSet)) (forall ((i BoundSet)) (forall ((k BoundSet)) (=> (IsPossibleWithin i j) (Requires i k))))) (forall ((m BoundSet)) (forall ((l BoundSet)) (forall ((n BoundSet)) (=> (IsPossibleWithin l m) (Requires l n)))))))) (exists ((e BoundSet)) (exists ((d BoundSet)) (exists ((a BoundSet)) (and (IsLimited a d) (Requires a e))))))))
(check-sat)
(get-model)