(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun { () BoundSet)
(declare-fun | () BoundSet)
(declare-fun ClaimedLives (BoundSet BoundSet) Bool)
(declare-fun In (BoundSet BoundSet) Bool)
(declare-fun CausedFoodShortages (BoundSet BoundSet) Bool)
(declare-fun ForMillionsOfPeople (BoundSet BoundSet) Bool)
(declare-fun ResultedInForestFires (BoundSet BoundSet) Bool)
(declare-fun BelchedOutGas (BoundSet BoundSet) Bool)
(declare-fun HasSevereImpacts (BoundSet) Bool)
(declare-fun HasDeadlyImpacts (BoundSet) Bool)
(assert (not (=> (and (exists ((k BoundSet)) (exists ((h BoundSet)) (exists ((g BoundSet)) (exists ((i BoundSet)) (exists ((f BoundSet)) (exists ((j BoundSet)) (exists ((d BoundSet)) (exists ((l BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (exists ((e BoundSet)) (exists ((a BoundSet)) (and (ClaimedLives a b) (and (In c d) (and (CausedFoodShortages e f) (and (ForMillionsOfPeople f g) (and (In h h) (and (ResultedInForestFires i j) (and (In j k) (BelchedOutGas j l)))))))))))))))))))) (and (forall ((o BoundSet)) (forall ((p BoundSet)) (forall ((n BoundSet)) (=> (ClaimedLives n o) (HasSevereImpacts p))))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (forall ((s BoundSet)) (=> (HasSevereImpacts q) (ClaimedLives r s))))) (and (forall ((t BoundSet)) (forall ((v BoundSet)) (forall ((u BoundSet)) (=> (HasDeadlyImpacts t) (ClaimedLives u v))))) (and (forall ((x BoundSet)) (forall ((y BoundSet)) (forall ((w BoundSet)) (=> (CausedFoodShortages w x) (HasDeadlyImpacts y))))) (forall ((z BoundSet)) (=> (ForMillionsOfPeople z {) (HasSevereImpacts |)))))))) (exists ((m BoundSet)) (and (HasSevereImpacts m) (HasDeadlyImpacts m))))))
(check-sat)
(get-model)