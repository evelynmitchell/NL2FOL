(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun Cried (BoundSet) Bool)
(declare-fun SawMaps (BoundSet BoundSet) Bool)
(declare-fun IsOfDamage (BoundSet BoundSet) Bool)
(declare-fun CausesEmotionalDistress (BoundSet BoundSet) Bool)
(declare-fun IsSignificant (BoundSet) Bool)
(assert (not (=> (and (exists ((d BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (and (Cried b) (and (Cried c) (and (SawMaps d b) (and (SawMaps d c) (IsOfDamage d a))))))))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (forall ((g BoundSet)) (=> (Cried g) (CausesEmotionalDistress h i))))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (forall ((l BoundSet)) (=> (CausesEmotionalDistress j k) (Cried l))))) (forall ((o BoundSet)) (forall ((m BoundSet)) (forall ((n BoundSet)) (=> (CausesEmotionalDistress m n) (Cried o)))))))) (exists ((e BoundSet)) (exists ((a BoundSet)) (and (IsSignificant a) (CausesEmotionalDistress a e)))))))
(check-sat)
(get-model)