(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsYoung (BoundSet) Bool)
(declare-fun IsWearing (BoundSet BoundSet) Bool)
(declare-fun IsKicking (BoundSet BoundSet) Bool)
(declare-fun IsInvolvedIn (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (and (IsYoung a) (and (IsWearing a b) (IsKicking a c)))))) (and (forall ((e BoundSet)) (forall ((f BoundSet)) (=> (IsYoung e) (IsInvolvedIn e f)))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsInvolvedIn g h) (IsYoung g)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsWearing i j) (IsYoung i)))) (and (forall ((k BoundSet)) (forall ((l BoundSet)) (=> (IsYoung k) (IsWearing k l)))) (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsKicking m n) (IsYoung m))))))))) (exists ((a BoundSet)) (exists ((d BoundSet)) (and (IsYoung a) (IsInvolvedIn a d)))))))
(check-sat)
(get-model)