(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun HasDropped (BoundSet) Bool)
(declare-fun IsThisMorning (BoundSet) Bool)
(declare-fun IsCold (BoundSet) Bool)
(declare-fun Causes (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (HasDropped a) (IsThisMorning a))) (and (forall ((e BoundSet)) (forall ((d BoundSet)) (=> (HasDropped d) (IsCold e)))) (and (forall ((g BoundSet)) (forall ((f BoundSet)) (=> (IsCold f) (HasDropped g)))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (forall ((j BoundSet)) (=> (HasDropped h) (Causes i j))))) (forall ((k BoundSet)) (forall ((m BoundSet)) (forall ((l BoundSet)) (=> (Causes k l) (HasDropped m))))))))) (exists ((b BoundSet)) (exists ((c BoundSet)) (and (IsCold b) (Causes b c)))))))
(check-sat)
(get-model)