(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInWhite (BoundSet) Bool)
(declare-fun Kicks (BoundSet BoundSet) Bool)
(declare-fun LungesTowards (BoundSet BoundSet) Bool)
(declare-fun IsInRed (BoundSet) Bool)
(declare-fun FollowsCloseBy (BoundSet) Bool)
(declare-fun ( (Bool) Bool)
(declare-fun AreSoccerPlayers (BoundSet) Bool)
(assert (not (=> (and (exists ((e BoundSet)) (exists ((d BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (( (and (IsInWhite b) (and (Kicks b c) (and (LungesTowards a d) (and (IsInRed e) (FollowsCloseBy e))))))))))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsInWhite g) (AreSoccerPlayers h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (LungesTowards i j) (AreSoccerPlayers i)))) (and (forall ((k BoundSet)) (forall ((l BoundSet)) (=> (IsInRed k) (AreSoccerPlayers l)))) (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (FollowsCloseBy m) (AreSoccerPlayers n)))))))) (exists ((a BoundSet)) (AreSoccerPlayers a)))))
(check-sat)
(get-model)