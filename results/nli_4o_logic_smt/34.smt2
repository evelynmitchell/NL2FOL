(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsFallacious (BoundSet) Bool)
(declare-fun IsIncoherent (BoundSet) Bool)
(declare-fun IsIllogical (BoundSet) Bool)
(declare-fun WillAttemptRefute (BoundSet BoundSet) Bool)
(declare-fun IsFaulty (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsFallacious a) (and (IsIncoherent a) (IsIllogical a)))) (and (forall ((g BoundSet)) (forall ((e BoundSet)) (forall ((f BoundSet)) (=> (IsFallacious e) (WillAttemptRefute f g))))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (IsFallacious h) (IsFaulty i)))) (and (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (IsIncoherent j) (IsFaulty k)))) (and (forall ((l BoundSet)) (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsIllogical l) (WillAttemptRefute m n))))) (forall ((p BoundSet)) (forall ((o BoundSet)) (=> (IsIllogical o) (IsFaulty p))))))))) (exists ((b BoundSet)) (exists ((d BoundSet)) (exists ((c BoundSet)) (and (WillAttemptRefute b c) (IsFaulty d))))))))
(check-sat)
(get-model)