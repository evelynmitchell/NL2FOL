(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun { () BoundSet)
(declare-fun | () BoundSet)
(declare-fun } () BoundSet)
(declare-fun IsInWhiteShirt (BoundSet) Bool)
(declare-fun SpeaksIntoMicrophone (BoundSet) Bool)
(declare-fun IsAtPublicEvent (BoundSet) Bool)
(declare-fun IsMakingSpeech (BoundSet) Bool)
(declare-fun IsInFrontOfCrowd (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsInWhiteShirt a) (and (SpeaksIntoMicrophone a) (IsAtPublicEvent a)))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (IsInWhiteShirt h) (IsMakingSpeech i)))) (and (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (IsMakingSpeech j) (IsInWhiteShirt k)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (IsInWhiteShirt l) (IsInFrontOfCrowd m)))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (=> (IsInFrontOfCrowd n) (IsInWhiteShirt o)))) (and (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (SpeaksIntoMicrophone p) (IsInWhiteShirt q)))) (and (forall ((r BoundSet)) (forall ((s BoundSet)) (=> (SpeaksIntoMicrophone r) (IsMakingSpeech s)))) (and (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsMakingSpeech t) (SpeaksIntoMicrophone u)))) (and (forall ((w BoundSet)) (forall ((v BoundSet)) (=> (IsInWhiteShirt v) (IsAtPublicEvent w)))) (and (forall ((x BoundSet)) (forall ((y BoundSet)) (=> (IsMakingSpeech x) (IsAtPublicEvent y)))) (and (forall ((z BoundSet)) (=> (IsAtPublicEvent z) (IsInFrontOfCrowd {))) (=> (IsInFrontOfCrowd |) (IsAtPublicEvent }))))))))))))) (exists ((e BoundSet)) (and (IsInWhiteShirt e) (and (IsMakingSpeech e) (IsInFrontOfCrowd e)))))))
(check-sat)
(get-model)