(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun WalkedUnder (BoundSet BoundSet) Bool)
(declare-fun HasOpenUmbrella (BoundSet) Bool)
(declare-fun Indoors (BoundSet) Bool)
(declare-fun SpilledSalt (BoundSet BoundSet) Bool)
(declare-fun InFrontOfBlackCat (BoundSet BoundSet) Bool)
(declare-fun ForgotToKnock (BoundSet BoundSet) Bool)
(declare-fun HasLuckyDice (BoundSet BoundSet) Bool)
(declare-fun IsBad (BoundSet) Bool)
(declare-fun Causes (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((e BoundSet)) (exists ((d BoundSet)) (exists ((g BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((f BoundSet)) (exists ((c BoundSet)) (and (WalkedUnder a b) (and (HasOpenUmbrella c) (and (Indoors c) (and (SpilledSalt a d) (and (InFrontOfBlackCat d e) (and (ForgotToKnock a f) (HasLuckyDice a g)))))))))))))) (and (forall ((k BoundSet)) (forall ((l BoundSet)) (forall ((j BoundSet)) (=> (WalkedUnder j k) (IsBad l))))) (and (forall ((n BoundSet)) (forall ((m BoundSet)) (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (WalkedUnder m n) (Causes o p)))))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (forall ((s BoundSet)) (=> (WalkedUnder q r) (IsBad s))))) (and (forall ((u BoundSet)) (forall ((v BoundSet)) (forall ((t BoundSet)) (=> (SpilledSalt t u) (IsBad v))))) (forall ((w BoundSet)) (forall ((x BoundSet)) (forall ((y BoundSet)) (=> (ForgotToKnock w x) (IsBad y)))))))))) (exists ((i BoundSet)) (exists ((h BoundSet)) (and (IsBad h) (and (Causes h i) (IsBad i))))))))
(check-sat)
(get-model)