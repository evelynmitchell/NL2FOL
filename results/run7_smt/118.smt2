(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsEaten (BoundSet BoundSet) Bool)
(declare-fun SmellsAwful (BoundSet) Bool)
(declare-fun HasObviousPungentOdor (BoundSet BoundSet) Bool)
(declare-fun IsPlugged (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((b BoundSet)) (exists ((a BoundSet)) (and (IsEaten a b) (SmellsAwful b)))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (forall ((f BoundSet)) (=> (IsEaten f g) (HasObviousPungentOdor f h))))) (and (forall ((k BoundSet)) (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (SmellsAwful i) (IsPlugged j k))))) (and (forall ((m BoundSet)) (forall ((n BoundSet)) (forall ((l BoundSet)) (=> (SmellsAwful l) (HasObviousPungentOdor m n))))) (forall ((q BoundSet)) (forall ((p BoundSet)) (forall ((o BoundSet)) (=> (HasObviousPungentOdor o p) (SmellsAwful q))))))))) (exists ((d BoundSet)) (exists ((c BoundSet)) (exists ((a BoundSet)) (and (IsPlugged a c) (HasObviousPungentOdor a d))))))))
(check-sat)
(get-model)