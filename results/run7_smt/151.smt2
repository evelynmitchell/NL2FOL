(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsBearded (BoundSet) Bool)
(declare-fun IsDressedForColdWeather (BoundSet) Bool)
(declare-fun IsWearingFurLinedJacket (BoundSet) Bool)
(declare-fun IsWearingHat (BoundSet) Bool)
(declare-fun IsSittingOnBench (BoundSet) Bool)
(assert (not (=> (and (exists ((b BoundSet)) (exists ((a BoundSet)) (and (IsBearded a) (IsDressedForColdWeather b)))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsDressedForColdWeather g) (IsWearingFurLinedJacket h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsWearingFurLinedJacket i) (IsDressedForColdWeather j)))) (and (forall ((k BoundSet)) (forall ((l BoundSet)) (=> (IsDressedForColdWeather k) (IsWearingHat l)))) (forall ((m BoundSet)) (forall ((n BoundSet)) (=> (IsWearingHat m) (IsDressedForColdWeather n)))))))) (exists ((c BoundSet)) (exists ((e BoundSet)) (exists ((f BoundSet)) (and (IsSittingOnBench c) (and (IsWearingFurLinedJacket e) (IsWearingHat f)))))))))
(check-sat)
(get-model)