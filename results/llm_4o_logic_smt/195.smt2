(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsOlder (BoundSet) Bool)
(declare-fun HasGrayHair (BoundSet) Bool)
(declare-fun IsWearingGraySuit (BoundSet) Bool)
(declare-fun IsNextTo (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsOlder a) (and (HasGrayHair a) (IsWearingGraySuit a)))) (and (forall ((g BoundSet)) (forall ((f BoundSet)) (=> (HasGrayHair f) (IsOlder g)))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (HasGrayHair h) (IsOlder i)))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (IsOlder j) (HasGrayHair k)))) (and (forall ((m BoundSet)) (forall ((l BoundSet)) (forall ((n BoundSet)) (=> (IsNextTo l m) (HasGrayHair n))))) (and (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsOlder o) (IsWearingGraySuit p)))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (HasGrayHair q) (IsWearingGraySuit r)))) (forall ((u BoundSet)) (forall ((t BoundSet)) (forall ((s BoundSet)) (=> (IsNextTo s t) (IsWearingGraySuit u)))))))))))) (exists ((d BoundSet)) (exists ((e BoundSet)) (and (IsOlder d) (and (HasGrayHair d) (IsNextTo d e))))))))
(check-sat)
(get-model)