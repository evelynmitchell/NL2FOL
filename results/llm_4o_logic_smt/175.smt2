(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInOffice (BoundSet) Bool)
(declare-fun HasComputers (BoundSet) Bool)
(declare-fun HasProjectorScreen (BoundSet) Bool)
(assert (not (=> (and (exists ((d BoundSet)) (exists ((a BoundSet)) (and (IsInOffice d) (and (HasComputers a) (HasProjectorScreen a))))) (and (forall ((h BoundSet)) (forall ((g BoundSet)) (=> (IsInOffice g) (HasComputers h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsInOffice i) (HasProjectorScreen j)))) (and (forall ((k BoundSet)) (=> (HasComputers k) (HasProjectorScreen k))) (and (forall ((l BoundSet)) (=> (HasProjectorScreen l) (HasComputers l))) (and (forall ((m BoundSet)) (=> (HasProjectorScreen m) (HasComputers m))) (forall ((n BoundSet)) (=> (HasComputers n) (HasProjectorScreen n))))))))) (exists ((a BoundSet)) (and (HasComputers a) (HasProjectorScreen a))))))
(check-sat)
(get-model)