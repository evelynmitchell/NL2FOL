(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsDusty (BoundSet) Bool)
(declare-fun Runs (BoundSet) Bool)
(declare-fun IsOnDirtPath (BoundSet) Bool)
(declare-fun IsThroughGrass (BoundSet) Bool)
(declare-fun IsOutside (BoundSet) Bool)
(declare-fun IsRunning (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsDusty a) (and (Runs a) (and (IsOnDirtPath a) (IsThroughGrass a))))) (and (forall ((f BoundSet)) (forall ((e BoundSet)) (=> (IsDusty e) (IsOutside f)))) (and (forall ((h BoundSet)) (forall ((g BoundSet)) (=> (IsDusty g) (IsRunning h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (Runs i) (IsOutside j)))) (and (forall ((k BoundSet)) (forall ((l BoundSet)) (=> (IsOutside k) (Runs l)))) (and (forall ((m BoundSet)) (forall ((n BoundSet)) (=> (Runs m) (IsRunning n)))) (and (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsOnDirtPath o) (IsOutside p)))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (IsOnDirtPath q) (IsRunning r)))) (and (forall ((t BoundSet)) (forall ((s BoundSet)) (=> (IsThroughGrass s) (IsOutside t)))) (forall ((v BoundSet)) (forall ((u BoundSet)) (=> (IsThroughGrass u) (IsRunning v))))))))))))) (exists ((d BoundSet)) (and (IsOutside d) (IsRunning d))))))
(check-sat)
(get-model)