(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsInWhiteShirt (BoundSet) Bool)
(declare-fun SpeaksInto (BoundSet BoundSet) Bool)
(declare-fun IsAtPublicEvent (BoundSet BoundSet) Bool)
(declare-fun IsMakingSpeech (BoundSet BoundSet) Bool)
(declare-fun IsInFrontOf (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((b BoundSet)) (exists ((c BoundSet)) (exists ((a BoundSet)) (and (IsInWhiteShirt a) (and (SpeaksInto a b) (IsAtPublicEvent a c)))))) (and (forall ((h BoundSet)) (forall ((g BoundSet)) (=> (IsInWhiteShirt g) (IsMakingSpeech g h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (SpeaksInto i j) (IsInWhiteShirt i)))) (and (forall ((k BoundSet)) (forall ((l BoundSet)) (=> (IsInWhiteShirt k) (SpeaksInto k l)))) (and (forall ((m BoundSet)) (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (SpeaksInto m n) (IsMakingSpeech m o))))) (and (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (IsAtPublicEvent p q) (IsInWhiteShirt p)))) (and (forall ((r BoundSet)) (forall ((s BoundSet)) (=> (IsInWhiteShirt r) (IsAtPublicEvent r s)))) (and (forall ((v BoundSet)) (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsAtPublicEvent t u) (IsMakingSpeech t v))))) (forall ((y BoundSet)) (forall ((x BoundSet)) (forall ((w BoundSet)) (=> (IsMakingSpeech w x) (IsAtPublicEvent w y))))))))))))) (exists ((e BoundSet)) (exists ((d BoundSet)) (exists ((a BoundSet)) (and (IsInWhiteShirt a) (and (IsMakingSpeech a d) (IsInFrontOf a e)))))))))
(check-sat)
(get-model)