(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsInWhite (BoundSet) Bool)
(declare-fun Kicks (BoundSet BoundSet) Bool)
(declare-fun LungesTowards (BoundSet BoundSet) Bool)
(declare-fun IsInRed (BoundSet) Bool)
(declare-fun FollowsCloseBy (BoundSet) Bool)
(declare-fun IsSoccerPlayer (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((e BoundSet)) (exists ((d BoundSet)) (and (IsInWhite a) (and (Kicks a b) (and (LungesTowards c d) (and (IsInRed e) (FollowsCloseBy e)))))))))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (forall ((g BoundSet)) (=> (Kicks g h) (IsSoccerPlayer i))))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (forall ((l BoundSet)) (=> (IsSoccerPlayer j) (Kicks k l))))) (and (forall ((m BoundSet)) (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (LungesTowards m n) (IsSoccerPlayer o))))) (and (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (IsInRed p) (IsSoccerPlayer q)))) (forall ((r BoundSet)) (forall ((s BoundSet)) (=> (FollowsCloseBy r) (IsSoccerPlayer s))))))))) (exists ((f BoundSet)) (IsSoccerPlayer f)))))
(check-sat)
(get-model)