(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun SaveMoney (BoundSet BoundSet) Bool)
(declare-fun BuyNewCar (BoundSet BoundSet) Bool)
(declare-fun ( (Bool) Bool)
(declare-fun TakeUber (BoundSet BoundSet) Bool)
(declare-fun ForRestOfLife (BoundSet BoundSet) Bool)
(declare-fun NotBuyNewCar (BoundSet BoundSet) Bool)
(declare-fun NotSaveMoney (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((e BoundSet)) (or (exists ((d BoundSet)) (( (and (SaveMoney a b) (BuyNewCar a c)))) (and (TakeUber a d) (ForRestOfLife a e))))))) (forall ((h BoundSet)) (forall ((g BoundSet)) (forall ((f BoundSet)) (=> (TakeUber f g) (NotBuyNewCar f h)))))) (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((e BoundSet)) (exists ((d BoundSet)) (and (TakeUber a d) (and (ForRestOfLife a e) (and (NotSaveMoney a b) (NotBuyNewCar a c))))))))))))
(check-sat)
(get-model)