(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInRedCoat (BoundSet) Bool)
(declare-fun IsInBlueHeadWrap (BoundSet) Bool)
(declare-fun IsInJeans (BoundSet) Bool)
(declare-fun IsMakingSnowAngel (BoundSet) Bool)
(declare-fun IsOutside (BoundSet) Bool)
(declare-fun PlaysInSnow (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsInRedCoat a) (and (IsInBlueHeadWrap a) (and (IsInJeans a) (IsMakingSnowAngel a))))) (and (forall ((g BoundSet)) (=> (IsInRedCoat g) (IsOutside g))) (and (forall ((h BoundSet)) (=> (IsInRedCoat h) (PlaysInSnow h))) (and (forall ((i BoundSet)) (=> (IsInBlueHeadWrap i) (IsOutside i))) (and (forall ((j BoundSet)) (=> (IsOutside j) (IsInBlueHeadWrap j))) (and (forall ((k BoundSet)) (=> (IsInBlueHeadWrap k) (PlaysInSnow k))) (and (forall ((l BoundSet)) (=> (IsInJeans l) (IsOutside l))) (and (forall ((m BoundSet)) (=> (IsInJeans m) (PlaysInSnow m))) (and (forall ((n BoundSet)) (=> (IsMakingSnowAngel n) (IsOutside n))) (and (forall ((o BoundSet)) (=> (IsOutside o) (IsMakingSnowAngel o))) (and (forall ((p BoundSet)) (=> (IsMakingSnowAngel p) (PlaysInSnow p))) (forall ((q BoundSet)) (=> (PlaysInSnow q) (IsMakingSnowAngel q)))))))))))))) (exists ((a BoundSet)) (and (IsOutside a) (PlaysInSnow a))))))
(check-sat)
(get-model)