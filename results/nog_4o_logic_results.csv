,label,updated_label,articles,Claim,Implication,Referring Expressions - Claim,Referring Expressions - Implication,Property Implications,Equal Entities,Subset Entities,Claim Lfs,Implication Lfs,Logical Form,Logical Form 2,result
0,0,false causality,"Giving 10% of your income to the Church will free a child’s soul from Limbo into Heaven, so give your money!"," ""Giving 10% of your income to the Church will free a child’s soul from Limbo into Heaven.""  "," ""People should give their money.""","IsGiven(a,b),  IsInLimbo(c),  IsInHeaven(c)","IsGiven(g,f)",[],[],[],"(IsGiven(a,b) and IsInLimbo(c)) and IsInHeaven(c)","IsGiven(g, f)","((IsGiven(a,b) and IsInLimbo(c)) and IsInHeaven(c)) -> (IsGiven(g, f))","(exists b (exists a (exists c ((IsGiven(a,b) and IsInLimbo(c)) and IsInHeaven(c))))) -> (exists f (exists g (IsGiven(g, f))))",
1,0,appeal to emotion,"If everyone lived his or her life exactly like Jesus lived his life, the world would be a beautiful place!"," ""Everyone should live life exactly like Jesus lived his life.""  "," ""The world would be a beautiful place.""","ShouldLiveLike(a, c),  IsLifeExactlyLike(b, d)",IsBeautiful(e),[],[],[],"ShouldLiveLike(a, c) and IsLifeExactlyLike(b, d)",IsBeautiful(e),"(ShouldLiveLike(a, c) and IsLifeExactlyLike(b, d)) -> (IsBeautiful(e))","(exists b (exists d (exists a (exists c (ShouldLiveLike(a, c) and IsLifeExactlyLike(b, d)))))) -> (exists e (IsBeautiful(e)))",LF
2,0,appeal to emotion,"I know you don’t like the kitty-cat sweater that Grandma knitted for you, but she worked so hard on it and it will make her happy to see you wear it in the family holiday photo."," ""Grandma worked hard on the kitty-cat sweater.""  "," ""Wearing the kitty-cat sweater will make Grandma happy.""","WorkedHard(a),  Created(b)","IsWorn(b),  MakesHappy(a)",[],"[(' Grandma', ' Grandma'), (' the kitty-cat sweater', ' the kitty-cat sweater')]",[],WorkedHard(a) and Created(b),(IsWorn(b) and MakesHappy(a)),(WorkedHard(a) and Created(b)) -> ((IsWorn(b) and MakesHappy(a))),(exists b (exists a (WorkedHard(a) and Created(b)))) -> (exists b (exists a ((IsWorn(b) and MakesHappy(a))))),
3,0,ad populum,"Dave wants you to break into the spooky cabin with him. “Everyone does it,” he claims. What fallacy has he committed?"," ""Everyone breaks into the spooky cabin.""  "," ""Dave has committed a fallacy.""","BreaksInto(a, b),  IsSpooky(b)","HasCommitted(c, d),  IsFallacy(d)",[],[],[],"IsSpooky(b) and BreaksInto(a, b)","HasCommitted(c, d) and IsFallacy(d)","(IsSpooky(b) and BreaksInto(a, b)) -> (HasCommitted(c, d) and IsFallacy(d))","(exists b (exists a (IsSpooky(b) and BreaksInto(a, b)))) -> (exists d (exists c (HasCommitted(c, d) and IsFallacy(d))))",LF
4,0,fallacy of credibility,"Ms. Drayer, the smartest person in the universe, says the debate is the best class, therefore it is."," ""Ms. Drayer says the debate is the best class.""  "," ""The debate is the best class.""","Says(b),  IsBestClass(a)","Says(a),  IsBestClass(a)",[],"[(' the debate', ' The debate'), (' the debate', ' the best class'), (' the best class', ' the best class')]","[(' the best class', ' The debate')]",Says(b) and IsBestClass(a),Says(a) and IsBestClass(a),(exists a (Says(b) and IsBestClass(a))) -> (forall a (Says(a) and IsBestClass(a))),(exists b (exists a (Says(b) and IsBestClass(a)))) -> (exists a (Says(a) and IsBestClass(a))),LF
5,0,faulty generalization,Why did the blond cross the road?  Because she saw a shoe sale!," ""The blond crossed the road because she saw a shoe sale.""  "," ""A shoe sale is worth crossing the road for.""","IsBlond(b),  CrossedRoad(b),  Saw(c, a),  IsShoeSale(a)","IsShoeSale(a),  IsWorthCrossing(a, d)",[],"[(' a shoe sale', ' A shoe sale')]",[],"(IsBlond(b) and CrossedRoad(b) and Saw(c, a) and IsShoeSale(a))","IsShoeSale(a) and IsWorthCrossing(a, d)","((IsBlond(b) and CrossedRoad(b) and Saw(c, a) and IsShoeSale(a))) -> (IsShoeSale(a) and IsWorthCrossing(a, d))","(exists b (exists a (exists c ((IsBlond(b) and CrossedRoad(b) and Saw(c, a) and IsShoeSale(a)))))) -> (exists d (exists a (IsShoeSale(a) and IsWorthCrossing(a, d))))",
6,0,appeal to emotion,"Timmy: Mom, what if I don’t believe in God?
Mom: Then you burn in Hell forever.  Why do you ask?
Timmy: No reason.
"," ""If Timmy does not believe in God, then Timmy burns in Hell forever.""  "," ""Timmy should believe in God.""","BelievesIn(a, b),  BurnsIn(a, c),  IsInHellForever(a)","BelievesIn(a, b)",[],"[(' Timmy', ' Timmy'), (' God', ' God')]",[],"~BelievesIn(a, b) and (BurnsIn(a, c) and IsInHellForever(a))","BelievesIn(a, b)","(~BelievesIn(a, b) and (BurnsIn(a, c) and IsInHellForever(a))) -> (BelievesIn(a, b))","(exists b (exists a (exists c (~BelievesIn(a, b) and (BurnsIn(a, c) and IsInHellForever(a)))))) -> (exists b (exists a (BelievesIn(a, b))))",LF
7,0,false dilemma,"""If you never gave money to charity, then you must be a greedy millionaire."" What is this?"," ""You never gave money to charity.""  "," ""You must be a greedy millionaire.""","GaveMoney(a, b),  IsGivenTo(b, a)","IsGreedy(c),  IsMillionaire(c)",[],"[(' You', ' You'), (' charity', ' You')]","[(' money', ' You')]","~GaveMoney(a, b) and IsGivenTo(b, a)",IsGreedy(c) and IsMillionaire(c),"(~GaveMoney(a, b) and IsGivenTo(b, a)) -> (IsGreedy(c) and IsMillionaire(c))","(exists b (exists a (~GaveMoney(a, b) and IsGivenTo(b, a)))) -> (exists c (IsGreedy(c) and IsMillionaire(c)))",LF
8,0,fallacy of extension,Caroline says that she is going to have lunch with the new girl. Jenna says that she can't believe that Caroline is ditching her old friends for the new girl.," ""Caroline is going to have lunch with the new girl.""  "," ""Caroline is ditching her old friends for the new girl.""","IsHavingLunch(a),  IsNewGirl(b)","IsDitching(a),  HasOldFriends(a),  IsNewGirl(b)",[],"[(' Caroline', ' Caroline'), (' the new girl', ' the new girl')]","[(' Caroline', ' her old friends'), (' Caroline', ' the new girl'), (' Caroline', ' the new girl')]",IsHavingLunch(a) and IsNewGirl(b),IsDitching(a) and HasOldFriends(a) and ~HasOldFriends(c) and IsNewGirl(b),(exists a (IsHavingLunch(a) and IsNewGirl(b))) -> (exists a (forall b (forall c (IsDitching(a) and HasOldFriends(a) and ~HasOldFriends(c) and IsNewGirl(b))))),(exists b (exists a (IsHavingLunch(a) and IsNewGirl(b)))) -> (exists b (exists a (exists c (IsDitching(a) and HasOldFriends(a) and ~HasOldFriends(c) and IsNewGirl(b))))),LF
9,0,faulty generalization,"""You can never give anyone a break. If you do, they'll walk all over you."""," ""You can never give anyone a break.""  "," ""People will walk all over you if you give anyone a break.""","CanNeverGive(a, b, c)","WillWalkAllOver(d, a),  CanGive(a, b, c)",[],"[(' You', ' you'), (' anyone', ' anyone'), (' a break', ' a break')]","[(' a break', ' You'), (' a break', ' you')]","CanNeverGive(a, b, c)","CanGive(a, b, c) and WillWalkAllOver(d, a)","(exists c (CanNeverGive(a, b, c))) -> (exists c (forall a (CanGive(a, b, c) and WillWalkAllOver(d, a))))","(exists b (exists a (exists c (CanNeverGive(a, b, c))))) -> (exists b (exists d (exists a (exists c (CanGive(a, b, c) and WillWalkAllOver(d, a))))))",LF
10,0,false causality,"Believing that ""runs"" occur to statistically independent phenomena such as routine wheel spirits."," ""Runs occur to statistically independent phenomena such as routine wheel spirits.""  "," ""Routine wheel spirits are statistically independent phenomena.""","IsRun(b),  IsStatisticallyIndependent(c),  IsRoutineWheelSpirit(a)","IsRoutineWheelSpirit(a),  IsStatisticallyIndependent(d)",[],"[(' routine wheel spirits', ' Routine wheel spirits')]","[(' Runs', ' phenomena'), (' phenomena', ' statistically independent phenomena')]",IsRun(b) and IsStatisticallyIndependent(c) and IsRoutineWheelSpirit(a),IsRoutineWheelSpirit(a) and IsStatisticallyIndependent(d),(forall c (exists b (IsRun(b) and IsStatisticallyIndependent(c) and IsRoutineWheelSpirit(a)))) -> (forall d (IsRoutineWheelSpirit(a) and IsStatisticallyIndependent(d))),(exists b (exists a (exists c (IsRun(b) and IsStatisticallyIndependent(c) and IsRoutineWheelSpirit(a))))) -> (exists d (exists a (IsRoutineWheelSpirit(a) and IsStatisticallyIndependent(d)))),Valid
11,0,false causality,"I broke a mirror earlier in the day, and then I received an F on my history final. Therefore, I received the F because I broke the mirror."," ""I broke a mirror earlier in the day.""  "," ""I received an F on my history final because I broke the mirror.""","Broke(b, c)","Received(a, d),  TookFinal(a, e),  Broke(a, f)",[],"[(' I', ' I')]","[(' I', ' my history final'), (' the mirror', ' a mirror'), (' I', ' the day'), (' the day', ' my history final')]","Broke(b, c)","(Received(a, d) and TookFinal(a, e) and Broke(a, f))","(forall c (forall b (Broke(b, c)))) -> (forall e (exists a (exists f ((Received(a, d) and TookFinal(a, e) and Broke(a, f))))))","(exists b (exists c (Broke(b, c)))) -> (exists d (exists a (exists f (exists e ((Received(a, d) and TookFinal(a, e) and Broke(a, f)))))))",
12,0,fallacy of extension,"Charlie: I think we should put more money into schools. Quality public education is so important.
Bob: So you’re saying we should cut military spending and spend it instead on more spiral notebooks and crayons? I guess you want our country to be a weak, defenseless target for terrorists.
Charlie: Creo que deberíamos invertir más dinero en las escuelas. La educación pública de calidad es muy importante.

Bob: ¿Entonces estás diciendo que deberíamos recortar el gasto militar y gastarlo en más cuadernos de espiral y crayones? Supongo que quiere que nuestro país sea un objetivo débil e indefenso para los terroristas."," ""Charlie thinks we should put more money into schools.""  "," ""Bob believes Charlie wants the country to be a weak, defenseless target for terrorists.""","Thinks(a),  ShouldPutMoreMoneyIntoSchools(b, c, d)","Believes(e),  Wants(a, f, g, h, i)",[],"[(' Charlie', ' Charlie')]","[(' we', ' the country'), (' we', ' a weak'), (' more money', ' the country'), (' schools', ' the country')]","Thinks(a) and ShouldPutMoreMoneyIntoSchools(b, c, d)","Believes(e) and Wants(a, f, g, h, i)","(exists d (exists c (exists b (Thinks(a) and ShouldPutMoreMoneyIntoSchools(b, c, d))))) -> (forall g (forall f (Believes(e) and Wants(a, f, g, h, i))))","(exists b (exists d (exists a (exists c (Thinks(a) and ShouldPutMoreMoneyIntoSchools(b, c, d)))))) -> (exists a (exists f (exists e (exists i (exists g (exists h (Believes(e) and Wants(a, f, g, h, i))))))))",LF
13,0,false causality,"Cellphones weren’t invented before I was born. Now, they are everywhere! Therefore, cellphones were created because I was born."," ""Cellphones were created because I was born.""  "," ""Cellphones are everywhere.""","Created(a),  WasBorn(b)",AreEverywhere(a),[],"[(' Cellphones', ' Cellphones')]",[],Created(a) and WasBorn(b),AreEverywhere(a),(Created(a) and WasBorn(b)) -> (AreEverywhere(a)),(exists b (exists a (Created(a) and WasBorn(b)))) -> (exists a (AreEverywhere(a))),LF
14,0,ad hominem,Ms. Baker assigned me a lot of homework because she’s a witch!," ""Ms. Baker assigned a lot of homework.""  "," ""Ms. Baker is a witch.""","AssignedHomework(a, b)",IsAWitch(a),[],"[(' Ms. Baker', ' Ms. Baker')]",[],"AssignedHomework(a, b)",IsAWitch(a),"(AssignedHomework(a, b)) -> (IsAWitch(a))","(exists b (exists a (AssignedHomework(a, b)))) -> (exists a (IsAWitch(a)))",LF
15,0,fallacy of credibility,"My dad went to school, so he knows everything about the education system."," ""My dad went to school.""  "," ""My dad knows everything about the education system.""","IsDad(a),  WentTo(a, b)","IsDad(a),  KnowsEverythingAbout(a, c)",[],"[(' My dad', ' My dad')]","[(' school', ' the education system')]","IsDad(a) and WentTo(a, b)","IsDad(a) and KnowsEverythingAbout(a, c)","(exists b (IsDad(a) and WentTo(a, b))) -> (forall c (IsDad(a) and KnowsEverythingAbout(a, c)))","(exists b (exists a (IsDad(a) and WentTo(a, b)))) -> (exists a (exists c (IsDad(a) and KnowsEverythingAbout(a, c))))",LF
16,0,ad populum,Everyone is doing the Low-Carb Diet.," ""Everyone is doing the Low-Carb Diet.""  "," ""Everyone should do the Low-Carb Diet.""","IsDoing(a, b)","IsDoing(a, b)",[],"[(' Everyone', ' Everyone'), (' the Low-Carb Diet', ' the Low-Carb Diet')]",[],"IsDoing(a, b)","IsDoing(a, b)","(IsDoing(a, b)) -> (IsDoing(a, b))","(exists b (exists a (IsDoing(a, b)))) -> (exists b (exists a (IsDoing(a, b))))",Valid
17,0,fallacy of extension,"Parent: You need to clean out your backpack.
Child: You know I have ADD! Why can’t you just accept me as I am?", The child has ADD.  , The parent should accept the child as the child is.,HasADD(a),"AcceptsAsIs(c, a)",[],"[(' The child', ' the child'), (' The child', ' the child')]",[],HasADD(a),"AcceptsAsIs(c, a)","(HasADD(a)) -> (AcceptsAsIs(c, a))","(exists a (HasADD(a))) -> (exists a (exists c (AcceptsAsIs(c, a))))",LF
18,0,fallacy of credibility,"X has been around for years now.
Y is new.
Therefore, Y is better than X."," ""Y is new.""  "," ""Y is better than X.""",IsNew(a),"IsBetterThan(a, b)",[],"[(' Y', ' Y')]",[],IsNew(a),"IsBetterThan(a, b)","(IsNew(a)) -> (IsBetterThan(a, b))","(exists a (IsNew(a))) -> (exists b (exists a (IsBetterThan(a, b))))",LF
19,0,false causality,"""Right when I sneezed, the power went off. I must've caused the outage."" Bragged Zohaw."," ""Zohaw believes he caused the outage.""  "," ""Zohaw caused the power outage.""","Believes(a),  Caused(b, c)","Caused(a, d)",[],"[(' Zohaw', ' Zohaw')]","[(' Zohaw', ' he'), (' the power outage', ' he')]","Believes(a) and Caused(b, c)","Caused(a, d)","(forall b (Believes(a) and Caused(b, c))) -> (exists d (exists a (Caused(a, d))))","(exists b (exists a (exists c (Believes(a) and Caused(b, c))))) -> (exists d (exists a (Caused(a, d))))",Valid
20,0,equivocation,"I like my steak rare. But I don’t care for aardvark steak, even though it’s the rarest steak in the world."," ""I like my steak rare.""  "," ""I do not care for aardvark steak.""","LikesSteak(a, b),  IsRare(b)","DoesNotCareFor(a, c)",[],"[(' I', ' I')]","[(' I', ' my steak')]","LikesSteak(a, b) and IsRare(b)","DoesNotCareFor(a, c)","(forall b (LikesSteak(a, b) and IsRare(b))) -> (exists a (DoesNotCareFor(a, c)))","(exists b (exists a (LikesSteak(a, b) and IsRare(b)))) -> (exists a (exists c (DoesNotCareFor(a, c))))",LF
21,0,faulty generalization,"If you allow the students to redo this one test, they will always want to redo all future tests"," ""The students will want to redo this one test.""  "," ""The students will always want to redo all future tests.""","WantsToRedo(a, b)","WantsToRedo(a, c)",[],"[(' The students', ' The students')]","[(' this one test', ' The students')]","WantsToRedo(a, b)","WantsToRedo(a, c)","(exists b (WantsToRedo(a, b))) -> (forall a (WantsToRedo(a, c)))","(exists b (exists a (WantsToRedo(a, b)))) -> (exists a (exists c (WantsToRedo(a, c))))",Valid
22,0,fallacy of relevance,"There is no need for additional taxes for education. Every year we throw more money into education, and all they do is hire more management and build more buildings. None of the money actually reaches the classroom or is really used for education."," ""Additional taxes for education are unnecessary.""  "," ""Money does not reach the classroom or is not used for education.""","IsUnnecessary(b),  IsForEducation(b)","IsNotReaching(c, d),  IsNotUsedForEducation(c)",[],"[(' education', ' education')]","[(' the classroom', ' education')]",IsForEducation(b) and IsUnnecessary(b),"~IsNotReaching(c, d) or ~IsNotUsedForEducation(c)","(IsForEducation(b) and IsUnnecessary(b)) -> (~IsNotReaching(c, d) or ~IsNotUsedForEducation(c))","(exists b (IsForEducation(b) and IsUnnecessary(b))) -> (exists d (exists c (~IsNotReaching(c, d) or ~IsNotUsedForEducation(c))))",LF
23,0,false causality,Believing that the cause of the Reformation was simply Martin Luther posting his theses," ""The cause of the Reformation was simply Martin Luther posting his theses.""  "," ""The Reformation was caused by Martin Luther posting his theses.""","IsCauseOf(c),  IsPostedBy(a, b)","IsCauseOf(d),  IsPostedBy(a, b)",[],"[(' Martin Luther', ' Martin Luther'), (' his theses', ' his theses')]","[(' Martin Luther', ' The cause of the Reformation'), (' Martin Luther', ' The Reformation')]","IsCauseOf(c) and IsPostedBy(a, b)","IsPostedBy(a, b) and IsCauseOf(d)","(exists a (forall c (IsCauseOf(c) and IsPostedBy(a, b)))) -> (forall d (exists a (IsPostedBy(a, b) and IsCauseOf(d))))","(exists b (exists a (exists c (IsCauseOf(c) and IsPostedBy(a, b))))) -> (exists b (exists d (exists a (IsPostedBy(a, b) and IsCauseOf(d)))))",Valid
24,0,false causality,The party was going great! Then Gerald showed up and little by little people started collecting their coats and heading home. Gerald ruined the party.," ""Gerald showed up and ruined the party.""  "," ""Gerald caused people to leave the party.""","IsGerald(a),  Ruined(b)","CausedToLeave(a, b),  ArePeople(c)",[],"[(' Gerald', ' Gerald'), (' the party', ' the party')]","[(' Gerald', ' people'), (' the party', ' people')]",IsGerald(a) and Ruined(b),"CausedToLeave(a, b) and ArePeople(c)","(exists b (exists a (IsGerald(a) and Ruined(b)))) -> (forall c (CausedToLeave(a, b) and ArePeople(c)))","(exists b (exists a (IsGerald(a) and Ruined(b)))) -> (exists b (exists a (exists c (CausedToLeave(a, b) and ArePeople(c)))))",LF
25,0,fallacy of logic,"I can’t stop eating these chocolates.  I really love chocolate, or I seriously lack willpower.  I know I really love chocolate; therefore, I cannot lack willpower."," ""The speaker loves chocolate.""  "," ""The speaker cannot lack willpower.""","LovesChocolate(a),  IsChocolate(b)","HasWillpower(a),  CannotLackWillpower(a)",[],"[(' The speaker', ' The speaker')]","[(' willpower', ' The speaker')]",LovesChocolate(a) and IsChocolate(b),CannotLackWillpower(a),(LovesChocolate(a) and IsChocolate(b)) -> (CannotLackWillpower(a)),(exists b (exists a (LovesChocolate(a) and IsChocolate(b)))) -> (exists a (CannotLackWillpower(a))),LF
26,0,false causality,"Shortly after MySpace became popular, U.S. soldiers found Saddam Hussein."," ""U.S. soldiers found Saddam Hussein shortly after MySpace became popular.""  "," ""MySpace's popularity is connected to U.S. soldiers finding Saddam Hussein.""","Found(b, a),  BecamePopular(c)","IsConnected(d, a),  Found(b, a)",[],"[(' U.S. soldiers', ' U.S. soldiers'), (' Saddam Hussein', ' Saddam Hussein')]",[],"BecamePopular(c) and Found(b, a)","IsConnected(d, a) and Found(b, a)","(BecamePopular(c) and Found(b, a)) -> (IsConnected(d, a) and Found(b, a))","(exists b (exists a (exists c (BecamePopular(c) and Found(b, a))))) -> (exists b (exists d (exists a (IsConnected(d, a) and Found(b, a)))))",LF
27,0,false causality,Jimmy isn't at school today. He must be on a family trip.," ""Jimmy isn't at school today.""  "," ""Jimmy is on a family trip.""",IsNotAtSchool(a),IsOnFamilyTrip(a),[],"[(' Jimmy', ' Jimmy')]",[],IsNotAtSchool(a),IsOnFamilyTrip(a),(IsNotAtSchool(a)) -> (IsOnFamilyTrip(a)),(exists a (IsNotAtSchool(a))) -> (exists a (IsOnFamilyTrip(a))),LF
28,0,circular reasoning,"I am athletic because I run, and I run because I'm athletic."," ""I am athletic and I run.""  "," ""Running makes a person athletic.""","IsAthletic(a),  Runs(a)",IsAthletic(a),[],"[(' I', ' A person')]",[],IsAthletic(a) and Runs(a),IsRunning(a) and IsAthletic(a),(IsAthletic(a) and Runs(a)) -> (IsRunning(a) and IsAthletic(a)),(exists a (IsAthletic(a) and Runs(a))) -> (exists a (IsRunning(a) and IsAthletic(a))),LF
29,0,false causality,You know Jane Fonda’s exercise videos must be worth the money. Look at the great shape she’s in.," ""Jane Fonda's exercise videos must be worth the money.""  "," ""Jane Fonda is in great shape.""","IsWorth(a, b)",IsInGreatShape(c),[],[],"[("" Jane Fonda's exercise videos"", ' Jane Fonda')]","IsWorth(a, b)",IsInGreatShape(c),"(exists a (IsWorth(a, b))) -> (forall c (IsInGreatShape(c)))","(exists b (exists a (IsWorth(a, b)))) -> (exists c (IsInGreatShape(c)))",LF
30,0,fallacy of credibility,Albert Einstein was extremely impressed with this theory.," ""Albert Einstein was extremely impressed with this theory.""  "," ""This theory is impressive.""","IsImpressed(b, a)",IsImpressive(a),[],"[(' this theory', ' This theory')]",[],"IsImpressed(b, a)",IsImpressive(a),"(IsImpressed(b, a)) -> (IsImpressive(a))","(exists b (exists a (IsImpressed(b, a)))) -> (exists a (IsImpressive(a)))",LF
31,0,false causality,“I sneezed exactly at the same time the power went off. My sneeze must’ve done something to make the power go off. “," ""The sneeze occurred exactly when the power went off.""  "," ""The sneeze caused the power to go off.""","Occurred(a),  WentOff(b)","Caused(a, b),  WentOff(b)",[],"[(' The sneeze', ' The sneeze'), (' the power', ' the power')]",[],Occurred(a) and WentOff(b),"Caused(a, b) and WentOff(b)","(Occurred(a) and WentOff(b)) -> (Caused(a, b) and WentOff(b))","(exists b (exists a (Occurred(a) and WentOff(b)))) -> (exists b (exists a (Caused(a, b) and WentOff(b))))",LF
32,0,faulty generalization,"It’s getting late, and we still have to decide on the school budget. What do you say we just leave it as is and we can call it a night?"," ""We still have to decide on the school budget.""  "," ""They should leave the school budget as is and call it a night.""","DecidesOn(b, a)","LeaveAsIs(c, a),  CallIt(c, d)",[],"[(' the school budget', ' the school budget')]",[],"DecidesOn(b, a)","LeaveAsIs(c, a) and CallIt(c, d)","(DecidesOn(b, a)) -> (LeaveAsIs(c, a) and CallIt(c, d))","(exists b (exists a (DecidesOn(b, a)))) -> (exists d (exists a (exists c (LeaveAsIs(c, a) and CallIt(c, d)))))",LF
33,0,ad hominem,"Speaker 1 (Democrat): “Donald Trump is a known adulterer. It reflects badly on his character, and suggests he might not be trustworthy.”
Speaker 2 (Republican): “What about Bill Clinton? You didn’t seem to care when he cheated.”"," ""Donald Trump is a known adulterer.""  "," ""Donald Trump might not be trustworthy.""",IsKnownAdulterer(a),IsNotTrustworthy(a),[],"[(' Donald Trump', ' Donald Trump')]","[(' Donald Trump', ' a known adulterer')]",IsKnownAdulterer(a),~IsNotTrustworthy(a),(IsKnownAdulterer(a)) -> (~IsNotTrustworthy(a)),(exists a (IsKnownAdulterer(a))) -> (exists a (~IsNotTrustworthy(a))),LF
34,0,ad hominem,"I hope I presented my argument clearly.  Now, my opponent will attempt to refute my argument by his own fallacious, incoherent, illogical version of history."," ""The opponent will attempt to refute the argument with a fallacious, incoherent, illogical version of history.""  "," ""The argument is strong.""","IsOpponent(b),  AttemptsToRefute(b, a),  IsFallacious(c),  IsIncoherent(d),  IsIllogical(e)",IsStrong(a),[],"[(' the argument', ' The argument')]","[(' a fallacious', ' The argument'), (' incoherent', ' The argument'), (' illogical version of history', ' The argument')]","IsOpponent(b) and AttemptsToRefute(b, a) and IsFallacious(c) and IsIncoherent(d) and IsIllogical(e)",IsStrong(a),"(exists e (exists d (exists c (IsOpponent(b) and AttemptsToRefute(b, a) and IsFallacious(c) and IsIncoherent(d) and IsIllogical(e))))) -> (forall a (IsStrong(a)))","(exists a (exists e (exists c (exists b (exists d (IsOpponent(b) and AttemptsToRefute(b, a) and IsFallacious(c) and IsIncoherent(d) and IsIllogical(e))))))) -> (exists a (IsStrong(a)))",LF
35,0,false causality,"Every time we sacrifice virgins, it rains. Therefore, sacrificing virgins causes it to rain."," ""Sacrificing virgins causes it to rain.""  "," ""Sacrificing virgins causes rain.""","IsSacrificed(a),  CausesRain(a)","IsSacrificed(a),  CausesRain(a)",[],"[(' Virgins', ' Virgins')]",[],IsSacrificed(a) and CausesRain(a),IsSacrificed(a) and CausesRain(b),(IsSacrificed(a) and CausesRain(a)) -> (IsSacrificed(a) and CausesRain(b)),(exists a (IsSacrificed(a) and CausesRain(a))) -> (exists b (exists a (IsSacrificed(a) and CausesRain(b)))),Valid
36,0,ad hominem,"Salesman: This car gets better than average gas mileage and is one of the most reliable cars according to Consumer Reports.
Will: I doubt it—you obviously just want to sell me that car.
"," ""This car gets better than average gas mileage and is one of the most reliable cars.""  "," ""The salesman just wants to sell the car.""","HasBetterGasMileage(a),  IsReliable(a)","WantsToSell(d, e)",[],[],"[(' average gas mileage', ' the car'), (' one of the most reliable cars', ' the car')]",HasBetterGasMileage(a) and IsReliable(a),"WantsToSell(d, e)","(HasBetterGasMileage(a) and IsReliable(a)) -> (WantsToSell(d, e))","(exists a (HasBetterGasMileage(a) and IsReliable(a))) -> (exists d (exists e (WantsToSell(d, e))))",LF
37,0,fallacy of relevance,Labor unions in America are just as bad as Russia under Stalin!," ""Labor unions in America are just as bad as Russia under Stalin.""  "," ""Labor unions in America are bad.""","AreInAmerica(a),  IsBad(a),  IsInRussia(c),  IsUnderStalin(c)","AreInAmerica(a),  IsBad(a)",[],"[(' Labor unions', ' Labor unions'), (' America', ' America')]","[(' Labor unions', ' America'), (' Labor unions', ' America')]",AreInAmerica(a) and IsBad(a) <and (IsInRussia(c) and IsUnderStalin(c)),AreInAmerica(a) and IsBad(a),(AreInAmerica(a) and IsBad(a) <and (IsInRussia(c) and IsUnderStalin(c))) -> (AreInAmerica(a) and IsBad(a)),(exists a (exists c (AreInAmerica(a) and IsBad(a) <and (IsInRussia(c) and IsUnderStalin(c))))) -> (exists a (AreInAmerica(a) and IsBad(a))),LF
38,0,ad populum,"""Everyone was driving over the speed limit, so I shouldn't have gotten a ticket for it!"" is an example of which logical fallacy?"," ""Everyone was driving over the speed limit.""  "," ""I shouldn't have gotten a ticket for it.""",IsDrivingOverLimit(a),"ShouldNotGetTicket(c, d)",[],[],[],IsDrivingOverLimit(a),"ShouldNotGetTicket(c, d)","(IsDrivingOverLimit(a)) -> (ShouldNotGetTicket(c, d))","(exists a (IsDrivingOverLimit(a))) -> (exists d (exists c (ShouldNotGetTicket(c, d))))",LF
39,0,ad hominem,Why would you trust Paris Hilton to sell health food? She drinks and parties and has multiple partners.," ""Paris Hilton drinks, parties, and has multiple partners.""  "," ""Paris Hilton cannot be trusted to sell health food.""","Drinks(a),  Parties(a),  HasMultiplePartners(a)","CannotBeTrusted(a),  IsHealthFood(c)",[],"[(' Paris Hilton', ' Paris Hilton')]","[(' Paris Hilton', ' multiple partners'), (' health food', ' multiple partners')]",Drinks(a) and Parties(a) and HasMultiplePartners(a),CannotBeTrusted(a) and ~IsHealthFood(c),(Drinks(a) and Parties(a) and HasMultiplePartners(a)) -> (CannotBeTrusted(a) and ~IsHealthFood(c)),(exists a (Drinks(a) and Parties(a) and HasMultiplePartners(a))) -> (exists a (exists c (CannotBeTrusted(a) and ~IsHealthFood(c)))),LF
40,0,false causality,"“Yesterday, I walked under a ladder with an open umbrella indoors while spilling salt in front of a black cat. And I forgot to knock on wood with my lucky dice. That must be why I’m having such a bad day today. It’s bad luck.”"," ""I walked under a ladder with an open umbrella indoors while spilling salt in front of a black cat and forgot to knock on wood with lucky dice.""  "," ""I am having a bad day because of bad luck.""","IsWalkingUnder(a,b),  IsOpen(c),  IsIndoors(d),  IsSpilled(e),  IsInFrontOf(e,f),  ForgotToKnockOnWood(a,g),  IsLucky(h)","IsHavingBadDay(a,i),  IsCausedByBadLuck(i,j)",[],"[(' I', ' I')]","[(' I', ' a bad day'), (' I', ' bad luck')]","IsWalkingUnder(a,b) and IsOpen(c) and IsIndoors(d) and IsSpilled(e) and IsInFrontOf(e,f) and ForgotToKnockOnWood(a,g) and IsLucky(h)","IsHavingBadDay(a,i) and IsCausedByBadLuck(i,j)","(exists a (IsWalkingUnder(a,b) and IsOpen(c) and IsIndoors(d) and IsSpilled(e) and IsInFrontOf(e,f) and ForgotToKnockOnWood(a,g) and IsLucky(h))) -> (forall j (forall i (IsHavingBadDay(a,i) and IsCausedByBadLuck(i,j))))","(exists a (exists f (exists e (exists c (exists b (exists d (exists h (exists g (IsWalkingUnder(a,b) and IsOpen(c) and IsIndoors(d) and IsSpilled(e) and IsInFrontOf(e,f) and ForgotToKnockOnWood(a,g) and IsLucky(h)))))))))) -> (exists a (exists i (exists j (IsHavingBadDay(a,i) and IsCausedByBadLuck(i,j)))))",LF
41,0,faulty generalization,"A car makes less pollution than a bus. Therefore, cars are less of a pollution problem than buses"," ""A car makes less pollution than a bus.""  "," ""Cars are less of a pollution problem than buses.""","MakesLessPollution(a, c),  ProducesPollution(a, b),  ProducesPollution(c, b)","IsLessPollutionProblem(d, f),  IsPollutionProblem(e, d),  IsPollutionProblem(e, f)",[],[],"[(' A car', ' Cars'), (' pollution', ' a pollution problem'), (' buses', ' a bus')]","MakesLessPollution(a, c) and ProducesPollution(a, b) and ProducesPollution(c, b)","IsLessPollutionProblem(d, f) and IsPollutionProblem(e, d) and IsPollutionProblem(e, f)","(forall c (exists b (exists a (MakesLessPollution(a, c) and ProducesPollution(a, b) and ProducesPollution(c, b))))) -> (exists f (forall e (forall d (IsLessPollutionProblem(d, f) and IsPollutionProblem(e, d) and IsPollutionProblem(e, f)))))","(exists b (exists a (exists c (MakesLessPollution(a, c) and ProducesPollution(a, b) and ProducesPollution(c, b))))) -> (exists d (exists f (exists e (IsLessPollutionProblem(d, f) and IsPollutionProblem(e, d) and IsPollutionProblem(e, f)))))",LF
42,0,appeal to emotion,"Preys on people’s emotions and sensitivities, can turn into a slippery slope"," ""Preys on people’s emotions and sensitivities.""  "," ""It can turn into a slippery slope.""","PreysOn(a),  PreysOn(b)",CanTurnIntoSlipperySlope(c),[],[],"[(' sensitivities', ' It')]",PreysOn(a) and PreysOn(b),CanTurnIntoSlipperySlope(c),(exists b (PreysOn(a) and PreysOn(b))) -> (forall c (CanTurnIntoSlipperySlope(c))),(exists b (exists a (PreysOn(a) and PreysOn(b)))) -> (exists c (CanTurnIntoSlipperySlope(c))),LF
43,0,fallacy of logic,"Bats are mammals. Bats can fly. Pigs are also mammals, therefore pigs can fly."," ""Bats are mammals and bats can fly.""  "," ""Pigs can fly.""","IsMammal(a),  CanFly(a)",CanFly(c),[],[],[],IsMammal(a) and CanFly(a),CanFly(c),(IsMammal(a) and CanFly(a)) -> (CanFly(c)),(exists a (IsMammal(a) and CanFly(a))) -> (exists c (CanFly(c))),Valid
44,0,intentional,The Geo Metro is a superior car because it averages 43 miles per gallon.," ""The Geo Metro averages 43 miles per gallon.""  "," ""The Geo Metro is a superior car.""","AveragesMileage(a, b)",IsSuperior(a),[],"[(' The Geo Metro', ' The Geo Metro')]","[(' The Geo Metro', ' a superior car'), (' 43 miles per gallon', ' The Geo Metro'), (' 43 miles per gallon', ' a superior car')]","AveragesMileage(a, b)",IsSuperior(a),"(exists b (AveragesMileage(a, b))) -> (forall a (IsSuperior(a)))","(exists b (exists a (AveragesMileage(a, b)))) -> (exists a (IsSuperior(a)))",LF
45,0,fallacy of relevance,"“While you may have concerns about my votes about the environment, I can assure you that I am an open minded individual. What we should really discuss is my record on votes that expanded educational opportunities for all children."""," ""The individual is an open minded person.""  "," ""The individual's record on votes expanded educational opportunities for all children.""",IsOpenMinded(a),"IsExpanded(c, e),  AffectsVotes(c, d),  RepresentsChildren(e, f)",[],[],"[("" The individual's record"", ' an open minded person'), (' an open minded person', ' votes'), (' educational opportunities', ' an open minded person')]",IsOpenMinded(a),"(IsExpanded(c, e) and AffectsVotes(c, d)) and RepresentsChildren(e, f)","(IsOpenMinded(a)) -> ((IsExpanded(c, e) and AffectsVotes(c, d)) and RepresentsChildren(e, f))","(exists a (IsOpenMinded(a))) -> (exists e (exists d (exists f (exists c ((IsExpanded(c, e) and AffectsVotes(c, d)) and RepresentsChildren(e, f))))))",
46,0,intentional,"Fish are the easiest pets to keep; they are inexpensive and require no maintenance at all. Plus, they are really pretty and soothing to watch."," ""Fish are inexpensive and require no maintenance.""  "," ""Fish are the easiest pets to keep.""","IsInexpensive(a),  RequiresNoMaintenance(a)","IsEasiest(a),  CanBeKept(b)",[],"[(' Fish', ' Fish')]",[],IsInexpensive(a) and RequiresNoMaintenance(a),IsEasiest(a) and CanBeKept(b),(IsInexpensive(a) and RequiresNoMaintenance(a)) -> (IsEasiest(a) and CanBeKept(b)),(exists a (IsInexpensive(a) and RequiresNoMaintenance(a))) -> (exists b (exists a (IsEasiest(a) and CanBeKept(b)))),LF
47,0,intentional,I am only slightly obese.  That is perfectly normal here in America.," ""I am only slightly obese.""  "," ""Slightly obese is perfectly normal in America.""",IsSlightlyObese(a),"IsPerfectlyNormal(b, c)",[],[],"[(' I', ' America')]",IsSlightlyObese(a),"IsPerfectlyNormal(b, c)","(exists a (IsSlightlyObese(a))) -> (forall c (IsPerfectlyNormal(b, c)))","(exists a (IsSlightlyObese(a))) -> (exists b (exists c (IsPerfectlyNormal(b, c))))",LF
48,0,ad populum,"Most people think the world is flat, therefore it is flat.", Most people think the world is flat.  , The world is flat.,IsThoughtToBeFlat(a),IsFlat(a),[],"[(' the world', ' The world')]",[],IsThoughtToBeFlat(a),IsFlat(a),(IsThoughtToBeFlat(a)) -> (IsFlat(a)),(exists a (IsThoughtToBeFlat(a))) -> (exists a (IsFlat(a))),LF
49,0,appeal to emotion,You have to give me a passing grade. I spent 150 hours on that project and missed every party this quarter.," ""The speaker spent 150 hours on the project and missed every party this quarter.""  "," ""The speaker deserves a passing grade.""","SpentTimeOn(a, b),  WorkedOn(a, c),  MissedParties(a, d),  InQuarter(e)","DeservesPassingGrade(a, f)",[],"[(' The speaker', ' The speaker')]","[(' a passing grade', ' The speaker'), (' 150 hours', ' The speaker'), (' 150 hours', ' a passing grade'), (' The speaker', ' the project'), (' a passing grade', ' the project'), (' this quarter', ' The speaker'), (' this quarter', ' a passing grade')]","SpentTimeOn(a, b) and WorkedOn(a, c) and MissedParties(a, d) and InQuarter(e)","DeservesPassingGrade(a, f)","(exists e (forall c (exists b (forall a (SpentTimeOn(a, b) and WorkedOn(a, c) and MissedParties(a, d) and InQuarter(e)))))) -> (forall f (forall a (exists f (DeservesPassingGrade(a, f)))))","(exists a (exists e (exists c (exists b (exists d (SpentTimeOn(a, b) and WorkedOn(a, c) and MissedParties(a, d) and InQuarter(e))))))) -> (exists a (exists f (DeservesPassingGrade(a, f))))",LF
50,0,ad populum,"I guess I should buy my 12 year old daughter an iPhone. Everyone at her school has one, and I want her to fit in with the other kids."," ""Everyone at the school has an iPhone.""  "," ""My 12-year-old daughter should have an iPhone.""",HasIPhone(b),HasIPhone(c),[],"[(' an iPhone', ' an iPhone')]",[],HasIPhone(b),HasIPhone(c),(HasIPhone(b)) -> (HasIPhone(c)),(exists b (HasIPhone(b))) -> (exists c (HasIPhone(c))),Valid
51,0,intentional,Kerry’s plan will raise taxes by at least $900 billion his first hundred days.," ""Kerry's plan will raise taxes by at least $900 billion in his first hundred days.""  "," ""Kerry will raise taxes.""","RaisesTaxes(a),  IsInFirstHundredDays(a, d)",RaisesTaxes(e),[],[],"[("" Kerry's plan"", ' Kerry')]","RaisesTaxes(a) and IsInFirstHundredDays(a, d)",RaisesTaxes(e),"(exists a (RaisesTaxes(a) and IsInFirstHundredDays(a, d))) -> (forall e (RaisesTaxes(e)))","(exists d (exists a (RaisesTaxes(a) and IsInFirstHundredDays(a, d)))) -> (exists e (RaisesTaxes(e)))",Valid
52,0,fallacy of extension,"If you told a person, ""I think we should all stay inside to bend the curve of COVID-19"" and they replied, ""so I guess you want people to lose their jobs then,"" what logical fallacy are they using?"," ""The person thinks we should all stay inside to bend the curve of COVID-19.""  "," ""Staying inside causes people to lose their jobs.""","Thinks(b),  ShouldStayInside(c),  AffectsCurve(c, a),  IsCOVID19(d)","IsStayingInsideCauses(a, e),  LosesJobs(a)",[],"[(' the curve', ' people')]","[(' people', ' The person'), (' we', ' people'), (' we', ' their jobs'), (' the curve', ' their jobs'), (' COVID-19', ' their jobs')]","Thinks(b) and ShouldStayInside(c) and AffectsCurve(c, a) and IsCOVID19(d)","IsStayingInsideCauses(a, e) and LosesJobs(a)","(exists d (exists a (exists c (forall b (Thinks(b) and ShouldStayInside(c) and AffectsCurve(c, a) and IsCOVID19(d)))))) -> (forall e (forall a (exists a (IsStayingInsideCauses(a, e) and LosesJobs(a)))))","(exists b (exists d (exists a (exists c (Thinks(b) and ShouldStayInside(c) and AffectsCurve(c, a) and IsCOVID19(d)))))) -> (exists a (exists e (IsStayingInsideCauses(a, e) and LosesJobs(a))))",LF
53,0,appeal to emotion,"Power lines cause cancer. I met a little boy with cancer who lived just 20 miles from a power line who looked into my eyes and said, in his weak voice, “Please do whatever you can so that other kids won’t have to go through what I am going through.” I urge you to vote for this bill to tear down all power lines and replace them with monkeys on treadmills."," ""Power lines cause cancer.""  "," ""You should vote for the bill to tear down all power lines and replace them with monkeys on treadmills.""","CauseCancer(a, b)","ShouldVote(c, d),  TearDown(e),  Replace(e, g, h)",[],[],[],"CauseCancer(a, b)","ShouldVote(c, d) and (TearDown(e) and Replace(e, g, h))","(CauseCancer(a, b)) -> (ShouldVote(c, d) and (TearDown(e) and Replace(e, g, h)))","(exists b (exists a (CauseCancer(a, b)))) -> (exists e (exists c (exists d (exists h (exists g (ShouldVote(c, d) and (TearDown(e) and Replace(e, g, h))))))))",LF
54,0,ad hominem,"Student: Hey, Professor Moore, we shouldn't have to read this book by Freud. Everyone knows he used cocaine."," ""Freud used cocaine.""  "," ""Students shouldn't have to read the book by Freud.""","UsedCocaine(a, b)","ShouldNotRead(c, d),  IsWrittenBy(d, a)",[],"[(' Freud', ' Freud')]",[],"UsedCocaine(a, b)","ShouldNotRead(c, d)","(UsedCocaine(a, b)) -> (ShouldNotRead(c, d))","(exists b (exists a (UsedCocaine(a, b)))) -> (exists d (exists c (ShouldNotRead(c, d))))",LF
55,0,false causality,"Our house was burglarized right after that new family moved in next door. Therefore, that new family must have been involved."," ""The new family moved in next door after the house was burglarized.""  "," ""The new family must have been involved in the burglary.""","MovedIn(a, b),  WasBurglarized(c)","IsInvolved(a, d)",[],"[(' The new family', ' The new family')]","[(' next door', ' The new family'), (' the house', ' The new family')]","MovedIn(a, b) and WasBurglarized(c)","IsInvolved(a, d)","(exists c (exists b (MovedIn(a, b) and WasBurglarized(c)))) -> (forall a (IsInvolved(a, d)))","(exists b (exists a (exists c (MovedIn(a, b) and WasBurglarized(c))))) -> (exists d (exists a (IsInvolved(a, d))))",LF
56,0,circular reasoning,"Witchcraft remains our most urgent spiritual problem because it threatens
our very souls."," ""Witchcraft is our most urgent spiritual problem.""  "," ""Witchcraft threatens our very souls.""","IsUrgent(c),  IsSpiritualProblem(c),  RefersTo(a, b)","IsThreatening(a, d)",[],"[(' Witchcraft', ' Witchcraft')]","[(' our', ' Witchcraft'), (' our', ' our souls')]","IsUrgent(c) and IsSpiritualProblem(c) and RefersTo(a, b)","IsThreatening(a, d)","(exists b (IsUrgent(c) and IsSpiritualProblem(c) and RefersTo(a, b))) -> (forall d (forall a (IsThreatening(a, d))))","(exists b (exists a (exists c (IsUrgent(c) and IsSpiritualProblem(c) and RefersTo(a, b))))) -> (exists d (exists a (IsThreatening(a, d))))",LF
57,0,false dilemma,"Senator Jill: ""We'll have to cut education funding this year.""
Senator Bill: ""Why?""
Senator Jill: ""Well, either we cut the social programs or we live with a huge deficit and we can't live with the deficit."""," ""Senator Jill believes cutting education funding is necessary.""  "," ""Senator Jill believes the social programs must be cut.""","Believes(a, IsCut(b)),  IsNecessary(b)","Believes(a, MustBeCut(c))",[],"[(' Senator Jill', ' Senator Jill')]","[(' education funding', ' the social programs')]","Believes(a, IsCut(b)) and IsNecessary(b)","Believes(a, MustBeCut(c))","(exists b (Believes(a, IsCut(b)) and IsNecessary(b))) -> (forall c (Believes(a, MustBeCut(c))))","(exists b (exists a (Believes(a, IsCut(b)) and IsNecessary(b)))) -> (exists a (exists c (Believes(a, MustBeCut(c)))))",
58,0,appeal to emotion,"""You'll make the right decision because you have something that not many people do: you have heart.""?"," ""You have heart.""  "," ""You will make the right decision.""",HasHeart(a),"WillMakeDecision(a, b),  IsRightDecision(b)",[],"[(' You', ' You'), (' heart', ' the right decision')]","[(' the right decision', ' You'), (' heart', ' You')]",HasHeart(a),"WillMakeDecision(a, b) and IsRightDecision(b)","(forall a (HasHeart(a))) -> (exists b (WillMakeDecision(a, b) and IsRightDecision(b)))","(exists a (HasHeart(a))) -> (exists b (exists a (WillMakeDecision(a, b) and IsRightDecision(b))))",LF
59,0,faulty generalization,Christine has a terrible experience with a boyfriend. She decides that all boys are mean. This is an example of which logical fallacy?," ""Christine has a terrible experience with a boyfriend.""  "," ""All boys are mean.""","HasTerribleExperience(a, b),  HasBoyfriend(a, c)",IsMean(d),[],[],[],"HasTerribleExperience(a, b) and HasBoyfriend(a, c)",IsMean(d),"(HasTerribleExperience(a, b) and HasBoyfriend(a, c)) -> (IsMean(d))","(exists b (exists a (exists c (HasTerribleExperience(a, b) and HasBoyfriend(a, c))))) -> (exists d (IsMean(d)))",LF
60,0,circular reasoning,Smoking pot is against the law because it's wrong; I know it's wrong because it is against the law.," ""Smoking pot is against the law.""  "," ""Smoking pot is wrong.""","IsSmokingPotAgainstTheLaw(a, b)",IsWrong(a),[],"[(' Smoking pot', ' Smoking pot')]","[(' Smoking pot', ' the law')]","IsSmokingPotAgainstTheLaw(a, b)",IsWrong(a),"(forall b (IsSmokingPotAgainstTheLaw(a, b))) -> (exists a (IsWrong(a)))","(exists b (exists a (IsSmokingPotAgainstTheLaw(a, b)))) -> (exists a (IsWrong(a)))",LF
61,0,circular reasoning,"""You can't give me a D because I'm an A student!"""," ""The speaker is an A student.""  "," ""The speaker cannot receive a D.""","IsASpeaker(a),  IsAStudent(b)","IsSpeaker(a),  CannotReceive(c)",[],"[(' The speaker', ' The speaker')]","[(' The speaker', ' A student')]",IsASpeaker(a) and IsAStudent(b),IsSpeaker(a) and ~CannotReceive(c),(forall b (IsASpeaker(a) and IsAStudent(b))) -> (exists a (IsSpeaker(a) and ~CannotReceive(c))),(exists b (exists a (IsASpeaker(a) and IsAStudent(b)))) -> (exists a (exists c (IsSpeaker(a) and ~CannotReceive(c)))),LF
62,0,fallacy of logic,People who buy stocks are no different from people who bet on horse racing. They both risk their money with little chance of making a big profit.," ""People who buy stocks are no different from people who bet on horse racing.""  "," ""People who buy stocks and people who bet on horse racing risk their money with little chance of making a big profit.""","BuysStocks(a),  BetsOnHorseRacing(b),  IsNoDifferent(a, b)","BuysStocks(a),  BetsOnHorseRacing(b),  RisksMoney(a, c),  RisksMoney(b, c),  HasLittleChanceOfMakingProfit(c, d)",[],"[(' People who buy stocks', ' People who buy stocks'), (' people who bet on horse racing', ' people who bet on horse racing')]","[(' People who buy stocks', ' their money'), (' people who bet on horse racing', ' their money'), (' people who bet on horse racing', ' big profit')]",(BuysStocks(a) and BetsOnHorseRacing(b)) and (BetsOnHorseRacing(b) and BuysStocks(a)),"(BuysStocks(a) and BetsOnHorseRacing(b)) and (RisksMoney(a, c) and RisksMoney(b, c) and HasLittleChanceOfMakingProfit(c, d))","(exists b (exists a ((BuysStocks(a) and BetsOnHorseRacing(b)) and (BetsOnHorseRacing(b) and BuysStocks(a))))) -> (forall d (forall c ((BuysStocks(a) and BetsOnHorseRacing(b)) and (RisksMoney(a, c) and RisksMoney(b, c) and HasLittleChanceOfMakingProfit(c, d)))))","(exists b (exists a ((BuysStocks(a) and BetsOnHorseRacing(b)) and (BetsOnHorseRacing(b) and BuysStocks(a))))) -> (exists b (exists d (exists a (exists c ((BuysStocks(a) and BetsOnHorseRacing(b)) and (RisksMoney(a, c) and RisksMoney(b, c) and HasLittleChanceOfMakingProfit(c, d)))))))",
63,0,appeal to emotion,"I cannot get a job because the public education system failed me;  I have to steal to  survive.  It is society's fault, not mine."," ""The public education system failed me.""  "," ""Society is at fault for my need to steal.""","Failed(a, b)","IsAtFault(c),  HasNeed(d),  IsToSteal(e)",[],[],"[(' my need', ' me')]","Failed(a, b)",IsAtFault(c) and (HasNeed(d) and IsToSteal(e)),"(forall b (Failed(a, b))) -> (exists d (IsAtFault(c) and (HasNeed(d) and IsToSteal(e))))","(exists b (exists a (Failed(a, b)))) -> (exists e (exists d (exists c (IsAtFault(c) and (HasNeed(d) and IsToSteal(e))))))",LF
64,0,faulty generalization,"Trump presents a dark image of America if Clinton is elected, with “Syrian refugees flooding in, illegal immigrants convicted of crimes staying.”"," ""Trump presents a dark image of America if Clinton is elected.""  "," ""Syrian refugees will flood in and illegal immigrants convicted of crimes will stay.""","PresentsImage(b, a),  IsDark(a),  Represents(c, a),  IsElected(d)","WillFlood(e),  WillStay(f),  IsConvicted(f, a)",[],"[(' a dark image', ' crimes')]","[(' Syrian refugees', ' a dark image'), (' illegal immigrants', ' a dark image'), (' crimes', ' America')]","PresentsImage(b, a) and IsDark(a) and IsElected(d) and Represents(c, a)","WillFlood(e) and (IsConvicted(f, a) and WillStay(f))","(forall c (forall a (PresentsImage(b, a) and IsDark(a) and IsElected(d) and Represents(c, a)))) -> (exists a (exists f (exists e (WillFlood(e) and (IsConvicted(f, a) and WillStay(f))))))","(exists b (exists d (exists a (exists c (PresentsImage(b, a) and IsDark(a) and IsElected(d) and Represents(c, a)))))) -> (exists a (exists f (exists e (WillFlood(e) and (IsConvicted(f, a) and WillStay(f))))))",LF
65,0,ad hominem,"Charlie: Fast food is filled with salt, fat, and added sugars. We need better regulation of the industry.
Bob: That my be, but you're such a hypocrite! I saw you devour a Triple-Baconator, super-sized fries, and 64oz of soda yesterday!"," ""Charlie devoured a Triple-Baconator, super-sized fries, and 64oz of soda yesterday.""  "," ""Charlie is a hypocrite.""","Devoured(a, b),  HasSuperSizedFries(a, c),  Has64ozSoda(a, d)",IsHypocrite(a),[],"[(' Charlie', ' Charlie')]",[],"Devoured(a, b) and HasSuperSizedFries(a, c) and Has64ozSoda(a, d)",IsHypocrite(a),"(Devoured(a, b) and HasSuperSizedFries(a, c) and Has64ozSoda(a, d)) -> (IsHypocrite(a))","(exists b (exists d (exists a (exists c (Devoured(a, b) and HasSuperSizedFries(a, c) and Has64ozSoda(a, d)))))) -> (exists a (IsHypocrite(a)))",LF
66,0,faulty generalization,Christine has a terrible experience with a boyfriend. She decides that all boys are mean.," ""Christine has a terrible experience with a boyfriend.""  "," ""All boys are mean.""","HasTerribleExperience(a, b),  HasBoyfriend(a, c)",IsMean(d),[],[],[],"HasTerribleExperience(a, b) and HasBoyfriend(a, c)",IsMean(d),"(HasTerribleExperience(a, b) and HasBoyfriend(a, c)) -> (IsMean(d))","(exists b (exists a (exists c (HasTerribleExperience(a, b) and HasBoyfriend(a, c))))) -> (exists d (IsMean(d)))",LF
67,0,intentional,"Barbara believes the marketing agency's office is haunted. The cleaning crew once said they heard a other-worldly noise late at night. Since no one could prove that it wasn't a ghost, the office must be haunted."," ""Barbara believes the marketing agency's office is haunted.""  "," ""The marketing agency's office is haunted.""","Believes(b, a),  IsHaunted(a)",IsHaunted(a),[],"[("" the marketing agency's office"", "" The marketing agency's office"")]",[],"Believes(b, a) and IsHaunted(a)",IsHaunted(a),"(Believes(b, a) and IsHaunted(a)) -> (IsHaunted(a))","(exists b (exists a (Believes(b, a) and IsHaunted(a)))) -> (exists a (IsHaunted(a)))",Valid
68,0,ad populum,"I am voting for Pepitone for President because the rest of my family is voting for her, and I don't want to be the only one not doing so."," ""The rest of the family is voting for Pepitone for President.""  "," ""Everyone should vote for Pepitone for President.""","IsVotingFor(c, a),  IsPresident(b)","IsVotingFor(d, a),  IsPresident(b)",[],"[(' Pepitone', ' Pepitone'), (' President', ' President')]",[],"IsVotingFor(c, a) and IsPresident(b)","IsVotingFor(d, a) and IsPresident(b)","(IsVotingFor(c, a) and IsPresident(b)) -> (IsVotingFor(d, a) and IsPresident(b))","(exists b (exists a (exists c (IsVotingFor(c, a) and IsPresident(b))))) -> (exists b (exists d (exists a (IsVotingFor(d, a) and IsPresident(b)))))",Valid
69,0,fallacy of credibility,"“I admire the president for being a good role model.” REPLY: “But the New York Times says he’s a lousy role model, so you’re wrong.”"," ""The president is a good role model.""  "," ""The president is a lousy role model.""","IsPresident(a),  IsGoodRoleModel(a)","IsPresident(a),  IsLousyRoleModel(a)",[],"[(' The president', ' The president')]","[(' The president', ' a good role model')]",IsPresident(a) and IsGoodRoleModel(a),IsPresident(a) and IsLousyRoleModel(a),(IsPresident(a) and IsGoodRoleModel(a)) -> (IsPresident(a) and IsLousyRoleModel(a)),(exists a (IsPresident(a) and IsGoodRoleModel(a))) -> (exists a (IsPresident(a) and IsLousyRoleModel(a))),LF
70,0,faulty generalization,The numbers on gun violence speak for themselves. We should ban guns in the country!," ""The numbers on gun violence speak for themselves.""  "," ""The country should ban guns.""","SpeaksForItself(a),  RelatesToGunViolence(a, b)","ShouldBan(c, d)",[],[],"[(' The numbers', ' The country'), (' gun violence', ' The country'), (' gun violence', ' guns')]","SpeaksForItself(a) and RelatesToGunViolence(a, b)","ShouldBan(c, d)","(exists b (exists a (SpeaksForItself(a) and RelatesToGunViolence(a, b)))) -> (forall d (forall c (ShouldBan(c, d))))","(exists b (exists a (SpeaksForItself(a) and RelatesToGunViolence(a, b)))) -> (exists d (exists c (ShouldBan(c, d))))",LF
71,0,false causality,"“The temperature has dropped this morning, and I also have a headache. Therefore, the cold weather must be causing my headache. “"," ""The temperature has dropped this morning.""  "," ""Cold weather causes the headache.""  ","IsDropped(a, b)","Causes(c, d)",[],[],"[(' this morning', ' Cold weather')]","IsDropped(a, b)","Causes(c, d)","(exists b (IsDropped(a, b))) -> (forall c (Causes(c, d)))","(exists b (exists a (IsDropped(a, b)))) -> (exists d (exists c (Causes(c, d))))",LF
72,0,ad hominem,"My teacher says the Earth is flat, so it definitely is flat."," ""The teacher says the Earth is flat.""  "," ""The Earth is flat.""","IsTeacher(b),  IsFlat(a)",IsFlat(a),[],"[(' the Earth', ' The Earth')]",[],IsTeacher(b) and IsFlat(a),IsFlat(a),(IsTeacher(b) and IsFlat(a)) -> (IsFlat(a)),(exists b (exists a (IsTeacher(b) and IsFlat(a)))) -> (exists a (IsFlat(a))),Valid
73,0,equivocation,"The fallacy of equivocation occurs when a key term or phrase in an argument is used in an ambiguous way, with one meaning in one portion of the argument and then another meaning in another portion of the argument."," ""A key term or phrase in an argument is used in an ambiguous way.""  "," ""The fallacy of equivocation occurs.""","IsKeyTermOrPhrase(a),  IsUsedAmbiguously(a, b)","IsFallacyOfEquivocation(c),  Occurs(c)",[],[],"[(' The fallacy of equivocation', ' A key term or phrase'), (' The fallacy of equivocation', ' an argument')]","IsKeyTermOrPhrase(a) and IsUsedAmbiguously(a, b)",IsFallacyOfEquivocation(c) and Occurs(c),"(forall b (forall a (IsKeyTermOrPhrase(a) and IsUsedAmbiguously(a, b)))) -> (exists c (IsFallacyOfEquivocation(c) and Occurs(c)))","(exists b (exists a (IsKeyTermOrPhrase(a) and IsUsedAmbiguously(a, b)))) -> (exists c (IsFallacyOfEquivocation(c) and Occurs(c)))",LF
74,0,faulty generalization,When you have too little or unrepresentative data to make claim.," ""There is too little or unrepresentative data to make a claim.""  "," ""One cannot make a claim.""","HasTooLittleData(b),  IsUnrepresentative(c),  CanMakeClaim(a)","CanNotMakeClaim(d),  CanMakeClaim(a)",[],"[(' a claim', ' a claim')]","[(' too little data', ' a claim'), (' One', ' a claim')]",(~HasTooLittleData(b) and ~IsUnrepresentative(c)) and CanMakeClaim(a),CanNotMakeClaim(d),(forall a ((~HasTooLittleData(b) and ~IsUnrepresentative(c)) and CanMakeClaim(a))) -> (exists d (CanNotMakeClaim(d))),(exists b (exists a (exists c ((~HasTooLittleData(b) and ~IsUnrepresentative(c)) and CanMakeClaim(a))))) -> (exists d (CanNotMakeClaim(d))),
75,0,ad populum,"The majority of people believe advertisers should spend more money on billboards, so billboards are objectively the best form of advertisement."," ""The majority of people believe advertisers should spend more money on billboards.""  "," ""Billboards are the best form of advertisement.""","Believes(b),  ShouldSpendMoreMoney(c, a)","IsBestForm(a, d)",[],"[(' billboards', ' Billboards')]","[(' Billboards', ' advertisers')]","Believes(b) and ShouldSpendMoreMoney(c, a)","IsBestForm(a, d)","(forall c (Believes(b) and ShouldSpendMoreMoney(c, a))) -> (exists a (IsBestForm(a, d)))","(exists b (exists a (exists c (Believes(b) and ShouldSpendMoreMoney(c, a))))) -> (exists d (exists a (IsBestForm(a, d))))",LF
76,0,faulty generalization,"If we ban Hummers because they are bad for the environment, eventually the government will ban all cars, so we should not ban Hummers."," ""Hummers are bad for the environment.""  "," ""The government will ban all cars.""",IsBadForEnvironment(a),"WillBan(c, d)",[],[],[],IsBadForEnvironment(a),"WillBan(c, d)","(IsBadForEnvironment(a)) -> (WillBan(c, d))","(exists a (IsBadForEnvironment(a))) -> (exists d (exists c (WillBan(c, d))))",LF
77,0,ad hominem,"My opponent raised a good point, but can we trust him? I mean he just moved to town only 5 months ago, how much could he really know?"," ""The opponent raised a good point.""  "," ""Trusting the opponent is questionable.""","IsOpponent(a),  RaisedGoodPoint(a)","IsOpponent(a),  IsQuestionable(Trusting(a))",[],"[(' The opponent', ' the opponent'), (' a good point', ' the opponent')]",[],IsOpponent(a) and RaisedGoodPoint(a),IsOpponent(a) and IsQuestionable(Trusting(a)),(IsOpponent(a) and RaisedGoodPoint(a)) -> (IsOpponent(a) and IsQuestionable(Trusting(a))),(exists a (IsOpponent(a) and RaisedGoodPoint(a))) -> (exists a (IsOpponent(a) and IsQuestionable(Trusting(a)))),
78,0,false dilemma,"Either you can save your money to buy a new car for yourself, or you can just take an Uber around for the rest of your life."," ""You can save your money to buy a new car for yourself or you can take an Uber around for the rest of your life.""  "," ""You cannot do both.""","CanSave(a, b),  CanBuy(a, c),  CanTake(a, e),  IsForYourself(c, d),  IsForRestOfLife(e, f)","CannotDoBoth(a, g)",[],"[(' You', ' You')]","[(' both', ' You'), (' your money', ' You'), (' both', ' your money'), (' both', ' a new car'), (' You', ' yourself')]","(CanSave(a, b) and CanBuy(a, c) and IsForYourself(c, d)) or (CanTake(a, e) and IsForRestOfLife(e, f))","~CannotDoBoth(a, g)","(forall d (forall c (forall b (exists b (forall a ((CanSave(a, b) and CanBuy(a, c) and IsForYourself(c, d)) or (CanTake(a, e) and IsForRestOfLife(e, f)))))))) -> (forall a (exists g (~CannotDoBoth(a, g))))","(exists a (exists f (exists e (exists c (exists b (exists d ((CanSave(a, b) and CanBuy(a, c) and IsForYourself(c, d)) or (CanTake(a, e) and IsForRestOfLife(e, f))))))))) -> (exists a (exists g (~CannotDoBoth(a, g))))",
79,0,false causality,"Matthieu was the only player on the team who didn't grow a playoff beard, and thus he ended up getting injured."," ""Matthieu was the only player on the team who didn't grow a playoff beard.""  "," ""Matthieu ended up getting injured.""","IsOnlyPlayer(a, c),  IsOnTeam(a, c),  DidNotGrowBeard(a, d)",IsInjured(a),[],"[(' Matthieu', ' Matthieu')]","[(' Matthieu', ' team')]","IsOnlyPlayer(a, c) and IsOnTeam(a, c) and DidNotGrowBeard(a, d)",IsInjured(a),"(forall c (IsOnlyPlayer(a, c) and IsOnTeam(a, c) and DidNotGrowBeard(a, d))) -> (exists a (IsInjured(a)))","(exists d (exists a (exists c (IsOnlyPlayer(a, c) and IsOnTeam(a, c) and DidNotGrowBeard(a, d))))) -> (exists a (IsInjured(a)))",LF
80,0,intentional,"John: Members of the UbaTuba White Men's Club are upstanding citizens of the community.
Marvin: Then why are there so many of these members in jail?
John: They were never true UbaTuba White Men's Club members.
Marvin: What’s a true UbaTuba White Men's Club member?
John: Those who don't go to jail.
"," ""Members of the UbaTuba White Men's Club are upstanding citizens of the community.""  "," ""Members of the UbaTuba White Men's Club don't go to jail.""","IsMemberOf(a),  IsUpstanding(b),  IsPartOfCommunity(b, c)","IsMemberOf(a),  DoesNotGoToJail(a, d)",[],"[("" Members of the UbaTuba White Men's Club"", "" Members of the UbaTuba White Men's Club"")]","[("" Members of the UbaTuba White Men's Club"", ' upstanding citizens'), ("" Members of the UbaTuba White Men's Club"", ' the community')]","IsMemberOf(a) and IsUpstanding(b) and IsPartOfCommunity(b, c)","IsMemberOf(a) and DoesNotGoToJail(a, d)","(forall c (forall b (IsMemberOf(a) and IsUpstanding(b) and IsPartOfCommunity(b, c)))) -> (exists a (IsMemberOf(a) and DoesNotGoToJail(a, d)))","(exists b (exists a (exists c (IsMemberOf(a) and IsUpstanding(b) and IsPartOfCommunity(b, c))))) -> (exists d (exists a (IsMemberOf(a) and DoesNotGoToJail(a, d))))",LF
81,0,faulty generalization,"""Animal experimentation reduces our respect for life. If we don't respect life, we are likely to be more and more tolerant of violent acts like war and murder. Soon our society will become a battlefield in which everyone constantly fears for their lives. It will be the end of civilization. To prevent this terrible consequence, we should make animal experimentation illegal right now."""," ""Animal experimentation reduces respect for life.""  "," ""Animal experimentation should be made illegal right now.""","ReducesRespect(a, b)",ShouldBeMadeIllegal(a),[],"[(' Animal experimentation', ' Animal experimentation')]",[],"ReducesRespect(a, b)",ShouldBeMadeIllegal(a),"(ReducesRespect(a, b)) -> (ShouldBeMadeIllegal(a))","(exists b (exists a (ReducesRespect(a, b)))) -> (exists a (ShouldBeMadeIllegal(a)))",LF
82,0,false causality,You know Jane Fonda's exercise videos must be worth the money. Look at the great shape she's in.," ""Jane Fonda's exercise videos must be worth the money.""  "," ""Jane Fonda is in great shape.""","IsWorth(a, b)",IsInGreatShape(c),[],[],"[("" Jane Fonda's exercise videos"", ' Jane Fonda')]","IsWorth(a, b)",IsInGreatShape(c),"(exists a (IsWorth(a, b))) -> (forall c (IsInGreatShape(c)))","(exists b (exists a (IsWorth(a, b)))) -> (exists c (IsInGreatShape(c)))",LF
83,0,faulty generalization,"Asians make lousy athletes, but do well at the Math Olympiad."," ""Asians make lousy athletes.""  "," ""Asians do well at the Math Olympiad.""","IsAsian(a),  IsLousyAthlete(b)","IsAsian(a),  DoesWellAtOlympiad(a, c)",[],"[(' Asians', ' Asians')]",[],IsAsian(a) and IsLousyAthlete(b),"IsAsian(a) and DoesWellAtOlympiad(a, c)","(IsAsian(a) and IsLousyAthlete(b)) -> (IsAsian(a) and DoesWellAtOlympiad(a, c))","(exists b (exists a (IsAsian(a) and IsLousyAthlete(b)))) -> (exists a (exists c (IsAsian(a) and DoesWellAtOlympiad(a, c))))",LF
84,0,false dilemma,"“Caldwell Hall is in bad shape. Either we tear it down and put up a new building, or we continue to risk students’ safety. Obviously we shouldn’t risk anyone’s safety, so we must tear the building down.”"," ""Caldwell Hall is in bad shape.""  "," ""We must tear down Caldwell Hall.""",IsInBadShape(a),MustTearDown(a),[],"[(' Caldwell Hall', ' Caldwell Hall')]",[],IsInBadShape(a),MustTearDown(a),(IsInBadShape(a)) -> (MustTearDown(a)),(exists a (IsInBadShape(a))) -> (exists a (MustTearDown(a))),LF
85,0,faulty generalization,Did you really vote for Donald as class treasurer? Didn't you hear that his uncle was imprisoned for embezzling $1.5 million?," ""Donald was voted as class treasurer.""  "," ""Donald has a criminal background.""","IsVoted(a,b)",HasCriminalBackground(a),[],"[(' Donald', ' Donald')]",[],"IsVoted(a,b)",HasCriminalBackground(a),"(IsVoted(a,b)) -> (HasCriminalBackground(a))","(exists b (exists a (IsVoted(a,b)))) -> (exists a (HasCriminalBackground(a)))",LF
86,0,fallacy of logic,"If the ozone layer is destroyed, many people will get cancer and suffer from other illnesses.  The ozone layer is being protected, not destroyed.  So, many people will be spared the pain of cancer and other illnesses."," ""If the ozone layer is destroyed, many people will get cancer and suffer from other illnesses.""  "," ""Many people will be spared the pain of cancer and other illnesses.""","IsDestroyed(c),  WillGetCancer(a, d),  WillSufferFromIllnesses(a, b)","IsSpared(a, e),  IsSpared(a, b)",[],"[(' many people', ' Many people'), (' other illnesses', ' other illnesses')]","[(' many people', ' other illnesses'), (' Many people', ' cancer'), (' the pain of cancer', ' cancer'), (' Many people', ' other illnesses')]","IsDestroyed(c) and (WillGetCancer(a, d) and WillSufferFromIllnesses(a, b))","IsSpared(a, e) and IsSpared(a, b)","(forall d (exists a (IsDestroyed(c) and (WillGetCancer(a, d) and WillSufferFromIllnesses(a, b))))) -> (exists e (exists a (forall b (IsSpared(a, e) and IsSpared(a, b)))))","(exists b (exists d (exists a (exists c (IsDestroyed(c) and (WillGetCancer(a, d) and WillSufferFromIllnesses(a, b))))))) -> (exists b (exists a (exists e (IsSpared(a, e) and IsSpared(a, b)))))",LF
87,0,faulty generalization,"Broccoli has significantly less fat than the leading candy bar! Plus, it's nowhere near as hot as Hot Cheetos!"," ""Broccoli has significantly less fat than the leading candy bar.""  "," ""Broccoli is a healthier option than Hot Cheetos.""","HasLessFatThan(a, c)","IsHealthierThan(a, e)",[],"[(' Broccoli', ' Broccoli')]","[(' Broccoli', ' healthier option'), (' Hot Cheetos', ' leading candy bar')]","HasLessFatThan(a, c)","IsHealthierThan(a, e)","(forall c (HasLessFatThan(a, c))) -> (exists e (IsHealthierThan(a, e)))","(exists a (exists c (HasLessFatThan(a, c)))) -> (exists a (exists e (IsHealthierThan(a, e))))",LF
88,0,fallacy of relevance,You're complaining because you have to walk to school? I used to have to give my parents my entire paycheck.," ""The speaker had to give their parents their entire paycheck.""  "," ""The speaker believes walking to school is not a significant complaint.""","HasToGive(a, b),  IsEntirePaycheck(c)","Believes(a, d),  IsNotSignificant(e)",[],"[(' The speaker', ' The speaker')]","[(' walking to school', ' The speaker'), (' The speaker', ' a significant complaint'), (' their parents', ' a significant complaint')]","HasToGive(a, b) and IsEntirePaycheck(c)","Believes(a, d) and IsNotSignificant(e)","(exists b (forall a (HasToGive(a, b) and IsEntirePaycheck(c)))) -> (forall e (exists d (Believes(a, d) and IsNotSignificant(e))))","(exists b (exists a (exists c (HasToGive(a, b) and IsEntirePaycheck(c))))) -> (exists d (exists a (exists e (Believes(a, d) and IsNotSignificant(e)))))",LF
89,0,fallacy of extension,Robot 2 (Blue) has been refuting all of Robot 1's (Orange) arguments. Robot 1 launches the above counterargument. What is this fallacy?," ""Robot 2 has been refuting all of Robot 1's arguments.""  "," ""Robot 1's counterargument is a fallacy.""","IsRefuting(b, c),  HasArguments(a, c)","IsCounterargument(a, d),  IsFallacy(d, e)",[],"[(' Robot 1', ' Robot 1')]","[(' counterargument', ' arguments'), (' fallacy', ' arguments')]","IsRefuting(b, c) and HasArguments(a, c)","IsCounterargument(a, d) and IsFallacy(d, e)","(forall c (IsRefuting(b, c) and HasArguments(a, c))) -> (exists e (exists d (IsCounterargument(a, d) and IsFallacy(d, e))))","(exists b (exists a (exists c (IsRefuting(b, c) and HasArguments(a, c))))) -> (exists d (exists a (exists e (IsCounterargument(a, d) and IsFallacy(d, e)))))",LF
90,0,ad hominem,Personally attacking someone to shift attention away from your views is," ""Personally attacking someone shifts attention away from views.""  "," ""Shifting attention away from views is acceptable.""","IsAttacked(b),  ShiftsAttention(a)","IsShifted(c),  IsAcceptable(c)",[],"[(' views', ' views')]","[(' attention', ' Someone'), (' views', ' Someone'), (' attention', ' views')]",IsAttacked(b) and ~ShiftsAttention(a),IsShifted(c) and IsAcceptable(c),(forall a (forall b (IsAttacked(b) and ~ShiftsAttention(a)))) -> (exists c (IsShifted(c) and IsAcceptable(c))),(exists b (exists a (IsAttacked(b) and ~ShiftsAttention(a)))) -> (exists c (IsShifted(c) and IsAcceptable(c))),LF
91,0,ad hominem,"""She's such a mean teacher and person – that's why she wouldn't raise my grade ONE percent!"""," ""The teacher is mean.""  "," ""The teacher wouldn't raise the grade by one percent.""",IsMean(a),"IsRaisedBy(a, b, c)",[],"[(' The teacher', ' The teacher')]",[],IsMean(a),"~IsRaisedBy(a, b, c)","(IsMean(a)) -> (~IsRaisedBy(a, b, c))","(exists a (IsMean(a))) -> (exists b (exists a (exists c (~IsRaisedBy(a, b, c)))))",LF
92,0,appeal to emotion,"If you don't buy the black pencils, you will get made fun of. You will not be chosen for group projects."," ""If people don't buy the black pencils, people will get made fun of.""  "," ""People will not be chosen for group projects.""","WillNotBuy(b, a),  WillGetMadeFunOf(a)","WillNotBeChosen(a, c)",[],"[(' people', ' People')]",[],"WillNotBuy(b, a) and WillGetMadeFunOf(a)","WillNotBeChosen(a, c)","(WillNotBuy(b, a) and WillGetMadeFunOf(a)) -> (WillNotBeChosen(a, c))","(exists b (exists a (WillNotBuy(b, a) and WillGetMadeFunOf(a)))) -> (exists a (exists c (WillNotBeChosen(a, c))))",LF
93,0,faulty generalization,"Jeff's mom is concerned when she finds out that he skipped class one day. She tells him that she is concerned that since he skipped one class, he will start skipping more frequently. Then he will drop out altogether, never graduate or get into college, and end up unemployed and living at home for the rest of his life. What type of fallacy has Jeff's mom committed?"," ""Jeff's mom is concerned that Jeff skipped class.""  "," ""Jeff will end up unemployed and living at home for the rest of his life.""","IsConcerned(c),  HasSkippedClass(a, b)","IsUnemployed(a),  IsLivingAtHome(a, e),  IsForRestOfLife(a, b)",[],"[(' Jeff', ' Jeff'), (' class', ' his life')]","[(' home', "" Jeff's mom""), ("" Jeff's mom"", ' his life'), (' Jeff', ' his life'), (' home', ' class')]","IsConcerned(c) and HasSkippedClass(a, b)","IsUnemployed(a) and IsLivingAtHome(a, e) and IsForRestOfLife(a, b)","(forall b (exists a (forall c (IsConcerned(c) and HasSkippedClass(a, b))))) -> (exists a (forall b (exists e (IsUnemployed(a) and IsLivingAtHome(a, e) and IsForRestOfLife(a, b)))))","(exists b (exists a (exists c (IsConcerned(c) and HasSkippedClass(a, b))))) -> (exists b (exists a (exists e (IsUnemployed(a) and IsLivingAtHome(a, e) and IsForRestOfLife(a, b)))))",LF
94,0,ad hominem,"How can you tell me I should exercise to lose weight? All you do is sit behind a desk all day. I've never seen you do a lick of exercise.

Identify the logical fallacy commited in this argument."," ""You sit behind a desk all day and never do a lick of exercise.""  "," ""You should not tell me to exercise to lose weight.""  ","SitsBehind(b, a),  DoesNotExercise(a)","ShouldNotTell(a, d),  ShouldExerciseToLoseWeight(e, f)",[],"[(' You', ' You')]","[(' weight', ' You'), (' a lick of exercise', ' You'), (' a lick of exercise', ' exercise')]","SitsBehind(b, a) and DoesNotExercise(a)","ShouldNotTell(a, d) and ~ShouldExerciseToLoseWeight(e, f)","(forall a (SitsBehind(b, a) and DoesNotExercise(a))) -> (exists f (ShouldNotTell(a, d) and ~ShouldExerciseToLoseWeight(e, f)))","(exists b (exists a (SitsBehind(b, a) and DoesNotExercise(a)))) -> (exists d (exists a (exists f (exists e (ShouldNotTell(a, d) and ~ShouldExerciseToLoseWeight(e, f))))))",LF
95,0,fallacy of logic,"""We both like music, so we should get married."""," ""We both like music.""  "," ""We should get married.""","Likes(a, b)",IsMarried(a),[],"[(' We', ' We')]","[(' We', ' music')]","Likes(a, b)",IsMarried(a),"(forall b (Likes(a, b))) -> (exists a (IsMarried(a)))","(exists b (exists a (Likes(a, b)))) -> (exists a (IsMarried(a)))",LF
96,0,ad hominem,"Brandon: We should have tastier lunches!
Jaylen: Don't listen to him! He's a terrible person! I saw him trip another student and steal his lunch money!"," ""Brandon is a terrible person.""  "," ""Brandon tripped another student and stole the student's lunch money.""","IsTerrible(a),  IsPerson(a)","Tripped(a, c),  Stole(a, d)",[],"[(' Brandon', ' Brandon')]","[(' Brandon', ' another student'), (' Brandon', ' a terrible person'), (' a terrible person', ' another student')]",IsTerrible(a) and IsPerson(a),"Tripped(a, c) and Stole(a, d)","(exists a (IsTerrible(a) and IsPerson(a))) -> (forall c (Tripped(a, c) and Stole(a, d)))","(exists a (IsTerrible(a) and IsPerson(a))) -> (exists d (exists a (exists c (Tripped(a, c) and Stole(a, d)))))",LF
97,0,ad hominem,Of course Marx' theories about the ideal society are bunk. The guy spent all his time in the library.," ""Marx's theories about the ideal society are bunk.""  "," ""Marx did not understand society.""","IsAbout(a,b),  IsBunk(a)","IsUnderstoodBy(c,d)",[],[],"[(' Marx', "" Marx's theories"")]","IsAbout(a,b) and IsBunk(a)","~IsUnderstoodBy(c,d)","(forall a (IsAbout(a,b) and IsBunk(a))) -> (exists c (~IsUnderstoodBy(c,d)))","(exists b (exists a (IsAbout(a,b) and IsBunk(a)))) -> (exists d (exists c (~IsUnderstoodBy(c,d))))",LF
98,0,fallacy of relevance,"I'm tailgating her, because she cut me off!"," ""She cut me off.""  "," ""I am tailgating her.""","CutOff(a, b)","IsTailgating(c, d)",[],[],"[(' her', ' She'), (' I', ' me')]","CutOff(a, b)","IsTailgating(c, d)","(forall b (forall a (CutOff(a, b)))) -> (exists c (exists d (IsTailgating(c, d))))","(exists b (exists a (CutOff(a, b)))) -> (exists d (exists c (IsTailgating(c, d))))",LF
99,0,faulty generalization,President Petutti ordered a military strike that killed many civilians. He is no different than any other mass murder and he belongs in prison!," ""President Petutti ordered a military strike that killed many civilians.""  "," ""President Petutti belongs in prison.""","Ordered(b, a),  Killed(c, b)",IsInPrison(a),[],"[(' President Petutti', ' President Petutti')]",[],"Ordered(a, b) and Killed(c, b)",~IsInPrison(a),"(Ordered(a, b) and Killed(c, b)) -> (~IsInPrison(a))","(exists b (exists a (exists c (Ordered(a, b) and Killed(c, b))))) -> (exists a (~IsInPrison(a)))",LF
100,1,,"Coach talks with football player, other players and crowd in background. Thus, a football coach talks with his player in front of the team and the crowd."," ""A football coach talks with his player in front of the team and the crowd.""  "," ""A football coach talks with a football player.""","TalksWith(a,b),  IsInFrontOf(b,c),  IsInFrontOf(b,d)","TalksWith(a,e)",[],"[(' A football coach', ' A football coach')]","[(' his player', ' a football player'), (' a football player', ' the team')]","TalksWith(a,b) and IsInFrontOf(b,c) and IsInFrontOf(b,d)","TalksWith(a,e)","(forall c (exists b (TalksWith(a,b) and IsInFrontOf(b,c) and IsInFrontOf(b,d)))) -> (forall e (TalksWith(a,e)))","(exists b (exists d (exists a (exists c (TalksWith(a,b) and IsInFrontOf(b,c) and IsInFrontOf(b,d)))))) -> (exists a (exists e (TalksWith(a,e))))",Valid
101,1,,"Two men watching one man make a golf putt on the set of Sports Center. As a consequence, people watching sports."," ""Two men are watching one man make a golf putt on Sports Center.""  "," ""People are watching sports.""","IsWatching(a,b),  IsMaking(b,c),  IsOn(b,d)","IsWatching(e, f)",[],[],"[(' golf putt', ' sports'), (' Sports Center', ' sports')]","IsWatching(a,b) and IsMaking(b,c) and IsOn(b,d)","IsWatching(e, f)","(exists d (exists c (IsWatching(a,b) and IsMaking(b,c) and IsOn(b,d)))) -> (forall f (IsWatching(e, f)))","(exists b (exists d (exists a (exists c (IsWatching(a,b) and IsMaking(b,c) and IsOn(b,d)))))) -> (exists f (exists e (IsWatching(e, f))))",Valid
102,1,,"Six women wait to use a port-o-john in a field. Thus, women are outside."," ""Six women wait to use a port-o-john in a field.""  "," ""Women are outside.""","WaitsToUse(a,b),  IsInField(b,c)",IsOutside(d),[],[],"[(' Six women', ' Women')]","WaitsToUse(a,b) and IsInField(b,c)",IsOutside(d),"(exists a (WaitsToUse(a,b) and IsInField(b,c))) -> (forall d (IsOutside(d)))","(exists b (exists a (exists c (WaitsToUse(a,b) and IsInField(b,c))))) -> (exists d (IsOutside(d)))",LF
103,1,,Women wearing a black top and glasses speaking into a blue tipped microphone with another woman beside her writing. It follows that one woman speaking into a microphone while a second woman writes beside her.," ""One woman is wearing a black top and glasses and speaking into a blue tipped microphone while a second woman is writing beside her.""  "," ""One woman is speaking into a microphone.""","IsWearing(b,a),  IsWearing(c,a),  IsSpeakingInto(d,a),  IsWriting(e),  IsBeside(a,e)","IsSpeakingInto(f,a)",[],"[(' One woman', ' One woman')]","[(' a blue tipped microphone', ' a microphone')]","IsWearing(b,a) and IsWearing(c,a) and IsSpeakingInto(d,a) and IsWriting(e) and IsBeside(a,e)","IsSpeakingInto(f, a)","(exists d (IsWearing(b,a) and IsWearing(c,a) and IsSpeakingInto(d,a) and IsWriting(e) and IsBeside(a,e))) -> (forall f (IsSpeakingInto(f, a)))","(exists a (exists e (exists c (exists b (exists d (IsWearing(b,a) and IsWearing(c,a) and IsSpeakingInto(d,a) and IsWriting(e) and IsBeside(a,e))))))) -> (exists a (exists f (IsSpeakingInto(f, a))))",Valid
104,1,,"One tan girl with a wool hat is running and leaning over an object, while another person in a wool hat is sitting on the ground. Therefore, a tan girl runs leans over an object."," ""One tan girl with a wool hat is running and leaning over an object.""  "," ""A tan girl runs and leans over an object.""","IsTan(a),  IsWearing(b, a),  IsRunning(a),  IsLeaningOver(a, c)","IsTan(d),  IsRunning(d),  IsLeaningOver(d, e)",[],[],"[(' One tan girl', ' A tan girl'), (' wool hat', ' an object')]","IsTan(a) and IsWearing(b, a) and IsRunning(a) and IsLeaningOver(a, c)","IsTan(d) and IsRunning(d) and IsLeaningOver(d, e)","(exists b (exists a (IsTan(a) and IsWearing(b, a) and IsRunning(a) and IsLeaningOver(a, c)))) -> (forall e (forall d (IsTan(d) and IsRunning(d) and IsLeaningOver(d, e))))","(exists b (exists a (exists c (IsTan(a) and IsWearing(b, a) and IsRunning(a) and IsLeaningOver(a, c))))) -> (exists d (exists e (IsTan(d) and IsRunning(d) and IsLeaningOver(d, e))))",Valid
105,1,,A scientist studies a slide in order to work on her new creation. It follows that a scientist studies a slide that is related to her invention.," ""A scientist studies a slide.""  "," ""A scientist studies a slide that is related to the scientist's invention.""  ","IsAScientist(a),  Studies(a, b)","IsAScientist(a),  Studies(a, b),  IsRelatedTo(b, c)",[],"[(' A scientist', ' A scientist'), (' a slide', ' a slide')]","[("" the scientist's invention"", ' A scientist')]","IsAScientist(a) and Studies(a, b)","IsAScientist(a) and Studies(a, b) and IsRelatedTo(b, c)","(forall a (IsAScientist(a) and Studies(a, b))) -> (exists c (IsAScientist(a) and Studies(a, b) and IsRelatedTo(b, c)))","(exists b (exists a (IsAScientist(a) and Studies(a, b)))) -> (exists b (exists a (exists c (IsAScientist(a) and Studies(a, b) and IsRelatedTo(b, c)))))",LF
106,1,,"A red dog jumps and catches a tennis ball in its mouth. Consequently, a dog catching a ball."," ""A red dog jumps and catches a tennis ball in its mouth.""  "," ""A dog catches a ball.""","IsRedDog(a),  Jumps(a),  Catches(a,b),  IsInMouth(a,c)","IsDog(d),  Catches(d, e)",[],[],[],"IsRedDog(a) and Jumps(a) and Catches(a,b) and IsInMouth(b,c)","IsDog(d) and Catches(d, e)","(IsRedDog(a) and Jumps(a) and Catches(a,b) and IsInMouth(b,c)) -> (IsDog(d) and Catches(d, e))","(exists b (exists a (exists c (IsRedDog(a) and Jumps(a) and Catches(a,b) and IsInMouth(b,c))))) -> (exists d (exists e (IsDog(d) and Catches(d, e))))",LF
107,1,,"A group of dogs stand in the snow. Thus, there are animals outdoors."," ""A group of dogs stands in the snow.""  "," ""Dogs are animals outdoors.""",IsInTheSnow(a),"IsAnimal(c),  IsOutdoors(e)",[],[],"[(' Dogs', ' A group of dogs'), (' A group of dogs', ' animals'), (' the snow', ' outdoors')]",IsInTheSnow(a),IsAnimal(c) and IsOutdoors(e),(forall a (IsInTheSnow(a))) -> (exists c (IsAnimal(c) and IsOutdoors(e))),(exists a (IsInTheSnow(a))) -> (exists e (exists c (IsAnimal(c) and IsOutdoors(e)))),LF
108,1,,This person looks to be snowboarding on a very small pile of snow on a sunny cold day. This implies that young snowboarder sizing up their next jump.," ""This person is snowboarding on a very small pile of snow on a sunny cold day.""  "," ""The young snowboarder is sizing up the next jump.""","IsSnowboarding(a),  IsVerySmall(b),  IsOnSnow(b),  IsSunny(c),  IsCold(c)","IsYoung(d),  IsSnowboarding(d),  IsSizingUp(d,e),  IsNextJump(e)",[],[],"[(' the next jump', ' This person')]",IsSnowboarding(a) and IsVerySmall(b) and IsOnSnow(b) and IsSunny(c) and IsCold(c),"IsYoung(d) and IsSnowboarding(d) and IsSizingUp(d,e) and IsNextJump(e)","(forall a (IsSnowboarding(a) and IsVerySmall(b) and IsOnSnow(b) and IsSunny(c) and IsCold(c))) -> (exists e (IsYoung(d) and IsSnowboarding(d) and IsSizingUp(d,e) and IsNextJump(e)))","(exists b (exists a (exists c (IsSnowboarding(a) and IsVerySmall(b) and IsOnSnow(b) and IsSunny(c) and IsCold(c))))) -> (exists d (exists e (IsYoung(d) and IsSnowboarding(d) and IsSizingUp(d,e) and IsNextJump(e))))",LF
109,1,,"A large number of people are watching men dressed in kilts, one of whom has thrown a long pole. As a consequence, people watch men in kilts.", A large number of people are watching men dressed in kilts.  , A large number of people watch men in kilts.,"IsLargeNumber(a),  IsWatching(a,b),  IsDressedIn(b,c)","IsLargeNumber(a),  IsWatching(a,b),  IsDressedIn(b,c)",[],"[(' A large number of people', ' A large number of people'), (' men', ' men'), (' kilts', ' kilts')]","[(' men', ' A large number of people'), (' men', ' A large number of people'), (' kilts', ' men'), (' kilts', ' men')]","IsLargeNumber(a) and IsWatching(a,b) and IsDressedIn(b,c)","IsLargeNumber(a) and IsWatching(a,b) and IsDressedIn(b,c)","(exists c (exists b (IsLargeNumber(a) and IsWatching(a,b) and IsDressedIn(b,c)))) -> (exists c (forall b (exists b (forall a (IsLargeNumber(a) and IsWatching(a,b) and IsDressedIn(b,c))))))","(exists b (exists a (exists c (IsLargeNumber(a) and IsWatching(a,b) and IsDressedIn(b,c))))) -> (exists b (exists a (exists c (IsLargeNumber(a) and IsWatching(a,b) and IsDressedIn(b,c)))))",Valid
110,1,,"A boy is riding down the road between two cows. Consequently, a boy, a road and two cows."," ""A boy is riding down the road between two cows.""  "," ""A boy, a road, and two cows exist.""","IsRiding(a, c),  IsBetween(a, b)","IsABoy(a),  IsARoad(d),  AreCows(b)",[],"[(' A boy', ' A boy'), (' two cows', ' two cows')]","[(' the road', ' a road')]","IsRiding(a, c) and IsBetween(a, b)",IsABoy(a) and IsARoad(d) and AreCows(b),"(exists c (IsRiding(a, c) and IsBetween(a, b))) -> (forall d (IsABoy(a) and IsARoad(d) and AreCows(b)))","(exists b (exists a (exists c (IsRiding(a, c) and IsBetween(a, b))))) -> (exists b (exists d (exists a (IsABoy(a) and IsARoad(d) and AreCows(b)))))",LF
111,1,,A bald man is getting out of a small blue car. It follows that the man is bald.," ""A bald man is getting out of a small blue car.""  "," ""The man is bald.""","IsBald(a),  IsGettingOutOf(a,b),  IsSmall(b),  IsBlue(b)",IsBald(c),[],[],[],"IsBald(a) and IsGettingOutOf(a,b) and IsSmall(b) and IsBlue(b)",IsBald(c),"(IsBald(a) and IsGettingOutOf(a,b) and IsSmall(b) and IsBlue(b)) -> (IsBald(c))","(exists b (exists a (IsBald(a) and IsGettingOutOf(a,b) and IsSmall(b) and IsBlue(b)))) -> (exists c (IsBald(c)))",Valid
112,1,,"Young boys in green and blue jerseys kick around a soccer ball while other soccer games take place in the background. Thus, young boys kicking around a soccer ball."," ""Young boys in green and blue jerseys kick around a soccer ball.""  "," ""Young boys are playing soccer.""","IsYoung(a),  IsInGreenAndBlueJerseys(a),  KicksAround(a, c)","IsYoung(a),  IsPlayingSoccer(a)",[],"[(' Young boys', ' Young boys')]","[(' green and blue jerseys', ' soccer'), (' soccer ball', ' soccer')]","IsYoung(a) and IsInGreenAndBlueJerseys(a) and KicksAround(a, c)",IsYoung(a) and IsPlayingSoccer(a),"(IsYoung(a) and IsInGreenAndBlueJerseys(a) and KicksAround(a, c)) -> (IsYoung(a) and IsPlayingSoccer(a))","(exists a (exists c (IsYoung(a) and IsInGreenAndBlueJerseys(a) and KicksAround(a, c)))) -> (exists a (IsYoung(a) and IsPlayingSoccer(a)))",LF
113,1,,"A girl playing a violin along with a group of people. Consequently, a girl is playing an instrument."," ""A girl is playing a violin.""  "," ""A girl is playing an instrument.""","IsAGirl(a),  IsPlaying(a),  IsPlayingViolin(b)","IsAGirl(a),  IsPlaying(a),  IsAnInstrument(c)",[],"[(' A girl', ' A girl')]",[],IsAGirl(a) and IsPlaying(a) and IsPlayingViolin(b),IsAGirl(a) and IsPlaying(a) and IsAnInstrument(c),(IsAGirl(a) and IsPlaying(a) and IsPlayingViolin(b)) -> (IsAGirl(a) and IsPlaying(a) and IsAnInstrument(c)),(exists b (exists a (IsAGirl(a) and IsPlaying(a) and IsPlayingViolin(b)))) -> (exists a (exists c (IsAGirl(a) and IsPlaying(a) and IsAnInstrument(c)))),LF
114,1,,Two small boys in blue soccer uniforms use a wooden set of steps to wash their hands in an adult-sized bathroom. It follows that two boys washing their hands.," ""Two small boys in blue soccer uniforms wash their hands in an adult-sized bathroom.""  "," ""Two boys wash their hands.""","IsSmall(b),  IsInBlueSoccerUniforms(b),  HasHands(b),  IsInAdultSizedBathroom(a)","IsTwo(boys),  HasHands(e)",[],"[(' their hands', ' their hands')]","[(' Two small boys', ' Two boys')]",IsSmall(b) and IsInBlueSoccerUniforms(b) and HasHands(b) and IsInAdultSizedBathroom(a),IsTwo(boys) and HasHands(e),(exists b (IsSmall(b) and IsInBlueSoccerUniforms(b) and HasHands(b) and IsInAdultSizedBathroom(a))) -> (forall e (IsTwo(boys) and HasHands(e))),(exists b (exists a (IsSmall(b) and IsInBlueSoccerUniforms(b) and HasHands(b) and IsInAdultSizedBathroom(a)))) -> (exists e (IsTwo(boys) and HasHands(e))),LF
115,1,,A soccer player in white kicks a ball as another soccer player lunges towards the ball and a third soccer player in red follows close by. This implies that there are three soccer players.," ""A soccer player in white kicks a ball.""  "," ""There are three soccer players.""","IsInWhite(a),  Kicks(b, a)","IsSoccerPlayer(c),  HasCount(c, 3)",[],[],[],"IsInWhite(a) and Kicks(a, b)","IsSoccerPlayer(c) and HasCount(c, 3)","(IsInWhite(a) and Kicks(a, b)) -> (IsSoccerPlayer(c) and HasCount(c, 3))","(exists b (exists a (IsInWhite(a) and Kicks(a, b)))) -> (exists c (IsSoccerPlayer(c) and HasCount(c, 3)))",
116,1,,"Children playing a video game together. Thus, the kids are indoors playing a video game."," ""Children are playing a video game together.""  "," ""The kids are indoors.""","IsPlaying(a, b)",IsIndoors(c),[],[],"[(' Children', ' The kids'), (' The kids', ' a video game')]","IsPlaying(a, b)",IsIndoors(c),"(forall b (exists a (IsPlaying(a, b)))) -> (forall c (IsIndoors(c)))","(exists b (exists a (IsPlaying(a, b)))) -> (exists c (IsIndoors(c)))",LF
117,1,,Two people in coats kiss on the side of a road. This implies that people show their appreciation for another.," ""Two people in coats kiss on the side of a road.""  "," ""People show their appreciation for another.""","IsInCoat(a),  Kisses(a),  IsOnSideOfRoad(a, c)","ShowsAppreciation(d, f)",[],[],"[(' Two people', ' their'), (' Two people', ' another'), (' road', ' their'), (' road', ' another')]","IsInCoat(a) and Kisses(a) and IsOnSideOfRoad(a, c)","ShowsAppreciation(d, f)","(exists c (exists a (IsInCoat(a) and Kisses(a) and IsOnSideOfRoad(a, c)))) -> (forall f (ShowsAppreciation(d, f)))","(exists a (exists c (IsInCoat(a) and Kisses(a) and IsOnSideOfRoad(a, c)))) -> (exists d (exists f (ShowsAppreciation(d, f))))",LF
118,1,,Woman reading a book with a grocery tote. It follows that a woman is reading.," ""A woman is reading a book.""  "," ""A woman is reading.""",IsReading(a),IsReading(a),[],"[(' A woman', ' A woman')]",[],"IsReading(a) and HasBook(a,b)",IsReading(a),"(IsReading(a) and HasBook(a,b)) -> (IsReading(a))","(exists b (exists a (IsReading(a) and HasBook(a,b)))) -> (exists a (IsReading(a)))",Valid
119,1,,"A man wearing a brown hoodie is shopping for snacks. As a consequence, the man is wearing brown."," ""A man is wearing a brown hoodie.""  "," ""The man is wearing brown.""","IsWearing(a, b),  IsBrown(b)",IsWearingBrown(c),[],[],"[(' The man', ' A man')]","IsWearing(a, b) and IsBrown(b)",IsWearingBrown(c),"(forall a (IsWearing(a, b) and IsBrown(b))) -> (exists c (IsWearingBrown(c)))","(exists b (exists a (IsWearing(a, b) and IsBrown(b)))) -> (exists c (IsWearingBrown(c)))",LF
120,1,,"A young man in a blue T-shirt and sweatpants stands over a stove and looks at the camera while another young man stands behind him. As a consequence, a man is in front of a camera."," ""A young man in a blue T-shirt and sweatpants stands over a stove.""  "," ""The man is in front of a camera.""","IsYoung(a),  IsInBlueTShirt(a),  IsInSweatpants(a),  IsStandingOver(a, d)","IsInFrontOf(e, f)",[],[],"[(' The man', ' A young man')]","IsYoung(a) and IsInBlueTShirt(a) and IsInSweatpants(a) and IsStandingOver(a, d)","IsInFrontOf(e, f)","(forall a (IsYoung(a) and IsInBlueTShirt(a) and IsInSweatpants(a) and IsStandingOver(a, d))) -> (exists e (IsInFrontOf(e, f)))","(exists d (exists a (IsYoung(a) and IsInBlueTShirt(a) and IsInSweatpants(a) and IsStandingOver(a, d)))) -> (exists f (exists e (IsInFrontOf(e, f))))",LF
121,1,,"This church choir sings to the masses as they sing joyous songs from the book at a church. Therefore, the church is filled with song."," ""The church choir sings joyous songs to the masses.""  "," ""The church is filled with song.""","Sings(a, b),  IsJoyous(b),  IsFor(c, b)","IsFilledWith(d, e)",[],[],"[(' The church choir', ' The church'), (' song', ' The church choir'), (' joyous songs', ' The church'), (' joyous songs', ' song'), (' the masses', ' The church')]","Sings(a, b) and IsJoyous(b) and IsFor(c, b)","IsFilledWith(d, e)","(exists c (exists b (forall a (exists a (Sings(a, b) and IsJoyous(b) and IsFor(c, b)))))) -> (forall e (exists e (forall d (IsFilledWith(d, e)))))","(exists b (exists a (exists c (Sings(a, b) and IsJoyous(b) and IsFor(c, b))))) -> (exists d (exists e (IsFilledWith(d, e))))",LF
122,1,,"A man and a woman are standing at the side of an inflatable climbing structure. As a consequence, a man and a woman are standing."," ""A man and a woman are standing at the side of an inflatable climbing structure.""  "," ""A man and a woman are standing.""","IsStanding(a),  IsStanding(b)","IsStanding(a),  IsStanding(b)",[],"[(' A man', ' A man'), (' a woman', ' a woman')]",[],"IsStanding(a) and IsStanding(b) and IsAtSide(a,c) and IsAtSide(b,c)",IsStanding(a) and IsStanding(b),"(IsStanding(a) and IsStanding(b) and IsAtSide(a,c) and IsAtSide(b,c)) -> (IsStanding(a) and IsStanding(b))","(exists b (exists a (exists c (IsStanding(a) and IsStanding(b) and IsAtSide(a,c) and IsAtSide(b,c))))) -> (exists b (exists a (IsStanding(a) and IsStanding(b))))",Valid
123,1,,An asian teenager wearing a white shirt with black stripes is sitting on the steps with his face resting on his hand. This implies that the teenager is seated.," ""An Asian teenager is sitting on the steps.""  "," ""The teenager is seated.""","IsAsian(b),  IsTeenager(b),  IsSittingOn(b, a)","IsTeenager(a),  IsSeated(a)",[],"[(' the steps', ' The teenager')]","[(' The teenager', ' An Asian teenager')]","IsAsian(b) and IsTeenager(b) and IsSittingOn(b, a)",IsTeenager(a) and IsSeated(a),"(forall b (IsAsian(b) and IsTeenager(b) and IsSittingOn(b, a))) -> (exists a (IsTeenager(a) and IsSeated(a)))","(exists b (exists a (IsAsian(b) and IsTeenager(b) and IsSittingOn(b, a)))) -> (exists a (IsTeenager(a) and IsSeated(a)))",LF
124,1,,"Boy in red and black shirt walks through grass. Therefore, the boy is walking."," ""The boy in the red and black shirt is walking through grass.""  "," ""The boy is walking.""  ","IsInRedAndBlackShirt(a),  IsWalkingThrough(a, b)",IsWalking(c),[],[],[],"IsInRedAndBlackShirt(a) and IsWalkingThrough(a, b)",IsWalking(c),"(IsInRedAndBlackShirt(a) and IsWalkingThrough(a, b)) -> (IsWalking(c))","(exists b (exists a (IsInRedAndBlackShirt(a) and IsWalkingThrough(a, b)))) -> (exists c (IsWalking(c)))",LF
125,1,,"These girls are having a great time looking for seashells. As a consequence, the girls are happy."," ""The girls are having a great time looking for seashells.""  "," ""The girls are happy.""","IsHavingGreatTime(a),  IsLookingForSeashells(a, c)",IsHappy(a),[],"[(' The girls', ' The girls')]","[(' The girls', ' a great time')]","IsHavingGreatTime(a) and IsLookingForSeashells(a, c)",IsHappy(a),"(IsHavingGreatTime(a) and IsLookingForSeashells(a, c)) -> (IsHappy(a))","(exists a (exists c (IsHavingGreatTime(a) and IsLookingForSeashells(a, c)))) -> (exists a (IsHappy(a)))",LF
126,1,,"Small girl in a pink dress is playing electronic drum pads with sticks. Consequently, a girl is playing electronic drums."," ""A small girl in a pink dress is playing electronic drum pads with sticks.""  "," ""A girl is playing electronic drums.""","IsSmall(a),  IsInPinkDress(a),  IsPlayingWith(a, c, d)","IsPlaying(e, f)",[],[],"[(' A small girl', ' A girl'), (' a pink dress', ' A girl')]","IsSmall(a) and IsInPinkDress(a) and IsPlayingWith(a, c, d)","IsPlaying(e, f)","(exists a (IsSmall(a) and IsInPinkDress(a) and IsPlayingWith(a, c, d))) -> (forall e (IsPlaying(e, f)))","(exists d (exists a (exists c (IsSmall(a) and IsInPinkDress(a) and IsPlayingWith(a, c, d))))) -> (exists f (exists e (IsPlaying(e, f))))",LF
127,1,,"A blond woman with a tattoo of on an angel on her arm walking down the street, a concrete wall in the background. As a consequence, a person with a tattoo."," ""A blond woman has a tattoo of an angel on her arm.""  "," ""A person with a tattoo is walking down the street.""","IsBlond(a),  HasTattoo(a,b),  IsOfAngel(b,c),  IsOnArm(b,d)","IsPersonWithTattoo(e),  IsWalking(e),  IsOnStreet(e,f)",[],[],"[(' a tattoo', ' A person with a tattoo'), (' her arm', ' A person with a tattoo')]","IsBlond(a) and HasTattoo(a,b) and IsOfAngel(b,c) and IsOnArm(b,d)","IsPersonWithTattoo(e) and IsWalking(e) and IsOnStreet(e,f)","(exists d (exists b (IsBlond(a) and HasTattoo(a,b) and IsOfAngel(b,c) and IsOnArm(b,d)))) -> (forall e (IsPersonWithTattoo(e) and IsWalking(e) and IsOnStreet(e,f)))","(exists b (exists d (exists a (exists c (IsBlond(a) and HasTattoo(a,b) and IsOfAngel(b,c) and IsOnArm(b,d)))))) -> (exists f (exists e (IsPersonWithTattoo(e) and IsWalking(e) and IsOnStreet(e,f))))",LF
128,1,,"A tan dog chases a black and white soccer ball. Therefore, a dog is chasing a ball."," ""A tan dog chases a black and white soccer ball.""  "," ""A dog is chasing a ball.""","IsTan(a),  Chases(a,b),  IsBlackAndWhite(b)","IsDog(c),  Chases(c,d),  IsBall(d)",[],[],"[(' A tan dog', ' A dog')]","IsTan(a) and Chases(a,b) and IsBlackAndWhite(b)","IsDog(c) and IsBall(d) and Chases(c,d)","(exists a (IsTan(a) and Chases(a,b) and IsBlackAndWhite(b))) -> (forall c (IsDog(c) and IsBall(d) and Chases(c,d)))","(exists b (exists a (IsTan(a) and Chases(a,b) and IsBlackAndWhite(b)))) -> (exists d (exists c (IsDog(c) and IsBall(d) and Chases(c,d))))",LF
129,1,,"A dusty boy runs along a dirt path through the grass. As a consequence, a boy is outside running."," ""A dusty boy runs along a dirt path through the grass.""  "," ""The boy is outside running.""","IsDusty(a),  IsRunning(a),  IsOnPath(a,b),  IsInGrass(b,c)","IsOutside(d),  IsRunning(d)",[],[],[],"IsDusty(a) and IsRunning(a) and IsOnPath(a,b) and IsInGrass(b,c)",IsOutside(d) and IsRunning(d),"(IsDusty(a) and IsRunning(a) and IsOnPath(a,b) and IsInGrass(b,c)) -> (IsOutside(d) and IsRunning(d))","(exists b (exists a (exists c (IsDusty(a) and IsRunning(a) and IsOnPath(a,b) and IsInGrass(b,c))))) -> (exists d (IsOutside(d) and IsRunning(d)))",LF
130,1,,"A guy with a football, a crowd watching him. Consequently, there is a guy holding a football."," ""A guy is holding a football.""  "," ""There is a guy with a football.""","IsHolding(a,b)","IsWith(a,b)",[],"[(' A guy', ' a guy'), (' a football', ' a football')]",[],"IsHolding(a,b)","IsWith(a,b)","(IsHolding(a,b)) -> (IsWith(a,b))","(exists b (exists a (IsHolding(a,b)))) -> (exists b (exists a (IsWith(a,b))))",LF
131,1,,Two women are tending to their herd of animals including cows and goats near a building made primarily of stone. It follows that the two women are taking care of a herd of animals.," ""The two women are tending to a herd of animals including cows and goats.""  "," ""The two women are taking care of a herd of animals.""","TendingTo(a, b),  Includes(b, c),  Includes(b, d)","TakingCare(a, b)",[],"[(' The two women', ' The two women'), (' a herd of animals', ' a herd of animals')]","[(' cows', ' a herd of animals'), (' goats', ' a herd of animals')]","TendingTo(a, b) and Includes(b, c) and Includes(b, d)","TakingCare(a, b)","(exists d (exists c (TendingTo(a, b) and Includes(b, c) and Includes(b, d)))) -> (forall b (TakingCare(a, b)))","(exists b (exists d (exists a (exists c (TendingTo(a, b) and Includes(b, c) and Includes(b, d)))))) -> (exists b (exists a (TakingCare(a, b))))",LF
132,1,,"A boy and girl play together on a pile or rocks in a residential area. Thus, the boy and girl are outside."," ""A boy and girl play together on a pile of rocks in a residential area.""  "," ""The boy and girl are outside.""","IsPlayingTogether(a, b),  IsOnPileOfRocks(a, c),  IsOnPileOfRocks(b, c),  IsInResidentialArea(c, d)","IsOutside(e),  IsOutside(f)",[],[],"[(' The boy', ' A boy'), (' girl', ' the girl'), (' The boy', ' residential area'), (' the girl', ' residential area')]","IsPlayingTogether(a, b) and IsOnPileOfRocks(a, c) and IsOnPileOfRocks(b, c) and IsInResidentialArea(c, d)",IsOutside(e) and IsOutside(f),"(forall d (exists b (forall a (IsPlayingTogether(a, b) and IsOnPileOfRocks(a, c) and IsOnPileOfRocks(b, c) and IsInResidentialArea(c, d))))) -> (forall f (exists e (IsOutside(e) and IsOutside(f))))","(exists b (exists d (exists a (exists c (IsPlayingTogether(a, b) and IsOnPileOfRocks(a, c) and IsOnPileOfRocks(b, c) and IsInResidentialArea(c, d)))))) -> (exists f (exists e (IsOutside(e) and IsOutside(f))))",LF
133,1,,"A boy stands in the middle of a crowd of teenagers. Thus, a person stands in the middle of a crowd of teenagers."," ""A boy stands in the middle of a crowd of teenagers.""  "," ""A person stands in the middle of a crowd of teenagers.""","IsInCrowd(a),  IsTeenager(b)","IsInCrowd(c),  IsTeenager(f)",[],[],"[(' a crowd of teenagers', ' the middle'), (' a crowd of teenagers', ' a crowd'), (' teenagers', ' a crowd of teenagers')]",IsInCrowd(a) and IsTeenager(b),"IsInCrowd(c) and IsInMiddle(c,d) and IsTeenager(f)","(forall b (exists b (IsInCrowd(a) and IsTeenager(b)))) -> (exists f (forall d (IsInCrowd(c) and IsInMiddle(c,d) and IsTeenager(f))))","(exists b (exists a (IsInCrowd(a) and IsTeenager(b)))) -> (exists d (exists f (exists c (IsInCrowd(c) and IsInMiddle(c,d) and IsTeenager(f)))))",LF
134,1,,"Two men are standing in a boat. Thus, some people are in a boat."," ""Two men are standing in a boat.""  "," ""Some people are in a boat.""","IsStandingInBoat(b),  IsBoat(a)","IsInBoat(c),  IsBoat(a)",[],"[(' a boat', ' a boat')]",[],IsStandingInBoat(b) and IsBoat(a),IsInBoat(c) and IsBoat(a),(IsStandingInBoat(b) and IsBoat(a)) -> (IsInBoat(c) and IsBoat(a)),(exists b (exists a (IsStandingInBoat(b) and IsBoat(a)))) -> (exists a (exists c (IsInBoat(c) and IsBoat(a)))),LF
135,1,,An Asian woman dressed in a colorful outfit laughing. It follows that a woman is wearing colorful clothing.," ""An Asian woman is dressed in a colorful outfit.""  "," ""A woman is wearing colorful clothing.""","IsAsian(a),  IsDressedInColorfulOutfit(a)","IsWoman(c),  IsWearingColorfulClothing(c)",[],[],"[(' A woman', ' An Asian woman'), (' colorful clothing', ' An Asian woman'), (' a colorful outfit', ' colorful clothing')]",IsAsian(a) and IsDressedInColorfulOutfit(a),IsWoman(c) and IsWearingColorfulClothing(c),(forall a (IsAsian(a) and IsDressedInColorfulOutfit(a))) -> (exists c (IsWoman(c) and IsWearingColorfulClothing(c))),(exists a (IsAsian(a) and IsDressedInColorfulOutfit(a))) -> (exists c (IsWoman(c) and IsWearingColorfulClothing(c))),LF
136,1,,"A woman in black reviews a message as she walks to work. Hence, the woman in black has a job."," ""The woman in black reviews a message.""  "," ""The woman in black has a job.""","IsInBlack(a),  Reviews(a, b)","IsInBlack(a),  HasJob(a)",[],"[(' The woman in black', ' The woman in black')]","[(' The woman in black', ' a message')]","IsInBlack(a) and Reviews(a, b)",IsInBlack(a) and HasJob(a),"(forall b (IsInBlack(a) and Reviews(a, b))) -> (exists a (IsInBlack(a) and HasJob(a)))","(exists b (exists a (IsInBlack(a) and Reviews(a, b)))) -> (exists a (IsInBlack(a) and HasJob(a)))",LF
137,1,,"A shirtless man rock climbs. As a consequence, a man is outside."," ""A shirtless man rock climbs.""  "," ""A man is outside.""","IsShirtless(a),  IsRockClimbing(a)",IsOutside(b),[],[],[],IsShirtless(a) and IsRockClimbing(a),IsOutside(b),(IsShirtless(a) and IsRockClimbing(a)) -> (IsOutside(b)),(exists a (IsShirtless(a) and IsRockClimbing(a))) -> (exists b (IsOutside(b))),LF
138,1,,"A man wearing a kilt has thrown a large pole. Therefore, a man is wearing a skirt."," ""A man wearing a kilt has thrown a large pole.""  "," ""A man is wearing a skirt.""","IsWearingKilt(a),  HasThrownPole(a, b)",IsWearingSkirt(c),[],[],[],"IsWearingKilt(a) and HasThrownPole(a, b)",IsWearingSkirt(c),"(IsWearingKilt(a) and HasThrownPole(a, b)) -> (IsWearingSkirt(c))","(exists b (exists a (IsWearingKilt(a) and HasThrownPole(a, b)))) -> (exists c (IsWearingSkirt(c)))",LF
139,1,,"A man in a blue t-shirt is taking a picture while a woman with an umbrella walks behind him. Consequently, a man is taking a picture outdoors while a woman walks behind him."," ""A man in a blue t-shirt is taking a picture.""  "," ""A man is taking a picture outdoors.""","IsInBlueTShirt(b),  IsTakingPicture(b)","IsTakingPicture(c),  IsOutdoors(d)",[],"[(' a picture', ' a picture')]","[(' A man in a blue t-shirt', ' a picture'), (' outdoors', ' a picture')]",IsInBlueTShirt(b) and IsTakingPicture(b),IsTakingPicture(c) and IsOutdoors(d),(IsInBlueTShirt(b) and IsTakingPicture(b)) -> (IsTakingPicture(c) and IsOutdoors(d)),(exists b (IsInBlueTShirt(b) and IsTakingPicture(b))) -> (exists d (exists c (IsTakingPicture(c) and IsOutdoors(d)))),LF
140,1,,"A child and a parent or older sibling going for a hike. Consequently, two people are going for a hike.", A child and a parent or older sibling are going for a hike.  , Two people are going for a hike.,"IsGoingForHike(b),  IsGoingForHike(c),  IsGoingForHike(d)",IsGoingForHike(e),[],"[(' a hike', ' a hike')]","[(' a parent', ' Two people'), (' older sibling', ' Two people')]",(IsGoingForHike(b) and (IsGoingForHike(c) or IsGoingForHike(d))),IsGoingForHike(e),(exists d (exists c ((IsGoingForHike(b) and (IsGoingForHike(c) or IsGoingForHike(d)))))) -> (forall e (IsGoingForHike(e))),(exists b (exists d (exists c ((IsGoingForHike(b) and (IsGoingForHike(c) or IsGoingForHike(d))))))) -> (exists e (IsGoingForHike(e))),
141,1,,"Two kids in black trunks bouncing on a wet trampoline. Consequently, children play on trampolines outdoors."," ""Two kids are bouncing on a wet trampoline.""  "," ""Children play on trampolines outdoors.""","IsBouncing(a, b),  IsWet(b)","IsPlaying(c, d),  IsOutdoors(e)",[],[],"[(' Children', ' Two kids'), (' wet trampoline', ' trampolines')]","IsBouncing(a, b) and IsWet(b)","IsPlaying(c, d) and IsOutdoors(e)","(exists b (forall a (IsBouncing(a, b) and IsWet(b)))) -> (forall d (exists c (IsPlaying(c, d) and IsOutdoors(e))))","(exists b (exists a (IsBouncing(a, b) and IsWet(b)))) -> (exists e (exists d (exists c (IsPlaying(c, d) and IsOutdoors(e)))))",LF
142,1,,"2 people with backpacks are at a table with a woman with a beige blazer sitting behind it. Thus, 2 people are at a table."," ""Two people with backpacks are at a table with a woman in a beige blazer.""  "," ""Two people are at a table.""","IsWithBackpack(b),  IsAtTable(b,a),  IsInBeigeBlazer(c,d)","IsAtTable(e,a)",[],"[(' a table', ' a table')]","[(' Two people', ' a table')]","IsWithBackpack(b) and IsAtTable(b,a) and IsInBeigeBlazer(c,d)","IsAtTable(e,a)","(forall a (IsWithBackpack(b) and IsAtTable(b,a) and IsInBeigeBlazer(c,d))) -> (exists e (IsAtTable(e,a)))","(exists b (exists d (exists a (exists c (IsWithBackpack(b) and IsAtTable(b,a) and IsInBeigeBlazer(c,d)))))) -> (exists a (exists e (IsAtTable(e,a))))",Valid
143,1,,"A group stands and watches two men, apparently dressed in some sort of costume, wrestle on the ground. It follows that there are people wrestling."," ""Two men are wrestling on the ground.""  "," ""There are people wrestling.""",IsWrestling(a),IsWrestling(c),[],[],"[(' the ground', ' people')]","IsWrestling(a) and IsOnGround(a,b)",IsWrestling(c),"(exists b (IsWrestling(a) and IsOnGround(a,b))) -> (forall c (IsWrestling(c)))","(exists b (exists a (IsWrestling(a) and IsOnGround(a,b)))) -> (exists c (IsWrestling(c)))",Valid
144,1,,"two girls looking out the window at ""Hair at Hart."" Hence, two people look out a window."," ""Two girls are looking out the window at 'Hair at Hart.'""  "," ""Two people look out a window.""","IsLookingOut(a,b),  IsBeingObserved(c)","IsLookingOut(d,e)",[],[],"[(' the window', ' Two people'), (' the window', ' a window')]","IsLookingOut(a,b) and IsBeingObserved(c)","IsLookingOut(d,e)","(exists b (IsLookingOut(a,b) and IsBeingObserved(c))) -> (forall e (forall d (IsLookingOut(d,e))))","(exists b (exists a (exists c (IsLookingOut(a,b) and IsBeingObserved(c))))) -> (exists d (exists e (IsLookingOut(d,e))))",Valid
145,1,,"A man visiting a friend in the hospital. Therefore, a man in a hospital receives a visiting friend."," ""A man is visiting a friend in the hospital.""  "," ""A man in a hospital receives a visiting friend.""","IsVisiting(a, b),  IsInHospital(b, c)","IsInHospital(a, d),  Receives(e, a)",[],"[(' A man', ' A man')]","[(' a visiting friend', ' a friend')]","IsVisiting(a, b) and IsInHospital(b, c)","IsInHospital(a, d) and Receives(e, a)","(forall b (IsVisiting(a, b) and IsInHospital(b, c))) -> (exists e (IsInHospital(a, d) and Receives(e, a)))","(exists b (exists a (exists c (IsVisiting(a, b) and IsInHospital(b, c))))) -> (exists d (exists a (exists e (IsInHospital(a, d) and Receives(e, a)))))",LF
146,1,,"A schoolgirl is jumping over a low hurdle. Consequently, a girl is jumping over a hurdle."," ""A schoolgirl is jumping over a low hurdle.""  "," ""A girl is jumping over a hurdle.""","IsSchoolgirl(a),  IsJumping(a),  IsLow(b),  IsJumpedOverBy(a,b)","IsGirl(c),  IsJumping(c),  IsHurdle(d),  IsJumpedOverBy(c,d)",[],[],"[(' A schoolgirl', ' A girl'), (' a low hurdle', ' a hurdle')]","IsSchoolgirl(a) and IsJumping(a) and IsLow(b) and IsJumpedOverBy(a,b)","IsGirl(c) and IsJumping(c) and IsHurdle(d) and IsJumpedOverBy(c,d)","(exists b (exists a (IsSchoolgirl(a) and IsJumping(a) and IsLow(b) and IsJumpedOverBy(a,b)))) -> (forall d (forall c (IsGirl(c) and IsJumping(c) and IsHurdle(d) and IsJumpedOverBy(c,d))))","(exists b (exists a (IsSchoolgirl(a) and IsJumping(a) and IsLow(b) and IsJumpedOverBy(a,b)))) -> (exists d (exists c (IsGirl(c) and IsJumping(c) and IsHurdle(d) and IsJumpedOverBy(c,d))))",LF
147,1,,"Young Asian girl is sitting on the ground in rubble. Hence, the young Asian girl is outside in the rubble."," ""The young Asian girl is sitting on the ground in rubble.""  "," ""The young Asian girl is outside in the rubble.""","IsYoung(a),  IsAsian(a),  IsSittingOn(a,b),  IsInRubble(a,c)","IsYoung(a),  IsAsian(a),  IsOutside(a),  IsInRubble(a,d)",[],"[(' The young Asian girl', ' The young Asian girl')]","[(' the rubble', ' the ground'), (' the rubble', ' rubble')]","IsYoung(a) and IsAsian(a) and IsSittingOn(a,b) and IsInRubble(a,c)","IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a,d)","(forall c (forall b (IsYoung(a) and IsAsian(a) and IsSittingOn(a,b) and IsInRubble(a,c)))) -> (exists d (IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a,d)))","(exists b (exists a (exists c (IsYoung(a) and IsAsian(a) and IsSittingOn(a,b) and IsInRubble(a,c))))) -> (exists d (exists a (IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a,d))))",LF
148,1,,"A group of women sing together while wearing matching black dresses. Thus, there are women singing."," ""A group of women sings together while wearing matching black dresses.""  "," ""Women are singing.""  ","IsGroup(a),  SingsTogether(a),  IsWearing(b, a)",IsSinging(c),[],[],"[(' Women', ' A group of women'), (' matching black dresses', ' Women')]","IsGroup(a) and SingsTogether(a) and IsWearing(b, a)",IsSinging(c),"(exists b (forall a (IsGroup(a) and SingsTogether(a) and IsWearing(b, a)))) -> (forall c (exists c (IsSinging(c))))","(exists b (exists a (IsGroup(a) and SingsTogether(a) and IsWearing(b, a)))) -> (exists c (IsSinging(c)))",LF
149,1,,Two boys in running clothes stretching. This implies that the boys are stretching.," ""Two boys in running clothes are stretching.""  "," ""The boys are stretching.""","IsInRunningClothes(a),  AreStretching(a)",AreStretching(c),[],[],"[(' Two boys', ' The boys')]",IsInRunningClothes(a) and AreStretching(a),AreStretching(c),(exists a (IsInRunningClothes(a) and AreStretching(a))) -> (forall c (AreStretching(c))),(exists a (IsInRunningClothes(a) and AreStretching(a))) -> (exists c (AreStretching(c))),Valid
150,1,,A group of young men in a gym take turns scoring in basketball. This implies that guys are indoors.," ""A group of young men in a gym takes turns scoring in basketball.""  "," ""Young men are indoors.""","IsYoungMenGroup(a),  IsInGym(a, b),  TakesTurnsScoring(a, c)","IsYoungMen(d),  IsIndoors(d)",[],[],"[(' Young men', ' A group of young men')]","IsYoungMenGroup(a) and IsInGym(a, b) and TakesTurnsScoring(a, c)",IsYoungMen(d) and IsIndoors(d),"(forall a (IsYoungMenGroup(a) and IsInGym(a, b) and TakesTurnsScoring(a, c))) -> (exists d (IsYoungMen(d) and IsIndoors(d)))","(exists b (exists a (exists c (IsYoungMenGroup(a) and IsInGym(a, b) and TakesTurnsScoring(a, c))))) -> (exists d (IsYoungMen(d) and IsIndoors(d)))",LF
151,1,,"An Eastern vendor sits by his stall with a rooster nearby. Consequently, a rooster near a vendor."," ""An Eastern vendor sits by his stall with a rooster nearby.""  "," ""A rooster is near a vendor.""","IsEastern(b),  SitsBy(b,c),  IsNearby(a,c)","IsNear(a,d)",[],"[(' a rooster', ' A rooster')]","[(' his stall', ' a vendor')]","IsEastern(b) and SitsBy(b,c) and IsNearby(a,c)","IsNear(a,d)","(exists c (IsEastern(b) and SitsBy(b,c) and IsNearby(a,c))) -> (forall d (IsNear(a,d)))","(exists b (exists a (exists c (IsEastern(b) and SitsBy(b,c) and IsNearby(a,c))))) -> (exists d (exists a (IsNear(a,d))))",LF
152,1,,"A bird is perched on a tree branch. Thus, a bird is perching in a tree."," ""A bird is perched on a tree branch.""  "," ""A bird is perching in a tree.""","IsPerchedOn(a,b)","IsPerching(a, c)",[],"[(' A bird', ' A bird')]","[(' a tree branch', ' a tree')]","IsPerchedOn(a,b)","IsPerching(a, c)","(exists b (IsPerchedOn(a,b))) -> (forall c (IsPerching(a, c)))","(exists b (exists a (IsPerchedOn(a,b)))) -> (exists a (exists c (IsPerching(a, c))))",LF
153,1,,"A man in an overcoat putting on his gloves at a subway station. Therefore, a person is in the subway station."," ""A man in an overcoat is putting on his gloves at a subway station.""  "," ""A person is in the subway station.""  ","IsInOvercoat(a),  IsPuttingOn(b, a),  IsAtSubwayStation(a, c)","IsInSubwayStation(d, e)",[],[],"[(' the subway station', ' a subway station')]","IsInOvercoat(a) and IsPuttingOn(b, a) and IsAtSubwayStation(a, c)","IsInSubwayStation(d, e)","(forall c (IsInOvercoat(a) and IsPuttingOn(b, a) and IsAtSubwayStation(a, c))) -> (exists e (IsInSubwayStation(d, e)))","(exists b (exists a (exists c (IsInOvercoat(a) and IsPuttingOn(b, a) and IsAtSubwayStation(a, c))))) -> (exists d (exists e (IsInSubwayStation(d, e))))",LF
154,1,,"Person with umbrella observes flooded streets with cars in the water. Consequently, a person is outside."," ""A person with an umbrella observes flooded streets with cars in the water.""  "," ""A person is outside.""","IsHoldingUmbrella(a),  Observes(b),  IsInWater(c),  IsFlooded(b)",IsOutside(e),[],[],[],IsHoldingUmbrella(a) and Observes(b) and IsInWater(c) and IsFlooded(b),IsOutside(e),(IsHoldingUmbrella(a) and Observes(b) and IsInWater(c) and IsFlooded(b)) -> (IsOutside(e)),(exists b (exists a (exists c (IsHoldingUmbrella(a) and Observes(b) and IsInWater(c) and IsFlooded(b))))) -> (exists e (IsOutside(e))),LF
155,1,,A group of people are camping out on some rocks. This implies that people are outdoors.," ""A group of people is camping out on some rocks.""  "," ""People are outdoors.""","IsCampingOut(a, b)",IsOutdoors(c),[],[],"[(' People', ' A group of people')]","IsCampingOut(a, b)",IsOutdoors(c),"(forall a (IsCampingOut(a, b))) -> (exists c (IsOutdoors(c)))","(exists b (exists a (IsCampingOut(a, b)))) -> (exists c (IsOutdoors(c)))",LF
156,1,,A choir made up of varying ages of people are performing. This implies that the choir is singing.," ""A choir made up of varying ages of people is performing.""  "," ""The choir is singing.""","IsMadeUpOf(a, b),  IsPerforming(a)",IsSinging(c),[],[],"[(' The choir', ' A choir'), (' The choir', ' varying ages of people')]","IsMadeUpOf(a, b) and IsPerforming(a)",IsSinging(c),"(forall b (forall a (IsMadeUpOf(a, b) and IsPerforming(a)))) -> (exists c (IsSinging(c)))","(exists b (exists a (IsMadeUpOf(a, b) and IsPerforming(a)))) -> (exists c (IsSinging(c)))",LF
157,1,,A man scales a rock climbing wall. It follows that a man rock climbing.," ""A man scales a rock climbing wall.""  "," ""A man is rock climbing.""","IsMan(a),  Scales(a, b)","IsMan(a),  IsRockClimbing(a)",[],"[(' A man', ' A man')]",[],"IsMan(a) and Scales(a, b)",IsMan(a) and IsRockClimbing(a),"(IsMan(a) and Scales(a, b)) -> (IsMan(a) and IsRockClimbing(a))","(exists b (exists a (IsMan(a) and Scales(a, b)))) -> (exists a (IsMan(a) and IsRockClimbing(a)))",LF
158,1,,"A little white dog runs outside, their ears blown back in the wind. It follows that there is an animal outside."," ""A little white dog runs outside.""  "," ""An animal is outside.""","IsLittle(a),  IsWhite(a),  IsDog(a),  IsRunning(a),  IsOutside(a)","IsAnimal(b),  IsOutside(b)",[],[],"[(' A little white dog', ' An animal')]",IsLittle(a) and IsWhite(a) and IsDog(a) and IsRunning(a) and IsOutside(a),IsAnimal(b) and IsOutside(b),(exists a (IsLittle(a) and IsWhite(a) and IsDog(a) and IsRunning(a) and IsOutside(a))) -> (forall b (IsAnimal(b) and IsOutside(b))),(exists a (IsLittle(a) and IsWhite(a) and IsDog(a) and IsRunning(a) and IsOutside(a))) -> (exists b (IsAnimal(b) and IsOutside(b))),LF
159,1,,"A bearded man sits near a white van. As a consequence, a man sitting outside near a van."," ""A bearded man sits near a white van.""  "," ""A man is sitting outside near a van.""","IsBearded(a),  SitsNear(a, b),  IsWhite(b)","IsSitting(c),  SitsOutside(c),  SitsNear(c, d)",[],[],"[(' a white van', ' a van')]","IsBearded(a) and SitsNear(a, b) and IsWhite(b)","IsSitting(c) and SitsOutside(c) and SitsNear(c, d)","(exists b (IsBearded(a) and SitsNear(a, b) and IsWhite(b))) -> (forall d (IsSitting(c) and SitsOutside(c) and SitsNear(c, d)))","(exists b (exists a (IsBearded(a) and SitsNear(a, b) and IsWhite(b)))) -> (exists d (exists c (IsSitting(c) and SitsOutside(c) and SitsNear(c, d))))",LF
160,1,,"Two children wearing hooded tops laughing with each other. Thus, children laugh."," ""Two children wearing hooded tops are laughing with each other.""  "," ""Children laugh.""","IsWearingHoodedTops(a),  IsLaughingWithEachOther(a)",IsLaughing(c),[],[],"[(' Two children', ' Children')]",IsWearingHoodedTops(a) and IsLaughingWithEachOther(a),IsLaughing(c),(exists a (IsWearingHoodedTops(a) and IsLaughingWithEachOther(a))) -> (forall c (IsLaughing(c))),(exists a (IsWearingHoodedTops(a) and IsLaughingWithEachOther(a))) -> (exists c (IsLaughing(c))),LF
161,1,,"A man in glasses in a basement. Thus, the basement has a man in it."," ""A man in glasses is in a basement.""  "," ""The basement has a man in it.""","IsInGlasses(b),  IsInBasement(b)","HasMan(a),  IsIn(a, c)",[],"[(' a basement', ' The basement')]",[],IsInGlasses(b) and IsInBasement(b),"HasMan(a) and IsIn(a, c)","(IsInGlasses(b) and IsInBasement(b)) -> (HasMan(a) and IsIn(a, c))","(exists b (IsInGlasses(b) and IsInBasement(b))) -> (exists a (exists c (HasMan(a) and IsIn(a, c))))",LF
162,1,,A man in a white shirt speaks into a microphone as other men gather behind him at a public event. This implies that a man in a white shirt is making a speech in front of a crowd.," ""A man in a white shirt is speaking into a microphone.""  "," ""A man in a white shirt is making a speech in front of a crowd.""","IsInWhiteShirt(a),  IsSpeakingInto(a, b)","IsInWhiteShirt(a),  IsMakingSpeech(a, c),  IsInFrontOf(a, d)",[],"[(' A man in a white shirt', ' A man in a white shirt')]","[(' a microphone', ' a speech')]","IsInWhiteShirt(a) and IsSpeakingInto(a, b)","IsInWhiteShirt(a) and IsMakingSpeech(a, c) and IsInFrontOf(a, d)","(exists b (IsInWhiteShirt(a) and IsSpeakingInto(a, b))) -> (forall c (IsInWhiteShirt(a) and IsMakingSpeech(a, c) and IsInFrontOf(a, d)))","(exists b (exists a (IsInWhiteShirt(a) and IsSpeakingInto(a, b)))) -> (exists d (exists a (exists c (IsInWhiteShirt(a) and IsMakingSpeech(a, c) and IsInFrontOf(a, d)))))",LF
163,1,,A brown and white dog is chained up near a red chair. It follows that the dog is chained to a chair.," ""A brown and white dog is chained up near a red chair.""  "," ""The dog is chained to a chair.""","IsBrownAndWhite(a),  IsChainedUp(a),  IsNearChair(a,b),  IsRed(b)","IsChainedTo(c, d)",[],[],"[(' A brown and white dog', ' The dog')]","IsBrownAndWhite(a) and IsChainedUp(a) and IsNearChair(a,b) and IsRed(b)","IsChainedTo(c, d)","(exists a (IsBrownAndWhite(a) and IsChainedUp(a) and IsNearChair(a,b) and IsRed(b))) -> (forall c (IsChainedTo(c, d)))","(exists b (exists a (IsBrownAndWhite(a) and IsChainedUp(a) and IsNearChair(a,b) and IsRed(b)))) -> (exists d (exists c (IsChainedTo(c, d))))",LF
164,1,,"This is when daddy taught her how to ride her scooter. Consequently, daddy taught her."," ""Daddy taught her how to ride her scooter.""  "," ""Daddy taught her.""","Taught(a,  b),  CanRide(b, c)","Taught(a, b)",[],"[(' Daddy', ' Daddy'), (' her', ' her')]",[],"Taught(a, b) and CanRide(b, c)","Taught(a, b)","(Taught(a, b) and CanRide(b, c)) -> (Taught(a, b))","(exists b (exists a (exists c (Taught(a, b) and CanRide(b, c))))) -> (exists b (exists a (Taught(a, b))))",Valid
165,1,,"A small girl with short brown hair is pushing a pink scooter over grass with brown leaves with threes in the background. Therefore, the girl is outside."," ""A small girl with short brown hair is pushing a pink scooter over grass with brown leaves.""  "," ""The girl is outside.""  ","IsSmall(a),  HasShortBrownHair(a),  IsPushing(a,c),  IsOver(c,d),  HasBrownLeaves(d,e)",IsOutside(f),[],[],"[(' A small girl', ' The girl'), (' short brown hair', ' The girl')]","IsSmall(a) and HasShortBrownHair(a) and IsPushing(a,c) and IsOver(c,d) and HasBrownLeaves(d,e)",IsOutside(f),"(exists a (IsSmall(a) and HasShortBrownHair(a) and IsPushing(a,c) and IsOver(c,d) and HasBrownLeaves(d,e))) -> (forall f (IsOutside(f)))","(exists e (exists d (exists a (exists c (IsSmall(a) and HasShortBrownHair(a) and IsPushing(a,c) and IsOver(c,d) and HasBrownLeaves(d,e)))))) -> (exists f (IsOutside(f)))",LF
166,1,,"A man wearing a black cap is suspended in the air on a swing, as children are swinging on a swing set. Hence, a man in a black hat is swinging with some children."," ""A man wearing a black cap is suspended in the air on a swing.""  "," ""A man in a black hat is swinging with some children.""","IsWearingBlackCap(a),  IsSuspendedInAir(a),  IsOnSwing(a, b)","IsInBlackHat(c),  IsSwingingWith(c, d)",[],[],"[(' A man in a black hat', ' A man wearing a black cap')]","IsWearingBlackCap(a) and IsSuspendedInAir(a) and IsOnSwing(a, b)","IsInBlackHat(c) and IsSwingingWith(c, d)","(forall a (IsWearingBlackCap(a) and IsSuspendedInAir(a) and IsOnSwing(a, b))) -> (exists c (IsInBlackHat(c) and IsSwingingWith(c, d)))","(exists b (exists a (IsWearingBlackCap(a) and IsSuspendedInAir(a) and IsOnSwing(a, b)))) -> (exists d (exists c (IsInBlackHat(c) and IsSwingingWith(c, d))))",LF
167,1,,"A man with a blue, collared shirt sits in front of another man. This implies that a man sits in front of another man."," ""A man with a blue, collared shirt sits in front of another man.""  "," ""A man sits in front of another man.""","IsInBlueShirt(b),  IsCollared(c),  IsSittingInFrontOf(b, a)","IsSittingInFrontOf(d, a)",[],"[(' another man', ' another man')]","[(' collared shirt', ' A man'), (' collared shirt', ' another man')]","IsInBlueShirt(b) and IsCollared(c) and IsSittingInFrontOf(b, a)","IsSittingInFrontOf(d, a)","(exists c (IsInBlueShirt(b) and IsCollared(c) and IsSittingInFrontOf(b, a))) -> (forall a (forall d (IsSittingInFrontOf(d, a))))","(exists b (exists a (exists c (IsInBlueShirt(b) and IsCollared(c) and IsSittingInFrontOf(b, a))))) -> (exists d (exists a (IsSittingInFrontOf(d, a))))",Valid
168,1,,"A young man in an orange shirt, maneuvers a skateboard at the top of a ramp. Therefore, a person rides a skateboard."," ""A young man in an orange shirt maneuvers a skateboard at the top of a ramp.""  "," ""A person rides a skateboard.""","IsYoung(b),  IsInOrangeShirt(b),  HasSkateboard(b),  IsAtTopOfRamp(b, d)","IsPerson(e),  RidesSkateboard(e, a)",[],"[(' a skateboard', ' a skateboard')]",[],"IsYoung(b) and IsInOrangeShirt(b) and HasSkateboard(b) and IsAtTopOfRamp(b, d)","IsPerson(e) and RidesSkateboard(e, a)","(IsYoung(b) and IsInOrangeShirt(b) and HasSkateboard(b) and IsAtTopOfRamp(b, d)) -> (IsPerson(e) and RidesSkateboard(e, a))","(exists b (exists d (IsYoung(b) and IsInOrangeShirt(b) and HasSkateboard(b) and IsAtTopOfRamp(b, d)))) -> (exists a (exists e (IsPerson(e) and RidesSkateboard(e, a))))",LF
169,1,,"A large group of people walking in a busy city at night. Consequently, people are walking a city."," ""A large group of people are walking in a busy city at night.""  "," ""People are walking in a city.""","IsLargeGroup(a),  IsWalking(a),  IsInBusyCity(a,b),  IsAtNight(c)","IsWalking(d),  IsInCity(d,e)",[],[],"[(' A large group of people', ' People'), (' a city', ' A large group of people'), (' People', ' a busy city'), (' a busy city', ' a city'), (' night', ' a city')]","IsLargeGroup(a) and IsWalking(a) and IsInBusyCity(a,b) and IsAtNight(c)","IsWalking(d) and IsInCity(d,e)","(exists c (forall b (forall a (exists a (IsLargeGroup(a) and IsWalking(a) and IsInBusyCity(a,b) and IsAtNight(c)))))) -> (forall e (exists e (forall d (IsWalking(d) and IsInCity(d,e)))))","(exists b (exists a (exists c (IsLargeGroup(a) and IsWalking(a) and IsInBusyCity(a,b) and IsAtNight(c))))) -> (exists d (exists e (IsWalking(d) and IsInCity(d,e))))",LF
170,1,,"A group of people are walking by a van. Therefore, some people outdoors."," ""A group of people is walking by a van.""  "," ""Some people are outdoors.""","IsWalkingBy(a,b)",IsOutdoors(c),[],[],"[(' Some people', ' A group of people')]","IsWalkingBy(a,b)",IsOutdoors(c),"(forall a (IsWalkingBy(a,b))) -> (exists c (IsOutdoors(c)))","(exists b (exists a (IsWalkingBy(a,b)))) -> (exists c (IsOutdoors(c)))",LF
171,1,,"A white and a black dog fighting in a fenced in room. As a consequence, the dogs are fighting."," ""A white dog and a black dog are fighting.""  "," ""The dogs are fighting.""","IsWhiteDog(a),  IsBlackDog(b),  IsFighting(a, b)",IsFighting(c),[],[],"[(' A white dog', ' The dogs'), (' a black dog', ' The dogs')]","IsWhiteDog(a) and IsBlackDog(b) and IsFighting(a, b)",IsFighting(c),"(exists b (exists a (IsWhiteDog(a) and IsBlackDog(b) and IsFighting(a, b)))) -> (forall c (IsFighting(c)))","(exists b (exists a (IsWhiteDog(a) and IsBlackDog(b) and IsFighting(a, b)))) -> (exists c (IsFighting(c)))",
172,1,,"A white greyhound dog wearing a muzzle runs around a track. Hence, the dog is racing other dogs."," ""A white greyhound dog wearing a muzzle runs around a track.""  "," ""The white greyhound dog is racing other dogs.""","IsWhiteGreyhoundDog(a),  IsWearingMuzzle(a),  IsRunningAroundTrack(a, c)","IsWhiteGreyhoundDog(d),  IsRacing(d, e)",[],[],"[(' The white greyhound dog', ' A white greyhound dog'), (' A white greyhound dog', ' other dogs'), (' The white greyhound dog', ' a track')]","IsWhiteGreyhoundDog(a) and IsWearingMuzzle(a) and IsRunningAroundTrack(a, c)","IsWhiteGreyhoundDog(d) and IsRacing(d, e)","(forall c (forall a (IsWhiteGreyhoundDog(a) and IsWearingMuzzle(a) and IsRunningAroundTrack(a, c)))) -> (forall e (exists d (IsWhiteGreyhoundDog(d) and IsRacing(d, e))))","(exists a (exists c (IsWhiteGreyhoundDog(a) and IsWearingMuzzle(a) and IsRunningAroundTrack(a, c)))) -> (exists d (exists e (IsWhiteGreyhoundDog(d) and IsRacing(d, e))))",LF
173,1,,The pitcher is pitching the ball in a game of baseball. It follows that the pitcher throws the ball.," ""The pitcher is pitching the ball in a game of baseball.""  "," ""The pitcher throws the ball.""","IsPitching(a, b),  IsInGameOfBaseball(b, c)","IsThrowing(a, b)",[],"[(' The pitcher', ' The pitcher'), (' the ball', ' the ball')]","[(' The pitcher', ' a game of baseball'), (' the ball', ' a game of baseball')]","IsPitching(a, b) and IsInGameOfBaseball(b, c)","IsThrowing(a, b)","(forall c (IsPitching(a, b) and IsInGameOfBaseball(b, c))) -> (exists b (exists a (IsThrowing(a, b))))","(exists b (exists a (exists c (IsPitching(a, b) and IsInGameOfBaseball(b, c))))) -> (exists b (exists a (IsThrowing(a, b))))",LF
174,1,,"Girl in a red coat, blue head wrap and jeans is making a snow angel. As a consequence, a girl outside plays in the snow."," ""The girl in a red coat, blue head wrap, and jeans is making a snow angel.""  "," ""The girl outside plays in the snow.""","IsInRedCoat(a),  IsInBlueHeadWrap(a),  IsInJeans(a),  IsMakingSnowAngel(a)","IsOutside(e),  PlaysInSnow(e)",[],[],"[(' The girl in a red coat', ' The girl'), (' snow angel', ' the snow')]",IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a),IsOutside(e) and PlaysInSnow(e),(exists a (IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a))) -> (forall e (IsOutside(e) and PlaysInSnow(e))),(exists a (IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a))) -> (exists e (IsOutside(e) and PlaysInSnow(e))),LF
175,1,,"Men in an office with computers and a projector screen. Consequently, there are computers and a projector screen in the room."," ""Men are in an office with computers and a projector screen.""  "," ""There are computers and a projector screen in the room.""","IsInOffice(b),  HasComputers(c),  HasProjectorScreen(c)","IsInRoom(a),  IsInRoom(e)",[],"[(' computers', ' computers')]","[(' the room', ' an office'), (' a projector screen', ' projector screen')]",IsInOffice(b) and HasComputers(c) and HasProjectorScreen(c),IsInRoom(a) and IsInRoom(e),(IsInOffice(b) and HasComputers(c) and HasProjectorScreen(c)) -> (IsInRoom(a) and IsInRoom(e)),(exists b (exists c (IsInOffice(b) and HasComputers(c) and HasProjectorScreen(c)))) -> (exists a (exists e (IsInRoom(a) and IsInRoom(e)))),LF
176,1,,"A small child in a red jacket is sitting on a man's shoulders and holding his head. Therefore, the child's hands are on the man's head."," ""A small child in a red jacket is sitting on a man's shoulders and holding his head.""  "," ""The child's hands are on the man's head.""","IsSmall(a),  IsInRedJacket(a),  IsSittingOnShoulders(a,c),  IsHoldingHead(a,d)","IsOnHead(e,f)",[],[],"[("" The child's hands"", ' A small child'), ("" the man's head"", ' a man'), (' his head', "" the man's head"")]","IsSmall(a) and IsInRedJacket(a) and IsSittingOnShoulders(a,c) and IsHoldingHead(a,d)","IsOnHead(e,f)","(exists d (forall c (forall a (IsSmall(a) and IsInRedJacket(a) and IsSittingOnShoulders(a,c) and IsHoldingHead(a,d))))) -> (forall f (exists f (exists e (IsOnHead(e,f)))))","(exists d (exists a (exists c (IsSmall(a) and IsInRedJacket(a) and IsSittingOnShoulders(a,c) and IsHoldingHead(a,d))))) -> (exists f (exists e (IsOnHead(e,f))))",LF
177,1,,Three girls are standing and talking to each other. It follows that three girls are talking.," ""Three girls are standing and talking to each other.""  "," ""Three girls are talking.""","IsStanding(a),  IsTalking(a)",IsTalking(a),[],"[(' Three girls', ' Three girls')]",[],IsStanding(a) and IsTalking(a),IsTalking(a),(IsStanding(a) and IsTalking(a)) -> (IsTalking(a)),(exists a (IsStanding(a) and IsTalking(a))) -> (exists a (IsTalking(a))),Valid
178,1,,"a man with a cap and not wearing shirt is laying a wooden bench. Consequently, a man relaxes on a bench."," ""A man with a cap and not wearing a shirt is laying on a wooden bench.""  "," ""A man relaxes on a bench.""","IsWearingCap(a),  IsNotWearingShirt(a),  IsLayingOn(c, a)","IsRelaxing(d),  IsOn(d, e)",[],[],"[(' a wooden bench', ' a bench')]","IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOn(c, a)","IsRelaxing(d) and IsOn(d, e)","(exists c (IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOn(c, a))) -> (forall e (IsRelaxing(d) and IsOn(d, e)))","(exists a (exists c (IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOn(c, a)))) -> (exists d (exists e (IsRelaxing(d) and IsOn(d, e))))",LF
179,1,,"A man in a red shirt is being filmed by another man on a sports field with a huge audience of people watching and cheering. Therefore, the man is being filmed by another man."," ""A man in a red shirt is being filmed by another man on a sports field with a huge audience of people watching and cheering.""  "," ""The man in a red shirt is being filmed by another man.""","IsInRedShirt(b),  IsFilmedBy(b,a),  IsOnSportsField(b,c),  HasHugeAudience(c,d),  IsWatching(e,d),  IsCheering(e,d)","IsInRedShirt(f),  IsFilmedBy(f,a)",[],"[(' another man', ' another man')]","[(' The man in a red shirt', ' A man in a red shirt'), (' A man in a red shirt', ' another man'), (' The man in a red shirt', ' another man')]","IsInRedShirt(b) and IsFilmedBy(b,a) and IsOnSportsField(b,c) and HasHugeAudience(c,d) and IsWatching(e,d) and IsCheering(e,d)","IsInRedShirt(f) and IsFilmedBy(f,a)","(forall a (forall b (IsInRedShirt(b) and IsFilmedBy(b,a) and IsOnSportsField(b,c) and HasHugeAudience(c,d) and IsWatching(e,d) and IsCheering(e,d)))) -> (forall a (exists f (IsInRedShirt(f) and IsFilmedBy(f,a))))","(exists a (exists e (exists c (exists b (exists d (IsInRedShirt(b) and IsFilmedBy(b,a) and IsOnSportsField(b,c) and HasHugeAudience(c,d) and IsWatching(e,d) and IsCheering(e,d))))))) -> (exists a (exists f (IsInRedShirt(f) and IsFilmedBy(f,a))))",Valid
180,1,,"A man in a suit cheering in a library in front of children. Thus, a guy is cheering near some children."," ""A man in a suit is cheering in a library in front of children.""  "," ""A guy is cheering near some children.""","IsInSuit(a),  IsCheering(a),  IsInLibrary(a),  IsInFrontOf(a, c)","IsCheering(d),  IsNear(d, e)",[],[],"[(' A man in a suit', ' A guy'), (' children', ' some children')]","IsInSuit(a) and IsCheering(a) and IsInLibrary(a) and IsInFrontOf(a, c)","IsCheering(d) and IsNear(d, e)","(exists c (exists a (IsInSuit(a) and IsCheering(a) and IsInLibrary(a) and IsInFrontOf(a, c)))) -> (forall e (forall d (IsCheering(d) and IsNear(d, e))))","(exists a (exists c (IsInSuit(a) and IsCheering(a) and IsInLibrary(a) and IsInFrontOf(a, c)))) -> (exists d (exists e (IsCheering(d) and IsNear(d, e))))",LF
181,1,,A man in suit waiting for the green light. This implies that a man waits at a red light.," ""A man in a suit is waiting for the green light.""  "," ""A man waits at a red light.""  ","IsInSuit(a),  IsWaiting(a),  IsGreenLight(b)","IsWaiting(c),  IsRedLight(d)",[],[],"[(' A man in a suit', ' A man')]",IsInSuit(a) and IsWaiting(a) and IsGreenLight(b),IsWaiting(c) and IsRedLight(d),(exists a (IsInSuit(a) and IsWaiting(a) and IsGreenLight(b))) -> (forall c (IsWaiting(c) and IsRedLight(d))),(exists b (exists a (IsInSuit(a) and IsWaiting(a) and IsGreenLight(b)))) -> (exists d (exists c (IsWaiting(c) and IsRedLight(d)))),LF
182,1,,"A man smokes while leaning against a pillar, which has a ""missing person"" flier posted on it. Thus, a guy smoking against a wall with a flier on it."," ""A man is smoking while leaning against a pillar with a 'missing person' flier posted on it.""  "," ""A guy is smoking against a wall with a flier on it.""","IsSmoking(a),  IsLeaningAgainst(a,b),  HasMissingPersonFlier(b,c)","IsSmoking(d),  IsAgainst(d,e),  HasFlier(e,f)",[],[],"[(' A guy', ' A man'), (' a flier', "" a 'missing person' flier"")]","IsSmoking(a) and IsLeaningAgainst(a,b) and HasMissingPersonFlier(b,c)","IsSmoking(d) and IsAgainst(d,e) and HasFlier(e,f)","(forall c (forall a (IsSmoking(a) and IsLeaningAgainst(a,b) and HasMissingPersonFlier(b,c)))) -> (exists f (exists d (IsSmoking(d) and IsAgainst(d,e) and HasFlier(e,f))))","(exists b (exists a (exists c (IsSmoking(a) and IsLeaningAgainst(a,b) and HasMissingPersonFlier(b,c))))) -> (exists d (exists f (exists e (IsSmoking(d) and IsAgainst(d,e) and HasFlier(e,f)))))",LF
183,1,,"A woman is standing at a podium. Thus, a person is at a podium."," ""A woman is standing at a podium.""  "," ""A person is at a podium.""","IsStanding(b),  IsAtPodium(b, a)","IsAtPodium(c, a)",[],"[(' a podium', ' a podium')]",[],"IsStanding(b) and IsAtPodium(b, a)","IsAtPodium(c, a)","(IsStanding(b) and IsAtPodium(b, a)) -> (IsAtPodium(c, a))","(exists b (exists a (IsStanding(b) and IsAtPodium(b, a)))) -> (exists a (exists c (IsAtPodium(c, a))))",Valid
184,1,,Four boys are about to be hit by an approaching wave. It follows that a wave is about hit some boys.," ""Four boys are about to be hit by an approaching wave.""  "," ""A wave is about to hit some boys.""","IsAboutToBeHit(a, b),  IsApproaching(b)","IsAboutToHit(c, d)",[],[],"[(' Four boys', ' some boys'), (' an approaching wave', ' A wave'), (' some boys', ' an approaching wave')]","IsAboutToBeHit(a, b) and IsApproaching(b)","IsAboutToHit(c, d)","(forall b (exists b (exists a (IsAboutToBeHit(a, b) and IsApproaching(b))))) -> (forall c (forall d (IsAboutToHit(c, d))))","(exists b (exists a (IsAboutToBeHit(a, b) and IsApproaching(b)))) -> (exists d (exists c (IsAboutToHit(c, d))))",LF
185,1,,"people are sitting on a bench in front of buildings. Thus, some people are seated on a bench outside."," ""People are sitting on a bench in front of buildings.""  "," ""Some people are seated on a bench outside.""","IsSittingOn(b, a),  IsInFrontOf(a, c)","IsSeatedOn(d, a)",[],"[(' a bench', ' a bench')]","[(' People', ' Some people')]","IsSittingOn(b, a) and IsInFrontOf(a, c)","IsSeatedOn(d, a)","(exists b (IsSittingOn(b, a) and IsInFrontOf(a, c))) -> (forall d (IsSeatedOn(d, a)))","(exists b (exists a (exists c (IsSittingOn(b, a) and IsInFrontOf(a, c))))) -> (exists d (exists a (IsSeatedOn(d, a))))",LF
186,1,,The skateboarder is jumping his board in the air while another skateboarder watches. This implies that a skateboarder is jumping.," ""A skateboarder is jumping his board in the air.""  "," ""A skateboarder is jumping.""","IsJumping(b),  IsInTheAir(b)",IsJumping(a),[],"[(' A skateboarder', ' A skateboarder')]",[],IsJumping(b) and IsInTheAir(b),IsJumping(a),(IsJumping(b) and IsInTheAir(b)) -> (IsJumping(a)),(exists b (IsJumping(b) and IsInTheAir(b))) -> (exists a (IsJumping(a))),Valid
187,1,,"A man wearing a black hat and coat makes a face with a crowd behind him. As a consequence, a guy is standing near a crowd of people."," ""A man wearing a black hat and coat makes a face.""  "," ""A guy stands near a crowd of people.""","IsWearingBlackHat(a),  IsWearingCoat(a),  MakesFace(a)","IsNear(d, e)",[],[],"[(' A guy', ' A man'), (' a coat', ' a crowd of people')]",IsWearingBlackHat(a) and IsWearingCoat(a) and MakesFace(a),"IsNear(d, e)","(forall a (IsWearingBlackHat(a) and IsWearingCoat(a) and MakesFace(a))) -> (exists d (IsNear(d, e)))","(exists a (IsWearingBlackHat(a) and IsWearingCoat(a) and MakesFace(a))) -> (exists d (exists e (IsNear(d, e))))",LF
188,1,,"A group of soldiers march in a parade. Thus, a group of people march in a parade."," ""A group of soldiers marches in a parade.""  "," ""A group of people march in a parade.""","IsInParade(b),  Marches(b)","IsInParade(c),  Marches(c)",[],"[(' a parade', ' a parade')]","[(' a parade', ' A group of people')]",IsInParade(a) and Marches(b),IsInParade(a) and Marches(c),(exists a (IsInParade(a) and Marches(b))) -> (forall c (IsInParade(a) and Marches(c))),(exists b (exists a (IsInParade(a) and Marches(b)))) -> (exists a (exists c (IsInParade(a) and Marches(c)))),Valid
189,1,,The 3 dogs are cruising down the street. This implies that three dogs together.," ""Three dogs are cruising down the street.""  "," ""Three dogs are together.""  ","IsCruising(a,b)",IsTogether(a),[],"[(' Three dogs', ' Three dogs')]",[],"IsCruising(a,b)",IsTogether(a),"(IsCruising(a,b)) -> (IsTogether(a))","(exists b (exists a (IsCruising(a,b)))) -> (exists a (IsTogether(a)))",LF
190,1,,"The gentleman is speaking while the others are listening. As a consequence, the man is being given respect."," ""The gentleman is speaking while the others are listening.""  "," ""The gentleman is being given respect.""","IsSpeaking(a),  IsListening(b)","IsGiven(c, a)",[],"[(' The gentleman', ' The gentleman')]","[(' respect', ' The gentleman'), (' respect', ' the others')]",IsSpeaking(a) and IsListening(b),"IsGiven(c, a)","(forall b (forall a (IsSpeaking(a) and IsListening(b)))) -> (exists c (IsGiven(c, a)))","(exists b (exists a (IsSpeaking(a) and IsListening(b)))) -> (exists a (exists c (IsGiven(c, a))))",LF
191,1,,"One child in black is walking down a hill covered in white snow while 2 children are on their knees. Thus, there are three children in this picture, and they are all outside."," ""One child in black is walking down a hill covered in white snow and two children are on their knees.""  "," ""Three children are all outside.""","IsInBlack(a),  IsWalking(a),  IsOnHill(a,c),  IsCoveredInSnow(c,d),  IsOnKnees(e,f)",IsOutside(g),[],[],[],"IsInBlack(a) and IsWalking(a) and IsOnHill(a,c) and IsCoveredInSnow(c,d) and IsOnKnees(e,f)",IsOutside(g),"(IsInBlack(a) and IsWalking(a) and IsOnHill(a,c) and IsCoveredInSnow(c,d) and IsOnKnees(e,f)) -> (IsOutside(g))","(exists a (exists f (exists e (exists c (exists d (IsInBlack(a) and IsWalking(a) and IsOnHill(a,c) and IsCoveredInSnow(c,d) and IsOnKnees(e,f))))))) -> (exists g (IsOutside(g)))",LF
192,1,,A group of people are sight seeing and taking pictures. It follows that there are a group of people.," ""A group of people are sight seeing and taking pictures.""  "," ""There are a group of people.""","IsSightSeeing(a),  IsTakingPictures(a)",IsGroupOfPeople(a),[],"[(' A group of people', ' a group of people')]",[],IsSightSeeing(a) and IsTakingPictures(a),IsGroupOfPeople(a),(IsSightSeeing(a) and IsTakingPictures(a)) -> (IsGroupOfPeople(a)),(exists a (IsSightSeeing(a) and IsTakingPictures(a))) -> (exists a (IsGroupOfPeople(a))),LF
193,1,,"Army men grilling a lot of meat while his troop looks on. Hence, some of the people here have been in the armed forces."," ""Army men are grilling a lot of meat.""  "," ""Some of the people here have been in the armed forces.""","IsGrilling(b, a)","HasBeenIn(a, c)",[],"[(' meat', ' Some of the people')]","[(' Army men', ' the armed forces')]","IsGrilling(b, a)","HasBeenIn(a, c)","(exists b (IsGrilling(b, a))) -> (forall c (HasBeenIn(a, c)))","(exists b (exists a (IsGrilling(b, a)))) -> (exists a (exists c (HasBeenIn(a, c))))",LF
194,1,,"The basketball player in red is challenging the player in white for the ball. Consequently, people are playing basketball."," ""The basketball player in red is challenging the player in white for the ball.""  "," ""People are playing basketball.""","IsInRed(a),  IsChallenging(a, b),  HasBall(c)","IsPlaying(d),  IsPlayed(e)",[],[],"[(' the ball', ' basketball')]","IsInRed(a) and IsChallenging(a, b) and HasBall(c)",IsPlaying(d) and IsPlayed(e),"(exists c (IsInRed(a) and IsChallenging(a, b) and HasBall(c))) -> (forall e (IsPlaying(d) and IsPlayed(e)))","(exists b (exists a (exists c (IsInRed(a) and IsChallenging(a, b) and HasBall(c))))) -> (exists d (exists e (IsPlaying(d) and IsPlayed(e))))",LF
195,1,,"A older man with gray hair wearing a gray suit next to a green and yellow taxi. Thus, a older man with gray hair wearing a gray suit."," ""An older man with gray hair is wearing a gray suit next to a green and yellow taxi.""  "," ""An older man with gray hair is wearing a gray suit.""","IsOlder(b),  HasGrayHair(b),  IsWearing(b, a),  IsNextTo(b, c)","IsOlder(d),  HasGrayHair(d),  IsWearing(d, a)",[],"[(' a gray suit', ' a gray suit')]","[(' An older man with gray hair', ' An older man'), (' gray hair', ' An older man with gray hair'), (' a gray suit', ' An older man')]","IsOlder(b) and HasGrayHair(b) and IsWearing(b, a) and IsNextTo(b, c)","IsOlder(d) and HasGrayHair(d) and IsWearing(d, a)","(exists a (exists b (IsOlder(b) and HasGrayHair(b) and IsWearing(b, a) and IsNextTo(b, c)))) -> (forall d (IsOlder(d) and HasGrayHair(d) and IsWearing(d, a)))","(exists b (exists a (exists c (IsOlder(b) and HasGrayHair(b) and IsWearing(b, a) and IsNextTo(b, c))))) -> (exists d (exists a (IsOlder(d) and HasGrayHair(d) and IsWearing(d, a))))",Valid
196,1,,"A man drops something, reaching for it while a woman in a beige blazer discusses an important topic. Hence, a woman is talking while a man is reaching for something."," ""A woman in a beige blazer discusses an important topic while a man drops something and reaches for it.""  "," ""A woman is talking while a man is reaching for something.""","IsInBeigeBlazer(b),  Discusses(b, c),  Drops(a, something),  ReachesFor(a, something)","IsTalking(d),  ReachesFor(a, something)",[],"[(' a man', ' a man'), (' a man', ' something'), (' something', ' something')]","[(' A woman in a beige blazer', ' A woman'), (' something', ' an important topic'), (' A woman', ' something'), (' a man', ' something')]","IsInBeigeBlazer(b) and Discusses(b, c) and Drops(a, something) and ReachesFor(a, something)","IsTalking(d) and ReachesFor(a, a)","(forall a (forall c (exists b (IsInBeigeBlazer(b) and Discusses(b, c) and Drops(a, something) and ReachesFor(a, something))))) -> (forall a (exists a (forall d (IsTalking(d) and ReachesFor(a, a)))))","(exists b (exists a (exists c (IsInBeigeBlazer(b) and Discusses(b, c) and Drops(a, something) and ReachesFor(a, something))))) -> (exists d (exists a (IsTalking(d) and ReachesFor(a, a))))",LF
197,1,,A crowd watching a skateboarder. This implies that a person is skateboarding.," ""A crowd is watching a skateboarder.""  "," ""A person is skateboarding.""","IsWatching(a, b)",IsSkateboarding(c),[],[],[],"IsWatching(a, b)",IsSkateboarding(c),"(IsWatching(a, b)) -> (IsSkateboarding(c))","(exists b (exists a (IsWatching(a, b)))) -> (exists c (IsSkateboarding(c)))",LF
198,1,,"A male guitar player is vigorously singing a not to a song in a poorly lit room. As a consequence, a man is singing indoors."," ""A male guitar player is singing a song in a poorly lit room.""  "," ""A man is singing indoors.""","IsMale(a),  PlaysGuitar(a),  IsSinging(a),  IsInPoorlyLitRoom(a),  IsASong(b)","IsMan(d),  IsSinging(d),  IsIndoors(e)",[],[],[],IsMale(a) and PlaysGuitar(a) and IsSinging(a) and IsInPoorlyLitRoom(a) and IsASong(b),IsMan(d) and IsSinging(d) and IsIndoors(e),(IsMale(a) and PlaysGuitar(a) and IsSinging(a) and IsInPoorlyLitRoom(a) and IsASong(b)) -> (IsMan(d) and IsSinging(d) and IsIndoors(e)),(exists b (exists a (IsMale(a) and PlaysGuitar(a) and IsSinging(a) and IsInPoorlyLitRoom(a) and IsASong(b)))) -> (exists d (exists e (IsMan(d) and IsSinging(d) and IsIndoors(e)))),LF
199,1,,"The sun breaks through the trees as a child rides a swing. Thus, a child rides a swing in the daytime."," ""A child rides a swing.""  "," ""A child rides a swing in the daytime.""","IsChild(a),  Rides(a,b)","IsChild(a),  Rides(a,b),  IsDaytime(c)",[],"[(' A child', ' A child'), (' a swing', ' a swing')]",[],"IsChild(a) and Rides(a,b)","IsChild(a) and Rides(a,b) and IsDaytime(c)","(IsChild(a) and Rides(a,b)) -> (IsChild(a) and Rides(a,b) and IsDaytime(c))","(exists b (exists a (IsChild(a) and Rides(a,b)))) -> (exists b (exists a (exists c (IsChild(a) and Rides(a,b) and IsDaytime(c)))))",LF
