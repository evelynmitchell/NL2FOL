(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun CrucialTo (BoundSet BoundSet) Bool)
(declare-fun Contains (BoundSet BoundSet BoundSet) Bool)
(declare-fun TravelsUpstream (BoundSet) Bool)
(declare-fun LaysEggs (BoundSet BoundSet) Bool)
(declare-fun ExistsBecauseOf (BoundSet BoundSet) Bool)
(declare-fun VitalToBalance (BoundSet BoundSet BoundSet) Bool)
(declare-fun VitalToExistence (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((b BoundSet)) (exists ((e BoundSet)) (exists ((f BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (and (CrucialTo a b) (and (Contains c d a) (and (TravelsUpstream a) (and (LaysEggs a e) (ExistsBecauseOf a f))))))))))) (forall ((l BoundSet)) (forall ((k BoundSet)) (forall ((m BoundSet)) (=> (TravelsUpstream k) (VitalToBalance k l m)))))) (exists ((i BoundSet)) (exists ((a BoundSet)) (exists ((g BoundSet)) (exists ((h BoundSet)) (and (VitalToExistence a g) (VitalToBalance a h i)))))))))
(check-sat)
(get-model)