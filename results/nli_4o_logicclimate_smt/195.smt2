(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsOlder (BoundSet) Bool)
(declare-fun HasGrayHair (BoundSet) Bool)
(declare-fun IsWearingGraySuit (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsOlder a) (and (HasGrayHair a) (IsWearingGraySuit a)))) (and (forall ((e BoundSet)) (forall ((f BoundSet)) (=> (HasGrayHair e) (IsOlder f)))) (and (forall ((h BoundSet)) (forall ((g BoundSet)) (=> (HasGrayHair g) (IsOlder h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsOlder i) (HasGrayHair j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsWearingGraySuit k) (IsOlder l)))) (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsOlder m) (IsWearingGraySuit n))))))))) (exists ((d BoundSet)) (and (IsOlder d) (and (HasGrayHair d) (IsWearingGraySuit d)))))))
(check-sat)
(get-model)