(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun WearsBlackHat (BoundSet) Bool)
(declare-fun WearsCoat (BoundSet) Bool)
(declare-fun MakesFace (BoundSet) Bool)
(declare-fun IsBehind (BoundSet BoundSet) Bool)
(declare-fun StandsNear (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((f BoundSet)) (exists ((e BoundSet)) (and (WearsBlackHat a) (and (WearsCoat a) (and (MakesFace a) (IsBehind e f))))))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (WearsBlackHat i) (StandsNear j k))))) (and (forall ((l BoundSet)) (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (WearsCoat l) (StandsNear m n))))) (and (forall ((p BoundSet)) (forall ((o BoundSet)) (forall ((q BoundSet)) (=> (StandsNear o p) (WearsCoat q))))) (and (forall ((r BoundSet)) (forall ((t BoundSet)) (forall ((s BoundSet)) (=> (MakesFace r) (StandsNear s t))))) (forall ((u BoundSet)) (forall ((v BoundSet)) (forall ((w BoundSet)) (=> (StandsNear u v) (MakesFace w)))))))))) (exists ((h BoundSet)) (exists ((g BoundSet)) (StandsNear g h))))))
(check-sat)
(get-model)