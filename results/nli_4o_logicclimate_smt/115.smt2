(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInWhite (BoundSet) Bool)
(declare-fun Kicks (BoundSet BoundSet) Bool)
(declare-fun LungesTowards (BoundSet BoundSet) Bool)
(declare-fun IsInRed (BoundSet) Bool)
(declare-fun FollowsCloseBy (BoundSet) Bool)
(declare-fun IsSoccerPlayer (BoundSet) Bool)
(declare-fun AreThree (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((b BoundSet)) (exists ((e BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (and (IsInWhite a) (and (Kicks a b) (and (LungesTowards c d) (and (IsInRed e) (FollowsCloseBy e)))))))))) (and (forall ((h BoundSet)) (forall ((g BoundSet)) (=> (IsInRed g) (IsSoccerPlayer h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsSoccerPlayer i) (IsInRed j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsInRed k) (AreThree l)))) (and (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (AreThree m) (IsInRed n)))) (and (forall ((p BoundSet)) (forall ((o BoundSet)) (=> (FollowsCloseBy o) (IsSoccerPlayer p)))) (and (forall ((r BoundSet)) (forall ((q BoundSet)) (=> (IsSoccerPlayer q) (FollowsCloseBy r)))) (and (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (FollowsCloseBy s) (AreThree t)))) (forall ((u BoundSet)) (forall ((v BoundSet)) (=> (AreThree u) (FollowsCloseBy v)))))))))))) (exists ((f BoundSet)) (and (IsSoccerPlayer f) (AreThree f))))))
(check-sat)
(get-model)