(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun Disputed (BoundSet BoundSet) Bool)
(declare-fun Ends (BoundSet) Bool)
(declare-fun Stops (BoundSet) Bool)
(declare-fun RequiresEnd (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((c BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (Disputed c d) (and (Ends a) (Stops b))))))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (=> (Ends f) (Stops g)))) (and (forall ((h BoundSet)) (=> (Ends h) (RequiresEnd h))) (and (forall ((i BoundSet)) (=> (RequiresEnd i) (Ends i))) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (RequiresEnd j) (Stops k)))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (Stops b) (not (RequiresEnd a))))))))
(check-sat)
(get-model)