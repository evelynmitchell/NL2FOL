(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInfluencedBy (BoundSet BoundSet) Bool)
(declare-fun OperatesBasedOn (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((c BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (IsInfluencedBy a b) (and (IsInfluencedBy a c) (IsInfluencedBy a d))))))) (and (forall ((e BoundSet)) (forall ((f BoundSet)) (=> (IsInfluencedBy e f) (OperatesBasedOn e f)))) (and (forall ((h BoundSet)) (forall ((g BoundSet)) (=> (OperatesBasedOn g h) (IsInfluencedBy g h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsInfluencedBy i j) (OperatesBasedOn i j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (OperatesBasedOn k l) (IsInfluencedBy k l)))) (and (forall ((o BoundSet)) (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (OperatesBasedOn m n) (IsInfluencedBy m o))))) (and (forall ((p BoundSet)) (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (OperatesBasedOn p q) (IsInfluencedBy p r))))) (and (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (IsInfluencedBy s t) (OperatesBasedOn s t)))) (forall ((u BoundSet)) (forall ((v BoundSet)) (=> (OperatesBasedOn u v) (IsInfluencedBy u v)))))))))))) (exists ((a BoundSet)) (exists ((c BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (OperatesBasedOn a b) (and (OperatesBasedOn a c) (OperatesBasedOn a d))))))))))
(check-sat)
(get-model)