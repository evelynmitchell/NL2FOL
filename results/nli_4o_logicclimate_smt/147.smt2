(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsYoung (BoundSet) Bool)
(declare-fun IsAsian (BoundSet) Bool)
(declare-fun IsSittingOnGround (BoundSet) Bool)
(declare-fun IsInRubble (BoundSet) Bool)
(declare-fun IsOutside (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsYoung a) (and (IsAsian a) (and (IsSittingOnGround a) (IsInRubble a))))) (and (forall ((f BoundSet)) (=> (IsYoung f) (IsAsian f))) (and (forall ((g BoundSet)) (=> (IsAsian g) (IsYoung g))) (and (forall ((h BoundSet)) (=> (IsYoung h) (IsOutside h))) (and (forall ((i BoundSet)) (=> (IsOutside i) (IsYoung i))) (and (forall ((j BoundSet)) (=> (IsInRubble j) (IsYoung j))) (and (forall ((k BoundSet)) (=> (IsAsian k) (IsYoung k))) (and (forall ((l BoundSet)) (=> (IsYoung l) (IsAsian l))) (and (forall ((m BoundSet)) (=> (IsSittingOnGround m) (IsYoung m))) (forall ((n BoundSet)) (=> (IsInRubble n) (IsYoung n)))))))))))) (exists ((a BoundSet)) (and (IsYoung a) (and (IsAsian a) (and (IsOutside a) (IsInRubble a))))))))
(check-sat)
(get-model)