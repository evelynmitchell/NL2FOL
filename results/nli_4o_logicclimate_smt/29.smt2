(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun Increased (BoundSet) Bool)
(declare-fun HaveNotMaterialized (BoundSet) Bool)
(declare-fun IsRecent (BoundSet) Bool)
(declare-fun IsMajor (BoundSet) Bool)
(declare-fun IsHurricaneActivity (BoundSet) Bool)
(declare-fun IsLessFrequent (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (or (Increased a) (and (Increased b) (and (HaveNotMaterialized a) (HaveNotMaterialized b)))))) (and (forall ((e BoundSet)) (forall ((d BoundSet)) (=> (Increased d) (IsRecent e)))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (=> (Increased f) (IsMajor g)))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (Increased h) (IsHurricaneActivity i)))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (IsHurricaneActivity j) (Increased k)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (Increased l) (IsRecent m)))) (and (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (HaveNotMaterialized n) (IsLessFrequent o)))) (forall ((p BoundSet)) (forall ((q BoundSet)) (=> (HaveNotMaterialized p) (IsLessFrequent q))))))))))) (exists ((c BoundSet)) (and (IsRecent c) (and (IsMajor c) (and (IsHurricaneActivity c) (IsLessFrequent c))))))))
(check-sat)
(get-model)