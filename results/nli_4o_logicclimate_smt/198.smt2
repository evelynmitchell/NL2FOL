(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsMale (BoundSet) Bool)
(declare-fun IsGuitarPlayer (BoundSet) Bool)
(declare-fun IsSinging (BoundSet) Bool)
(declare-fun IsNote (BoundSet) Bool)
(declare-fun IsSong (BoundSet) Bool)
(declare-fun IsPoorlyLit (BoundSet) Bool)
(declare-fun IsIndoors (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((c BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (IsMale a) (and (IsGuitarPlayer a) (and (IsSinging a) (and (IsNote b) (and (IsSong c) (IsPoorlyLit d)))))))))) (and (forall ((h BoundSet)) (forall ((g BoundSet)) (=> (IsGuitarPlayer g) (IsMale h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsMale i) (IsGuitarPlayer j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsSinging k) (IsMale l)))) (and (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsSinging m) (IsSong n)))) (and (forall ((p BoundSet)) (forall ((o BoundSet)) (=> (IsPoorlyLit o) (IsIndoors p)))) (forall ((r BoundSet)) (forall ((q BoundSet)) (=> (IsIndoors q) (IsPoorlyLit r)))))))))) (exists ((e BoundSet)) (exists ((f BoundSet)) (and (IsMale e) (and (IsSinging e) (IsIndoors f))))))))
(check-sat)
(get-model)