(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsExtreme (BoundSet) Bool)
(declare-fun IsImpactOfClimateChange (BoundSet) Bool)
(declare-fun CausedHeavyRain (BoundSet BoundSet) Bool)
(declare-fun Affected (BoundSet BoundSet) Bool)
(declare-fun IsIn (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((b BoundSet)) (and (IsExtreme b) (IsImpactOfClimateChange c)))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (forall ((j BoundSet)) (=> (IsExtreme h) (CausedHeavyRain i j))))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (forall ((m BoundSet)) (=> (CausedHeavyRain k l) (IsExtreme m))))) (and (forall ((p BoundSet)) (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (IsImpactOfClimateChange n) (Affected o p))))) (forall ((r BoundSet)) (forall ((q BoundSet)) (forall ((s BoundSet)) (=> (Affected q r) (IsImpactOfClimateChange s))))))))) (exists ((e BoundSet)) (exists ((a BoundSet)) (exists ((f BoundSet)) (exists ((d BoundSet)) (and (Affected a d) (and (CausedHeavyRain d e) (IsIn f e))))))))))
(check-sat)
(get-model)