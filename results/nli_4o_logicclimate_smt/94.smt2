(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun ControlLandIn (BoundSet BoundSet) Bool)
(declare-fun HaveCoastlines (BoundSet) Bool)
(declare-fun IsRising (BoundSet) Bool)
(declare-fun IsMelting (BoundSet) Bool)
(declare-fun IsBeginning (BoundSet) Bool)
(declare-fun IsGainingGround (BoundSet) Bool)
(declare-fun IsGainingAdvantage (BoundSet) Bool)
(declare-fun IsInArcticCircleRace (BoundSet) Bool)
(declare-fun IsForResources (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((b BoundSet)) (exists ((j BoundSet)) (exists ((e BoundSet)) (exists ((g BoundSet)) (exists ((h BoundSet)) (exists ((a BoundSet)) (and (ControlLandIn c a) (and (HaveCoastlines e) (and (IsRising g) (and (IsMelting h) (and (IsBeginning j) (IsGainingGround b))))))))))))) (and (forall ((m BoundSet)) (=> (IsGainingGround m) (IsGainingAdvantage m))) (and (forall ((n BoundSet)) (=> (IsGainingAdvantage n) (IsGainingGround n))) (and (forall ((o BoundSet)) (=> (IsInArcticCircleRace o) (IsGainingGround o))) (forall ((p BoundSet)) (=> (IsGainingGround p) (IsForResources p))))))) (exists ((b BoundSet)) (and (IsGainingAdvantage b) (and (IsInArcticCircleRace b) (IsForResources b)))))))
(check-sat)
(get-model)