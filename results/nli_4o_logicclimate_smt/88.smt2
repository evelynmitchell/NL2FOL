(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun HasCreptUp (BoundSet) Bool)
(declare-fun IsHighTide (BoundSet) Bool)
(declare-fun IsBriskWind (BoundSet) Bool)
(declare-fun SendsWater (BoundSet BoundSet) Bool)
(declare-fun PoursInto (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((b BoundSet)) (exists ((e BoundSet)) (exists ((f BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (and (HasCreptUp c) (and (IsHighTide d) (and (IsBriskWind e) (and (SendsWater f a) (SendsWater f b))))))))))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (forall ((j BoundSet)) (=> (PoursInto h) (SendsWater i j))))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (forall ((m BoundSet)) (=> (PoursInto k) (SendsWater l m))))) (and (forall ((p BoundSet)) (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (PoursInto n) (SendsWater o p))))) (forall ((r BoundSet)) (forall ((q BoundSet)) (forall ((s BoundSet)) (=> (PoursInto q) (SendsWater r s))))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (PoursInto a) (PoursInto b)))))))
(check-sat)
(get-model)