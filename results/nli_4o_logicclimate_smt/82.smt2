(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun Endorsed (BoundSet BoundSet) Bool)
(declare-fun MightCollapse (BoundSet) Bool)
(declare-fun InComingDecades (BoundSet) Bool)
(declare-fun DueToClimateChange (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((b BoundSet)) (exists ((e BoundSet)) (exists ((f BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (and (Endorsed d f) (and (Endorsed e f) (and (MightCollapse a) (and (InComingDecades b) (DueToClimateChange c))))))))))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (MightCollapse h) (DueToClimateChange i)))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (InComingDecades j) (DueToClimateChange k)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (DueToClimateChange l) (InComingDecades m)))) (and (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (MightCollapse n) (DueToClimateChange o)))) (and (forall ((p BoundSet)) (forall ((q BoundSet)) (=> (DueToClimateChange p) (InComingDecades q)))) (forall ((r BoundSet)) (forall ((s BoundSet)) (=> (InComingDecades r) (DueToClimateChange s)))))))))) (exists ((a BoundSet)) (exists ((c BoundSet)) (exists ((b BoundSet)) (and (MightCollapse a) (and (InComingDecades b) (DueToClimateChange c)))))))))
(check-sat)
(get-model)