(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun SingsJoyousSongs (BoundSet) Bool)
(declare-fun IsFromBook (BoundSet BoundSet) Bool)
(declare-fun IsAtChurch (BoundSet BoundSet) Bool)
(declare-fun IsToMasses (BoundSet BoundSet) Bool)
(declare-fun IsFilledWithSong (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((b BoundSet)) (exists ((e BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (and (SingsJoyousSongs a) (and (IsFromBook b c) (and (IsAtChurch a d) (IsToMasses b e))))))))) (and (forall ((i BoundSet)) (forall ((h BoundSet)) (forall ((j BoundSet)) (=> (SingsJoyousSongs h) (IsFilledWithSong i j))))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (forall ((m BoundSet)) (=> (IsFilledWithSong k l) (SingsJoyousSongs m))))) (forall ((q BoundSet)) (forall ((p BoundSet)) (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (IsFilledWithSong n o) (IsAtChurch p q))))))))) (exists ((f BoundSet)) (exists ((g BoundSet)) (IsFilledWithSong f g))))))
(check-sat)
(get-model)