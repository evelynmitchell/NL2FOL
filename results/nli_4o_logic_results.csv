,label,updated_label,articles,Claim,Implication,Referring Expressions - Claim,Referring Expressions - Implication,Property Implications,Equal Entities,Subset Entities,Claim Lfs,Implication Lfs,Logical Form,Logical Form 2,result
0,0,false causality,"Giving 10% of your income to the Church will free a child’s soul from Limbo into Heaven, so give your money!", Giving 10% of your income to the Church will free a child's soul from Limbo into Heaven.  , You should give your money to the Church.,"IsGiven(b,a),  IsInLimbo(c),  IsInHeaven(c)","IsGiven(f,a)",[],"[(' the Church', ' the Church')]","[(' Your income', ' Your money')]","(IsGiven(b,a) and IsInLimbo(c)) and IsInHeaven(c)","IsGiven(f,a)","(exists b ((IsGiven(b,a) and IsInLimbo(c)) and IsInHeaven(c))) -> (forall f (IsGiven(f,a)))","(exists a (exists b (exists c ((IsGiven(b,a) and IsInLimbo(c)) and IsInHeaven(c))))) -> (exists a (exists f (IsGiven(f,a))))",
1,0,appeal to emotion,"If everyone lived his or her life exactly like Jesus lived his life, the world would be a beautiful place!", Jesus lived a beautiful life.  , The world would be a beautiful place.,LivedBeautifulLife(a),IsBeautifulPlace(c),[],[],[],LivedBeautifulLife(a),IsBeautifulPlace(c),(LivedBeautifulLife(a)) -> (IsBeautifulPlace(c)),(exists a (LivedBeautifulLife(a))) -> (exists c (IsBeautifulPlace(c))),LF
2,0,appeal to emotion,"I know you don’t like the kitty-cat sweater that Grandma knitted for you, but she worked so hard on it and it will make her happy to see you wear it in the family holiday photo.", Grandma knitted the kitty-cat sweater., You should wear the kitty-cat sweater in the family holiday photo.,"KnittedSweater(a, b)","IsWornInPhoto(c, d)",[],[],[],"KnittedSweater(a, b)","IsWornInPhoto(c, d)","(KnittedSweater(a, b)) -> (IsWornInPhoto(c, d))","(exists a (exists b (KnittedSweater(a, b)))) -> (exists c (exists d (IsWornInPhoto(c, d))))",LF
3,0,ad populum,"Dave wants you to break into the spooky cabin with him. “Everyone does it,” he claims. What fallacy has he committed?", Everyone breaks into the spooky cabin.  , You should break into the spooky cabin.,"BreaksInto(b, a),  IsSpooky(a)","BreaksInto(c, a),  IsSpooky(a)",[],"[(' spooky cabin', ' spooky cabin')]","[(' Everyone', ' You')]","∀b (IsSpooky(a) and BreaksInto(b, a))","IsSpooky(a) and BreaksInto(c, a)","(exists b (∀b (IsSpooky(a) and BreaksInto(b, a)))) -> (forall c (IsSpooky(a) and BreaksInto(c, a)))","(exists a (exists b (∀b (IsSpooky(a) and BreaksInto(b, a))))) -> (exists a (exists c (IsSpooky(a) and BreaksInto(c, a))))",
4,0,fallacy of credibility,"Ms. Drayer, the smartest person in the universe, says the debate is the best class, therefore it is."," ""Ms. Drayer, the smartest person in the universe, says the debate is the best class.""  "," ""The debate is the best class.""","IsSmartestPersonInUniverse(c),  IsBestClass(a)",IsBestClass(a),[],"[(' the debate', ' The debate'), (' the best class', ' the best class')]",[],IsSmartestPersonInUniverse(c) and IsBestClass(a),IsBestClass(a),(IsSmartestPersonInUniverse(c) and IsBestClass(a)) -> (IsBestClass(a)),(exists a (exists c (IsSmartestPersonInUniverse(c) and IsBestClass(a)))) -> (exists a (IsBestClass(a))),Valid
5,0,faulty generalization,Why did the blond cross the road?  Because she saw a shoe sale!," ""The blond crossed the road because she saw a shoe sale.""  "," ""Blonds are easily attracted by shoe sales.""",SeesShoeSale(b),IsAttractedByShoeSales(d),"[('SeesShoeSale(b)', 'IsAttractedByShoeSales(d)'), ('IsAttractedByShoeSales(d)', 'SeesShoeSale(b)')]",[],"[(' a shoe sale', ' shoe sales')]",SeesShoeSale(b) and CrossedRoad(a),IsAttractedByShoeSales(d),(SeesShoeSale(b) and CrossedRoad(a) & (forall b (forall d (SeesShoeSale(b) -> IsAttractedByShoeSales(d)))) & (forall b (forall d (IsAttractedByShoeSales(d) -> SeesShoeSale(b))))) -> (IsAttractedByShoeSales(d)),(exists a (exists b (SeesShoeSale(b) and CrossedRoad(a))) & (forall g (forall f (SeesShoeSale(f) -> IsAttractedByShoeSales(g)))) & (forall i (forall h (IsAttractedByShoeSales(h) -> SeesShoeSale(i))))) -> (exists d (IsAttractedByShoeSales(d))),Valid
6,0,appeal to emotion,"Timmy: Mom, what if I don’t believe in God?
Mom: Then you burn in Hell forever.  Why do you ask?
Timmy: No reason.
", Timmy will burn in Hell forever if Timmy does not believe in God.  , Timmy must believe in God.,"WillBurnInHellForever(a),  DoesNotBelieveInGod(a)",MustBelieveInGod(a),[],"[(' Timmy', ' Timmy'), (' God', ' God')]",[],DoesNotBelieveInGod(a) and WillBurnInHellForever(a),MustBelieveInGod(a),(DoesNotBelieveInGod(a) and WillBurnInHellForever(a)) -> (MustBelieveInGod(a)),(exists a (DoesNotBelieveInGod(a) and WillBurnInHellForever(a))) -> (exists a (MustBelieveInGod(a))),LF
7,0,false dilemma,"""If you never gave money to charity, then you must be a greedy millionaire."" What is this?"," ""You never gave money to charity, and you are a greedy millionaire.""  "," ""You are a greedy millionaire.""","GaveMoneyToCharity(a, c, d),  IsGreedyMillionaire(a)",IsGreedyMillionaire(a),[],"[(' You', ' You'), (' greedy millionaire', ' a greedy millionaire')]",[],"~GaveMoneyToCharity(a, c, d) and IsGreedyMillionaire(a)",IsGreedyMillionaire(a),"(~GaveMoneyToCharity(a, c, d) and IsGreedyMillionaire(a)) -> (IsGreedyMillionaire(a))","(exists a (exists c (exists d (~GaveMoneyToCharity(a, c, d) and IsGreedyMillionaire(a))))) -> (exists a (IsGreedyMillionaire(a)))",Valid
8,0,fallacy of extension,Caroline says that she is going to have lunch with the new girl. Jenna says that she can't believe that Caroline is ditching her old friends for the new girl., Caroline is going to have lunch with the new girl.  , Caroline is ditching her old friends for the new girl.,"IsHavingLunch(a,c),  IsWith(a,b)","IsDitching(a,d),  IsFor(a,b)","[('  IsFor(a,b)', '  IsWith(a,b)')]","[(' Caroline', ' Caroline'), (' the new girl', ' the new girl')]",[],"IsHavingLunch(a,c) and IsWith(a,b)","IsDitching(a,d) and IsFor(a,b)","(IsHavingLunch(a,c) and IsWith(a,b) & (forall a (forall b (  IsFor(a,b) ->   IsWith(a,b))))) -> (IsDitching(a,d) and IsFor(a,b))","(exists a (exists c (exists b (IsHavingLunch(a,c) and IsWith(a,b)))) & (forall e (forall f (  IsFor(e,f) ->   IsWith(e,f))))) -> (exists a (exists b (exists d (IsDitching(a,d) and IsFor(a,b)))))",LF
9,0,faulty generalization,"""You can never give anyone a break. If you do, they'll walk all over you."""," ""You can never give anyone a break.""  "," ""They will walk all over you.""","CanGive(a, b)","WalkOver(c, a)",[],"[(' You', ' you')]",[],"~CanGive(a, b)","WalkOver(c, a)","(~CanGive(a, b)) -> (WalkOver(c, a))","(exists a (exists b (~CanGive(a, b)))) -> (exists a (exists c (WalkOver(c, a))))",LF
10,0,false causality,"Believing that ""runs"" occur to statistically independent phenomena such as routine wheel spirits."," ""Runs occur to statistically independent phenomena such as routine wheel spins.""  "," ""Runs do not occur to statistically independent phenomena""","OccurTo(a, b),  AreStatisticallyIndependent(b),  AreRoutineWheelSpins(c)","OccurTo(a, b),  AreStatisticallyIndependent(b)",[],"[(' Runs', ' Runs'), (' statistically independent phenomena', ' statistically independent phenomena')]",[],"OccurTo(a, b) and AreStatisticallyIndependent(b) and AreRoutineWheelSpins(c)","OccurTo(a, b) and ~AreStatisticallyIndependent(b)","(OccurTo(a, b) and AreStatisticallyIndependent(b) and AreRoutineWheelSpins(c)) -> (OccurTo(a, b) and ~AreStatisticallyIndependent(b))","(exists a (exists b (exists c (OccurTo(a, b) and AreStatisticallyIndependent(b) and AreRoutineWheelSpins(c))))) -> (exists a (exists b (OccurTo(a, b) and ~AreStatisticallyIndependent(b))))",LF
11,0,false causality,"I broke a mirror earlier in the day, and then I received an F on my history final. Therefore, I received the F because I broke the mirror."," ""I broke a mirror earlier in the day and received an F on the history final."""," ""Breaking the mirror caused receiving an F on the history final.""","Broke(d, a),  Received(d, b),  On(c)","Broke(x, a),  Received(x, b),  On(c)",[],"[(' a mirror', ' The mirror'), (' an F', ' an F'), (' the history final', ' the history final')]",[],"Broke(d, a) and Received(d, b) and On(c)","Broke(x, a) and (Received(x, b) and On(c))","(Broke(d, a) and Received(d, b) and On(c)) -> (Broke(x, a) and (Received(x, b) and On(c)))","(exists c (exists a (exists b (exists d (Broke(d, a) and Received(d, b) and On(c)))))) -> (exists c (exists a (exists x (exists b (Broke(x, a) and (Received(x, b) and On(c)))))))",Valid
12,0,fallacy of extension,"Charlie: I think we should put more money into schools. Quality public education is so important.
Bob: So you’re saying we should cut military spending and spend it instead on more spiral notebooks and crayons? I guess you want our country to be a weak, defenseless target for terrorists.
Charlie: Creo que deberíamos invertir más dinero en las escuelas. La educación pública de calidad es muy importante.

Bob: ¿Entonces estás diciendo que deberíamos recortar el gasto militar y gastarlo en más cuadernos de espiral y crayones? Supongo que quiere que nuestro país sea un objetivo débil e indefenso para los terroristas.", Quality public education is important., More money should be put into schools at the expense of military spending.,IsImportant(a),"IsPutInto(b, c),  IsAtExpenseOf(b, d)",[],[],[],IsImportant(a),"IsPutInto(b, c) and IsAtExpenseOf(b, d)","(IsImportant(a)) -> (IsPutInto(b, c) and IsAtExpenseOf(b, d))","(exists a (IsImportant(a))) -> (exists b (exists d (exists c (IsPutInto(b, c) and IsAtExpenseOf(b, d)))))",LF
13,0,false causality,"Cellphones weren’t invented before I was born. Now, they are everywhere! Therefore, cellphones were created because I was born.", Cellphones are everywhere., Cellphones were created because I was born.,AreEverywhere(a),"CreatedBecause(a, c)","[('CreatedBecause(a, c)', 'AreEverywhere(a)')]","[(' Cellphones', ' Cellphones')]",[],AreEverywhere(a),"CreatedBecause(a, c)","(AreEverywhere(a) & (forall a (forall c (CreatedBecause(a, c) -> AreEverywhere(a))))) -> (CreatedBecause(a, c))","(exists a (AreEverywhere(a)) & (forall e (forall d (CreatedBecause(d,e) -> AreEverywhere(d))))) -> (exists a (exists c (CreatedBecause(a, c))))",LF
14,0,ad hominem,Ms. Baker assigned me a lot of homework because she’s a witch!, Ms. Baker assigned a lot of homework., Ms. Baker is a witch.,"Assigned(a, b)",IsWitch(a),[],"[(' Ms. Baker', ' Ms. Baker')]",[],"Assigned(a, b)",IsWitch(a),"(Assigned(a, b)) -> (IsWitch(a))","(exists a (exists b (Assigned(a, b)))) -> (exists a (IsWitch(a)))",LF
15,0,fallacy of credibility,"My dad went to school, so he knows everything about the education system."," ""Dad went to school.""  "," ""Dad knows everything about the education system.""","WentTo(a, b)","KnowsEverythingAbout(a, c)",[],"[(' Dad', ' Dad')]","[(' school', ' the education system')]","WentTo(a, b)","KnowsEverythingAbout(a, c)","(exists b (WentTo(a, b))) -> (forall c (KnowsEverythingAbout(a, c)))","(exists a (exists b (WentTo(a, b)))) -> (exists a (exists c (KnowsEverythingAbout(a, c))))",LF
16,0,ad populum,Everyone is doing the Low-Carb Diet.," ""Everyone is doing the Low-Carb Diet.""  "," ""You should do the Low-Carb Diet.""","IsDoingDiet(b, a)","IsDoingDiet(c, a)",[],"[(' Low-Carb Diet', ' the Low-Carb Diet')]","[(' Everyone', ' You')]","IsDoingDiet(b, a)","IsDoingDiet(c, a)","(exists b (IsDoingDiet(b, a))) -> (forall c (IsDoingDiet(c, a)))","(exists a (exists b (IsDoingDiet(b, a)))) -> (exists a (exists c (IsDoingDiet(c, a))))",Valid
17,0,fallacy of extension,"Parent: You need to clean out your backpack.
Child: You know I have ADD! Why can’t you just accept me as I am?", The child has ADD., The parent should accept the child as the child is.,HasADD(a),"ShouldAccept(c, a)",[],"[(' The child', ' the child'), (' The child', ' the child')]",[],HasADD(a),"ShouldAccept(c, a)","(HasADD(a)) -> (ShouldAccept(c, a))","(exists a (HasADD(a))) -> (exists a (exists c (ShouldAccept(c, a))))",LF
18,0,fallacy of credibility,"X has been around for years now.
Y is new.
Therefore, Y is better than X."," ""X has been around for years.""  "," ""Y is better than X.""",HasBeenAroundForYears(a),"IsBetterThan(b, a)",[],"[(' X', ' X')]",[],HasBeenAroundForYears(a),"IsBetterThan(b, a)","(HasBeenAroundForYears(a)) -> (IsBetterThan(b, a))","(exists a (HasBeenAroundForYears(a))) -> (exists a (exists b (IsBetterThan(b, a))))",LF
19,0,false causality,"""Right when I sneezed, the power went off. I must've caused the outage."" Bragged Zohaw."," ""Zohaw sneezed when the power went off."""," ""Zohaw caused the power outage.""","Sneezed(a),  WentOff(b)","Caused(a, c)","[('Sneezed(a)', 'Caused(a, c)')]","[(' Zohaw', ' Zohaw')]",[],WentOff(b) and Sneezed(a),"Caused(a, c)","(WentOff(b) and Sneezed(a) & (forall a (forall c (Sneezed(a) -> Caused(a, c))))) -> (Caused(a, c))","(exists a (exists b (WentOff(b) and Sneezed(a))) & (forall e (forall d (Sneezed(d) -> Caused(d,e))))) -> (exists a (exists c (Caused(a, c))))",Valid
20,0,equivocation,"I like my steak rare. But I don’t care for aardvark steak, even though it’s the rarest steak in the world."," ""Aardvark steak is the rarest steak in the world.""  "," ""I don't like the rarest steak in the world.""","IsAardvarkSteak(b),  IsSteak(b),  IsInWorld(b),  IsRarest(b)","Dislikes(d, a),  IsRarest(a),  IsInWorld(a)",[],"[(' the rarest steak in the world', ' world')]","[(' steak', ' the rarest steak in the world')]",IsAardvarkSteak(b) and IsSteak(b) and IsInWorld(b) and IsRarest(b),"Dislikes(d, a) and IsRarest(a) and IsInWorld(a)","(IsAardvarkSteak(b) and IsSteak(b) and IsInWorld(b) and IsRarest(b)) -> (Dislikes(d, a) and IsRarest(a) and IsInWorld(a))","(exists b (IsAardvarkSteak(b) and IsSteak(b) and IsInWorld(b) and IsRarest(b))) -> (exists a (exists d (Dislikes(d, a) and IsRarest(a) and IsInWorld(a))))",LF
21,0,faulty generalization,"If you allow the students to redo this one test, they will always want to redo all future tests"," ""Allowing students to redo this one test will make them want to redo future tests.""  "," ""Students will always want to redo future tests.""","IsAllowedToRedo(a, c),  WantsToRedo(a, b)","WantsToRedo(a, b)",[],"[(' Students', ' Students'), (' future tests', ' future tests')]",[],"IsAllowedToRedo(a, c) and WantsToRedo(a, b)","WantsToRedo(a, b)","(IsAllowedToRedo(a, c) and WantsToRedo(a, b)) -> (WantsToRedo(a, b))","(exists a (exists c (exists b (IsAllowedToRedo(a, c) and WantsToRedo(a, b))))) -> (exists a (exists b (WantsToRedo(a, b))))",Valid
22,0,fallacy of relevance,"There is no need for additional taxes for education. Every year we throw more money into education, and all they do is hire more management and build more buildings. None of the money actually reaches the classroom or is really used for education.", Additional taxes for education are unnecessary.  , Money for education is used for hiring more management and building more buildings.,AreUnnecessary(a),"IsUsedForHiringManagement(c),  IsUsedForBuildingBuildings(c)",[],[],"[(' education', ' Money for education')]",AreUnnecessary(a),IsUsedForHiringManagement(c) and IsUsedForBuildingBuildings(c),(AreUnnecessary(a)) -> (IsUsedForHiringManagement(c) and IsUsedForBuildingBuildings(c)),(exists a (AreUnnecessary(a))) -> (exists c (IsUsedForHiringManagement(c) and IsUsedForBuildingBuildings(c))),LF
23,0,false causality,Believing that the cause of the Reformation was simply Martin Luther posting his theses, Martin Luther posting his theses caused the Reformation.  , The cause of the Reformation was Martin Luther posting his theses.,"PostedTheses(a, b),  CausedReformation(b, c)","CausedReformation(d),  PostedTheses(a, b)","[('PostedTheses(a, b)', 'CausedReformation(d)'), ('  PostedTheses(a, b)', '  CausedReformation(b, c)')]","[(' Martin Luther', ' Martin Luther'), (' his theses', ' his theses')]","[(' Martin Luther', ' The cause of the Reformation'), (' his theses', ' Martin Luther')]","PostedTheses(a, b) and CausedReformation(b, c)","CausedReformation(d) and PostedTheses(a, b)","(exists b (exists a (PostedTheses(a, b) and CausedReformation(b, c))) & (forall a (forall b (forall d (PostedTheses(a, b) -> CausedReformation(d))))) & (forall a (forall b (forall c (  PostedTheses(a, b) ->   CausedReformation(b, c)))))) -> (exists b (forall a (forall d (CausedReformation(d) and PostedTheses(a, b)))))","(exists a (exists b (exists c (PostedTheses(a, b) and CausedReformation(b, c)))) & (forall g (forall e (forall f (PostedTheses(e,f) -> CausedReformation(g))))) & (forall i (forall h (forall k (forall j (  PostedTheses(h,i) ->   CausedReformation(j,k))))))) -> (exists a (exists b (exists d (CausedReformation(d) and PostedTheses(a, b)))))",
24,0,false causality,The party was going great! Then Gerald showed up and little by little people started collecting their coats and heading home. Gerald ruined the party., Gerald ruined the party.  , People left the party because of Gerald.,"Ruined(a, b)","Left(c, b),  CausedBy(a, b)","[('Ruined(a, b)', '  CausedBy(a, b)')]","[(' Gerald', ' Gerald'), (' the party', ' the party')]","[(' Gerald', ' People')]","Ruined(a, b)","Left(c, b) and CausedBy(a, b)","(exists a (Ruined(a, b)) & (forall a (forall b (Ruined(a, b) ->   CausedBy(a, b))))) -> (forall c (Left(c, b) and CausedBy(a, b)))","(exists a (exists b (Ruined(a, b))) & (forall e (forall d (Ruined(d,e) ->   CausedBy(d,e))))) -> (exists a (exists c (exists b (Left(c, b) and CausedBy(a, b)))))",LF
25,0,fallacy of logic,"I can’t stop eating these chocolates.  I really love chocolate, or I seriously lack willpower.  I know I really love chocolate; therefore, I cannot lack willpower.", I really love chocolate, I cannot lack willpower,LovesChocolate(a),LacksWillpower(c),[],[],[],LovesChocolate(a),~LacksWillpower(c),(LovesChocolate(a)) -> (~LacksWillpower(c)),(exists a (LovesChocolate(a))) -> (exists c (~LacksWillpower(c))),LF
26,0,false causality,"Shortly after MySpace became popular, U.S. soldiers found Saddam Hussein.", U.S. soldiers found Saddam Hussein.  , MySpace becoming popular is linked to finding Saddam Hussein.,IsFoundByU.S.Soldiers(a),"IsPopular(c),  IsLinkedToFindingSaddamHussein(c)",[],"[(' Saddam Hussein', ' Saddam Hussein')]",[],IsFoundByU.S.Soldiers(a),IsPopular(c) and IsLinkedToFindingSaddamHussein(c),(IsFoundByU.S.Soldiers(a)) -> (IsPopular(c) and IsLinkedToFindingSaddamHussein(c)),(exists a (IsFoundByU.S.Soldiers(a))) -> (exists c (IsPopular(c) and IsLinkedToFindingSaddamHussein(c))),LF
27,0,false causality,Jimmy isn't at school today. He must be on a family trip., Jimmy isn't at school today., Jimmy is on a family trip.,"IsNotAt(a, b)","IsOn(a, d)",[],"[(' Jimmy', ' Jimmy')]",[],"IsNotAt(a, b)","IsOn(a, d)","(IsNotAt(a, b)) -> (IsOn(a, d))","(exists a (exists b (IsNotAt(a, b)))) -> (exists a (exists d (IsOn(a, d))))",LF
28,0,circular reasoning,"I am athletic because I run, and I run because I'm athletic."," ""I am athletic and I run"""," ""Running is related to being athletic""","IsAthletic(a),  Runs(a)","IsRelatedTo(b, c)","[('IsAthletic(a)', 'IsRelatedTo(b, c)'), ('IsRelatedTo(b, c)', 'IsAthletic(a)')]",[],[],IsAthletic(a) and Runs(a),"IsRelatedTo(b, c)","(IsAthletic(a) and Runs(a) & (forall a (forall b (forall c (IsAthletic(a) -> IsRelatedTo(b, c))))) & (forall a (forall b (forall c (IsRelatedTo(b, c) -> IsAthletic(a)))))) -> (IsRelatedTo(b, c))","(exists a (IsAthletic(a) and Runs(a)) & (forall e (forall f (forall d (IsAthletic(d) -> IsRelatedTo(e,f))))) & (forall i (forall g (forall h (IsRelatedTo(g,h) -> IsAthletic(i)))))) -> (exists b (exists c (IsRelatedTo(b, c))))",Valid
29,0,false causality,You know Jane Fonda’s exercise videos must be worth the money. Look at the great shape she’s in.," ""Jane Fonda is in great shape.""  "," ""Jane Fonda's exercise videos are worth the money.""",IsInGreatShape(a),IsWorthTheMoney(c),"[('IsInGreatShape(a)', 'IsWorthTheMoney(c)'), ('IsWorthTheMoney(c)', 'IsInGreatShape(a)')]",[],"[(' Jane Fonda', "" Jane Fonda's exercise videos"")]",IsInGreatShape(a),IsWorthTheMoney(c),(exists a (IsInGreatShape(a)) & (forall a (forall c (IsInGreatShape(a) -> IsWorthTheMoney(c)))) & (forall a (forall c (IsWorthTheMoney(c) -> IsInGreatShape(a))))) -> (forall c (IsWorthTheMoney(c))),(exists a (IsInGreatShape(a)) & (forall e (forall f (IsInGreatShape(e) -> IsWorthTheMoney(f)))) & (forall g (forall h (IsWorthTheMoney(g) -> IsInGreatShape(h))))) -> (exists c (IsWorthTheMoney(c))),Valid
30,0,fallacy of credibility,Albert Einstein was extremely impressed with this theory., Albert Einstein was extremely impressed with this theory.  , This theory is impressive.,"IsImpressed(b, a)",IsImpressive(a),"[('IsImpressed(b, a)', 'IsImpressive(a)')]","[(' this theory', ' This theory')]",[],"IsImpressed(b, a)",IsImpressive(a),"(IsImpressed(b, a) & (forall a (forall b (IsImpressed(b, a) -> IsImpressive(a))))) -> (IsImpressive(a))","(exists a (exists b (IsImpressed(b, a))) & (forall e (forall f (forall d (IsImpressed(d,e) -> IsImpressive(f)))))) -> (exists a (IsImpressive(a)))",Valid
31,0,false causality,“I sneezed exactly at the same time the power went off. My sneeze must’ve done something to make the power go off. “," ""I sneezed exactly at the same time the power went off."""," ""My sneeze caused the power to go off.""","Sneezed(b),  PowerWentOff(a)","Caused(c, a),  PowerWentOff(a)","[('Caused(c, a)', 'Sneezed(b)')]","[(' power', ' the power')]",[],Sneezed(b) and PowerWentOff(a),"Caused(c, a) and PowerWentOff(a)","(Sneezed(b) and PowerWentOff(a) & (forall a (forall c (forall b (Caused(c, a) -> Sneezed(b)))))) -> (Caused(c, a) and PowerWentOff(a))","(exists a (exists b (Sneezed(b) and PowerWentOff(a))) & (forall g (forall e (forall f (Caused(e,f) -> Sneezed(g)))))) -> (exists a (exists c (Caused(c, a) and PowerWentOff(a))))",LF
32,0,faulty generalization,"It’s getting late, and we still have to decide on the school budget. What do you say we just leave it as is and we can call it a night?", It is getting late., The school budget should be left as it is.,IsGettingLate(a),IsLeftAsIs(b),[],[],[],IsGettingLate(a),IsLeftAsIs(b),(IsGettingLate(a)) -> (IsLeftAsIs(b)),(exists a (IsGettingLate(a))) -> (exists b (IsLeftAsIs(b))),LF
33,0,ad hominem,"Speaker 1 (Democrat): “Donald Trump is a known adulterer. It reflects badly on his character, and suggests he might not be trustworthy.”
Speaker 2 (Republican): “What about Bill Clinton? You didn’t seem to care when he cheated.”"," ""Donald Trump is a known adulterer."""," ""Donald Trump might not be trustworthy.""",IsKnownAdulterer(a),MightNotBeTrustworthy(a),"[('IsKnownAdulterer(a)', 'MightNotBeTrustworthy(a)')]","[(' Donald Trump', ' Donald Trump')]",[],IsKnownAdulterer(a),MightNotBeTrustworthy(a),(IsKnownAdulterer(a) & (forall a (IsKnownAdulterer(a) -> MightNotBeTrustworthy(a)))) -> (MightNotBeTrustworthy(a)),(exists a (IsKnownAdulterer(a)) & (forall c (IsKnownAdulterer(c) -> MightNotBeTrustworthy(c)))) -> (exists a (MightNotBeTrustworthy(a))),Valid
34,0,ad hominem,"I hope I presented my argument clearly.  Now, my opponent will attempt to refute my argument by his own fallacious, incoherent, illogical version of history."," ""My opponent's version of history is fallacious, incoherent, and illogical.""  "," ""My opponent will attempt to refute my argument with a faulty version of history.""","IsFallacious(a),  IsIncoherent(a),  IsIllogical(a)","WillAttemptRefute(b, c),  IsFaulty(d)","[('IsFallacious(a)', 'WillAttemptRefute(b, c)'), ('IsFallacious(a)', '  IsFaulty(d)'), ('  IsIncoherent(a)', '  IsFaulty(d)'), ('  IsIllogical(a)', 'WillAttemptRefute(b, c)'), ('  IsIllogical(a)', '  IsFaulty(d)')]",[],"[("" My opponent's version of history"", ' My opponent')]",IsFallacious(a) and IsIncoherent(a) and IsIllogical(a),"WillAttemptRefute(b, c) and IsFaulty(d)","(exists a (IsFallacious(a) and IsIncoherent(a) and IsIllogical(a)) & (forall a (forall b (forall c (IsFallacious(a) -> WillAttemptRefute(b, c))))) & (forall a (forall d (IsFallacious(a) ->   IsFaulty(d)))) & (forall a (forall d (  IsIncoherent(a) ->   IsFaulty(d)))) & (forall a (forall b (forall c (  IsIllogical(a) -> WillAttemptRefute(b, c))))) & (forall a (forall d (  IsIllogical(a) ->   IsFaulty(d))))) -> (forall b (WillAttemptRefute(b, c) and IsFaulty(d)))","(exists a (IsFallacious(a) and IsIncoherent(a) and IsIllogical(a)) & (forall g (forall e (forall f (IsFallacious(e) -> WillAttemptRefute(f,g))))) & (forall i (forall h (IsFallacious(h) ->   IsFaulty(i)))) & (forall k (forall j (  IsIncoherent(j) ->   IsFaulty(k)))) & (forall l (forall n (forall m (  IsIllogical(l) -> WillAttemptRefute(m,n))))) & (forall p (forall o (  IsIllogical(o) ->   IsFaulty(p))))) -> (exists b (exists d (exists c (WillAttemptRefute(b, c) and IsFaulty(d)))))",Valid
35,0,false causality,"Every time we sacrifice virgins, it rains. Therefore, sacrificing virgins causes it to rain.", We sacrifice virgins and it rains.  , Sacrificing virgins causes rain.,IsSacrificed(a),"IsSacrificed(a),  CausesRain(a)",[],"[(' Virgins', ' Virgins')]",[],IsSacrificed(a),IsSacrificed(a) and CausesRain(b),(IsSacrificed(a)) -> (IsSacrificed(a) and CausesRain(b)),(exists a (IsSacrificed(a))) -> (exists a (exists b (IsSacrificed(a) and CausesRain(b)))),LF
36,0,ad hominem,"Salesman: This car gets better than average gas mileage and is one of the most reliable cars according to Consumer Reports.
Will: I doubt it—you obviously just want to sell me that car.
", The car gets better than average gas mileage and is one of the most reliable cars according to Consumer Reports., The salesman just wants to sell Will that car.,"GetsBetterThan(a, b),  IsMostReliable(a),  AccordingToConsumerReports(a, c)","WantsToSell(d, f, e)",[],[],[],"GetsBetterThan(a, b) and IsMostReliable(a) and AccordingToConsumerReports(a, c)","WantsToSell(d, f, e)","(GetsBetterThan(a, b) and IsMostReliable(a) and AccordingToConsumerReports(a, c)) -> (WantsToSell(d, f, e))","(exists a (exists b (exists c (GetsBetterThan(a, b) and IsMostReliable(a) and AccordingToConsumerReports(a, c))))) -> (exists e (exists f (exists d (WantsToSell(d, f, e)))))",LF
37,0,fallacy of relevance,Labor unions in America are just as bad as Russia under Stalin!, Labor unions in America are bad.  , Labor unions in America are like Russia under Stalin.,"AreInAmerica(a),  AreBad(a)","AreLike(a, b)","[('AreInAmerica(a)', 'AreLike(a, b)'), ('AreLike(a, b)', 'AreInAmerica(a)')]","[(' Labor unions in America', ' Labor unions'), (' Labor unions in America', ' America')]",[],AreInAmerica(a) and AreBad(a),"AreLike(a, b)","(AreInAmerica(a) and AreBad(a) & (forall a (forall b (AreInAmerica(a) -> AreLike(a, b)))) & (forall a (forall b (AreLike(a, b) -> AreInAmerica(a))))) -> (AreLike(a, b))","(exists a (AreInAmerica(a) and AreBad(a)) & (forall e (forall f (AreInAmerica(e) -> AreLike(e,f)))) & (forall g (forall h (AreLike(g,h) -> AreInAmerica(g))))) -> (exists a (exists b (AreLike(a, b))))",Valid
38,0,ad populum,"""Everyone was driving over the speed limit, so I shouldn't have gotten a ticket for it!"" is an example of which logical fallacy?", Everyone was driving over the speed limit., I shouldn't have gotten a ticket for driving over the speed limit.,DrivingOverSpeedLimit(b),"DrivingOverSpeedLimit(c),  ReceivedTicket(c, d)",[],"[(' speed limit', ' the speed limit')]",[],DrivingOverSpeedLimit(b),"DrivingOverSpeedLimit(c) and ReceivedTicket(c, d)","(DrivingOverSpeedLimit(b)) -> (DrivingOverSpeedLimit(c) and ReceivedTicket(c, d))","(exists b (DrivingOverSpeedLimit(b))) -> (exists c (exists d (DrivingOverSpeedLimit(c) and ReceivedTicket(c, d))))",LF
39,0,ad hominem,Why would you trust Paris Hilton to sell health food? She drinks and parties and has multiple partners.," Paris Hilton drinks, parties, and has multiple partners.  ", Paris Hilton is untrustworthy to sell health food.,"Drinks(a),  Parties(a),  HasMultiplePartners(a)","IsUntrustworthy(a),  SellsHealthFood(a)",[],"[(' Paris Hilton', ' Paris Hilton')]",[],Drinks(a) and Parties(a) and HasMultiplePartners(a),IsUntrustworthy(a) and ~SellsHealthFood(a),(Drinks(a) and Parties(a) and HasMultiplePartners(a)) -> (IsUntrustworthy(a) and ~SellsHealthFood(a)),(exists a (Drinks(a) and Parties(a) and HasMultiplePartners(a))) -> (exists a (IsUntrustworthy(a) and ~SellsHealthFood(a))),LF
40,0,false causality,"“Yesterday, I walked under a ladder with an open umbrella indoors while spilling salt in front of a black cat. And I forgot to knock on wood with my lucky dice. That must be why I’m having such a bad day today. It’s bad luck.”"," ""I walked under a ladder with an open umbrella indoors, spilled salt in front of a black cat, and forgot to knock on wood with lucky dice."""," ""Bad luck causes a bad day.""","WalkedUnder(a, b),  HasOpenUmbrella(c),  Indoors(c),  SpilledSalt(a, d),  InFrontOfBlackCat(d, e),  ForgotToKnock(a, f),  HasLuckyDice(a, g)","IsBad(h),  Causes(h, i),  IsBad(i)","[('WalkedUnder(a, b)', 'IsBad(h)'), ('WalkedUnder(a, b)', '  Causes(h, i)'), ('WalkedUnder(a, b)', '  IsBad(i)'), ('  SpilledSalt(a, d)', 'IsBad(h)'), ('  ForgotToKnock(a, f)', 'IsBad(h)')]",[],[],"WalkedUnder(a, b) and HasOpenUmbrella(c) and Indoors(c) and SpilledSalt(a, d) and InFrontOfBlackCat(d, e) and ForgotToKnock(a, f) and HasLuckyDice(a, g)","IsBad(h) and Causes(h, i) and IsBad(i)","(WalkedUnder(a, b) and HasOpenUmbrella(c) and Indoors(c) and SpilledSalt(a, d) and InFrontOfBlackCat(d, e) and ForgotToKnock(a, f) and HasLuckyDice(a, g) & (forall h (forall a (forall b (WalkedUnder(a, b) -> IsBad(h))))) & (forall i (forall h (forall a (forall b (WalkedUnder(a, b) ->   Causes(h, i)))))) & (forall i (forall a (forall b (WalkedUnder(a, b) ->   IsBad(i))))) & (forall h (forall a (forall d (  SpilledSalt(a, d) -> IsBad(h))))) & (forall h (forall a (forall f (  ForgotToKnock(a, f) -> IsBad(h)))))) -> (IsBad(h) and Causes(h, i) and IsBad(i))","(exists e (exists d (exists g (exists a (exists b (exists f (exists c (WalkedUnder(a, b) and HasOpenUmbrella(c) and Indoors(c) and SpilledSalt(a, d) and InFrontOfBlackCat(d, e) and ForgotToKnock(a, f) and HasLuckyDice(a, g)))))))) & (forall k (forall l (forall j (WalkedUnder(j,k) -> IsBad(l))))) & (forall n (forall m (forall o (forall p (WalkedUnder(m,n) ->   Causes(o,p)))))) & (forall q (forall r (forall s (WalkedUnder(q,r) ->   IsBad(s))))) & (forall u (forall v (forall t (  SpilledSalt(t,u) -> IsBad(v))))) & (forall w (forall x (forall y (  ForgotToKnock(w,x) -> IsBad(y)))))) -> (exists i (exists h (IsBad(h) and Causes(h, i) and IsBad(i))))",Valid
41,0,faulty generalization,"A car makes less pollution than a bus. Therefore, cars are less of a pollution problem than buses"," ""A car makes less pollution than a bus.""  "," ""Cars are less of a pollution problem than buses.""","MakesLessPollutionThan(a, b)","IsLessOfPollutionProblemThan(c, e)",[],[],"[(' A car', ' Cars'), (' a bus', ' buses')]","MakesLessPollutionThan(a, b)","IsLessOfPollutionProblemThan(c, e)","(exists b (exists a (MakesLessPollutionThan(a, b)))) -> (forall e (forall c (IsLessOfPollutionProblemThan(c, e))))","(exists a (exists b (MakesLessPollutionThan(a, b)))) -> (exists e (exists c (IsLessOfPollutionProblemThan(c, e))))",LF
42,0,appeal to emotion,"Preys on people’s emotions and sensitivities, can turn into a slippery slope"," ""Preys on people's emotions and sensitivities""  "," ""Preying on people's emotions and sensitivities can become a slippery slope""","PreysOn(a),  PreysOn(b)","PreysOn(a),  PreysOn(b),  IsSlipperySlope(c)",[],"[("" People's emotions"", "" People's emotions""), (' sensitivities', ' sensitivities')]",[],PreysOn(a) and PreysOn(b),(PreysOn(a) and PreysOn(b)) and IsSlipperySlope(c),(PreysOn(a) and PreysOn(b)) -> ((PreysOn(a) and PreysOn(b)) and IsSlipperySlope(c)),(exists a (exists b (PreysOn(a) and PreysOn(b)))) -> (exists a (exists b (exists c ((PreysOn(a) and PreysOn(b)) and IsSlipperySlope(c))))),
43,0,fallacy of logic,"Bats are mammals. Bats can fly. Pigs are also mammals, therefore pigs can fly."," ""Bats are mammals and bats can fly.""  "," ""Pigs can fly.""","IsMammal(b),  CanFly(b)",CanFly(a),[],"[(' Pigs', ' mammals')]",[],IsMammal(b) and CanFly(b),CanFly(a),(IsMammal(b) and CanFly(b)) -> (CanFly(a)),(exists b (IsMammal(b) and CanFly(b))) -> (exists a (CanFly(a))),Valid
44,0,intentional,The Geo Metro is a superior car because it averages 43 miles per gallon., The Geo Metro averages 43 miles per gallon.  , The Geo Metro is a superior car.,Averages43MilesPerGallon(a),IsSuperiorCar(a),[],"[(' The Geo Metro', ' The Geo Metro')]",[],Averages43MilesPerGallon(a),IsSuperiorCar(a),(Averages43MilesPerGallon(a)) -> (IsSuperiorCar(a)),(exists a (Averages43MilesPerGallon(a))) -> (exists a (IsSuperiorCar(a))),LF
45,0,fallacy of relevance,"“While you may have concerns about my votes about the environment, I can assure you that I am an open minded individual. What we should really discuss is my record on votes that expanded educational opportunities for all children."""," ""The speaker is an open-minded individual and has a record on votes that expanded educational opportunities for all children."""," ""Concerns about the speaker's votes about the environment are not important.""","IsOpenMinded(a),  HasRecordOnVotes(a),  ExpandsEducationalOpportunities(c, d)","ConcernsVotesEnvironment(f, g)","[('ConcernsVotesEnvironment(f, g)', '  HasRecordOnVotes(a)')]",[],[],"IsOpenMinded(a) and HasRecordOnVotes(a) and ExpandsEducationalOpportunities(c, d)","ConcernsVotesEnvironment(f, g) and ~IsImportant(f)","(IsOpenMinded(a) and HasRecordOnVotes(a) and ExpandsEducationalOpportunities(c, d) & (forall g (forall a (forall f (ConcernsVotesEnvironment(f, g) ->   HasRecordOnVotes(a)))))) -> (ConcernsVotesEnvironment(f, g) and ~IsImportant(f))","(exists a (exists c (exists d (IsOpenMinded(a) and HasRecordOnVotes(a) and ExpandsEducationalOpportunities(c, d)))) & (forall i (forall h (forall j (ConcernsVotesEnvironment(h,i) ->   HasRecordOnVotes(j)))))) -> (exists g (exists f (ConcernsVotesEnvironment(f, g) and ~IsImportant(f))))",LF
46,0,intentional,"Fish are the easiest pets to keep; they are inexpensive and require no maintenance at all. Plus, they are really pretty and soothing to watch."," Fish are the easiest pets to keep, they are inexpensive and require no maintenance.  ", Fish are the best pets to have.,"AreEasiestToKeep(a),  AreInexpensive(a),  RequireNoMaintenance(a)",AreBestToHave(a),"[('AreEasiestToKeep(a)', 'AreBestToHave(a)')]","[(' Fish', ' Fish'), (' pets', ' pets')]","[(' Fish', ' pets'), (' pets', ' Fish')]",AreEasiestToKeep(a) and AreInexpensive(a) and RequireNoMaintenance(a),AreBestToHave(a),(AreEasiestToKeep(a) and AreInexpensive(a) and RequireNoMaintenance(a) & (forall a (AreEasiestToKeep(a) -> AreBestToHave(a)))) -> (AreBestToHave(a)),(exists a (AreEasiestToKeep(a) and AreInexpensive(a) and RequireNoMaintenance(a)) & (forall c (AreEasiestToKeep(c) -> AreBestToHave(c)))) -> (exists a (AreBestToHave(a))),Valid
47,0,intentional,I am only slightly obese.  That is perfectly normal here in America.," ""Being slightly obese is perfectly normal in America.""  "," ""Being slightly obese is normal in America.""","IsSlightlyObese(x),  IsNormalIn(a, x)","IsSlightlyObese(x),  IsNormalIn(a, x)",[],"[(' America', ' America')]",[],"IsSlightlyObese(x) and IsNormalIn(a, x)","IsSlightlyObese(x) and IsNormalIn(a, x)","(IsSlightlyObese(x) and IsNormalIn(a, x)) -> (IsSlightlyObese(x) and IsNormalIn(a, x))","(exists a (exists x (IsSlightlyObese(x) and IsNormalIn(a, x)))) -> (exists a (exists x (IsSlightlyObese(x) and IsNormalIn(a, x))))",Valid
48,0,ad populum,"Most people think the world is flat, therefore it is flat.", Most people think the world is flat.  , The world is flat.,IsThoughtFlat(a),IsFlat(a),"[('IsThoughtFlat(a)', 'IsFlat(a)'), ('IsFlat(a)', 'IsThoughtFlat(a)')]","[(' the world', ' The world')]",[],IsThoughtFlat(a),IsFlat(a),(IsThoughtFlat(a) & (forall a (IsThoughtFlat(a) -> IsFlat(a))) & (forall a (IsFlat(a) -> IsThoughtFlat(a)))) -> (IsFlat(a)),(exists a (IsThoughtFlat(a)) & (forall d (IsThoughtFlat(d) -> IsFlat(d))) & (forall e (IsFlat(e) -> IsThoughtFlat(e)))) -> (exists a (IsFlat(a))),Valid
49,0,appeal to emotion,You have to give me a passing grade. I spent 150 hours on that project and missed every party this quarter.," ""I spent 150 hours on that project and missed every party this quarter."""," ""You have to give me a passing grade.""","Spent150HoursOn(a, b),  Missed(a, c)","Give(e, f, g)",[],[],[],"Spent150HoursOn(a, b) and Missed(a, c)","Give(e, f, g)","(Spent150HoursOn(a, b) and Missed(a, c)) -> (Give(e, f, g))","(exists a (exists b (exists c (Spent150HoursOn(a, b) and Missed(a, c))))) -> (exists g (exists e (exists f (Give(e, f, g)))))",LF
50,0,ad populum,"I guess I should buy my 12 year old daughter an iPhone. Everyone at her school has one, and I want her to fit in with the other kids.", Everyone at the daughter's school has an iPhone.  , You should buy the 12-year-old daughter an iPhone.,HasIPhone(b),"BuyIPhone(d, a),  Is12YearsOld(e)",[],"[(' iPhone', ' iPhone')]","[(' Everyone', ' You'), (' Everyone', ' 12-year-old daughter')]",HasIPhone(b),"Is12YearsOld(e) and BuyIPhone(d, a)","(exists b (HasIPhone(b))) -> (forall e (forall d (Is12YearsOld(e) and BuyIPhone(d, a))))","(exists b (HasIPhone(b))) -> (exists a (exists e (exists d (Is12YearsOld(e) and BuyIPhone(d, a)))))",LF
51,0,intentional,Kerry’s plan will raise taxes by at least $900 billion his first hundred days., Kerry's plan will raise taxes by at least $900 billion in the first hundred days.  , Taxes will increase significantly under Kerry's plan.,"WillRaiseTaxesBy(a, c)","WillIncreaseSignificantly(b, a)",[],"[("" Kerry's plan"", "" Kerry's plan""), (' taxes', ' Taxes')]",[],"WillRaiseTaxesBy(a, c)","WillIncreaseSignificantly(b, a)","(WillRaiseTaxesBy(a, c)) -> (WillIncreaseSignificantly(b, a))","(exists a (exists c (WillRaiseTaxesBy(a, c)))) -> (exists a (exists b (WillIncreaseSignificantly(b, a))))",LF
52,0,fallacy of extension,"If you told a person, ""I think we should all stay inside to bend the curve of COVID-19"" and they replied, ""so I guess you want people to lose their jobs then,"" what logical fallacy are they using?", You want people to lose their jobs.  , Staying inside to bend the curve of COVID-19 causes people to lose their jobs.,"WantsToLoseJob(c, a)","BendsCurveOfCOVID(d),  CausesToLoseJob(a, b)",[],"[(' people', ' people'), (' their jobs', ' their jobs')]","[(' You', ' people'), (' their jobs', ' people')]","WantsToLoseJob(c, a)","BendsCurveOfCOVID(d) and CausesToLoseJob(a, b)","(forall a (exists c (WantsToLoseJob(c, a)))) -> (exists b (forall a (BendsCurveOfCOVID(d) and CausesToLoseJob(a, b))))","(exists a (exists c (WantsToLoseJob(c, a)))) -> (exists a (exists b (exists d (BendsCurveOfCOVID(d) and CausesToLoseJob(a, b)))))",LF
53,0,appeal to emotion,"Power lines cause cancer. I met a little boy with cancer who lived just 20 miles from a power line who looked into my eyes and said, in his weak voice, “Please do whatever you can so that other kids won’t have to go through what I am going through.” I urge you to vote for this bill to tear down all power lines and replace them with monkeys on treadmills.", Power lines cause cancer.  , Vote for this bill to tear down all power lines and replace them with monkeys on treadmills.,CauseCancer(a),"TearsDown(d),  Replaces(d, e)",[],[],"[(' Power lines', ' all power lines')]",CauseCancer(a),"VoteFor(c) and (TearsDown(d) and Replaces(d, e))","(exists a (CauseCancer(a))) -> (forall d (VoteFor(c) and (TearsDown(d) and Replaces(d, e))))","(exists a (CauseCancer(a))) -> (exists e (exists c (exists d (VoteFor(c) and (TearsDown(d) and Replaces(d, e))))))",LF
54,0,ad hominem,"Student: Hey, Professor Moore, we shouldn't have to read this book by Freud. Everyone knows he used cocaine.", Freud used cocaine.  , We shouldn't have to read a book by Freud.,UsedCocaine(a),IsByFreud(b),[],[],[],UsedCocaine(a),IsByFreud(b) and ~ShouldRead(b),(UsedCocaine(a)) -> (IsByFreud(b) and ~ShouldRead(b)),(exists a (UsedCocaine(a))) -> (exists b (IsByFreud(b) and ~ShouldRead(b))),LF
55,0,false causality,"Our house was burglarized right after that new family moved in next door. Therefore, that new family must have been involved.", The house was burglarized after the new family moved in next door.  , The new family was involved in the burglary.,"WasBurglarized(b),  IsNextDoor(b, c),  MovedIn(a, c)","InvolvedIn(a, d)","[('  MovedIn(a, c)', 'InvolvedIn(a, d)'), ('InvolvedIn(a, d)', '  MovedIn(a, c)')]","[(' the new family', ' The new family')]",[],"WasBurglarized(b) and IsNextDoor(b, c) and MovedIn(a, c)","InvolvedIn(a, d)","(WasBurglarized(b) and IsNextDoor(b, c) and MovedIn(a, c) & (forall a (forall c (forall d (  MovedIn(a, c) -> InvolvedIn(a, d))))) & (forall a (forall c (forall d (InvolvedIn(a, d) ->   MovedIn(a, c)))))) -> (InvolvedIn(a, d))","(exists a (exists b (exists c (WasBurglarized(b) and IsNextDoor(b, c) and MovedIn(a, c)))) & (forall g (forall h (forall f (  MovedIn(f,g) -> InvolvedIn(f,h))))) & (forall k (forall i (forall j (InvolvedIn(i,j) ->   MovedIn(i,k)))))) -> (exists a (exists d (InvolvedIn(a, d))))",Valid
56,0,circular reasoning,"Witchcraft remains our most urgent spiritual problem because it threatens
our very souls.", Witchcraft is our most urgent spiritual problem.  , Witchcraft threatens our souls.,"IsSpiritualProblem(a),  IsMostUrgent(a)","Threatens(a, c)",[],"[(' Witchcraft', ' Witchcraft')]",[],IsSpiritualProblem(a) and IsMostUrgent(a),"Threatens(a, c)","(IsSpiritualProblem(a) and IsMostUrgent(a)) -> (Threatens(a, c))","(exists a (IsSpiritualProblem(a) and IsMostUrgent(a))) -> (exists a (exists c (Threatens(a, c))))",LF
57,0,false dilemma,"Senator Jill: ""We'll have to cut education funding this year.""
Senator Bill: ""Why?""
Senator Jill: ""Well, either we cut the social programs or we live with a huge deficit and we can't live with the deficit."""," ""We can't live with a huge deficit.""  "," ""We have to cut education funding this year""",HasHugeDeficit(a),HasToCut(c),[],[],[],"HasHugeDeficit(a) and ~CanLiveWith(a,b)",HasToCut(c),"(HasHugeDeficit(a) and ~CanLiveWith(a,b)) -> (HasToCut(c))","(exists a (exists b (HasHugeDeficit(a) and ~CanLiveWith(a,b)))) -> (exists c (HasToCut(c)))",LF
58,0,appeal to emotion,"""You'll make the right decision because you have something that not many people do: you have heart.""?"," ""You have heart."""," ""You'll make the right decision.""",HaveHeart(a),WillMakeRightDecision(a),"[('HaveHeart(a)', 'WillMakeRightDecision(a)'), ('WillMakeRightDecision(a)', 'HaveHeart(a)')]","[(' You', ' You')]",[],HaveHeart(a),WillMakeRightDecision(a),(HaveHeart(a) & (forall a (HaveHeart(a) -> WillMakeRightDecision(a))) & (forall a (WillMakeRightDecision(a) -> HaveHeart(a)))) -> (WillMakeRightDecision(a)),(exists a (HaveHeart(a)) & (forall d (HaveHeart(d) -> WillMakeRightDecision(d))) & (forall e (WillMakeRightDecision(e) -> HaveHeart(e)))) -> (exists a (WillMakeRightDecision(a))),Valid
59,0,faulty generalization,Christine has a terrible experience with a boyfriend. She decides that all boys are mean. This is an example of which logical fallacy?," ""Christine had a terrible experience with a boyfriend.""  "," ""All boys are mean.""","HadTerribleExperience(a, b),  IsWith(c, b)","IsBoy(d),  IsMean(d)","[('HadTerribleExperience(a, b)', '  IsMean(d)'), ('  IsWith(c, b)', 'IsBoy(d)'), ('IsBoy(d)', '  IsWith(c, b)')]",[],[],"HadTerribleExperience(a, b) and IsWith(c, b)",IsBoy(d) and IsMean(d),"(HadTerribleExperience(a, b) and IsWith(c, b) & (forall a (forall b (forall d (HadTerribleExperience(a, b) ->   IsMean(d))))) & (forall c (forall d (forall b (  IsWith(c, b) -> IsBoy(d))))) & (forall b (forall c (forall d (IsBoy(d) ->   IsWith(c, b)))))) -> (IsBoy(d) and IsMean(d))","(exists a (exists b (exists c (HadTerribleExperience(a, b) and IsWith(c, b)))) & (forall g (forall e (forall f (HadTerribleExperience(e,f) ->   IsMean(g))))) & (forall i (forall h (forall j (  IsWith(h,i) -> IsBoy(j))))) & (forall k (forall m (forall l (IsBoy(k) ->   IsWith(l,m)))))) -> (exists d (IsBoy(d) and IsMean(d)))",Valid
60,0,circular reasoning,Smoking pot is against the law because it's wrong; I know it's wrong because it is against the law., Smoking pot is against the law  , Smoking pot is wrong,IsAgainstTheLaw(a),IsWrong(a),"[('IsAgainstTheLaw(a)', 'IsWrong(a)'), ('IsWrong(a)', 'IsAgainstTheLaw(a)')]","[(' Smoking pot', ' Smoking pot')]",[],IsAgainstTheLaw(a),IsWrong(a),(IsAgainstTheLaw(a) & (forall a (IsAgainstTheLaw(a) -> IsWrong(a))) & (forall a (IsWrong(a) -> IsAgainstTheLaw(a)))) -> (IsWrong(a)),(exists a (IsAgainstTheLaw(a)) & (forall c (IsAgainstTheLaw(c) -> IsWrong(c))) & (forall d (IsWrong(d) -> IsAgainstTheLaw(d)))) -> (exists a (IsWrong(a))),Valid
61,0,circular reasoning,"""You can't give me a D because I'm an A student!"""," ""I am an A student.""  "," ""I cannot receive a D grade.""",IsAnAStudent(a),CannotReceiveDGrade(a),[],"[(' I', ' I')]",[],IsAnAStudent(a),CannotReceiveDGrade(a),(IsAnAStudent(a)) -> (CannotReceiveDGrade(a)),(exists a (IsAnAStudent(a))) -> (exists a (CannotReceiveDGrade(a))),LF
62,0,fallacy of logic,People who buy stocks are no different from people who bet on horse racing. They both risk their money with little chance of making a big profit., People who buy stocks risk their money with little chance of making a big profit. People who bet on horse racing risk their money with little chance of making a big profit., People who buy stocks are similar to people who bet on horse racing.,"BuysStocks(a, b),  RisksMoney(a, e),  HasLittleChance(f),  MakesBigProfit(g),  BetsOnHorseRacing(c, d),  RisksMoney(c, e),  HasLittleChance(f),  MakesBigProfit(g)","BuysStocks(a, b),  BetsOnHorseRacing(c, d),  AreSimilar(a, c)","[('BuysStocks(a, b)', '  AreSimilar(a, c)')]","[(' People who buy stocks', ' People who buy stocks'), (' stocks', ' stocks'), (' People who bet on horse racing', ' people who bet on horse racing'), (' horse racing', ' horse racing')]","[(' their money', ' people who bet on horse racing')]","(BuysStocks(a, b) and RisksMoney(a, e) and HasLittleChance(f)) and (~MakesBigProfit(g)) and (BetsOnHorseRacing(c, d) and RisksMoney(c, e) and HasLittleChance(f)) and (~MakesBigProfit(g))","BuysStocks(a, b) and BetsOnHorseRacing(c, d) and AreSimilar(a, c)","(exists e ((BuysStocks(a, b) and RisksMoney(a, e) and HasLittleChance(f)) and (~MakesBigProfit(g)) and (BetsOnHorseRacing(c, d) and RisksMoney(c, e) and HasLittleChance(f)) and (~MakesBigProfit(g))) & (forall a (forall b (forall c (BuysStocks(a, b) ->   AreSimilar(a, c)))))) -> (forall c (BuysStocks(a, b) and BetsOnHorseRacing(c, d) and AreSimilar(a, c)))","(exists e (exists d (exists g (exists a (exists b (exists f (exists c ((BuysStocks(a, b) and RisksMoney(a, e) and HasLittleChance(f)) and (~MakesBigProfit(g)) and (BetsOnHorseRacing(c, d) and RisksMoney(c, e) and HasLittleChance(f)) and (~MakesBigProfit(g))))))))) & (forall k (forall i (forall j (BuysStocks(i,j) ->   AreSimilar(i,k)))))) -> (exists a (exists b (exists d (exists c (BuysStocks(a, b) and BetsOnHorseRacing(c, d) and AreSimilar(a, c))))))",
63,0,appeal to emotion,"I cannot get a job because the public education system failed me;  I have to steal to  survive.  It is society's fault, not mine.", The public education system failed me., I cannot get a job and I have to steal to survive because it is society's fault.,"Failed(a, b)","CannotGetJob(a),  HasToStealToSurvive(a),  IsSociety'sFault(d)","[('CannotGetJob(a)', 'Failed(a, b)'), (""  IsSociety'sFault(d)"", 'Failed(a, b)')]","[(' me', ' I')]",[],"Failed(a, b)",CannotGetJob(a) and HasToStealToSurvive(a) and IsSociety'sFault(d),"(Failed(a, b) & (forall a (forall b (CannotGetJob(a) -> Failed(a, b)))) & (forall a (forall b (forall d (  IsSociety'sFault(d) -> Failed(a, b)))))) -> (CannotGetJob(a) and HasToStealToSurvive(a) and IsSociety'sFault(d))","(exists a (exists b (Failed(a, b))) & (forall g (forall f (CannotGetJob(f) -> Failed(f,g)))) & (forall i (forall h (forall j (  IsSociety'sFault(h) -> Failed(i,j)))))) -> (exists a (exists d (CannotGetJob(a) and HasToStealToSurvive(a) and IsSociety'sFault(d))))",
64,0,faulty generalization,"Trump presents a dark image of America if Clinton is elected, with “Syrian refugees flooding in, illegal immigrants convicted of crimes staying.”", Clinton's election will result in Syrian refugees flooding in and illegal immigrants convicted of crimes staying.  , America will become dark if Clinton is elected.,"WillResultInFloodingIn(b),  IsConvictedOfCrimes(c),  IsStaying(c)","WillBecomeDark(e),  IsElected(f)",[],[],[],WillResultInFloodingIn(b) and (IsConvictedOfCrimes(c) and IsStaying(c)),IsElected(f) and WillBecomeDark(e),(WillResultInFloodingIn(b) and (IsConvictedOfCrimes(c) and IsStaying(c))) -> (IsElected(f) and WillBecomeDark(e)),(exists b (exists c (WillResultInFloodingIn(b) and (IsConvictedOfCrimes(c) and IsStaying(c))))) -> (exists e (exists f (IsElected(f) and WillBecomeDark(e)))),LF
65,0,ad hominem,"Charlie: Fast food is filled with salt, fat, and added sugars. We need better regulation of the industry.
Bob: That my be, but you're such a hypocrite! I saw you devour a Triple-Baconator, super-sized fries, and 64oz of soda yesterday!"," ""Charlie devoured a Triple-Baconator, super-sized fries, and 64oz of soda yesterday."""," ""Better regulation of the fast food industry is needed.""","Devoured(a, b),  Devoured(a, c),  Devoured(a, d)","IsBetterRegulationNeeded(e, f)",[],[],"[(' Triple-Baconator', ' fast food industry'), (' super-sized fries', ' fast food industry')]","Devoured(a, b) and Devoured(a, c) and Devoured(a, d)","IsBetterRegulationNeeded(e, f)","(exists c (exists b (Devoured(a, b) and Devoured(a, c) and Devoured(a, d)))) -> (forall f (IsBetterRegulationNeeded(e, f)))","(exists a (exists b (exists d (exists c (Devoured(a, b) and Devoured(a, c) and Devoured(a, d)))))) -> (exists e (exists f (IsBetterRegulationNeeded(e, f))))",LF
66,0,faulty generalization,Christine has a terrible experience with a boyfriend. She decides that all boys are mean., Christine had a terrible experience with a boyfriend.  , All boys are mean.,"HadTerribleExperience(a,b),  WithBoyfriend(b,c)",IsMean(d),[],[],"[(' boyfriend', ' All boys')]","HadTerribleExperience(a,b) and WithBoyfriend(b,c)",IsBoy(d) and IsMean(d),"(exists c (HadTerribleExperience(a,b) and WithBoyfriend(b,c))) -> (forall d (IsBoy(d) and IsMean(d)))","(exists a (exists b (exists c (HadTerribleExperience(a,b) and WithBoyfriend(b,c))))) -> (exists d (IsBoy(d) and IsMean(d)))",LF
67,0,intentional,"Barbara believes the marketing agency's office is haunted. The cleaning crew once said they heard a other-worldly noise late at night. Since no one could prove that it wasn't a ghost, the office must be haunted.", The marketing agency's office is haunted.  , The office is haunted.,IsHaunted(a),IsHaunted(b),[],[],"[("" The marketing agency's office"", ' The office')]",IsHaunted(a),IsHaunted(b),(exists a (IsHaunted(a))) -> (forall b (IsHaunted(b))),(exists a (IsHaunted(a))) -> (exists b (IsHaunted(b))),Valid
68,0,ad populum,"I am voting for Pepitone for President because the rest of my family is voting for her, and I don't want to be the only one not doing so."," ""The rest of my family is voting for Pepitone for President.""  "," ""You should vote for Pepitone for President.""","IsVotingFor(c, a),  IsCandidateFor(a, b)","IsVotingFor(d, a),  IsCandidateFor(a, b)",[],"[(' Pepitone', ' Pepitone'), (' President', ' President')]",[],"IsVotingFor(c, a) and IsCandidateFor(a, b)","IsVotingFor(d, a) and IsCandidateFor(a, b)","(IsVotingFor(c, a) and IsCandidateFor(a, b)) -> (IsVotingFor(d, a) and IsCandidateFor(a, b))","(exists a (exists c (exists b (IsVotingFor(c, a) and IsCandidateFor(a, b))))) -> (exists a (exists b (exists d (IsVotingFor(d, a) and IsCandidateFor(a, b)))))",Valid
69,0,fallacy of credibility,"“I admire the president for being a good role model.” REPLY: “But the New York Times says he’s a lousy role model, so you’re wrong.”"," ""The New York Times says the president is a lousy role model.""  "," ""The president is not a good role model.""","Says(b, a),  IsLousyRoleModel(a)",IsNotGoodRoleModel(a),"[('  IsLousyRoleModel(a)', 'IsNotGoodRoleModel(a)'), ('IsNotGoodRoleModel(a)', '  IsLousyRoleModel(a)')]","[(' the president', ' The president')]",[],"Says(b, a) and IsLousyRoleModel(a)",IsNotGoodRoleModel(a),"(Says(b, a) and IsLousyRoleModel(a) & (forall a (  IsLousyRoleModel(a) -> IsNotGoodRoleModel(a))) & (forall a (IsNotGoodRoleModel(a) ->   IsLousyRoleModel(a)))) -> (IsNotGoodRoleModel(a))","(exists a (exists b (Says(b, a) and IsLousyRoleModel(a))) & (forall f (  IsLousyRoleModel(f) -> IsNotGoodRoleModel(f))) & (forall g (IsNotGoodRoleModel(g) ->   IsLousyRoleModel(g)))) -> (exists a (IsNotGoodRoleModel(a)))",Valid
70,0,faulty generalization,The numbers on gun violence speak for themselves. We should ban guns in the country!," ""The numbers on gun violence speak for themselves."""," ""The country should ban guns.""",OnGunViolence(a),"ShouldBan(c, d)",[],[],[],OnGunViolence(a),"ShouldBan(c, d)","(OnGunViolence(a)) -> (ShouldBan(c, d))","(exists a (OnGunViolence(a))) -> (exists c (exists d (ShouldBan(c, d))))",LF
71,0,false causality,"“The temperature has dropped this morning, and I also have a headache. Therefore, the cold weather must be causing my headache. “"," ""The temperature has dropped this morning."""," ""The cold weather causes my headache.""","HasDropped(a),  IsThisMorning(a)","IsCold(b),  Causes(b, c)","[('HasDropped(a)', 'IsCold(b)'), ('IsCold(b)', 'HasDropped(a)'), ('HasDropped(a)', '  Causes(b, c)'), ('  Causes(b, c)', 'HasDropped(a)')]",[],[],HasDropped(a) and IsThisMorning(a),"IsCold(b) and Causes(b, c)","(HasDropped(a) and IsThisMorning(a) & (forall a (forall b (HasDropped(a) -> IsCold(b)))) & (forall a (forall b (IsCold(b) -> HasDropped(a)))) & (forall a (forall b (forall c (HasDropped(a) ->   Causes(b, c))))) & (forall a (forall b (forall c (  Causes(b, c) -> HasDropped(a)))))) -> (IsCold(b) and Causes(b, c))","(exists a (HasDropped(a) and IsThisMorning(a)) & (forall e (forall d (HasDropped(d) -> IsCold(e)))) & (forall g (forall f (IsCold(f) -> HasDropped(g)))) & (forall i (forall h (forall j (HasDropped(h) ->   Causes(i,j))))) & (forall k (forall m (forall l (  Causes(k,l) -> HasDropped(m)))))) -> (exists b (exists c (IsCold(b) and Causes(b, c))))",Valid
72,0,ad hominem,"My teacher says the Earth is flat, so it definitely is flat."," ""The teacher says the Earth is flat.""  "," ""The Earth is flat.""","SaysFlat(b, a)",IsFlat(a),[],"[(' the Earth', ' The Earth')]",[],"SaysFlat(b, a)",IsFlat(a),"(SaysFlat(b, a)) -> (IsFlat(a))","(exists a (exists b (SaysFlat(b, a)))) -> (exists a (IsFlat(a)))",LF
73,0,equivocation,"The fallacy of equivocation occurs when a key term or phrase in an argument is used in an ambiguous way, with one meaning in one portion of the argument and then another meaning in another portion of the argument.", A key term or phrase in an argument is used in an ambiguous way.  , The fallacy of equivocation occurs.,"IsKeyTermOrPhrase(a),  IsInArgument(a, b),  IsAmbiguous(a)","IsFallacy(c),  IsEquivocation(c)",[],[],[],"IsKeyTermOrPhrase(a) and IsInArgument(a, b) and IsAmbiguous(a)",IsFallacy(c) and IsEquivocation(c),"(IsKeyTermOrPhrase(a) and IsInArgument(a, b) and IsAmbiguous(a)) -> (IsFallacy(c) and IsEquivocation(c))","(exists a (exists b (IsKeyTermOrPhrase(a) and IsInArgument(a, b) and IsAmbiguous(a)))) -> (exists c (IsFallacy(c) and IsEquivocation(c)))",LF
74,0,faulty generalization,When you have too little or unrepresentative data to make claim., You have too little or unrepresentative data.  , You cannot make a claim.,"HaveData(a, b),  IsTooLittle(b),  IsUnrepresentative(b)","MakeClaim(a, c)",[],"[(' You', ' You')]",[],"HaveData(a, b) and (IsTooLittle(b) or IsUnrepresentative(b))","~MakeClaim(a, c)","(HaveData(a, b) and (IsTooLittle(b) or IsUnrepresentative(b))) -> (~MakeClaim(a, c))","(exists a (exists b (HaveData(a, b) and (IsTooLittle(b) or IsUnrepresentative(b))))) -> (exists a (exists c (~MakeClaim(a, c))))",LF
75,0,ad populum,"The majority of people believe advertisers should spend more money on billboards, so billboards are objectively the best form of advertisement."," ""The majority of people believe advertisers should spend more money on billboards.""  "," ""Billboards are the best form of advertisement.""","Believe(b, SpendMoreMoney(c, d, a))","IsBestFormOfAdvertisement(a, e, f)",[],"[(' billboards', ' Billboards')]","[(' billboards', ' advertisement')]","Believe(b, SpendMoreMoney(c, d, a))","IsBestFormOfAdvertisement(a, e, f)","(exists a (Believe(b, SpendMoreMoney(c, d, a)))) -> (forall f (IsBestFormOfAdvertisement(a, e, f)))","(exists a (exists b (exists d (exists c (Believe(b, SpendMoreMoney(c, d, a))))))) -> (exists a (exists e (exists f (IsBestFormOfAdvertisement(a, e, f)))))",
76,0,faulty generalization,"If we ban Hummers because they are bad for the environment, eventually the government will ban all cars, so we should not ban Hummers.", Hummers are bad for the environment  , The government will ban all cars,IsBadForEnvironment(a),"WillBan(c, a)",[],"[(' all cars', ' Hummers')]",[],IsBadForEnvironment(a),"WillBan(c, a)","(IsBadForEnvironment(a)) -> (WillBan(c, a))","(exists a (IsBadForEnvironment(a))) -> (exists a (exists c (WillBan(c, a))))",LF
77,0,ad hominem,"My opponent raised a good point, but can we trust him? I mean he just moved to town only 5 months ago, how much could he really know?"," ""The opponent just moved to town 5 months ago.""  "," ""The opponent cannot be trusted.""","JustMovedTo(a),  MovedTo(a, b)",CannotBeTrusted(c),[],[],[],"JustMovedTo(a) and MovedTo(a, b)",CannotBeTrusted(c),"(JustMovedTo(a) and MovedTo(a, b)) -> (CannotBeTrusted(c))","(exists a (exists b (JustMovedTo(a) and MovedTo(a, b)))) -> (exists c (CannotBeTrusted(c)))",LF
78,0,false dilemma,"Either you can save your money to buy a new car for yourself, or you can just take an Uber around for the rest of your life.", You can save your money to buy a new car for yourself or take an Uber around for the rest of your life.  , Taking an Uber around is the only alternative to buying a new car.,"IsSaved(c),  IsBought(a),  IsFor(d, a),  IsTaken(b),  IsFor(e, b)","IsTaken(b),  IsAlternativeTo(b, a)",[],"[(' new car', ' a new car'), (' an Uber', ' An Uber')]",[],"(IsSaved(c) and IsBought(a) and IsFor(d, a)) or (IsTaken(b) and IsFor(e, b))","IsTaken(b) and IsAlternativeTo(b, a)","((IsSaved(c) and IsBought(a) and IsFor(d, a)) or (IsTaken(b) and IsFor(e, b))) -> (IsTaken(b) and IsAlternativeTo(b, a))","(exists e (exists d (exists a (exists b (exists c ((IsSaved(c) and IsBought(a) and IsFor(d, a)) or (IsTaken(b) and IsFor(e, b)))))))) -> (exists a (exists b (IsTaken(b) and IsAlternativeTo(b, a))))",
79,0,false causality,"Matthieu was the only player on the team who didn't grow a playoff beard, and thus he ended up getting injured.", Matthieu was the only player on the team who didn't grow a playoff beard., Not growing a playoff beard results in getting injured.,"IsPlayerOnTeam(c, d),  DidNotGrowPlayoffBeard(b, a)","DidNotGrowPlayoffBeard(x, a),  GetsInjured(x)",[],"[(' playoff beard', ' Playoff beard')]",[],"IsPlayerOnTeam(b, d) and DidNotGrowPlayoffBeard(b, a)","DidNotGrowPlayoffBeard(x, a) and GetsInjured(x)","(IsPlayerOnTeam(b, d) and DidNotGrowPlayoffBeard(b, a)) -> (DidNotGrowPlayoffBeard(x, a) and GetsInjured(x))","(exists a (exists b (exists d (IsPlayerOnTeam(b, d) and DidNotGrowPlayoffBeard(b, a))))) -> (exists a (exists x (DidNotGrowPlayoffBeard(x, a) and GetsInjured(x))))",LF
80,0,intentional,"John: Members of the UbaTuba White Men's Club are upstanding citizens of the community.
Marvin: Then why are there so many of these members in jail?
John: They were never true UbaTuba White Men's Club members.
Marvin: What’s a true UbaTuba White Men's Club member?
John: Those who don't go to jail.
", There are many members of the UbaTuba White Men's Club in jail.  , True UbaTuba White Men's Club members are upstanding citizens of the community and do not go to jail.,"IsMemberOf(b, c),  IsInJail(b)","IsTrueMember(d),  IsUpstandingCitizen(d),  IsInCommunity(d, e),  DoesNotGoToJail(d)","[('IsTrueMember(d)', 'IsMemberOf(b, c)'), ('  IsUpstandingCitizen(d)', 'IsMemberOf(b, c)')]","[(' jail', ' jail')]","[(' Members', "" True UbaTuba White Men's Club members""), (' Members', ' community'), ("" UbaTuba White Men's Club"", ' community')]","IsMemberOf(b, c) and IsInJail(b)","IsTrueMember(d) and IsUpstandingCitizen(d) and IsInCommunity(d, e) and DoesNotGoToJail(d)","(exists c (exists b (IsMemberOf(b, c) and IsInJail(b))) & (forall c (forall b (forall d (IsTrueMember(d) -> IsMemberOf(b, c))))) & (forall c (forall b (forall d (  IsUpstandingCitizen(d) -> IsMemberOf(b, c)))))) -> (forall e (forall d (IsTrueMember(d) and IsUpstandingCitizen(d) and IsInCommunity(d, e) and DoesNotGoToJail(d))))","(exists b (exists c (IsMemberOf(b, c) and IsInJail(b))) & (forall g (forall h (forall f (IsTrueMember(f) -> IsMemberOf(g,h))))) & (forall k (forall i (forall j (  IsUpstandingCitizen(i) -> IsMemberOf(j,k)))))) -> (exists e (exists d (IsTrueMember(d) and IsUpstandingCitizen(d) and IsInCommunity(d, e) and DoesNotGoToJail(d))))",LF
81,0,faulty generalization,"""Animal experimentation reduces our respect for life. If we don't respect life, we are likely to be more and more tolerant of violent acts like war and murder. Soon our society will become a battlefield in which everyone constantly fears for their lives. It will be the end of civilization. To prevent this terrible consequence, we should make animal experimentation illegal right now."""," ""Animal experimentation reduces our respect for life.""  "," ""Society will become a battlefield""","Reduces(a, b)",IsBattlefield(d),[],[],[],"Reduces(a, b)",IsBattlefield(d),"(Reduces(a, b)) -> (IsBattlefield(d))","(exists a (exists b (Reduces(a, b)))) -> (exists d (IsBattlefield(d)))",LF
82,0,false causality,You know Jane Fonda's exercise videos must be worth the money. Look at the great shape she's in.," ""Jane Fonda is in great shape.""  "," ""Jane Fonda's exercise videos are worth the money.""",IsInGreatShape(a),IsWorthTheMoney(a),[],"[("" Jane Fonda's exercise videos"", ' Jane Fonda')]",[],IsInGreatShape(a),IsWorthTheMoney(a),(IsInGreatShape(a)) -> (IsWorthTheMoney(a)),(exists a (IsInGreatShape(a))) -> (exists a (IsWorthTheMoney(a))),LF
83,0,faulty generalization,"Asians make lousy athletes, but do well at the Math Olympiad.", Asians make lousy athletes and do well at the Math Olympiad.  , Asians excel in math and perform poorly in athletics.,"AreLousyAthletes(a),  DoWellAt(b)","ExcelInMath(a),  PerformPoorlyInAthletics(a)","[('AreLousyAthletes(a)', '  PerformPoorlyInAthletics(a)'), ('  PerformPoorlyInAthletics(a)', 'AreLousyAthletes(a)')]","[(' Asians', ' Asians')]","[(' Math Olympiad', ' math')]",AreLousyAthletes(a) and DoWellAt(b),ExcelInMath(a) and PerformPoorlyInAthletics(a),(AreLousyAthletes(a) and DoWellAt(b) & (forall a (AreLousyAthletes(a) ->   PerformPoorlyInAthletics(a))) & (forall a (  PerformPoorlyInAthletics(a) -> AreLousyAthletes(a)))) -> (ExcelInMath(a) and PerformPoorlyInAthletics(a)),(exists a (exists b (AreLousyAthletes(a) and DoWellAt(b))) & (forall e (AreLousyAthletes(e) ->   PerformPoorlyInAthletics(e))) & (forall f (  PerformPoorlyInAthletics(f) -> AreLousyAthletes(f)))) -> (exists a (ExcelInMath(a) and PerformPoorlyInAthletics(a))),LF
84,0,false dilemma,"“Caldwell Hall is in bad shape. Either we tear it down and put up a new building, or we continue to risk students’ safety. Obviously we shouldn’t risk anyone’s safety, so we must tear the building down.”"," ""Caldwell Hall is in bad shape.""  "," ""We must tear Caldwell Hall down""",IsInBadShape(a),MustTearDown(a),"[('MustTearDown(a)', 'IsInBadShape(a)')]","[(' Caldwell Hall', ' Caldwell Hall')]",[],IsInBadShape(a),MustTearDown(a),(IsInBadShape(a) & (forall a (MustTearDown(a) -> IsInBadShape(a)))) -> (MustTearDown(a)),(exists a (IsInBadShape(a)) & (forall b (MustTearDown(b) -> IsInBadShape(b)))) -> (exists a (MustTearDown(a))),LF
85,0,faulty generalization,Did you really vote for Donald as class treasurer? Didn't you hear that his uncle was imprisoned for embezzling $1.5 million?, Donald's uncle was imprisoned for embezzling $1.5 million.  , You should not vote for Donald as class treasurer.,"WasImprisoned(a),  Embezzled(a, b)","ShouldVoteFor(c, d, e)",[],[],[],"WasImprisoned(a) and Embezzled(a, b)","~ShouldVoteFor(c, d, e)","(WasImprisoned(a) and Embezzled(a, b)) -> (~ShouldVoteFor(c, d, e))","(exists a (exists b (WasImprisoned(a) and Embezzled(a, b)))) -> (exists e (exists c (exists d (~ShouldVoteFor(c, d, e)))))",LF
86,0,fallacy of logic,"If the ozone layer is destroyed, many people will get cancer and suffer from other illnesses.  The ozone layer is being protected, not destroyed.  So, many people will be spared the pain of cancer and other illnesses.", The ozone layer is being protected.  , Many people will be spared the pain of cancer and other illnesses.,IsProtected(a),"IsSparedPain(b),  CausesPain(c),  CausesPain(d)",[],[],[],IsProtected(a),IsSparedPain(b) and ~CausesPain(c) and ~CausesPain(d),(IsProtected(a)) -> (IsSparedPain(b) and ~CausesPain(c) and ~CausesPain(d)),(exists a (IsProtected(a))) -> (exists b (exists d (exists c (IsSparedPain(b) and ~CausesPain(c) and ~CausesPain(d))))),LF
87,0,faulty generalization,"Broccoli has significantly less fat than the leading candy bar! Plus, it's nowhere near as hot as Hot Cheetos!", Broccoli has significantly less fat than the leading candy bar.  , Broccoli is a healthier choice than Hot Cheetos.,"HasSignificantlyLessFatThan(a, c)","IsHealthierChoiceThan(a, d)","[('HasSignificantlyLessFatThan(a, c)', 'IsHealthierChoiceThan(a, d)')]","[(' Broccoli', ' Broccoli')]",[],"HasSignificantlyLessFatThan(a, c)","IsHealthierChoiceThan(a, d)","(HasSignificantlyLessFatThan(a, c) & (forall a (forall c (forall d (HasSignificantlyLessFatThan(a, c) -> IsHealthierChoiceThan(a, d)))))) -> (IsHealthierChoiceThan(a, d))","(exists a (exists c (HasSignificantlyLessFatThan(a, c))) & (forall g (forall e (forall f (HasSignificantlyLessFatThan(e,f) -> IsHealthierChoiceThan(e,g)))))) -> (exists a (exists d (IsHealthierChoiceThan(a, d))))",Valid
88,0,fallacy of relevance,You're complaining because you have to walk to school? I used to have to give my parents my entire paycheck.," ""I had to give my parents my entire paycheck.""  "," ""You should not complain about having to walk to school.""","IsGiven(b, a)","IsWalkingTo(c, d)",[],[],[],"IsGiven(b, a)","IsWalkingTo(c, d) and ~IsComplaining(c)","(IsGiven(b, a)) -> (IsWalkingTo(c, d) and ~IsComplaining(c))","(exists a (exists b (IsGiven(b, a)))) -> (exists c (exists d (IsWalkingTo(c, d) and ~IsComplaining(c))))",LF
89,0,fallacy of extension,Robot 2 (Blue) has been refuting all of Robot 1's (Orange) arguments. Robot 1 launches the above counterargument. What is this fallacy?, Robot 2 (Blue) refutes all of Robot 1's (Orange) arguments.  , Robot 1's counterargument is a fallacy.,"IsBlue(a),  Refutes(a, c)",IsFallacy(d),[],[],[],"IsBlue(a) and Refutes(a, c)",IsFallacy(d),"(IsBlue(a) and Refutes(a, c)) -> (IsFallacy(d))","(exists a (exists c (IsBlue(a) and Refutes(a, c)))) -> (exists d (IsFallacy(d)))",LF
90,0,ad hominem,Personally attacking someone to shift attention away from your views is, Personally attacking someone shifts attention away from views.  , Personally attacking someone is effective for diverting attention.,"IsPersonallyAttacked(a),  ShiftsAttentionFrom(b)","IsPersonallyAttacked(a),  DivertsAttention(c)","[('IsPersonallyAttacked(a)', '  DivertsAttention(c)'), ('IsPersonallyAttacked(a)', '  ShiftsAttentionFrom(b)'), ('  ShiftsAttentionFrom(b)', '  DivertsAttention(c)'), ('  DivertsAttention(c)', '  ShiftsAttentionFrom(b)')]","[(' Someone', ' Someone')]",[],IsPersonallyAttacked(a) and ShiftsAttentionFrom(b),IsPersonallyAttacked(a) and DivertsAttention(c),(IsPersonallyAttacked(a) and ShiftsAttentionFrom(b) & (forall a (forall c (IsPersonallyAttacked(a) ->   DivertsAttention(c)))) & (forall a (forall b (IsPersonallyAttacked(a) ->   ShiftsAttentionFrom(b)))) & (forall b (forall c (  ShiftsAttentionFrom(b) ->   DivertsAttention(c)))) & (forall c (forall b (  DivertsAttention(c) ->   ShiftsAttentionFrom(b))))) -> (IsPersonallyAttacked(a) and DivertsAttention(c)),(exists a (exists b (IsPersonallyAttacked(a) and ShiftsAttentionFrom(b))) & (forall e (forall d (IsPersonallyAttacked(d) ->   DivertsAttention(e)))) & (forall g (forall f (IsPersonallyAttacked(f) ->   ShiftsAttentionFrom(g)))) & (forall i (forall h (  ShiftsAttentionFrom(h) ->   DivertsAttention(i)))) & (forall k (forall j (  DivertsAttention(j) ->   ShiftsAttentionFrom(k))))) -> (exists a (exists c (IsPersonallyAttacked(a) and DivertsAttention(c)))),Valid
91,0,ad hominem,"""She's such a mean teacher and person – that's why she wouldn't raise my grade ONE percent!"""," ""She is a mean teacher and person.""  "," ""She wouldn't raise my grade one percent.""","IsMeanTeacher(a),  IsPerson(a)","WouldNotRaiseGrade(a, d, e)",[],"[(' She', ' She')]","[(' person', ' She')]",IsMeanTeacher(a) and IsPerson(a),"WouldNotRaiseGrade(a, d, e)","(IsMeanTeacher(a) and IsPerson(a)) -> (WouldNotRaiseGrade(a, d, e))","(exists a (IsMeanTeacher(a) and IsPerson(a))) -> (exists a (exists e (exists d (WouldNotRaiseGrade(a, d, e)))))",LF
92,0,appeal to emotion,"If you don't buy the black pencils, you will get made fun of. You will not be chosen for group projects.", Not buying black pencils leads to getting made fun of and not being chosen for group projects.  , You must buy the black pencils.,"DoesNotBuy(a), GetsMadeFunOf, NotChosenFor(b)","Buys(c, a)",[],"[(' Black pencils', ' the black pencils')]",[],,,,,
93,0,faulty generalization,"Jeff's mom is concerned when she finds out that he skipped class one day. She tells him that she is concerned that since he skipped one class, he will start skipping more frequently. Then he will drop out altogether, never graduate or get into college, and end up unemployed and living at home for the rest of his life. What type of fallacy has Jeff's mom committed?", Jeff skipped class one day.  , Jeff will end up unemployed and living at home for the rest of his life.,"SkippedClassOneDay(a, c)","WillBeUnemployed(a),  WillLiveAtHome(a, d),  WillBeForRestOfLife(a, e)",[],"[(' Jeff', ' Jeff')]",[],"SkippedClassOneDay(a, c)","WillBeUnemployed(a) and WillLiveAtHome(a, d) and WillBeForRestOfLife(a, e)","(SkippedClassOneDay(a, c)) -> (WillBeUnemployed(a) and WillLiveAtHome(a, d) and WillBeForRestOfLife(a, e))","(exists a (exists c (SkippedClassOneDay(a, c)))) -> (exists a (exists e (exists d (WillBeUnemployed(a) and WillLiveAtHome(a, d) and WillBeForRestOfLife(a, e)))))",LF
94,0,ad hominem,"How can you tell me I should exercise to lose weight? All you do is sit behind a desk all day. I've never seen you do a lick of exercise.

Identify the logical fallacy commited in this argument."," ""You sit behind a desk all day and don't exercise."""," ""You should not tell me to exercise to lose weight.""","SitsBehindDeskAllDay(a),  DoesNotExercise(a)","ShouldNotTellToExerciseToLoseWeight(a, c)",[],"[(' You', ' You')]",[],SitsBehindDeskAllDay(a) and DoesNotExercise(a),"ShouldNotTellToExerciseToLoseWeight(a, c)","(SitsBehindDeskAllDay(a) and DoesNotExercise(a)) -> (ShouldNotTellToExerciseToLoseWeight(a, c))","(exists a (SitsBehindDeskAllDay(a) and DoesNotExercise(a))) -> (exists a (exists c (ShouldNotTellToExerciseToLoseWeight(a, c))))",LF
95,0,fallacy of logic,"""We both like music, so we should get married."""," ""We both like music.""  "," ""We should get married.""",LikesMusic(a),ShouldGetMarried(a),[],"[(' We', ' We')]",[],LikesMusic(a),ShouldGetMarried(a),(LikesMusic(a)) -> (ShouldGetMarried(a)),(exists a (LikesMusic(a))) -> (exists a (ShouldGetMarried(a))),LF
96,0,ad hominem,"Brandon: We should have tastier lunches!
Jaylen: Don't listen to him! He's a terrible person! I saw him trip another student and steal his lunch money!"," ""Brandon is a terrible person and tripped another student and stole his lunch money."""," ""We should not listen to Brandon.""","IsTerriblePerson(a),  Tripped(a, b),  Stole(a, c)","ShouldNotListenTo(d, a)",[],"[(' Brandon', ' Brandon')]",[],"IsTerriblePerson(a) and Tripped(a, b) and Stole(a, c)","ShouldNotListenTo(d, a)","(IsTerriblePerson(a) and Tripped(a, b) and Stole(a, c)) -> (ShouldNotListenTo(d, a))","(exists a (exists b (exists c (IsTerriblePerson(a) and Tripped(a, b) and Stole(a, c))))) -> (exists a (exists d (ShouldNotListenTo(d, a))))",LF
97,0,ad hominem,Of course Marx' theories about the ideal society are bunk. The guy spent all his time in the library.," ""Marx spent all his time in the library.""  "," ""Marx' theories about the ideal society are bunk.""","SpentInLibrary(a, b, c)","AreBunk(d),  AreAbout(d, e)",[],[],"[(' Marx', "" Marx' theories"")]","SpentInLibrary(a, b, c)","AreAbout(d, e) and AreBunk(d)","(exists a (SpentInLibrary(a, b, c))) -> (forall d (AreAbout(d, e) and AreBunk(d)))","(exists a (exists b (exists c (SpentInLibrary(a, b, c))))) -> (exists e (exists d (AreAbout(d, e) and AreBunk(d))))",LF
98,0,fallacy of relevance,"I'm tailgating her, because she cut me off!", She cut me off.  , I should tailgate her.,"CutOff(b, a)","Tailgate(a, c)",[],"[(' me', ' I')]",[],"CutOff(b, a)","Tailgate(a, c)","(CutOff(b, a)) -> (Tailgate(a, c))","(exists a (exists b (CutOff(b, a)))) -> (exists a (exists c (Tailgate(a, c))))",LF
99,0,faulty generalization,President Petutti ordered a military strike that killed many civilians. He is no different than any other mass murder and he belongs in prison!," ""President Petutti ordered a military strike that killed many civilians.""  "," ""President Petutti is the same as any other mass murderer and belongs in prison.""","OrderedMilitaryStrike(a, b),  KilledCivilians(b, c)","IsMassMurderer(a),  IsSameAs(a, d),  BelongsInPrison(a, e)",[],"[(' President Petutti', ' President Petutti')]",[],"OrderedMilitaryStrike(a, b) and KilledCivilians(b, c)","IsMassMurderer(a) and IsSameAs(a, d) and BelongsInPrison(a, e)","(OrderedMilitaryStrike(a, b) and KilledCivilians(b, c)) -> (IsMassMurderer(a) and IsSameAs(a, d) and BelongsInPrison(a, e))","(exists a (exists b (exists c (OrderedMilitaryStrike(a, b) and KilledCivilians(b, c))))) -> (exists a (exists e (exists d (IsMassMurderer(a) and IsSameAs(a, d) and BelongsInPrison(a, e)))))",LF
100,1,,"Coach talks with football player, other players and crowd in background. Thus, a football coach talks with his player in front of the team and the crowd.", A football coach talks with his player in front of the team and the crowd.  , A football coach talks with football player in front of everyone.,"TalksWith(a, b),  IsInFrontOfTeam(a),  IsInFrontOfCrowd(a)","TalksWith(a, e),  IsInFrontOfEveryone(a)","[('  IsInFrontOfCrowd(a)', '  IsInFrontOfEveryone(a)'), ('  IsInFrontOfEveryone(a)', '  IsInFrontOfCrowd(a)')]","[(' Football coach', ' Football coach')]","[(' Football coach', ' everyone'), (' his player', ' football player'), (' his player', ' everyone')]","TalksWith(a, b) and IsInFrontOfTeam(a) and IsInFrontOfCrowd(a)","TalksWith(a, e) and IsInFrontOfEveryone(a)","(exists b (TalksWith(a, b) and IsInFrontOfTeam(a) and IsInFrontOfCrowd(a)) & (forall a (  IsInFrontOfCrowd(a) ->   IsInFrontOfEveryone(a))) & (forall a (  IsInFrontOfEveryone(a) ->   IsInFrontOfCrowd(a)))) -> (forall e (TalksWith(a, e) and IsInFrontOfEveryone(a)))","(exists a (exists b (TalksWith(a, b) and IsInFrontOfTeam(a) and IsInFrontOfCrowd(a))) & (forall g (  IsInFrontOfCrowd(g) ->   IsInFrontOfEveryone(g))) & (forall h (  IsInFrontOfEveryone(h) ->   IsInFrontOfCrowd(h)))) -> (exists a (exists e (TalksWith(a, e) and IsInFrontOfEveryone(a))))",Valid
101,1,,"Two men watching one man make a golf putt on the set of Sports Center. As a consequence, people watching sports.", Two men watch one man make a golf putt on the set of Sports Center., People watch sports.,"Watches(b, c),  MakesGolfPutt(c, d),  IsOnSet(d, e),  IsSetOf(e, a)","Watches(f, a)",[],"[(' sports', ' Sports Center')]","[(' Two men', ' People'), (' one man', ' People'), (' a golf putt', ' sports')]","Watches(b, c) and MakesGolfPutt(c, d) and IsOnSet(d, e) and IsSetOf(e, a)","Watches(f, a)","(exists d (exists c (exists b (Watches(b, c) and MakesGolfPutt(c, d) and IsOnSet(d, e) and IsSetOf(e, a))))) -> (forall a (forall f (Watches(f, a))))","(exists e (exists d (exists a (exists b (exists c (Watches(b, c) and MakesGolfPutt(c, d) and IsOnSet(d, e) and IsSetOf(e, a))))))) -> (exists a (exists f (Watches(f, a))))",Valid
102,1,,"Six women wait to use a port-o-john in a field. Thus, women are outside.", Six women wait to use a port-o-john in a field.  , Women are outside.,"IsWaitingToUse(a, b),  IsInField(b)",IsOutside(d),"[('IsWaitingToUse(a, b)', 'IsOutside(d)')]",[],"[(' Six women', ' Women')]","IsWaitingToUse(a, b) and IsInField(b)",IsOutside(d),"(exists a (IsWaitingToUse(a, b) and IsInField(b)) & (forall a (forall b (forall d (IsWaitingToUse(a, b) -> IsOutside(d)))))) -> (forall d (IsOutside(d)))","(exists a (exists b (IsWaitingToUse(a, b) and IsInField(b))) & (forall g (forall e (forall f (IsWaitingToUse(e,f) -> IsOutside(g)))))) -> (exists d (IsOutside(d)))",Valid
103,1,,Women wearing a black top and glasses speaking into a blue tipped microphone with another woman beside her writing. It follows that one woman speaking into a microphone while a second woman writes beside her.," ""A woman wearing a black top and glasses is speaking into a blue-tipped microphone with another woman beside her writing.""  "," ""One woman speaks into a microphone while a second woman writes beside her.""","WearingBlackTop(b),  WearingGlasses(b),  SpeakingInto(b, c),  Beside(a, b),  Writing(a)","SpeaksInto(d, e),  Writes(a),  Beside(a, d)","[('WearingBlackTop(b)', 'SpeaksInto(d, e)'), ('SpeaksInto(d, e)', 'WearingBlackTop(b)'), ('  Writes(a)', 'WearingBlackTop(b)'), ('  Beside(a, d)', 'WearingBlackTop(b)'), ('  WearingGlasses(b)', 'SpeaksInto(d, e)'), ('SpeaksInto(d, e)', '  WearingGlasses(b)'), ('  Writes(a)', '  WearingGlasses(b)'), ('  Beside(a, d)', '  WearingGlasses(b)'), ('SpeaksInto(d, e)', '  SpeakingInto(b, c)'), ('  Writes(a)', '  SpeakingInto(b, c)'), ('  Writing(a)', '  Writes(a)'), ('  Writes(a)', '  Writing(a)')]","[(' another woman beside her', ' a second woman')]","[(' A woman wearing a black top and glasses', ' One woman'), (' a blue-tipped microphone', ' a microphone')]","WearingBlackTop(b) and WearingGlasses(b) and SpeakingInto(b, c) and Beside(a, b) and Writing(a)","SpeaksInto(d, e) and Writes(a) and Beside(a, d)","(exists c (exists b (WearingBlackTop(b) and WearingGlasses(b) and SpeakingInto(b, c) and Beside(a, b) and Writing(a))) & (forall e (forall b (forall d (WearingBlackTop(b) -> SpeaksInto(d, e))))) & (forall e (forall b (forall d (SpeaksInto(d, e) -> WearingBlackTop(b))))) & (forall a (forall b (  Writes(a) -> WearingBlackTop(b)))) & (forall a (forall b (forall d (  Beside(a, d) -> WearingBlackTop(b))))) & (forall e (forall b (forall d (  WearingGlasses(b) -> SpeaksInto(d, e))))) & (forall e (forall b (forall d (SpeaksInto(d, e) ->   WearingGlasses(b))))) & (forall a (forall b (  Writes(a) ->   WearingGlasses(b)))) & (forall a (forall b (forall d (  Beside(a, d) ->   WearingGlasses(b))))) & (forall c (forall e (forall b (forall d (SpeaksInto(d, e) ->   SpeakingInto(b, c)))))) & (forall a (forall b (forall c (  Writes(a) ->   SpeakingInto(b, c))))) & (forall a (  Writing(a) ->   Writes(a))) & (forall a (  Writes(a) ->   Writing(a)))) -> (forall e (forall d (SpeaksInto(d, e) and Writes(a) and Beside(a, d))))","(exists a (exists b (exists c (WearingBlackTop(b) and WearingGlasses(b) and SpeakingInto(b, c) and Beside(a, b) and Writing(a)))) & (forall i (forall g (forall h (WearingBlackTop(g) -> SpeaksInto(h,i))))) & (forall k (forall l (forall j (SpeaksInto(j,k) -> WearingBlackTop(l))))) & (forall n (forall m (  Writes(m) -> WearingBlackTop(n)))) & (forall q (forall p (forall o (  Beside(o,p) -> WearingBlackTop(q))))) & (forall r (forall t (forall s (  WearingGlasses(r) -> SpeaksInto(s,t))))) & (forall w (forall u (forall v (SpeaksInto(u,v) ->   WearingGlasses(w))))) & (forall x (forall y (  Writes(x) ->   WearingGlasses(y)))) & (forall z (  Beside(z,{) ->   WearingGlasses(|))) & (SpeaksInto(},~) ->   SpeakingInto(,)) & (  Writes() ->   SpeakingInto(,)) & (  Writing() ->   Writes()) & (  Writes() ->   Writing())) -> (exists a (exists e (exists d (SpeaksInto(d, e) and Writes(a) and Beside(a, d)))))",
104,1,,"One tan girl with a wool hat is running and leaning over an object, while another person in a wool hat is sitting on the ground. Therefore, a tan girl runs leans over an object."," ""A tan girl with a wool hat is running and leaning over an object."""," ""A tan girl runs and leans over an object.""","IsTan(a),  IsWearingWoolHat(a),  IsRunning(a),  IsLeaningOver(a, b)","IsTan(a),  IsRunning(a),  IsLeaningOver(a, b)","[('  IsRunning(a)', 'IsTan(a)'), ('  IsLeaningOver(a, b)', 'IsTan(a)'), ('  IsWearingWoolHat(a)', 'IsTan(a)'), ('  IsRunning(a)', 'IsTan(a)'), ('  IsLeaningOver(a, b)', 'IsTan(a)')]","[(' Tan girl', ' A tan girl'), (' object', ' an object')]","[(' wool hat', ' an object')]","IsTan(a) and IsWearingWoolHat(a) and IsRunning(a) and IsLeaningOver(a, b)","IsTan(a) and IsRunning(a) and IsLeaningOver(a, b)","(IsTan(a) and IsWearingWoolHat(a) and IsRunning(a) and IsLeaningOver(a, b) & (forall a (  IsRunning(a) -> IsTan(a))) & (forall a (forall b (  IsLeaningOver(a, b) -> IsTan(a)))) & (forall a (  IsWearingWoolHat(a) -> IsTan(a))) & (forall a (  IsRunning(a) -> IsTan(a))) & (forall a (forall b (  IsLeaningOver(a, b) -> IsTan(a))))) -> (IsTan(a) and IsRunning(a) and IsLeaningOver(a, b))","(exists a (exists b (IsTan(a) and IsWearingWoolHat(a) and IsRunning(a) and IsLeaningOver(a, b))) & (forall f (  IsRunning(f) -> IsTan(f))) & (forall g (forall h (  IsLeaningOver(g,h) -> IsTan(g)))) & (forall i (  IsWearingWoolHat(i) -> IsTan(i))) & (forall j (  IsRunning(j) -> IsTan(j))) & (forall k (forall l (  IsLeaningOver(k,l) -> IsTan(k))))) -> (exists a (exists b (IsTan(a) and IsRunning(a) and IsLeaningOver(a, b))))",Valid
105,1,,A scientist studies a slide in order to work on her new creation. It follows that a scientist studies a slide that is related to her invention., A scientist studies a slide.  , A scientist studies a slide related to the scientist's invention.,StudiesSlide(a),"StudiesSlide(a),  IsRelatedTo(b, c)","[('StudiesSlide(a)', '  IsRelatedTo(b, c)')]","[(' A scientist', ' A scientist'), (' a slide', ' a slide')]",[],StudiesSlide(a),"StudiesSlide(a) and IsRelatedTo(b, c)","(StudiesSlide(a) & (forall a (forall b (forall c (StudiesSlide(a) ->   IsRelatedTo(b, c)))))) -> (StudiesSlide(a) and IsRelatedTo(b, c))","(exists a (StudiesSlide(a)) & (forall e (forall f (forall d (StudiesSlide(d) ->   IsRelatedTo(e,f)))))) -> (exists a (exists b (exists c (StudiesSlide(a) and IsRelatedTo(b, c)))))",Valid
106,1,,"A red dog jumps and catches a tennis ball in its mouth. Consequently, a dog catching a ball."," ""A red dog jumps and catches a tennis ball in its mouth.""  "," ""A dog catches a ball.""","IsRed(a),  Jumps(a),  Catches(b, c)","Catches(d, e)","[('IsRed(a)', 'Catches(d, e)')]",[],"[(' A red dog', ' A dog'), (' a tennis ball', ' a ball')]","IsRed(a) and Jumps(a) and Catches(b, c)","Catches(d, e)","(exists b (exists a (IsRed(a) and Jumps(a) and Catches(b, c))) & (forall a (forall e (forall d (IsRed(a) -> Catches(d, e)))))) -> (forall e (forall d (Catches(d, e))))","(exists a (exists b (exists c (IsRed(a) and Jumps(a) and Catches(b, c)))) & (forall g (forall h (forall f (IsRed(f) -> Catches(g,h)))))) -> (exists e (exists d (Catches(d, e))))",Valid
107,1,,"A group of dogs stand in the snow. Thus, there are animals outdoors.", A group of dogs stand in the snow.  , There are animals outdoors.,IsInSnow(a),IsOutdoors(c),"[('IsInSnow(a)', 'IsOutdoors(c)')]",[],"[(' A group of dogs', ' Animals')]",IsInSnow(a),IsOutdoors(c),(exists a (IsInSnow(a)) & (forall a (forall c (IsInSnow(a) -> IsOutdoors(c))))) -> (forall c (IsOutdoors(c))),(exists a (IsInSnow(a)) & (forall e (forall f (IsInSnow(e) -> IsOutdoors(f))))) -> (exists c (IsOutdoors(c))),Valid
108,1,,This person looks to be snowboarding on a very small pile of snow on a sunny cold day. This implies that young snowboarder sizing up their next jump.," ""This person is snowboarding on a very small pile of snow on a sunny cold day."""," ""The young snowboarder is sizing up their next jump.""","IsSnowboarding(a),  IsOnSmallPileOfSnow(a, b),  IsSunnyColdDay(c)","IsYoung(d),  IsSizingUpNextJump(d, e)","[('IsSnowboarding(a)', 'IsYoung(d)'), ('IsYoung(d)', 'IsSnowboarding(a)'), ('  IsSizingUpNextJump(d, e)', 'IsSnowboarding(a)')]",[],[],"IsSnowboarding(a) and IsOnSmallPileOfSnow(a, b) and IsSunnyColdDay(c)","IsYoung(d) and IsSizingUpNextJump(d, e)","(IsSnowboarding(a) and IsOnSmallPileOfSnow(a, b) and IsSunnyColdDay(c) & (forall a (forall d (IsSnowboarding(a) -> IsYoung(d)))) & (forall a (forall d (IsYoung(d) -> IsSnowboarding(a)))) & (forall a (forall e (forall d (  IsSizingUpNextJump(d, e) -> IsSnowboarding(a)))))) -> (IsYoung(d) and IsSizingUpNextJump(d, e))","(exists a (exists b (exists c (IsSnowboarding(a) and IsOnSmallPileOfSnow(a, b) and IsSunnyColdDay(c)))) & (forall g (forall f (IsSnowboarding(f) -> IsYoung(g)))) & (forall i (forall h (IsYoung(h) -> IsSnowboarding(i)))) & (forall k (forall l (forall j (  IsSizingUpNextJump(j,k) -> IsSnowboarding(l)))))) -> (exists e (exists d (IsYoung(d) and IsSizingUpNextJump(d, e))))",LF
109,1,,"A large number of people are watching men dressed in kilts, one of whom has thrown a long pole. As a consequence, people watch men in kilts."," ""A man dressed in a kilt has thrown a long pole.""  "," ""People watch men in kilts.""","IsDressedInKilt(a),  HasThrown(a,b)","Watches(c, d),  IsInKilts(d)","[('IsDressedInKilt(a)', '  IsInKilts(d)'), ('  IsInKilts(d)', 'IsDressedInKilt(a)'), ('  HasThrown(a,b)', '  IsInKilts(d)')]",[],"[(' A man dressed in a kilt', ' People'), (' A man dressed in a kilt', ' men'), (' A man dressed in a kilt', ' kilts')]","IsDressedInKilt(a) and HasThrown(a,b)","Watches(c, d) and IsInKilts(d)","(exists a (IsDressedInKilt(a) and HasThrown(a,b)) & (forall a (forall d (IsDressedInKilt(a) ->   IsInKilts(d)))) & (forall a (forall d (  IsInKilts(d) -> IsDressedInKilt(a)))) & (forall a (forall b (forall d (  HasThrown(a,b) ->   IsInKilts(d)))))) -> (forall d (forall c (Watches(c, d) and IsInKilts(d))))","(exists a (exists b (IsDressedInKilt(a) and HasThrown(a,b))) & (forall g (forall f (IsDressedInKilt(f) ->   IsInKilts(g)))) & (forall i (forall h (  IsInKilts(h) -> IsDressedInKilt(i)))) & (forall k (forall l (forall j (  HasThrown(j,k) ->   IsInKilts(l)))))) -> (exists c (exists d (Watches(c, d) and IsInKilts(d))))",LF
110,1,,"A boy is riding down the road between two cows. Consequently, a boy, a road and two cows.", A boy is riding down the road between two cows.  ," There are a boy, a road, and two cows.","IsRiding(a),  IsDownTheRoad(a),  IsBetween(a, b)","Exists(a),  Exists(d),  Exists(b)","[('IsRiding(a)', 'Exists(a)'), ('  IsDownTheRoad(a)', 'Exists(a)'), ('  IsDownTheRoad(a)', '  Exists(d)')]","[(' A boy', ' A boy'), (' two cows', ' two cows')]",[],"IsRiding(a) and IsDownTheRoad(a) and IsBetween(a, b)",Exists(a) and Exists(d) and Exists(b),"(IsRiding(a) and IsDownTheRoad(a) and IsBetween(a, b) & (forall a (IsRiding(a) -> Exists(a))) & (forall a (  IsDownTheRoad(a) -> Exists(a))) & (forall a (forall d (  IsDownTheRoad(a) ->   Exists(d))))) -> (Exists(a) and Exists(d) and Exists(b))","(exists a (exists b (IsRiding(a) and IsDownTheRoad(a) and IsBetween(a, b))) & (forall e (IsRiding(e) -> Exists(e))) & (forall f (  IsDownTheRoad(f) -> Exists(f))) & (forall g (forall h (  IsDownTheRoad(g) ->   Exists(h))))) -> (exists a (exists b (exists d (Exists(a) and Exists(d) and Exists(b)))))",Valid
111,1,,A bald man is getting out of a small blue car. It follows that the man is bald.," ""A bald man is getting out of a small blue car.""  "," ""The man is bald.""","IsBald(a),  IsGettingOutOf(a, b),  IsSmall(b),  IsBlue(b)",IsBald(c),"[('  IsGettingOutOf(a, b)', 'IsBald(c)'), ('IsBald(c)', '  IsGettingOutOf(a, b)')]",[],"[(' A bald man', ' The man')]","IsBald(a) and IsGettingOutOf(a, b) and IsSmall(b) and IsBlue(b)",IsBald(c),"(exists a (IsBald(a) and IsGettingOutOf(a, b) and IsSmall(b) and IsBlue(b)) & (forall a (forall b (forall c (  IsGettingOutOf(a, b) -> IsBald(c))))) & (forall a (forall c (forall b (IsBald(c) ->   IsGettingOutOf(a, b)))))) -> (forall c (IsBald(c)))","(exists a (exists b (IsBald(a) and IsGettingOutOf(a, b) and IsSmall(b) and IsBlue(b))) & (forall e (forall f (forall d (  IsGettingOutOf(d,e) -> IsBald(f))))) & (forall i (forall g (forall h (IsBald(g) ->   IsGettingOutOf(h,i)))))) -> (exists c (IsBald(c)))",Valid
112,1,,"Young boys in green and blue jerseys kick around a soccer ball while other soccer games take place in the background. Thus, young boys kicking around a soccer ball.", Young boys are wearing green and blue jerseys and kicking around a soccer ball.  , Young boys are involved in soccer games.,"IsYoung(a),  IsWearing(a, b),  IsKicking(a, c)","IsYoung(a),  IsInvolvedIn(a, d)","[('IsYoung(a)', '  IsInvolvedIn(a, d)'), ('  IsInvolvedIn(a, d)', 'IsYoung(a)'), ('  IsWearing(a, b)', 'IsYoung(a)'), ('IsYoung(a)', '  IsWearing(a, b)'), ('  IsKicking(a, c)', 'IsYoung(a)')]","[(' Young boys', ' Young boys')]",[],"IsYoung(a) and IsWearing(a, b) and IsKicking(a, c)","IsYoung(a) and IsInvolvedIn(a, d)","(IsYoung(a) and IsWearing(a, b) and IsKicking(a, c) & (forall a (forall d (IsYoung(a) ->   IsInvolvedIn(a, d)))) & (forall a (forall d (  IsInvolvedIn(a, d) -> IsYoung(a)))) & (forall a (forall b (  IsWearing(a, b) -> IsYoung(a)))) & (forall a (forall b (IsYoung(a) ->   IsWearing(a, b)))) & (forall a (forall c (  IsKicking(a, c) -> IsYoung(a))))) -> (IsYoung(a) and IsInvolvedIn(a, d))","(exists a (exists b (exists c (IsYoung(a) and IsWearing(a, b) and IsKicking(a, c)))) & (forall e (forall f (IsYoung(e) ->   IsInvolvedIn(e,f)))) & (forall g (forall h (  IsInvolvedIn(g,h) -> IsYoung(g)))) & (forall i (forall j (  IsWearing(i,j) -> IsYoung(i)))) & (forall k (forall l (IsYoung(k) ->   IsWearing(k,l)))) & (forall n (forall m (  IsKicking(m,n) -> IsYoung(m))))) -> (exists a (exists d (IsYoung(a) and IsInvolvedIn(a, d))))",Valid
113,1,,"A girl playing a violin along with a group of people. Consequently, a girl is playing an instrument.", A girl is playing a violin along with a group of people.  , A girl is playing an instrument.,"IsPlaying(a, b),  IsWithGroup(a, c)","IsPlaying(a, d)","[('IsPlaying(a, d)', '  IsWithGroup(a, c)')]","[(' A girl', ' A girl')]","[(' a violin', ' an instrument'), (' a group of people', ' A girl')]","IsPlaying(a, b) and IsWithGroup(a, c)","IsPlaying(a, d)","(exists c (exists b (IsPlaying(a, b) and IsWithGroup(a, c))) & (forall a (forall c (forall d (IsPlaying(a, d) ->   IsWithGroup(a, c)))))) -> (forall a (forall d (IsPlaying(a, d))))","(exists a (exists b (exists c (IsPlaying(a, b) and IsWithGroup(a, c)))) & (forall g (forall e (forall f (IsPlaying(e,f) ->   IsWithGroup(e,g)))))) -> (exists a (exists d (IsPlaying(a, d))))",Valid
114,1,,Two small boys in blue soccer uniforms use a wooden set of steps to wash their hands in an adult-sized bathroom. It follows that two boys washing their hands.," ""Two small boys in blue soccer uniforms use a wooden set of steps to wash their hands in an adult-sized bathroom."""," ""Two boys wash their hands.""","IsSmall(b),  IsInBlueSoccerUniforms(b),  UsesSteps(b, d),  WashesHands(b, a),  IsInAdultSizedBathroom(b)","WashesHands(f, a)","[('WashesHands(f, a)', 'IsSmall(b)'), ('WashesHands(f, a)', '  IsInAdultSizedBathroom(b)')]","[(' their hands', ' their hands')]","[(' Two small boys', ' Two boys')]","IsSmall(b) and IsInBlueSoccerUniforms(b) and UsesSteps(b, d) and WashesHands(b, a) and IsInAdultSizedBathroom(b)","WashesHands(f, a)","(exists b (IsSmall(b) and IsInBlueSoccerUniforms(b) and UsesSteps(b, d) and WashesHands(b, a) and IsInAdultSizedBathroom(b)) & (forall a (forall b (forall f (WashesHands(f, a) -> IsSmall(b))))) & (forall a (forall b (forall f (WashesHands(f, a) ->   IsInAdultSizedBathroom(b)))))) -> (forall f (WashesHands(f, a)))","(exists a (exists b (exists d (IsSmall(b) and IsInBlueSoccerUniforms(b) and UsesSteps(b, d) and WashesHands(b, a) and IsInAdultSizedBathroom(b)))) & (forall i (forall g (forall h (WashesHands(g,h) -> IsSmall(i))))) & (forall k (forall l (forall j (WashesHands(j,k) ->   IsInAdultSizedBathroom(l)))))) -> (exists a (exists f (WashesHands(f, a))))",Valid
115,1,,A soccer player in white kicks a ball as another soccer player lunges towards the ball and a third soccer player in red follows close by. This implies that there are three soccer players.," ""A soccer player in white kicks a ball as another soccer player lunges towards the ball and a third soccer player in red follows close by.""  "," ""There are three soccer players.""","IsInWhite(b),  Kicks(b, c),  LungesTowards(a, d),  IsInRed(e),  FollowsCloseBy(e)",AreSoccerPlayers(a),"[('IsInWhite(b)', 'AreSoccerPlayers(a)'), ('  LungesTowards(a, d)', 'AreSoccerPlayers(a)'), ('  IsInRed(e)', 'AreSoccerPlayers(a)'), ('  FollowsCloseBy(e)', 'AreSoccerPlayers(a)')]","[(' Soccer players', ' another soccer player')]","[(' A soccer player in white', ' Soccer players'), (' a third soccer player in red', ' Soccer players')]","(IsInWhite(b) and Kicks(b, c) and LungesTowards(a, d) and IsInRed(e) and FollowsCloseBy(e))",AreSoccerPlayers(a),"(exists e (exists b ((IsInWhite(b) and Kicks(b, c) and LungesTowards(a, d) and IsInRed(e) and FollowsCloseBy(e)))) & (forall a (forall b (IsInWhite(b) -> AreSoccerPlayers(a)))) & (forall a (forall d (  LungesTowards(a, d) -> AreSoccerPlayers(a)))) & (forall a (forall e (  IsInRed(e) -> AreSoccerPlayers(a)))) & (forall a (forall e (  FollowsCloseBy(e) -> AreSoccerPlayers(a))))) -> (forall a (AreSoccerPlayers(a)))","(exists e (exists d (exists a (exists b (exists c ((IsInWhite(b) and Kicks(b, c) and LungesTowards(a, d) and IsInRed(e) and FollowsCloseBy(e))))))) & (forall g (forall h (IsInWhite(g) -> AreSoccerPlayers(h)))) & (forall i (forall j (  LungesTowards(i,j) -> AreSoccerPlayers(i)))) & (forall k (forall l (  IsInRed(k) -> AreSoccerPlayers(l)))) & (forall n (forall m (  FollowsCloseBy(m) -> AreSoccerPlayers(n))))) -> (exists a (AreSoccerPlayers(a)))",
116,1,,"Children playing a video game together. Thus, the kids are indoors playing a video game.", The kids are playing a video game indoors.  , The kids are indoors playing a video game.,"ArePlaying(a),  IsIndoors(a)","AreIndoors(a),  ArePlaying(a)","[('  IsIndoors(a)', 'AreIndoors(a)'), ('AreIndoors(a)', '  IsIndoors(a)')]","[(' The kids', ' The kids'), (' a video game', ' a video game')]",[],ArePlaying(a) and IsIndoors(a),AreIndoors(a) and ArePlaying(a),(ArePlaying(a) and IsIndoors(a) & (forall a (  IsIndoors(a) -> AreIndoors(a))) & (forall a (AreIndoors(a) ->   IsIndoors(a)))) -> (AreIndoors(a) and ArePlaying(a)),(exists a (ArePlaying(a) and IsIndoors(a)) & (forall c (  IsIndoors(c) -> AreIndoors(c))) & (forall d (AreIndoors(d) ->   IsIndoors(d)))) -> (exists a (AreIndoors(a) and ArePlaying(a))),Valid
117,1,,Two people in coats kiss on the side of a road. This implies that people show their appreciation for another., Two people in coats kiss on the side of a road.  , People show appreciation for another.,"WearingCoats(a),  KissOnSideOfRoad(a)","ShowAppreciationFor(e, f)","[('  KissOnSideOfRoad(a)', 'ShowAppreciationFor(e, f)')]",[],"[(' Two people', ' People')]",WearingCoats(a) and KissOnSideOfRoad(a),"ShowAppreciationFor(e, f)","(exists a (WearingCoats(a) and KissOnSideOfRoad(a)) & (forall a (forall e (forall f (  KissOnSideOfRoad(a) -> ShowAppreciationFor(e, f)))))) -> (forall e (ShowAppreciationFor(e, f)))","(exists a (WearingCoats(a) and KissOnSideOfRoad(a)) & (forall i (forall g (forall h (  KissOnSideOfRoad(g) -> ShowAppreciationFor(h,i)))))) -> (exists e (exists f (ShowAppreciationFor(e, f))))",Valid
118,1,,Woman reading a book with a grocery tote. It follows that a woman is reading.," ""A woman is reading a book with a grocery tote.""  "," ""A woman is reading.""","IsReading(a),  HasGroceryTote(a)",IsReading(a),[],"[(' A woman', ' A woman')]",[],IsReading(a) and HasGroceryTote(a),IsReading(a),(IsReading(a) and HasGroceryTote(a)) -> (IsReading(a)),(exists a (IsReading(a) and HasGroceryTote(a))) -> (exists a (IsReading(a))),Valid
119,1,,"A man wearing a brown hoodie is shopping for snacks. As a consequence, the man is wearing brown."," ""A man wearing a brown hoodie is shopping for snacks.""  "," ""The man is wearing brown.""","IsWearingBrownHoodie(a),  IsShoppingForSnacks(a)",IsWearingBrown(a),"[('IsWearingBrownHoodie(a)', 'IsWearingBrown(a)'), ('IsWearingBrown(a)', 'IsWearingBrownHoodie(a)'), ('  IsShoppingForSnacks(a)', 'IsWearingBrown(a)')]","[(' The man', ' A man wearing a brown hoodie')]",[],IsWearingBrownHoodie(a) and IsShoppingForSnacks(a),IsWearingBrown(a),(IsWearingBrownHoodie(a) and IsShoppingForSnacks(a) & (forall a (IsWearingBrownHoodie(a) -> IsWearingBrown(a))) & (forall a (IsWearingBrown(a) -> IsWearingBrownHoodie(a))) & (forall a (  IsShoppingForSnacks(a) -> IsWearingBrown(a)))) -> (IsWearingBrown(a)),(exists a (IsWearingBrownHoodie(a) and IsShoppingForSnacks(a)) & (forall d (IsWearingBrownHoodie(d) -> IsWearingBrown(d))) & (forall e (IsWearingBrown(e) -> IsWearingBrownHoodie(e))) & (forall f (  IsShoppingForSnacks(f) -> IsWearingBrown(f)))) -> (exists a (IsWearingBrown(a))),Valid
120,1,,"A young man in a blue T-shirt and sweatpants stands over a stove and looks at the camera while another young man stands behind him. As a consequence, a man is in front of a camera.", A young man in a blue T-shirt and sweatpants stands over a stove and looks at the camera., A man is in front of a camera.,"IsYoung(b),  IsInBlueTShirt(b),  IsInSweatpants(b),  StandsOverStove(b),  LooksAtCamera(b)",IsInFrontOfCamera(f),"[('IsInFrontOfCamera(f)', 'IsYoung(b)'), ('  LooksAtCamera(b)', 'IsInFrontOfCamera(f)'), ('IsInFrontOfCamera(f)', '  LooksAtCamera(b)')]","[(' camera', ' camera')]","[(' A young man', ' A man')]",IsYoung(b) and IsInBlueTShirt(b) and IsInSweatpants(b) and StandsOverStove(b) and LooksAtCamera(b),IsInFrontOfCamera(f),(exists b (IsYoung(b) and IsInBlueTShirt(b) and IsInSweatpants(b) and StandsOverStove(b) and LooksAtCamera(b)) & (forall b (forall f (IsInFrontOfCamera(f) -> IsYoung(b)))) & (forall b (forall f (  LooksAtCamera(b) -> IsInFrontOfCamera(f)))) & (forall b (forall f (IsInFrontOfCamera(f) ->   LooksAtCamera(b))))) -> (forall f (IsInFrontOfCamera(f))),(exists b (IsYoung(b) and IsInBlueTShirt(b) and IsInSweatpants(b) and StandsOverStove(b) and LooksAtCamera(b)) & (forall g (forall h (IsInFrontOfCamera(g) -> IsYoung(h)))) & (forall i (forall j (  LooksAtCamera(i) -> IsInFrontOfCamera(j)))) & (forall k (forall l (IsInFrontOfCamera(k) ->   LooksAtCamera(l))))) -> (exists f (IsInFrontOfCamera(f))),Valid
121,1,,"This church choir sings to the masses as they sing joyous songs from the book at a church. Therefore, the church is filled with song.", The church choir sings joyous songs from the book at a church.  , The church is filled with song.,"Sings(b, a),  From(c, a),  At(d, b)","IsFilledWith(e, a)","[('Sings(b, a)', 'IsFilledWith(e, a)')]","[(' song', ' joyous songs')]","[(' The church choir', ' The church')]","Sings(b, a) and From(c, a) and At(d, b)","IsFilledWith(e, a)","(exists b (Sings(b, a) and From(c, a) and At(d, b)) & (forall a (forall e (forall b (Sings(b, a) -> IsFilledWith(e, a)))))) -> (forall e (IsFilledWith(e, a)))","(exists a (exists b (exists d (exists c (Sings(b, a) and From(c, a) and At(d, b))))) & (forall i (forall g (forall h (Sings(g,h) -> IsFilledWith(i,h)))))) -> (exists a (exists e (IsFilledWith(e, a))))",Valid
122,1,,"A man and a woman are standing at the side of an inflatable climbing structure. As a consequence, a man and a woman are standing.", A man and a woman are standing at the side of an inflatable climbing structure., A man and a woman are standing.,"IsStanding(a),  IsStanding(b),  IsAtSide(a, c),  IsAtSide(b, c),  IsSideOf(c, d)","IsStanding(a),  IsStanding(b)",[],"[(' A man', ' A man'), (' a woman', ' a woman')]",[],"IsStanding(a) and IsStanding(b) and IsAtSide(a, c) and IsAtSide(b, c) and IsSideOf(c, d)",IsStanding(a) and IsStanding(b),"(IsStanding(a) and IsStanding(b) and IsAtSide(a, c) and IsAtSide(b, c) and IsSideOf(c, d)) -> (IsStanding(a) and IsStanding(b))","(exists a (exists b (exists d (exists c (IsStanding(a) and IsStanding(b) and IsAtSide(a, c) and IsAtSide(b, c) and IsSideOf(c, d)))))) -> (exists a (exists b (IsStanding(a) and IsStanding(b))))",Valid
123,1,,An asian teenager wearing a white shirt with black stripes is sitting on the steps with his face resting on his hand. This implies that the teenager is seated.," ""An Asian teenager is wearing a white shirt with black stripes.""  "," ""The teenager is seated.""","IsAsian(a),  IsTeenager(a),  IsWearing(a, b),  HasWhite(b),  HasBlackStripes(b)",IsSeated(d),"[('IsSeated(d)', 'IsAsian(a)'), ('IsSeated(d)', '  IsTeenager(a)'), ('IsSeated(d)', '  IsWearing(a, b)')]",[],"[(' Asian teenager', ' The teenager')]","IsAsian(a) and IsTeenager(a) and IsWearing(a, b) and HasWhite(b) and HasBlackStripes(b)",IsSeated(d),"(exists a (IsAsian(a) and IsTeenager(a) and IsWearing(a, b) and HasWhite(b) and HasBlackStripes(b)) & (forall a (forall d (IsSeated(d) -> IsAsian(a)))) & (forall a (forall d (IsSeated(d) ->   IsTeenager(a)))) & (forall a (forall b (forall d (IsSeated(d) ->   IsWearing(a, b)))))) -> (forall d (IsSeated(d)))","(exists a (exists b (IsAsian(a) and IsTeenager(a) and IsWearing(a, b) and HasWhite(b) and HasBlackStripes(b))) & (forall e (forall f (IsSeated(e) -> IsAsian(f)))) & (forall g (forall h (IsSeated(g) ->   IsTeenager(h)))) & (forall k (forall i (forall j (IsSeated(i) ->   IsWearing(j,k)))))) -> (exists d (IsSeated(d)))",LF
124,1,,"Boy in red and black shirt walks through grass. Therefore, the boy is walking.", The boy is wearing a red and black shirt and walking through grass.  , The boy is walking.,"IsWearing(a, b),  IsRedAndBlack(b),  IsWalkingThroughGrass(a)",IsWalking(a),"[('  IsWalkingThroughGrass(a)', 'IsWalking(a)')]","[(' The boy', ' The boy')]",[],"IsWearing(a, b) and IsRedAndBlack(b) and IsWalkingThroughGrass(a)",IsWalking(a),"(IsWearing(a, b) and IsRedAndBlack(b) and IsWalkingThroughGrass(a) & (forall a (  IsWalkingThroughGrass(a) -> IsWalking(a)))) -> (IsWalking(a))","(exists a (exists b (IsWearing(a, b) and IsRedAndBlack(b) and IsWalkingThroughGrass(a))) & (forall d (  IsWalkingThroughGrass(d) -> IsWalking(d)))) -> (exists a (IsWalking(a)))",Valid
125,1,,"These girls are having a great time looking for seashells. As a consequence, the girls are happy.", The girls are having a great time looking for seashells.  , The girls are happy.,"IsHavingGreatTime(a),  IsLookingFor(a, b)",IsHappy(a),"[('IsHavingGreatTime(a)', 'IsHappy(a)'), ('IsHappy(a)', 'IsHavingGreatTime(a)')]","[(' The girls', ' The girls')]",[],"IsHavingGreatTime(a) and IsLookingFor(a, b)",IsHappy(a),"(IsHavingGreatTime(a) and IsLookingFor(a, b) & (forall a (IsHavingGreatTime(a) -> IsHappy(a))) & (forall a (IsHappy(a) -> IsHavingGreatTime(a)))) -> (IsHappy(a))","(exists a (exists b (IsHavingGreatTime(a) and IsLookingFor(a, b))) & (forall c (IsHavingGreatTime(c) -> IsHappy(c))) & (forall d (IsHappy(d) -> IsHavingGreatTime(d)))) -> (exists a (IsHappy(a)))",Valid
126,1,,"Small girl in a pink dress is playing electronic drum pads with sticks. Consequently, a girl is playing electronic drums."," ""A small girl in a pink dress is playing electronic drum pads with sticks.""  "," ""A girl is playing electronic drums.""","IsSmall(a),  IsInPinkDress(a),  IsPlayingWithSticks(a),  IsPlayingElectronicDrumPads(a)",IsPlayingElectronicDrums(e),"[('IsPlayingElectronicDrums(e)', 'IsSmall(a)'), ('  IsPlayingElectronicDrumPads(a)', 'IsPlayingElectronicDrums(e)'), ('IsPlayingElectronicDrums(e)', '  IsPlayingElectronicDrumPads(a)')]",[],"[(' A small girl', ' A girl'), (' electronic drum pads', ' electronic drums')]",IsSmall(a) and IsInPinkDress(a) and IsPlayingWithSticks(a) and IsPlayingElectronicDrumPads(a),IsPlayingElectronicDrums(e),(exists a (IsSmall(a) and IsInPinkDress(a) and IsPlayingWithSticks(a) and IsPlayingElectronicDrumPads(a)) & (forall a (forall e (IsPlayingElectronicDrums(e) -> IsSmall(a)))) & (forall a (forall e (  IsPlayingElectronicDrumPads(a) -> IsPlayingElectronicDrums(e)))) & (forall a (forall e (IsPlayingElectronicDrums(e) ->   IsPlayingElectronicDrumPads(a))))) -> (forall e (IsPlayingElectronicDrums(e))),(exists a (IsSmall(a) and IsInPinkDress(a) and IsPlayingWithSticks(a) and IsPlayingElectronicDrumPads(a)) & (forall g (forall h (IsPlayingElectronicDrums(g) -> IsSmall(h)))) & (forall i (forall j (  IsPlayingElectronicDrumPads(i) -> IsPlayingElectronicDrums(j)))) & (forall k (forall l (IsPlayingElectronicDrums(k) ->   IsPlayingElectronicDrumPads(l))))) -> (exists e (IsPlayingElectronicDrums(e))),Valid
127,1,,"A blond woman with a tattoo of on an angel on her arm walking down the street, a concrete wall in the background. As a consequence, a person with a tattoo."," ""A blond woman has a tattoo of an angel on her arm.""  "," ""A person has a tattoo.""","IsBlond(b),  HasTattoo(b),  IsTattooOf(a, c),  IsOn(a, d)",HasTattoo(e),"[('  IsOn(a, d)', 'HasTattoo(e)')]","[(' tattoo', ' a tattoo')]","[(' Blond woman', ' A person'), (' arm', ' A person')]","IsBlond(b) and HasTattoo(b) and IsTattooOf(a, c) and IsOn(a, d)",HasTattoo(e),"(exists d (exists b (IsBlond(b) and HasTattoo(b) and IsTattooOf(a, c) and IsOn(a, d))) & (forall a (forall e (forall d (  IsOn(a, d) -> HasTattoo(e)))))) -> (forall e (HasTattoo(e)))","(exists a (exists b (exists d (exists c (IsBlond(b) and HasTattoo(b) and IsTattooOf(a, c) and IsOn(a, d))))) & (forall i (forall g (forall h (  IsOn(g,h) -> HasTattoo(i)))))) -> (exists e (HasTattoo(e)))",Valid
128,1,,"A tan dog chases a black and white soccer ball. Therefore, a dog is chasing a ball."," ""A tan dog chases a black and white soccer ball.""  "," ""A dog is chasing a ball.""","IsTan(a),  Chases(a, b),  IsBlackAndWhite(b)","IsChasing(c, d)",[],[],"[(' A tan dog', ' A dog'), (' a black and white soccer ball', ' a ball')]","IsTan(a) and Chases(a, b) and IsBlackAndWhite(b)","IsChasing(c, d)","(exists b (exists a (IsTan(a) and Chases(a, b) and IsBlackAndWhite(b)))) -> (forall d (forall c (IsChasing(c, d))))","(exists a (exists b (IsTan(a) and Chases(a, b) and IsBlackAndWhite(b)))) -> (exists c (exists d (IsChasing(c, d))))",LF
129,1,,"A dusty boy runs along a dirt path through the grass. As a consequence, a boy is outside running."," ""A dusty boy runs along a dirt path through the grass.""  "," ""A boy is outside running.""","IsDusty(a),  RunsAlongPath(a, b),  RunsThroughGrass(a, c)","IsOutside(d),  IsRunning(d)","[('  RunsAlongPath(a, b)', '  IsRunning(d)'), ('  RunsThroughGrass(a, c)', '  IsRunning(d)')]",[],[],"IsDusty(a) and RunsAlongPath(a, b) and RunsThroughGrass(a, c)",IsOutside(d) and IsRunning(d),"(IsDusty(a) and RunsAlongPath(a, b) and RunsThroughGrass(a, c) & (forall a (forall b (forall d (  RunsAlongPath(a, b) ->   IsRunning(d))))) & (forall a (forall c (forall d (  RunsThroughGrass(a, c) ->   IsRunning(d)))))) -> (IsOutside(d) and IsRunning(d))","(exists a (exists b (exists c (IsDusty(a) and RunsAlongPath(a, b) and RunsThroughGrass(a, c)))) & (forall g (forall e (forall f (  RunsAlongPath(e,f) ->   IsRunning(g))))) & (forall i (forall h (forall j (  RunsThroughGrass(h,i) ->   IsRunning(j)))))) -> (exists d (IsOutside(d) and IsRunning(d)))",LF
130,1,,"A guy with a football, a crowd watching him. Consequently, there is a guy holding a football.", There is a guy holding a football.  , A crowd is watching a guy with a football.,"IsHolding(a, b)","IsWatching(c, a),  HasFootball(a)",[],"[(' A guy', ' a guy'), (' a football', ' a football')]",[],"IsHolding(a, b)","IsWatching(c, a) and HasFootball(a)","(IsHolding(a, b)) -> (IsWatching(c, a) and HasFootball(a))","(exists a (exists b (IsHolding(a, b)))) -> (exists a (exists c (IsWatching(c, a) and HasFootball(a))))",LF
131,1,,Two women are tending to their herd of animals including cows and goats near a building made primarily of stone. It follows that the two women are taking care of a herd of animals., Two women are tending to their herd of animals including cows and goats near a building made primarily of stone.  , The two women are taking care of a herd of animals.,"IsTendingTo(a, b),  Includes(b, c),  Includes(b, d),  Near(b, e),  MadePrimarilyOfStone(e)","IsTakingCareOf(a, b)","[('IsTendingTo(a, b)', 'IsTakingCareOf(a, b)'), ('IsTakingCareOf(a, b)', 'IsTendingTo(a, b)')]","[(' Two women', ' The two women'), (' herd of animals', ' their herd of animals')]","[(' cows', ' herd of animals'), (' goats', ' herd of animals')]","IsTendingTo(a, b) and Includes(b, c) and Includes(b, d) and Near(b, e) and MadePrimarilyOfStone(e)","IsTakingCareOf(a, b)","(exists d (exists c (IsTendingTo(a, b) and Includes(b, c) and Includes(b, d) and Near(b, e) and MadePrimarilyOfStone(e))) & (forall a (forall b (IsTendingTo(a, b) -> IsTakingCareOf(a, b)))) & (forall a (forall b (IsTakingCareOf(a, b) -> IsTendingTo(a, b))))) -> (forall b (IsTakingCareOf(a, b)))","(exists e (exists d (exists a (exists b (exists c (IsTendingTo(a, b) and Includes(b, c) and Includes(b, d) and Near(b, e) and MadePrimarilyOfStone(e)))))) & (forall i (forall h (IsTendingTo(h,i) -> IsTakingCareOf(h,i)))) & (forall k (forall j (IsTakingCareOf(j,k) -> IsTendingTo(j,k))))) -> (exists a (exists b (IsTakingCareOf(a, b))))",Valid
132,1,,"A boy and girl play together on a pile or rocks in a residential area. Thus, the boy and girl are outside."," ""A boy and girl play together on a pile of rocks in a residential area."""," ""The boy and girl are outside.""","PlaysTogether(a, b),  IsOnPileOfRocks(a),  IsOnPileOfRocks(b),  IsInResidentialArea(c)","IsOutside(e),  IsOutside(a)",[],"[(' girl', ' girl')]",[],"PlaysTogether(a, b) and IsOnPileOfRocks(a) and IsOnPileOfRocks(b) and IsInResidentialArea(c)",IsOutside(e) and IsOutside(a),"(PlaysTogether(a, b) and IsOnPileOfRocks(a) and IsOnPileOfRocks(b) and IsInResidentialArea(c)) -> (IsOutside(e) and IsOutside(a))","(exists a (exists b (exists c (PlaysTogether(a, b) and IsOnPileOfRocks(a) and IsOnPileOfRocks(b) and IsInResidentialArea(c))))) -> (exists a (exists e (IsOutside(e) and IsOutside(a))))",LF
133,1,,"A boy stands in the middle of a crowd of teenagers. Thus, a person stands in the middle of a crowd of teenagers."," ""A boy stands in the middle of a crowd of teenagers.""  "," ""A person stands in the middle of a crowd of teenagers.""","IsStandingInTheMiddle(a, b),  IsInCrowd(a, c)","IsStandingInTheMiddle(d, b),  IsInCrowd(d, e)",[],"[(' teenagers', ' A boy'), (' the middle', ' middle')]","[(' A boy', ' A person'), (' A boy', ' crowd'), (' a crowd of teenagers', ' crowd'), (' a crowd of teenagers', ' teenagers')]","IsStandingInTheMiddle(a, b) and IsInCrowd(a, c)","IsStandingInTheMiddle(d, b) and IsInCrowd(d, e)","(exists c (exists a (IsStandingInTheMiddle(a, b) and IsInCrowd(a, c)))) -> (forall e (forall d (IsStandingInTheMiddle(d, b) and IsInCrowd(d, e))))","(exists a (exists b (exists c (IsStandingInTheMiddle(a, b) and IsInCrowd(a, c))))) -> (exists e (exists b (exists d (IsStandingInTheMiddle(d, b) and IsInCrowd(d, e)))))",Valid
134,1,,"Two men are standing in a boat. Thus, some people are in a boat."," ""Two men are standing in a boat.""  "," ""Some people are in a boat.""","IsStandingIn(b, a)","IsIn(c, a)","[('IsStandingIn(b, a)', 'IsIn(c, a)')]","[(' boat', ' a boat')]","[(' Two men', ' Some people')]","IsStandingIn(b, a)","IsIn(c, a)","(exists b (IsStandingIn(b, a)) & (forall a (forall b (forall c (IsStandingIn(b, a) -> IsIn(c, a)))))) -> (forall c (IsIn(c, a)))","(exists a (exists b (IsStandingIn(b, a))) & (forall g (forall e (forall f (IsStandingIn(e,f) -> IsIn(g,f)))))) -> (exists a (exists c (IsIn(c, a))))",Valid
135,1,,An Asian woman dressed in a colorful outfit laughing. It follows that a woman is wearing colorful clothing.," ""An Asian woman is dressed in a colorful outfit and is laughing.""  "," ""A woman is wearing colorful clothing.""","IsAsian(a),  IsDressedIn(a, b),  IsLaughing(a)","IsWearing(c, d)","[('IsAsian(a)', 'IsWearing(c, d)'), ('IsWearing(c, d)', 'IsAsian(a)'), ('  IsLaughing(a)', 'IsWearing(c, d)')]",[],"[(' Asian woman', ' A woman'), (' colorful outfit', ' colorful clothing')]","IsAsian(a) and IsDressedIn(a, b) and IsLaughing(a)","IsWearing(c, d)","(exists b (exists a (IsAsian(a) and IsDressedIn(a, b) and IsLaughing(a))) & (forall a (forall c (forall d (IsAsian(a) -> IsWearing(c, d))))) & (forall a (forall c (forall d (IsWearing(c, d) -> IsAsian(a))))) & (forall a (forall c (forall d (  IsLaughing(a) -> IsWearing(c, d)))))) -> (forall d (forall c (IsWearing(c, d))))","(exists a (exists b (IsAsian(a) and IsDressedIn(a, b) and IsLaughing(a))) & (forall g (forall e (forall f (IsAsian(e) -> IsWearing(f,g))))) & (forall i (forall h (forall j (IsWearing(h,i) -> IsAsian(j))))) & (forall k (forall m (forall l (  IsLaughing(k) -> IsWearing(l,m)))))) -> (exists c (exists d (IsWearing(c, d))))",Valid
136,1,,"A woman in black reviews a message as she walks to work. Hence, the woman in black has a job."," ""A woman in black has a job."""," ""A woman in black works.""","IsInBlack(a),  HasJob(a)","IsInBlack(a),  Works(a)","[('  Works(a)', 'IsInBlack(a)'), ('  HasJob(a)', '  Works(a)'), ('  Works(a)', '  HasJob(a)')]","[(' A woman in black', ' A woman in black')]",[],IsInBlack(a) and HasJob(a),IsInBlack(a) and Works(a),(IsInBlack(a) and HasJob(a) & (forall a (  Works(a) -> IsInBlack(a))) & (forall a (  HasJob(a) ->   Works(a))) & (forall a (  Works(a) ->   HasJob(a)))) -> (IsInBlack(a) and Works(a)),(exists a (IsInBlack(a) and HasJob(a)) & (forall c (  Works(c) -> IsInBlack(c))) & (forall d (  HasJob(d) ->   Works(d))) & (forall e (  Works(e) ->   HasJob(e)))) -> (exists a (IsInBlack(a) and Works(a))),Valid
137,1,,"A shirtless man rock climbs. As a consequence, a man is outside."," ""A shirtless man rock climbs."""," ""A man is outside.""","IsShirtless(a),  RockClimbs(a)",IsOutside(b),"[('IsShirtless(a)', 'IsOutside(b)'), ('  RockClimbs(a)', 'IsOutside(b)')]",[],"[(' A shirtless man', ' A man')]",IsShirtless(a) and RockClimbs(a),IsOutside(b),(exists a (IsShirtless(a) and RockClimbs(a)) & (forall a (forall b (IsShirtless(a) -> IsOutside(b)))) & (forall a (forall b (  RockClimbs(a) -> IsOutside(b))))) -> (forall b (IsOutside(b))),(exists a (IsShirtless(a) and RockClimbs(a)) & (forall c (forall d (IsShirtless(c) -> IsOutside(d)))) & (forall e (forall f (  RockClimbs(e) -> IsOutside(f))))) -> (exists b (IsOutside(b))),Valid
138,1,,"A man wearing a kilt has thrown a large pole. Therefore, a man is wearing a skirt.", A man wearing a kilt has thrown a large pole.  , A man is wearing a skirt.,"IsWearing(a, b),  HasThrown(a, c),  IsLarge(c)","IsWearing(a, d)",[],"[(' A man', ' A man')]","[(' kilt', ' a skirt')]","IsWearing(a, b) and HasThrown(a, c) and IsLarge(c)","IsWearing(a, d)","(exists b (IsWearing(a, b) and HasThrown(a, c) and IsLarge(c))) -> (forall d (IsWearing(a, d)))","(exists a (exists b (exists c (IsWearing(a, b) and HasThrown(a, c) and IsLarge(c))))) -> (exists a (exists d (IsWearing(a, d))))",Valid
139,1,,"A man in a blue t-shirt is taking a picture while a woman with an umbrella walks behind him. Consequently, a man is taking a picture outdoors while a woman walks behind him.", A man in a blue t-shirt is taking a picture while a woman with an umbrella walks behind him.  , A man is taking a picture outdoors while a woman walks behind him.,"IsInBlueTshirt(a),  IsTakingPicture(a,b),  IsWithUmbrella(c),  WalksBehind(c,a)","IsTakingPicture(d,b),  IsOutdoors(d),  WalksBehind(e,d)","[('IsInBlueTshirt(a)', '  IsOutdoors(d)'), ('  IsOutdoors(d)', 'IsInBlueTshirt(a)'), ('  IsTakingPicture(a,b)', '  IsOutdoors(d)')]","[(' him', ' A man in a blue t-shirt'), (' a picture', ' a picture'), (' him', ' him')]","[(' A man in a blue t-shirt', ' A man'), (' a woman with an umbrella', ' a woman')]","IsInBlueTshirt(a) and IsTakingPicture(a,b) and IsWithUmbrella(c) and WalksBehind(c,a)","IsTakingPicture(d,b) and IsOutdoors(d) and WalksBehind(e,d)","(exists c (exists a (IsInBlueTshirt(a) and IsTakingPicture(a,b) and IsWithUmbrella(c) and WalksBehind(c,a))) & (forall a (forall d (IsInBlueTshirt(a) ->   IsOutdoors(d)))) & (forall a (forall d (  IsOutdoors(d) -> IsInBlueTshirt(a)))) & (forall a (forall b (forall d (  IsTakingPicture(a,b) ->   IsOutdoors(d)))))) -> (forall e (forall d (IsTakingPicture(d,b) and IsOutdoors(d) and WalksBehind(e,d))))","(exists a (exists b (exists c (IsInBlueTshirt(a) and IsTakingPicture(a,b) and IsWithUmbrella(c) and WalksBehind(c,a)))) & (forall g (forall h (IsInBlueTshirt(g) ->   IsOutdoors(h)))) & (forall i (forall j (  IsOutdoors(i) -> IsInBlueTshirt(j)))) & (forall k (forall m (forall l (  IsTakingPicture(k,l) ->   IsOutdoors(m)))))) -> (exists e (exists b (exists d (IsTakingPicture(d,b) and IsOutdoors(d) and WalksBehind(e,d)))))",Valid
140,1,,"A child and a parent or older sibling going for a hike. Consequently, two people are going for a hike."," ""A child and a parent or older sibling are going for a hike."""," ""Two people are going for a hike.""","IsGoingForHike(a),  IsGoingForHike(b)",IsGoingForHike(c),[],[],[],IsGoingForHike(a) and IsGoingForHike(b),IsGoingForHike(c),(IsGoingForHike(a) and IsGoingForHike(b)) -> (IsGoingForHike(c)),(exists a (exists b (IsGoingForHike(a) and IsGoingForHike(b)))) -> (exists c (IsGoingForHike(c))),Valid
141,1,,"Two kids in black trunks bouncing on a wet trampoline. Consequently, children play on trampolines outdoors.", Two kids in black trunks are bouncing on a wet trampoline.  , Children play on trampolines outdoors.,"IsInBlackTrunks(a),  IsBouncingOnTrampoline(a),  IsWet(c)","IsPlayingOnTrampolines(d),  IsOutdoors(d)","[('IsInBlackTrunks(a)', '  IsOutdoors(d)'), ('  IsBouncingOnTrampoline(a)', 'IsPlayingOnTrampolines(d)'), ('  IsWet(c)', 'IsPlayingOnTrampolines(d)')]",[],"[(' Two kids', ' Children'), (' wet trampoline', ' trampolines')]",IsInBlackTrunks(a) and IsBouncingOnTrampoline(a) and IsWet(c),IsPlayingOnTrampolines(d) and IsOutdoors(d),(exists a (IsInBlackTrunks(a) and IsBouncingOnTrampoline(a) and IsWet(c)) & (forall a (forall d (IsInBlackTrunks(a) ->   IsOutdoors(d)))) & (forall a (forall d (  IsBouncingOnTrampoline(a) -> IsPlayingOnTrampolines(d)))) & (forall c (forall d (  IsWet(c) -> IsPlayingOnTrampolines(d))))) -> (forall d (IsPlayingOnTrampolines(d) and IsOutdoors(d))),(exists a (exists c (IsInBlackTrunks(a) and IsBouncingOnTrampoline(a) and IsWet(c))) & (forall g (forall f (IsInBlackTrunks(f) ->   IsOutdoors(g)))) & (forall i (forall h (  IsBouncingOnTrampoline(h) -> IsPlayingOnTrampolines(i)))) & (forall k (forall j (  IsWet(j) -> IsPlayingOnTrampolines(k))))) -> (exists d (IsPlayingOnTrampolines(d) and IsOutdoors(d))),Valid
142,1,,"2 people with backpacks are at a table with a woman with a beige blazer sitting behind it. Thus, 2 people are at a table."," ""2 people with backpacks are at a table.""  "," ""2 people are at a table.""","HasBackpack(x),  IsAtTable(x)",IsAtTable(x),[],"[(' table', ' table')]",[],HasBackpack(b) and IsAtTable(b),IsAtTable(c),(HasBackpack(b) and IsAtTable(b)) -> (IsAtTable(c)),(exists b (HasBackpack(b) and IsAtTable(b))) -> (exists c (IsAtTable(c))),Valid
143,1,,"A group stands and watches two men, apparently dressed in some sort of costume, wrestle on the ground. It follows that there are people wrestling."," Two men, apparently dressed in some sort of costume, are wrestling on the ground.  ", There are people wrestling.,"DressedInCostume(a),  Wrestling(a)",Wrestling(b),[],[],[],DressedInCostume(a) and Wrestling(a),Wrestling(b),(DressedInCostume(a) and Wrestling(a)) -> (Wrestling(b)),(exists a (DressedInCostume(a) and Wrestling(a))) -> (exists b (Wrestling(b))),Valid
144,1,,"two girls looking out the window at ""Hair at Hart."" Hence, two people look out a window."," ""Two girls are looking out the window at 'Hair at Hart.'"""," ""Two people look out a window.""","IsLookingOut(b, a),  IsLookingAt(b, c)","IsLookingOut(d, a)",[],"[(' window', ' window')]","[(' Two girls', ' Two people')]","IsLookingOut(b, a) and IsLookingAt(b, c)","IsLookingOut(d, a)","(exists b (IsLookingOut(b, a) and IsLookingAt(b, c))) -> (forall d (IsLookingOut(d, a)))","(exists a (exists b (exists c (IsLookingOut(b, a) and IsLookingAt(b, c))))) -> (exists a (exists d (IsLookingOut(d, a))))",Valid
145,1,,"A man visiting a friend in the hospital. Therefore, a man in a hospital receives a visiting friend.", A man visits a friend in the hospital.  , A man in a hospital receives a visiting friend.,"Visits(a, c),  IsInTheHospital(c)","IsInHospital(a),  ReceivesVisitingFriend(a)","[('Visits(a, c)', '  ReceivesVisitingFriend(a)'), ('  ReceivesVisitingFriend(a)', 'Visits(a, c)')]","[(' A man', ' A man'), (' the hospital', ' hospital')]","[(' a friend', ' a visiting friend')]","Visits(a, c) and IsInTheHospital(c)",IsInHospital(a) and ReceivesVisitingFriend(a),"(Visits(a, c) and IsInTheHospital(c) & (forall a (forall c (Visits(a, c) ->   ReceivesVisitingFriend(a)))) & (forall a (forall c (  ReceivesVisitingFriend(a) -> Visits(a, c))))) -> (IsInHospital(a) and ReceivesVisitingFriend(a))","(exists a (exists c (Visits(a, c) and IsInTheHospital(c))) & (forall g (forall f (Visits(f,g) ->   ReceivesVisitingFriend(f)))) & (forall i (forall h (  ReceivesVisitingFriend(h) -> Visits(h,i))))) -> (exists a (IsInHospital(a) and ReceivesVisitingFriend(a)))",LF
146,1,,"A schoolgirl is jumping over a low hurdle. Consequently, a girl is jumping over a hurdle."," ""A schoolgirl is jumping over a low hurdle.""  "," ""A girl is jumping over a hurdle.""","IsJumpingOver(a, b)","IsJumpingOver(c, d)",[],[],"[(' A schoolgirl', ' A girl'), (' a low hurdle', ' a hurdle')]","IsJumpingOver(a, b)","IsJumpingOver(c, d)","(exists b (exists a (IsJumpingOver(a, b)))) -> (forall d (forall c (IsJumpingOver(c, d))))","(exists a (exists b (IsJumpingOver(a, b)))) -> (exists c (exists d (IsJumpingOver(c, d))))",Valid
147,1,,"Young Asian girl is sitting on the ground in rubble. Hence, the young Asian girl is outside in the rubble."," ""The young Asian girl is sitting on the ground in rubble."""," ""The young Asian girl is outside in the rubble.""","IsYoung(a),  IsAsian(a),  IsSittingOn(a,c),  IsInRubble(a)","IsYoung(a),  IsAsian(a),  IsOutside(a),  IsInRubble(a)","[('IsYoung(a)', '  IsAsian(a)'), ('  IsAsian(a)', 'IsYoung(a)'), ('IsYoung(a)', '  IsOutside(a)'), ('  IsOutside(a)', 'IsYoung(a)'), ('  IsInRubble(a)', 'IsYoung(a)'), ('  IsAsian(a)', 'IsYoung(a)'), ('IsYoung(a)', '  IsAsian(a)'), ('  IsSittingOn(a,c)', 'IsYoung(a)'), ('  IsInRubble(a)', 'IsYoung(a)')]","[(' The young Asian girl', ' The young Asian girl'), (' rubble', ' rubble')]",[],"IsYoung(a) and IsAsian(a) and IsSittingOn(a,c) and IsInRubble(a)",IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a),"(IsYoung(a) and IsAsian(a) and IsSittingOn(a,c) and IsInRubble(a) & (forall a (IsYoung(a) ->   IsAsian(a))) & (forall a (  IsAsian(a) -> IsYoung(a))) & (forall a (IsYoung(a) ->   IsOutside(a))) & (forall a (  IsOutside(a) -> IsYoung(a))) & (forall a (  IsInRubble(a) -> IsYoung(a))) & (forall a (  IsAsian(a) -> IsYoung(a))) & (forall a (IsYoung(a) ->   IsAsian(a))) & (forall a (forall c (  IsSittingOn(a,c) -> IsYoung(a)))) & (forall a (  IsInRubble(a) -> IsYoung(a)))) -> (IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a))","(exists a (exists c (IsYoung(a) and IsAsian(a) and IsSittingOn(a,c) and IsInRubble(a))) & (forall d (IsYoung(d) ->   IsAsian(d))) & (forall e (  IsAsian(e) -> IsYoung(e))) & (forall f (IsYoung(f) ->   IsOutside(f))) & (forall g (  IsOutside(g) -> IsYoung(g))) & (forall h (  IsInRubble(h) -> IsYoung(h))) & (forall i (  IsAsian(i) -> IsYoung(i))) & (forall j (IsYoung(j) ->   IsAsian(j))) & (forall k (forall l (  IsSittingOn(k,l) -> IsYoung(k)))) & (forall m (  IsInRubble(m) -> IsYoung(m)))) -> (exists a (IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a)))",Valid
148,1,,"A group of women sing together while wearing matching black dresses. Thus, there are women singing.", A group of women sing together while wearing matching black dresses.  , There are women singing.,"SingTogether(a),  AreWearing(a, b)",AreSinging(c),"[('SingTogether(a)', 'AreSinging(c)'), ('AreSinging(c)', 'SingTogether(a)'), ('AreSinging(c)', '  AreWearing(a, b)')]",[],"[(' A group of women', ' Women')]","SingTogether(a) and AreWearing(a, b)",AreSinging(c),"(exists a (SingTogether(a) and AreWearing(a, b)) & (forall a (forall c (SingTogether(a) -> AreSinging(c)))) & (forall a (forall c (AreSinging(c) -> SingTogether(a)))) & (forall a (forall c (forall b (AreSinging(c) ->   AreWearing(a, b)))))) -> (forall c (AreSinging(c)))","(exists a (exists b (SingTogether(a) and AreWearing(a, b))) & (forall e (forall d (SingTogether(d) -> AreSinging(e)))) & (forall g (forall f (AreSinging(f) -> SingTogether(g)))) & (forall i (forall h (forall j (AreSinging(h) ->   AreWearing(i,j)))))) -> (exists c (AreSinging(c)))",Valid
149,1,,Two boys in running clothes stretching. This implies that the boys are stretching., Two boys are wearing running clothes and are stretching.  , The boys are stretching.,"IsWearing(a, b),  AreStretching(a)",AreStretching(c),"[('AreStretching(c)', 'IsWearing(a, b)')]",[],[],"IsWearing(a, b) and AreStretching(a)",AreStretching(c),"(IsWearing(a, b) and AreStretching(a) & (forall a (forall c (forall b (AreStretching(c) -> IsWearing(a, b)))))) -> (AreStretching(c))","(exists a (exists b (IsWearing(a, b) and AreStretching(a))) & (forall e (forall f (forall d (AreStretching(d) -> IsWearing(e,f)))))) -> (exists c (AreStretching(c)))",Valid
150,1,,A group of young men in a gym take turns scoring in basketball. This implies that guys are indoors., A group of young men in a gym take turns scoring in basketball.  , Guys are indoors.,"IsYoung(a),  IsInGym(a),  TakesTurnsScoring(a, c)",IsIndoors(d),"[('IsIndoors(d)', 'IsYoung(a)')]",[],"[(' A group of young men', ' Guys')]","IsYoung(a) and IsInGym(a) and TakesTurnsScoring(a, c)",IsIndoors(d),"(exists a (IsYoung(a) and IsInGym(a) and TakesTurnsScoring(a, c)) & (forall a (forall d (IsIndoors(d) -> IsYoung(a))))) -> (forall d (IsIndoors(d)))","(exists a (exists c (IsYoung(a) and IsInGym(a) and TakesTurnsScoring(a, c))) & (forall e (forall f (IsIndoors(e) -> IsYoung(f))))) -> (exists d (IsIndoors(d)))",LF
151,1,,"An Eastern vendor sits by his stall with a rooster nearby. Consequently, a rooster near a vendor."," ""A vendor sits by a stall with a rooster nearby.""  "," ""There is a rooster near a vendor.""","IsSittingBy(b, c),  IsNearby(a, c)","IsNear(a, d)","[('IsNear(a, d)', '  IsNearby(a, c)')]","[(' a rooster', ' Rooster')]",[],"IsSittingBy(b, c) and IsNearby(a, c)","IsNear(a, d)","(IsSittingBy(b, c) and IsNearby(a, c) & (forall a (forall c (forall d (IsNear(a, d) ->   IsNearby(a, c)))))) -> (IsNear(a, d))","(exists a (exists b (exists c (IsSittingBy(b, c) and IsNearby(a, c)))) & (forall g (forall h (forall f (IsNear(f,g) ->   IsNearby(f,h)))))) -> (exists a (exists d (IsNear(a, d))))",LF
152,1,,"A bird is perched on a tree branch. Thus, a bird is perching in a tree."," ""A bird is perched on a tree branch.""  "," ""A bird is perching in a tree.""","IsPerchedOn(a, b)","IsPerchingIn(a, c)",[],"[(' A bird', ' A bird')]","[(' a tree branch', ' a tree')]","IsPerchedOn(a, b)","IsPerchingIn(a, c)","(exists b (IsPerchedOn(a, b))) -> (forall c (IsPerchingIn(a, c)))","(exists a (exists b (IsPerchedOn(a, b)))) -> (exists a (exists c (IsPerchingIn(a, c))))",LF
153,1,,"A man in an overcoat putting on his gloves at a subway station. Therefore, a person is in the subway station."," ""A man in an overcoat is putting on his gloves at a subway station."""," ""A person is in the subway station.""","IsInOvercoat(b),  IsPuttingOnGloves(b),  IsInSubwayStation(b)",IsInSubwayStation(d),[],"[(' a subway station', ' subway station')]","[(' A man in an overcoat', ' A person')]",IsInOvercoat(b) and IsPuttingOnGloves(b) and IsInSubwayStation(b),IsInSubwayStation(d),(exists b (IsInOvercoat(b) and IsPuttingOnGloves(b) and IsInSubwayStation(b))) -> (forall d (IsInSubwayStation(d))),(exists b (IsInOvercoat(b) and IsPuttingOnGloves(b) and IsInSubwayStation(b))) -> (exists d (IsInSubwayStation(d))),Valid
154,1,,"Person with umbrella observes flooded streets with cars in the water. Consequently, a person is outside."," ""Flooded streets have cars in the water.""  "," ""A person is outside because streets are flooded.""","IsFlooded(a),  HasCarsInWater(a)","IsOutside(d),  AreFlooded(e)","[('IsFlooded(a)', '  AreFlooded(e)'), ('  AreFlooded(e)', 'IsFlooded(a)'), ('  HasCarsInWater(a)', '  AreFlooded(e)'), ('  AreFlooded(e)', '  HasCarsInWater(a)')]",[],"[(' Flooded streets', ' streets')]",IsFlooded(a) and HasCarsInWater(a),AreFlooded(e) and IsOutside(d),(exists a (IsFlooded(a) and HasCarsInWater(a)) & (forall a (forall e (IsFlooded(a) ->   AreFlooded(e)))) & (forall a (forall e (  AreFlooded(e) -> IsFlooded(a)))) & (forall a (forall e (  HasCarsInWater(a) ->   AreFlooded(e)))) & (forall a (forall e (  AreFlooded(e) ->   HasCarsInWater(a))))) -> (forall e (AreFlooded(e) and IsOutside(d))),(exists a (IsFlooded(a) and HasCarsInWater(a)) & (forall g (forall f (IsFlooded(f) ->   AreFlooded(g)))) & (forall i (forall h (  AreFlooded(h) -> IsFlooded(i)))) & (forall k (forall j (  HasCarsInWater(j) ->   AreFlooded(k)))) & (forall l (forall m (  AreFlooded(l) ->   HasCarsInWater(m))))) -> (exists e (exists d (AreFlooded(e) and IsOutside(d)))),LF
155,1,,A group of people are camping out on some rocks. This implies that people are outdoors.," ""A group of people are camping on some rocks.""  "," ""People are outdoors.""","IsCampingOn(a, b)",IsOutdoors(c),"[('IsCampingOn(a, b)', 'IsOutdoors(c)')]",[],"[(' A group of people', ' People')]","IsCampingOn(a, b)",IsOutdoors(c),"(exists a (IsCampingOn(a, b)) & (forall a (forall b (forall c (IsCampingOn(a, b) -> IsOutdoors(c)))))) -> (forall c (IsOutdoors(c)))","(exists a (exists b (IsCampingOn(a, b))) & (forall e (forall f (forall d (IsCampingOn(d,e) -> IsOutdoors(f)))))) -> (exists c (IsOutdoors(c)))",Valid
156,1,,A choir made up of varying ages of people are performing. This implies that the choir is singing.," ""A choir made up of varying ages of people are performing."""," ""The choir is singing.""","IsMadeUpOf(a, b),  IsPerforming(a)",IsSinging(c),"[('IsSinging(c)', 'IsMadeUpOf(a, b)'), ('  IsPerforming(a)', 'IsSinging(c)'), ('IsSinging(c)', '  IsPerforming(a)')]",[],[],"IsMadeUpOf(a, b) and IsPerforming(a)",IsSinging(c),"(IsMadeUpOf(a, b) and IsPerforming(a) & (forall a (forall c (forall b (IsSinging(c) -> IsMadeUpOf(a, b))))) & (forall a (forall c (  IsPerforming(a) -> IsSinging(c)))) & (forall a (forall c (IsSinging(c) ->   IsPerforming(a))))) -> (IsSinging(c))","(exists a (exists b (IsMadeUpOf(a, b) and IsPerforming(a))) & (forall e (forall f (forall d (IsSinging(d) -> IsMadeUpOf(e,f))))) & (forall g (forall h (  IsPerforming(g) -> IsSinging(h)))) & (forall i (forall j (IsSinging(i) ->   IsPerforming(j))))) -> (exists c (IsSinging(c)))",Valid
157,1,,A man scales a rock climbing wall. It follows that a man rock climbing., A man scales a rock climbing wall.  , A man rock climbs.,"Scales(a, b)",RockClimbs(a),[],"[(' A man', ' A man')]",[],"Scales(a, b)",RockClimbs(a),"(Scales(a, b)) -> (RockClimbs(a))","(exists a (exists b (Scales(a, b)))) -> (exists a (RockClimbs(a)))",LF
158,1,,"A little white dog runs outside, their ears blown back in the wind. It follows that there is an animal outside."," ""A little white dog runs outside with its ears blown back in the wind."""," ""There is an animal outside.""","IsLittle(a),  IsWhite(a),  RunsOutside(a),  EarsBlownBack(b),  IsInWind(b)",IsOutside(d),"[('IsLittle(a)', 'IsOutside(d)'), ('  IsWhite(a)', 'IsOutside(d)'), ('  RunsOutside(a)', 'IsOutside(d)')]",[],"[(' A little white dog', ' An animal')]",IsLittle(a) and IsWhite(a) and RunsOutside(a) and EarsBlownBack(b) and IsInWind(b),IsOutside(d),(exists a (IsLittle(a) and IsWhite(a) and RunsOutside(a) and EarsBlownBack(b) and IsInWind(b)) & (forall a (forall d (IsLittle(a) -> IsOutside(d)))) & (forall a (forall d (  IsWhite(a) -> IsOutside(d)))) & (forall a (forall d (  RunsOutside(a) -> IsOutside(d))))) -> (forall d (IsOutside(d))),(exists a (exists b (IsLittle(a) and IsWhite(a) and RunsOutside(a) and EarsBlownBack(b) and IsInWind(b))) & (forall e (forall f (IsLittle(e) -> IsOutside(f)))) & (forall g (forall h (  IsWhite(g) -> IsOutside(h)))) & (forall i (forall j (  RunsOutside(i) -> IsOutside(j))))) -> (exists d (IsOutside(d))),Valid
159,1,,"A bearded man sits near a white van. As a consequence, a man sitting outside near a van."," ""A bearded man sits near a white van.""  "," ""A man is sitting outside near a van.""","IsBearded(a),  SitsNear(a, b)","IsSittingOutside(c),  SitsNear(c, d)","[('IsBearded(a)', '  SitsNear(c, d)'), ('  SitsNear(a, b)', 'IsSittingOutside(c)'), ('IsSittingOutside(c)', '  SitsNear(a, b)')]",[],"[(' A bearded man', ' A man'), (' a white van', ' a van')]","IsBearded(a) and SitsNear(a, b)","IsSittingOutside(c) and SitsNear(c, d)","(exists b (exists a (IsBearded(a) and SitsNear(a, b))) & (forall a (forall c (forall d (IsBearded(a) ->   SitsNear(c, d))))) & (forall a (forall b (forall c (  SitsNear(a, b) -> IsSittingOutside(c))))) & (forall a (forall c (forall b (IsSittingOutside(c) ->   SitsNear(a, b)))))) -> (forall d (forall c (IsSittingOutside(c) and SitsNear(c, d))))","(exists a (exists b (IsBearded(a) and SitsNear(a, b))) & (forall g (forall e (forall f (IsBearded(e) ->   SitsNear(f,g))))) & (forall i (forall h (forall j (  SitsNear(h,i) -> IsSittingOutside(j))))) & (forall k (forall m (forall l (IsSittingOutside(k) ->   SitsNear(l,m)))))) -> (exists c (exists d (IsSittingOutside(c) and SitsNear(c, d))))",Valid
160,1,,"Two children wearing hooded tops laughing with each other. Thus, children laugh."," ""Two children wearing hooded tops are laughing with each other.""  "," ""Children laugh.""","IsWearing(a, b),  IsLaughingWithEachOther(a)",IsLaughing(c),"[('  IsLaughingWithEachOther(a)', 'IsLaughing(c)'), ('IsLaughing(c)', '  IsLaughingWithEachOther(a)')]",[],"[(' Two children', ' Children')]","IsWearing(a, b) and IsLaughingWithEachOther(a)",IsLaughing(c),"(exists a (IsWearing(a, b) and IsLaughingWithEachOther(a)) & (forall a (forall c (  IsLaughingWithEachOther(a) -> IsLaughing(c)))) & (forall a (forall c (IsLaughing(c) ->   IsLaughingWithEachOther(a))))) -> (forall c (IsLaughing(c)))","(exists a (exists b (IsWearing(a, b) and IsLaughingWithEachOther(a))) & (forall e (forall d (  IsLaughingWithEachOther(d) -> IsLaughing(e)))) & (forall g (forall f (IsLaughing(f) ->   IsLaughingWithEachOther(g))))) -> (exists c (IsLaughing(c)))",Valid
161,1,,"A man in glasses in a basement. Thus, the basement has a man in it."," ""A man is in a basement and wearing glasses.""  "," ""The basement has a man in it.""","IsInBasement(a),  IsWearingGlasses(a)",IsInBasement(a),[],"[(' A man', ' a man')]",[],IsInBasement(a) and IsWearingGlasses(a),IsInBasement(a),(IsInBasement(a) and IsWearingGlasses(a)) -> (IsInBasement(a)),(exists a (IsInBasement(a) and IsWearingGlasses(a))) -> (exists a (IsInBasement(a))),Valid
162,1,,A man in a white shirt speaks into a microphone as other men gather behind him at a public event. This implies that a man in a white shirt is making a speech in front of a crowd., A man in a white shirt speaks into a microphone at a public event., A man in a white shirt is making a speech in front of a crowd.,"IsInWhiteShirt(a),  SpeaksIntoMicrophone(a),  IsAtPublicEvent(a)","IsInWhiteShirt(e),  IsMakingSpeech(e),  IsInFrontOfCrowd(e)","[('IsInWhiteShirt(a)', '  IsMakingSpeech(e)'), ('  IsMakingSpeech(e)', 'IsInWhiteShirt(a)'), ('IsInWhiteShirt(a)', '  IsInFrontOfCrowd(e)'), ('  IsInFrontOfCrowd(e)', 'IsInWhiteShirt(a)'), ('  SpeaksIntoMicrophone(a)', 'IsInWhiteShirt(e)'), ('  SpeaksIntoMicrophone(a)', '  IsMakingSpeech(e)'), ('  IsMakingSpeech(e)', '  SpeaksIntoMicrophone(a)'), ('IsInWhiteShirt(e)', '  IsAtPublicEvent(a)'), ('  IsMakingSpeech(e)', '  IsAtPublicEvent(a)'), ('  IsAtPublicEvent(a)', '  IsInFrontOfCrowd(e)'), ('  IsInFrontOfCrowd(e)', '  IsAtPublicEvent(a)')]",[],"[(' Man', ' A man in a white shirt'), (' white shirt', ' A man in a white shirt')]",IsInWhiteShirt(a) and SpeaksIntoMicrophone(a) and IsAtPublicEvent(a),IsInWhiteShirt(e) and IsMakingSpeech(e) and IsInFrontOfCrowd(e),(exists a (IsInWhiteShirt(a) and SpeaksIntoMicrophone(a) and IsAtPublicEvent(a)) & (forall a (forall e (IsInWhiteShirt(a) ->   IsMakingSpeech(e)))) & (forall a (forall e (  IsMakingSpeech(e) -> IsInWhiteShirt(a)))) & (forall a (forall e (IsInWhiteShirt(a) ->   IsInFrontOfCrowd(e)))) & (forall a (forall e (  IsInFrontOfCrowd(e) -> IsInWhiteShirt(a)))) & (forall a (forall e (  SpeaksIntoMicrophone(a) -> IsInWhiteShirt(e)))) & (forall a (forall e (  SpeaksIntoMicrophone(a) ->   IsMakingSpeech(e)))) & (forall a (forall e (  IsMakingSpeech(e) ->   SpeaksIntoMicrophone(a)))) & (forall a (forall e (IsInWhiteShirt(e) ->   IsAtPublicEvent(a)))) & (forall a (forall e (  IsMakingSpeech(e) ->   IsAtPublicEvent(a)))) & (forall a (forall e (  IsAtPublicEvent(a) ->   IsInFrontOfCrowd(e)))) & (forall a (forall e (  IsInFrontOfCrowd(e) ->   IsAtPublicEvent(a))))) -> (forall e (IsInWhiteShirt(e) and IsMakingSpeech(e) and IsInFrontOfCrowd(e))),(exists a (IsInWhiteShirt(a) and SpeaksIntoMicrophone(a) and IsAtPublicEvent(a)) & (forall i (forall h (IsInWhiteShirt(h) ->   IsMakingSpeech(i)))) & (forall k (forall j (  IsMakingSpeech(j) -> IsInWhiteShirt(k)))) & (forall l (forall m (IsInWhiteShirt(l) ->   IsInFrontOfCrowd(m)))) & (forall n (forall o (  IsInFrontOfCrowd(n) -> IsInWhiteShirt(o)))) & (forall q (forall p (  SpeaksIntoMicrophone(p) -> IsInWhiteShirt(q)))) & (forall r (forall s (  SpeaksIntoMicrophone(r) ->   IsMakingSpeech(s)))) & (forall u (forall t (  IsMakingSpeech(t) ->   SpeaksIntoMicrophone(u)))) & (forall w (forall v (IsInWhiteShirt(v) ->   IsAtPublicEvent(w)))) & (forall x (forall y (  IsMakingSpeech(x) ->   IsAtPublicEvent(y)))) & (forall z (  IsAtPublicEvent(z) ->   IsInFrontOfCrowd({))) & (  IsInFrontOfCrowd(|) ->   IsAtPublicEvent(}))) -> (exists e (IsInWhiteShirt(e) and IsMakingSpeech(e) and IsInFrontOfCrowd(e))),
163,1,,A brown and white dog is chained up near a red chair. It follows that the dog is chained to a chair.," ""A brown and white dog is chained up near a red chair.""  "," ""The dog is chained to a chair.""","IsBrownAndWhite(a),  IsChainedUp(a),  IsNearRedChair(a)","IsChainedTo(c, d)","[('IsChainedTo(c, d)', 'IsBrownAndWhite(a)'), ('  IsChainedUp(a)', 'IsChainedTo(c, d)'), ('IsChainedTo(c, d)', '  IsChainedUp(a)'), ('IsChainedTo(c, d)', '  IsNearRedChair(a)')]",[],"[(' Brown and white dog', ' The dog'), (' red chair', ' a chair')]",IsBrownAndWhite(a) and IsChainedUp(a) and IsNearRedChair(a),"IsChainedTo(c, d)","(exists a (IsBrownAndWhite(a) and IsChainedUp(a) and IsNearRedChair(a)) & (forall a (forall c (forall d (IsChainedTo(c, d) -> IsBrownAndWhite(a))))) & (forall a (forall c (forall d (  IsChainedUp(a) -> IsChainedTo(c, d))))) & (forall a (forall c (forall d (IsChainedTo(c, d) ->   IsChainedUp(a))))) & (forall a (forall c (forall d (IsChainedTo(c, d) ->   IsNearRedChair(a)))))) -> (forall c (IsChainedTo(c, d)))","(exists a (IsBrownAndWhite(a) and IsChainedUp(a) and IsNearRedChair(a)) & (forall g (forall e (forall f (IsChainedTo(e,f) -> IsBrownAndWhite(g))))) & (forall i (forall h (forall j (  IsChainedUp(h) -> IsChainedTo(i,j))))) & (forall k (forall m (forall l (IsChainedTo(k,l) ->   IsChainedUp(m))))) & (forall n (forall p (forall o (IsChainedTo(n,o) ->   IsNearRedChair(p)))))) -> (exists c (exists d (IsChainedTo(c, d))))",Valid
164,1,,"This is when daddy taught her how to ride her scooter. Consequently, daddy taught her."," ""Daddy taught her how to ride her scooter."""," ""Daddy taught her.""","Taught(a,  b)","Taught(a, b)",[],"[(' Daddy', ' Daddy'), (' her', ' her')]",[],"Taught(a, b)","Taught(a,b)","(Taught(a, b)) -> (Taught(a,b))","(exists a (exists b (Taught(a, b)))) -> (exists a (exists b (Taught(a,b))))",Valid
165,1,,"A small girl with short brown hair is pushing a pink scooter over grass with brown leaves with threes in the background. Therefore, the girl is outside.", A small girl with short brown hair is pushing a pink scooter over grass with brown leaves and trees in the background., The girl is outside.,"IsSmall(a),  HasShortBrownHair(a),  IsPushing(a, c),  IsPink(c),  IsOver(c, d),  HasBrownLeaves(e),  IsInBackground(g, f)",IsOutside(h),"[('IsSmall(a)', 'IsOutside(h)'), ('IsOutside(h)', 'IsSmall(a)'), ('  HasShortBrownHair(a)', 'IsOutside(h)'), ('IsOutside(h)', '  HasShortBrownHair(a)')]",[],"[(' A small girl', ' The girl')]","IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, c) and IsPink(c) and IsOver(c, d) and HasBrownLeaves(e) and IsInBackground(g, f)",IsOutside(h),"(exists a (IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, c) and IsPink(c) and IsOver(c, d) and HasBrownLeaves(e) and IsInBackground(g, f)) & (forall h (forall a (IsSmall(a) -> IsOutside(h)))) & (forall h (forall a (IsOutside(h) -> IsSmall(a)))) & (forall h (forall a (  HasShortBrownHair(a) -> IsOutside(h)))) & (forall h (forall a (IsOutside(h) ->   HasShortBrownHair(a))))) -> (forall h (IsOutside(h)))","(exists e (exists d (exists g (exists a (exists f (exists c (IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, c) and IsPink(c) and IsOver(c, d) and HasBrownLeaves(e) and IsInBackground(g, f))))))) & (forall i (forall j (IsSmall(i) -> IsOutside(j)))) & (forall k (forall l (IsOutside(k) -> IsSmall(l)))) & (forall n (forall m (  HasShortBrownHair(m) -> IsOutside(n)))) & (forall p (forall o (IsOutside(o) ->   HasShortBrownHair(p))))) -> (exists h (IsOutside(h)))",Valid
166,1,,"A man wearing a black cap is suspended in the air on a swing, as children are swinging on a swing set. Hence, a man in a black hat is swinging with some children.", A man wearing a black cap is suspended in the air on a swing.  , A man in a black hat is swinging with some children.,"IsWearing(a, b),  IsSuspendedInAir(a),  IsOnSwing(a)","IsInBlackHat(e),  IsSwingingWithChildren(e)","[('IsWearing(a, b)', 'IsInBlackHat(e)'), ('IsInBlackHat(e)', 'IsWearing(a, b)')]",[],"[(' A man', ' A man in a black hat')]","IsWearing(a, b) and IsSuspendedInAir(a) and IsOnSwing(a)",IsInBlackHat(e) and IsSwingingWithChildren(e),"(exists a (IsWearing(a, b) and IsSuspendedInAir(a) and IsOnSwing(a)) & (forall a (forall e (forall b (IsWearing(a, b) -> IsInBlackHat(e))))) & (forall a (forall e (forall b (IsInBlackHat(e) -> IsWearing(a, b)))))) -> (forall e (IsInBlackHat(e) and IsSwingingWithChildren(e)))","(exists a (exists b (IsWearing(a, b) and IsSuspendedInAir(a) and IsOnSwing(a))) & (forall i (forall g (forall h (IsWearing(g,h) -> IsInBlackHat(i))))) & (forall k (forall l (forall j (IsInBlackHat(j) -> IsWearing(k,l)))))) -> (exists e (IsInBlackHat(e) and IsSwingingWithChildren(e)))",LF
167,1,,"A man with a blue, collared shirt sits in front of another man. This implies that a man sits in front of another man."," A man with a blue, collared shirt sits in front of another man.", A man sits in front of another man.,"IsInBlueShirt(a),  IsCollaredShirt(c),  SitsInFrontOf(a, b)","SitsInFrontOf(a, b)","[('SitsInFrontOf(a, b)', 'IsInBlueShirt(a)')]","[(' A man', ' A man with a blue'), (' another man', ' another man')]",[],"IsInBlueShirt(a) and IsCollaredShirt(c) and SitsInFrontOf(a, b)","SitsInFrontOf(a, b)","(IsInBlueShirt(a) and IsCollaredShirt(c) and SitsInFrontOf(a, b) & (forall a (forall b (SitsInFrontOf(a, b) -> IsInBlueShirt(a))))) -> (SitsInFrontOf(a, b))","(exists a (exists c (exists b (IsInBlueShirt(a) and IsCollaredShirt(c) and SitsInFrontOf(a, b)))) & (forall e (forall f (SitsInFrontOf(e,f) -> IsInBlueShirt(e))))) -> (exists a (exists b (SitsInFrontOf(a, b))))",Valid
168,1,,"A young man in an orange shirt, maneuvers a skateboard at the top of a ramp. Therefore, a person rides a skateboard."," ""A young man in an orange shirt maneuvers a skateboard at the top of a ramp.""  "," ""A person rides a skateboard.""","IsYoung(b),  IsInOrangeShirt(b),  ManeuversSkateboard(b,a),  IsAtTop(a,d),  IsAtTop(d,e)","RidesSkateboard(f,a)","[('  ManeuversSkateboard(b,a)', 'RidesSkateboard(f,a)'), ('RidesSkateboard(f,a)', '  ManeuversSkateboard(b,a)')]","[(' skateboard', ' a skateboard')]","[(' A young man', ' A person')]","IsYoung(b) and IsInOrangeShirt(b) and ManeuversSkateboard(b,a) and IsAtTop(a,d) and IsAtTop(d,e)","RidesSkateboard(f,a)","(exists b (IsYoung(b) and IsInOrangeShirt(b) and ManeuversSkateboard(b,a) and IsAtTop(a,d) and IsAtTop(d,e)) & (forall a (forall b (forall f (  ManeuversSkateboard(b,a) -> RidesSkateboard(f,a))))) & (forall a (forall b (forall f (RidesSkateboard(f,a) ->   ManeuversSkateboard(b,a)))))) -> (forall f (RidesSkateboard(f,a)))","(exists a (exists e (exists b (exists d (IsYoung(b) and IsInOrangeShirt(b) and ManeuversSkateboard(b,a) and IsAtTop(a,d) and IsAtTop(d,e))))) & (forall i (forall h (forall j (  ManeuversSkateboard(h,i) -> RidesSkateboard(j,i))))) & (forall k (forall m (forall l (RidesSkateboard(k,l) ->   ManeuversSkateboard(m,l)))))) -> (exists a (exists f (RidesSkateboard(f,a))))",Valid
169,1,,"A large group of people walking in a busy city at night. Consequently, people are walking a city.", A large group of people is walking in a busy city at night.  , People are walking in the city.,"IsLargeGroup(a),  IsWalking(a),  IsBusyCity(b),  IsAtNight(a)","IsWalking(d),  IsInCity(d)","[('  IsInCity(d)', 'IsLargeGroup(a)'), ('  IsBusyCity(b)', '  IsInCity(d)')]",[],"[(' A large group of people', ' People'), (' busy city', ' city')]",IsLargeGroup(a) and IsWalking(a) and IsBusyCity(b) and IsAtNight(a),IsWalking(d) and IsInCity(d),(exists a (IsLargeGroup(a) and IsWalking(a) and IsBusyCity(b) and IsAtNight(a)) & (forall a (forall d (  IsInCity(d) -> IsLargeGroup(a)))) & (forall b (forall d (  IsBusyCity(b) ->   IsInCity(d))))) -> (forall d (IsWalking(d) and IsInCity(d))),(exists a (exists b (IsLargeGroup(a) and IsWalking(a) and IsBusyCity(b) and IsAtNight(a))) & (forall g (forall f (  IsInCity(f) -> IsLargeGroup(g)))) & (forall i (forall h (  IsBusyCity(h) ->   IsInCity(i))))) -> (exists d (IsWalking(d) and IsInCity(d))),Valid
170,1,,"A group of people are walking by a van. Therefore, some people outdoors.", A group of people are walking by a van.  , Some people are outdoors.,IsWalkingByVan(a),IsOutdoors(c),[],[],"[(' A group of people', ' Some people')]",IsWalkingByVan(a),IsOutdoors(c),(exists a (IsWalkingByVan(a))) -> (forall c (IsOutdoors(c))),(exists a (IsWalkingByVan(a))) -> (exists c (IsOutdoors(c))),LF
171,1,,"A white and a black dog fighting in a fenced in room. As a consequence, the dogs are fighting.", A white dog and a black dog are fighting in a fenced-in room.  , Dogs fight.,"IsWhiteDog(a),  IsBlackDog(b),  IsInFencedInRoom(a),  IsInFencedInRoom(b),  AreFighting(a, b)",AreFighting(d),[],[],"[(' A white dog', ' Dogs'), (' a black dog', ' Dogs')]","IsWhiteDog(a) and IsBlackDog(b) and IsInFencedInRoom(a) and IsInFencedInRoom(b) and AreFighting(a, b)",AreFighting(d),"(exists b (exists a (IsWhiteDog(a) and IsBlackDog(b) and IsInFencedInRoom(a) and IsInFencedInRoom(b) and AreFighting(a, b)))) -> (forall d (AreFighting(d)))","(exists a (exists b (IsWhiteDog(a) and IsBlackDog(b) and IsInFencedInRoom(a) and IsInFencedInRoom(b) and AreFighting(a, b)))) -> (exists d (AreFighting(d)))",
172,1,,"A white greyhound dog wearing a muzzle runs around a track. Hence, the dog is racing other dogs.", A white greyhound dog wearing a muzzle runs around a track.  , The dog is racing other dogs.,"IsWhite(a),  IsGreyhound(a),  IsWearingMuzzle(a),  RunsAroundTrack(a)","IsRacing(d),  IsRacingOtherDogs(d)","[('  IsGreyhound(a)', 'IsRacing(d)'), ('IsRacing(d)', '  IsGreyhound(a)'), ('  RunsAroundTrack(a)', 'IsRacing(d)'), ('IsRacing(d)', '  RunsAroundTrack(a)')]",[],"[(' A white greyhound dog', ' The dog')]",IsWhite(a) and IsGreyhound(a) and IsWearingMuzzle(a) and RunsAroundTrack(a),IsRacing(d) and IsRacingOtherDogs(d),(exists a (IsWhite(a) and IsGreyhound(a) and IsWearingMuzzle(a) and RunsAroundTrack(a)) & (forall a (forall d (  IsGreyhound(a) -> IsRacing(d)))) & (forall a (forall d (IsRacing(d) ->   IsGreyhound(a)))) & (forall a (forall d (  RunsAroundTrack(a) -> IsRacing(d)))) & (forall a (forall d (IsRacing(d) ->   RunsAroundTrack(a))))) -> (forall d (IsRacing(d) and IsRacingOtherDogs(d))),(exists a (IsWhite(a) and IsGreyhound(a) and IsWearingMuzzle(a) and RunsAroundTrack(a)) & (forall g (forall f (  IsGreyhound(f) -> IsRacing(g)))) & (forall i (forall h (IsRacing(h) ->   IsGreyhound(i)))) & (forall k (forall j (  RunsAroundTrack(j) -> IsRacing(k)))) & (forall l (forall m (IsRacing(l) ->   RunsAroundTrack(m))))) -> (exists d (IsRacing(d) and IsRacingOtherDogs(d))),LF
173,1,,The pitcher is pitching the ball in a game of baseball. It follows that the pitcher throws the ball.," ""The pitcher is pitching the ball in a game of baseball.""  "," ""The pitcher throws the ball.""","IsPitching(a, b),  IsInGameOfBaseball(a, c)","Throws(a, b)","[('IsPitching(a, b)', 'Throws(a, b)'), ('Throws(a, b)', 'IsPitching(a, b)')]","[(' The pitcher', ' The pitcher'), (' the ball', ' the ball')]",[],"IsPitching(a, b) and IsInGameOfBaseball(a, c)","Throws(a, b)","(IsPitching(a, b) and IsInGameOfBaseball(a, c) & (forall a (forall b (IsPitching(a, b) -> Throws(a, b)))) & (forall a (forall b (Throws(a, b) -> IsPitching(a, b))))) -> (Throws(a, b))","(exists a (exists b (exists c (IsPitching(a, b) and IsInGameOfBaseball(a, c)))) & (forall e (forall d (IsPitching(d,e) -> Throws(d,e)))) & (forall g (forall f (Throws(f,g) -> IsPitching(f,g))))) -> (exists a (exists b (Throws(a, b))))",Valid
174,1,,"Girl in a red coat, blue head wrap and jeans is making a snow angel. As a consequence, a girl outside plays in the snow."," A girl in a red coat, blue head wrap, and jeans is making a snow angel.  ", A girl outside plays in the snow.,"IsInRedCoat(a),  IsInBlueHeadWrap(a),  IsInJeans(a),  IsMakingSnowAngel(a)","IsOutside(a),  PlaysInSnow(a)","[('  IsMakingSnowAngel(a)', 'IsOutside(a)'), ('  IsMakingSnowAngel(a)', '  PlaysInSnow(a)')]","[(' A girl', ' A girl')]","[(' snow angel', ' snow')]",IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a),IsOutside(a) and PlaysInSnow(a),(IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a) & (forall a (  IsMakingSnowAngel(a) -> IsOutside(a))) & (forall a (  IsMakingSnowAngel(a) ->   PlaysInSnow(a)))) -> (IsOutside(a) and PlaysInSnow(a)),(exists a (IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a)) & (forall g (  IsMakingSnowAngel(g) -> IsOutside(g))) & (forall h (  IsMakingSnowAngel(h) ->   PlaysInSnow(h)))) -> (exists a (IsOutside(a) and PlaysInSnow(a))),Valid
175,1,,"Men in an office with computers and a projector screen. Consequently, there are computers and a projector screen in the room."," ""There are men with computers and a projector screen in the office.""  "," ""There are computers and a projector screen in the room.""  ","HasComputers(c),  HasProjectorScreen(c),  InOffice(c)","InRoom(a),  InRoom(b)","[('  HasProjectorScreen(c)', '  InRoom(b)')]","[(' computers', ' Computers'), (' projector screen', ' projector screen')]",[],HasComputers(c) and HasProjectorScreen(c) and InOffice(c),InRoom(a) and InRoom(b),(HasComputers(c) and HasProjectorScreen(c) and InOffice(c) & (forall c (forall b (  HasProjectorScreen(c) ->   InRoom(b))))) -> (InRoom(a) and InRoom(b)),(exists c (HasComputers(c) and HasProjectorScreen(c) and InOffice(c)) & (forall g (forall h (  HasProjectorScreen(g) ->   InRoom(h))))) -> (exists a (exists b (InRoom(a) and InRoom(b)))),Valid
176,1,,"A small child in a red jacket is sitting on a man's shoulders and holding his head. Therefore, the child's hands are on the man's head.", A small child in a red jacket is sitting on a man's shoulders and holding the man's head., The child's hands are on the man's head.,"IsSmall(b),  IsInRedJacket(b),  IsSittingOn(b, d),  IsHolding(b, a)","IsOn(e, a)","[('IsOn(e, a)', 'IsSmall(b)'), ('  IsHolding(b, a)', 'IsOn(e, a)'), ('IsOn(e, a)', '  IsHolding(b, a)')]","[("" the man's head"", "" the man's head"")]",[],"IsSmall(b) and IsInRedJacket(b) and IsSittingOn(b, d) and IsHolding(b, a)","IsOn(e, a)","(IsSmall(b) and IsInRedJacket(b) and IsSittingOn(b, d) and IsHolding(b, a) & (forall a (forall e (forall b (IsOn(e, a) -> IsSmall(b))))) & (forall a (forall e (forall b (  IsHolding(b, a) -> IsOn(e, a))))) & (forall a (forall e (forall b (IsOn(e, a) ->   IsHolding(b, a)))))) -> (IsOn(e, a))","(exists a (exists b (exists d (IsSmall(b) and IsInRedJacket(b) and IsSittingOn(b, d) and IsHolding(b, a)))) & (forall g (forall h (forall f (IsOn(f,g) -> IsSmall(h))))) & (forall k (forall i (forall j (  IsHolding(i,j) -> IsOn(k,j))))) & (forall l (forall n (forall m (IsOn(l,m) ->   IsHolding(n,m)))))) -> (exists a (exists e (IsOn(e, a))))",Valid
177,1,,Three girls are standing and talking to each other. It follows that three girls are talking.," ""Three girls are standing and talking to each other."""," ""Three girls are talking.""","IsStanding(a),  IsTalkingToEachOther(a)",IsTalking(a),"[('  IsTalkingToEachOther(a)', 'IsTalking(a)'), ('IsTalking(a)', '  IsTalkingToEachOther(a)')]","[(' Three girls', ' Three girls')]",[],IsStanding(a) and IsTalkingToEachOther(a),IsTalking(a),(IsStanding(a) and IsTalkingToEachOther(a) & (forall a (  IsTalkingToEachOther(a) -> IsTalking(a))) & (forall a (IsTalking(a) ->   IsTalkingToEachOther(a)))) -> (IsTalking(a)),(exists a (IsStanding(a) and IsTalkingToEachOther(a)) & (forall b (  IsTalkingToEachOther(b) -> IsTalking(b))) & (forall c (IsTalking(c) ->   IsTalkingToEachOther(c)))) -> (exists a (IsTalking(a))),Valid
178,1,,"a man with a cap and not wearing shirt is laying a wooden bench. Consequently, a man relaxes on a bench.", A man with a cap and not wearing a shirt is laying on a wooden bench., A man relaxes on a bench.,"IsWearingCap(a),  IsNotWearingShirt(a),  IsLayingOnBench(a)","IsRelaxing(c),  IsOnBench(c)","[('  IsNotWearingShirt(a)', 'IsRelaxing(c)'), ('  IsLayingOnBench(a)', 'IsRelaxing(c)'), ('IsRelaxing(c)', '  IsLayingOnBench(a)'), ('  IsLayingOnBench(a)', '  IsOnBench(c)'), ('  IsOnBench(c)', '  IsLayingOnBench(a)')]",[],"[(' A man with a cap', ' A man'), (' a wooden bench', ' a bench')]",IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOnBench(a),IsRelaxing(c) and IsOnBench(c),(exists a (IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOnBench(a)) & (forall a (forall c (  IsNotWearingShirt(a) -> IsRelaxing(c)))) & (forall a (forall c (  IsLayingOnBench(a) -> IsRelaxing(c)))) & (forall a (forall c (IsRelaxing(c) ->   IsLayingOnBench(a)))) & (forall a (forall c (  IsLayingOnBench(a) ->   IsOnBench(c)))) & (forall a (forall c (  IsOnBench(c) ->   IsLayingOnBench(a))))) -> (forall c (IsRelaxing(c) and IsOnBench(c))),(exists a (IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOnBench(a)) & (forall e (forall f (  IsNotWearingShirt(e) -> IsRelaxing(f)))) & (forall g (forall h (  IsLayingOnBench(g) -> IsRelaxing(h)))) & (forall i (forall j (IsRelaxing(i) ->   IsLayingOnBench(j)))) & (forall k (forall l (  IsLayingOnBench(k) ->   IsOnBench(l)))) & (forall n (forall m (  IsOnBench(m) ->   IsLayingOnBench(n))))) -> (exists c (IsRelaxing(c) and IsOnBench(c))),Valid
179,1,,"A man in a red shirt is being filmed by another man on a sports field with a huge audience of people watching and cheering. Therefore, the man is being filmed by another man.", A man in a red shirt is being filmed on a sports field with a huge audience watching and cheering.  , The man is filmed by another man.,"IsInRedShirt(a),  IsOnSportsField(a),  IsFilmed(a),  IsWatching(c),  IsCheering(c)","IsFilmed(d),  Films(e, d)",[],[],"[(' A man in a red shirt', ' The man')]",IsInRedShirt(a) and IsOnSportsField(a) and IsFilmed(a) and IsWatching(c) and IsCheering(c),"IsFilmed(d) and Films(e, d)","(exists a (IsInRedShirt(a) and IsOnSportsField(a) and IsFilmed(a) and IsWatching(c) and IsCheering(c))) -> (forall d (IsFilmed(d) and Films(e, d)))","(exists a (exists c (IsInRedShirt(a) and IsOnSportsField(a) and IsFilmed(a) and IsWatching(c) and IsCheering(c)))) -> (exists e (exists d (IsFilmed(d) and Films(e, d))))",LF
180,1,,"A man in a suit cheering in a library in front of children. Thus, a guy is cheering near some children."," ""A man in a suit is cheering in a library in front of children.""  "," ""A guy is cheering near children.""","IsInSuit(b),  IsCheering(b),  IsInLibrary(b),  IsInFrontOfChildren(b)","IsCheering(d),  IsNearChildren(d)","[('  IsCheering(b)', '  IsNearChildren(d)'), ('  IsInFrontOfChildren(b)', '  IsNearChildren(d)')]","[(' children', ' children')]",[],IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b),IsCheering(d) and IsNearChildren(d),(IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b) & (forall b (forall d (  IsCheering(b) ->   IsNearChildren(d)))) & (forall b (forall d (  IsInFrontOfChildren(b) ->   IsNearChildren(d))))) -> (IsCheering(d) and IsNearChildren(d)),(exists b (IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b)) & (forall e (forall f (  IsCheering(e) ->   IsNearChildren(f)))) & (forall g (forall h (  IsInFrontOfChildren(g) ->   IsNearChildren(h))))) -> (exists d (IsCheering(d) and IsNearChildren(d))),Valid
181,1,,A man in suit waiting for the green light. This implies that a man waits at a red light., A man in a suit is waiting for the green light.  , A man waits at a red light.,"IsInSuit(a),  IsWaitingForLight(a)","IsWaitingAtLight(c),  IsRed(d)","[('  IsWaitingForLight(a)', 'IsWaitingAtLight(c)'), ('IsWaitingAtLight(c)', '  IsWaitingForLight(a)')]",[],"[(' A man in a suit', ' A man')]",IsInSuit(a) and IsWaitingForLight(a),IsWaitingAtLight(c) and IsRed(d),(exists a (IsInSuit(a) and IsWaitingForLight(a)) & (forall a (forall c (  IsWaitingForLight(a) -> IsWaitingAtLight(c)))) & (forall a (forall c (IsWaitingAtLight(c) ->   IsWaitingForLight(a))))) -> (forall c (IsWaitingAtLight(c) and IsRed(d))),(exists a (IsInSuit(a) and IsWaitingForLight(a)) & (forall e (forall f (  IsWaitingForLight(e) -> IsWaitingAtLight(f)))) & (forall g (forall h (IsWaitingAtLight(g) ->   IsWaitingForLight(h))))) -> (exists c (exists d (IsWaitingAtLight(c) and IsRed(d)))),LF
182,1,,"A man smokes while leaning against a pillar, which has a ""missing person"" flier posted on it. Thus, a guy smoking against a wall with a flier on it."," ""A man smokes while leaning against a pillar with a missing person flier posted on it.""  "," ""A man is indifferent to missing person flyers.""","Smokes(a),  LeansAgainst(a, c),  HasMissingPersonFlierPosted(b, c)",IndifferentToMissingPersonFlyers(a),"[('IndifferentToMissingPersonFlyers(a)', '  HasMissingPersonFlierPosted(b, c)')]","[(' A man', ' A man'), (' missing person flyers', ' missing person flier')]",[],"Smokes(a) and LeansAgainst(a, c) and HasMissingPersonFlierPosted(b, c)",IndifferentToMissingPersonFlyers(a),"(Smokes(a) and LeansAgainst(a, c) and HasMissingPersonFlierPosted(b, c) & (forall a (forall b (forall c (IndifferentToMissingPersonFlyers(a) ->   HasMissingPersonFlierPosted(b, c)))))) -> (IndifferentToMissingPersonFlyers(a))","(exists a (exists c (exists b (Smokes(a) and LeansAgainst(a, c) and HasMissingPersonFlierPosted(b, c)))) & (forall g (forall e (forall f (IndifferentToMissingPersonFlyers(e) ->   HasMissingPersonFlierPosted(f,g)))))) -> (exists a (IndifferentToMissingPersonFlyers(a)))",LF
183,1,,"A woman is standing at a podium. Thus, a person is at a podium.", A woman is standing at a podium.  , A person is at a podium.,"IsStandingAt(b, a)","IsAt(c, a)","[('IsStandingAt(b, a)', 'IsAt(c, a)')]","[(' podium', ' podium')]","[(' A woman', ' A person')]","IsStandingAt(b, a)","IsAt(c, a)","(exists b (IsStandingAt(b, a)) & (forall a (forall b (forall c (IsStandingAt(b, a) -> IsAt(c, a)))))) -> (forall c (IsAt(c, a)))","(exists a (exists b (IsStandingAt(b, a))) & (forall e (forall f (forall d (IsStandingAt(d,e) -> IsAt(f,e)))))) -> (exists a (exists c (IsAt(c, a))))",Valid
184,1,,Four boys are about to be hit by an approaching wave. It follows that a wave is about hit some boys.," ""A wave is about to hit some boys.""  "," ""A wave is about to hit four boys.""","IsAboutToHit(a, b)","IsAboutToHit(a, c)",[],"[(' A wave', ' A wave')]","[(' some boys', ' four boys')]","IsAboutToHit(a, b)","IsAboutToHit(a, c)","(exists b (IsAboutToHit(a, b))) -> (forall c (IsAboutToHit(a, c)))","(exists a (exists b (IsAboutToHit(a, b)))) -> (exists a (exists c (IsAboutToHit(a, c))))",Valid
185,1,,"people are sitting on a bench in front of buildings. Thus, some people are seated on a bench outside.", People are sitting on a bench in front of buildings., Some people are seated on a bench outside.,"IsSitting(a),  IsOnBench(a),  InFrontOfBuildings(b)","IsSeated(a),  IsOnBench(a),  IsOutside(a)","[('IsSitting(a)', 'IsSeated(a)'), ('IsSeated(a)', 'IsSitting(a)'), ('IsSitting(a)', '  IsOnBench(a)'), ('  IsOnBench(a)', 'IsSitting(a)'), ('  IsOnBench(a)', 'IsSeated(a)'), ('IsSeated(a)', '  IsOnBench(a)')]","[(' Some people', ' People'), (' bench', ' bench')]",[],IsSitting(a) and IsOnBench(a) and InFrontOfBuildings(b),IsSeated(a) and IsOnBench(a) and IsOutside(a),(IsSitting(a) and IsOnBench(a) and InFrontOfBuildings(b) & (forall a (IsSitting(a) -> IsSeated(a))) & (forall a (IsSeated(a) -> IsSitting(a))) & (forall a (IsSitting(a) ->   IsOnBench(a))) & (forall a (  IsOnBench(a) -> IsSitting(a))) & (forall a (  IsOnBench(a) -> IsSeated(a))) & (forall a (IsSeated(a) ->   IsOnBench(a)))) -> (IsSeated(a) and IsOnBench(a) and IsOutside(a)),(exists a (exists b (IsSitting(a) and IsOnBench(a) and InFrontOfBuildings(b))) & (forall e (IsSitting(e) -> IsSeated(e))) & (forall f (IsSeated(f) -> IsSitting(f))) & (forall g (IsSitting(g) ->   IsOnBench(g))) & (forall h (  IsOnBench(h) -> IsSitting(h))) & (forall i (  IsOnBench(i) -> IsSeated(i))) & (forall j (IsSeated(j) ->   IsOnBench(j)))) -> (exists a (IsSeated(a) and IsOnBench(a) and IsOutside(a))),LF
186,1,,The skateboarder is jumping his board in the air while another skateboarder watches. This implies that a skateboarder is jumping.," ""A skateboarder is jumping his board in the air.""  "," ""A skateboarder is jumping.""","IsJumping(a),  IsInAir(b)",IsJumping(a),"[('  IsInAir(b)', 'IsJumping(a)'), ('IsJumping(a)', '  IsInAir(b)')]","[(' A skateboarder', ' A skateboarder')]",[],IsJumping(a) and IsInAir(b),IsJumping(a),(IsJumping(a) and IsInAir(b) & (forall a (forall b (  IsInAir(b) -> IsJumping(a)))) & (forall a (forall b (IsJumping(a) ->   IsInAir(b))))) -> (IsJumping(a)),(exists a (exists b (IsJumping(a) and IsInAir(b))) & (forall e (forall d (  IsInAir(d) -> IsJumping(e)))) & (forall g (forall f (IsJumping(f) ->   IsInAir(g))))) -> (exists a (IsJumping(a))),Valid
187,1,,"A man wearing a black hat and coat makes a face with a crowd behind him. As a consequence, a guy is standing near a crowd of people."," ""A man wearing a black hat and coat makes a face with a crowd behind him."""," ""A guy is standing near a crowd of people.""","IsWearing(c, b),  MakesFace(e, d),  IsBehind(a, e)","IsStandingNear(f, a)",[],"[(' a crowd of people', ' a crowd')]","[(' A man wearing a black hat and coat', ' A guy'), (' a face', ' a crowd of people'), (' him', ' a crowd of people')]","IsWearing(c, b) and MakesFace(e, d) and IsBehind(a, e)","IsStandingNear(f, a)","(exists e (exists d (exists b (IsWearing(c, b) and MakesFace(e, d) and IsBehind(a, e))))) -> (forall a (forall f (IsStandingNear(f, a))))","(exists e (exists d (exists a (exists b (exists c (IsWearing(c, b) and MakesFace(e, d) and IsBehind(a, e))))))) -> (exists a (exists f (IsStandingNear(f, a))))",LF
188,1,,"A group of soldiers march in a parade. Thus, a group of people march in a parade."," ""A group of soldiers march in a parade.""  "," ""A group of people march in a parade.""",MarchInParade(b),MarchInParade(c),[],"[(' parade', ' parade')]","[(' A group of soldiers', ' A group of people'), (' parade', ' A group of people')]",MarchInParade(b),MarchInParade(c),(exists b (MarchInParade(b))) -> (forall c (MarchInParade(c))),(exists b (MarchInParade(b))) -> (exists c (MarchInParade(c))),Valid
189,1,,The 3 dogs are cruising down the street. This implies that three dogs together.," ""The 3 dogs are cruising down the street.""  "," ""The 3 dogs are together.""","IsCruising(a),  IsDownTheStreet(a)",AreTogether(a),"[('IsCruising(a)', 'AreTogether(a)')]","[(' The 3 dogs', ' The 3 dogs')]",[],IsCruising(a) and IsDownTheStreet(a),AreTogether(a),(IsCruising(a) and IsDownTheStreet(a) & (forall a (IsCruising(a) -> AreTogether(a)))) -> (AreTogether(a)),(exists a (IsCruising(a) and IsDownTheStreet(a)) & (forall c (IsCruising(c) -> AreTogether(c)))) -> (exists a (AreTogether(a))),Valid
190,1,,"The gentleman is speaking while the others are listening. As a consequence, the man is being given respect."," ""The gentleman is speaking while the others are listening.""  "," ""The man is being given respect.""","IsSpeaking(a),  AreListening(b)",IsGivenRespect(c),"[('IsSpeaking(a)', 'IsGivenRespect(c)'), ('IsGivenRespect(c)', 'IsSpeaking(a)')]",[],"[(' The gentleman', ' The man')]",IsSpeaking(a) and AreListening(b),IsGivenRespect(c),(exists a (IsSpeaking(a) and AreListening(b)) & (forall a (forall c (IsSpeaking(a) -> IsGivenRespect(c)))) & (forall a (forall c (IsGivenRespect(c) -> IsSpeaking(a))))) -> (forall c (IsGivenRespect(c))),(exists a (exists b (IsSpeaking(a) and AreListening(b))) & (forall e (forall d (IsSpeaking(d) -> IsGivenRespect(e)))) & (forall g (forall f (IsGivenRespect(f) -> IsSpeaking(g))))) -> (exists c (IsGivenRespect(c))),Valid
191,1,,"One child in black is walking down a hill covered in white snow while 2 children are on their knees. Thus, there are three children in this picture, and they are all outside.", There are three children in the picture.  , The children are outside.,"IsInPicture(a, b)",IsOutside(c),[],[],[],"IsInPicture(a, b)",IsOutside(c),"(IsInPicture(a, b)) -> (IsOutside(c))","(exists a (exists b (IsInPicture(a, b)))) -> (exists c (IsOutside(c)))",LF
192,1,,A group of people are sight seeing and taking pictures. It follows that there are a group of people.," ""A group of people are sightseeing and taking pictures."""," ""There are a group of people.""","AreSightseeing(a),  IsTakingPictures(a)",IsGroupOfPeople(a),"[('  IsTakingPictures(a)', 'IsGroupOfPeople(a)')]","[(' A group of people', ' A group of people')]",[],AreSightseeing(a) and IsTakingPictures(a),IsGroupOfPeople(a),(AreSightseeing(a) and IsTakingPictures(a) & (forall a (  IsTakingPictures(a) -> IsGroupOfPeople(a)))) -> (IsGroupOfPeople(a)),(exists a (AreSightseeing(a) and IsTakingPictures(a)) & (forall c (  IsTakingPictures(c) -> IsGroupOfPeople(c)))) -> (exists a (IsGroupOfPeople(a))),Valid
193,1,,"Army men grilling a lot of meat while his troop looks on. Hence, some of the people here have been in the armed forces."," ""Army men are grilling a lot of meat while his troop looks on.""  "," ""Some of the people here have been in the armed forces.""","IsGrilling(a, b),  LooksOn(c)",IsInArmedForces(d),"[('IsGrilling(a, b)', 'IsInArmedForces(d)'), ('  LooksOn(c)', 'IsInArmedForces(d)')]",[],"[(' Army men', ' armed forces'), (' his troop', ' armed forces')]","IsGrilling(a, b) and LooksOn(c)",IsInArmedForces(d),"(IsGrilling(a, b) and LooksOn(c) & (forall a (forall b (forall d (IsGrilling(a, b) -> IsInArmedForces(d))))) & (forall c (forall d (  LooksOn(c) -> IsInArmedForces(d))))) -> (IsInArmedForces(d))","(exists a (exists b (exists c (IsGrilling(a, b) and LooksOn(c)))) & (forall g (forall h (forall f (IsGrilling(f,g) -> IsInArmedForces(h))))) & (forall i (forall j (  LooksOn(i) -> IsInArmedForces(j))))) -> (exists d (IsInArmedForces(d)))",Valid
194,1,,"The basketball player in red is challenging the player in white for the ball. Consequently, people are playing basketball."," ""The basketball player in red is challenging the player in white for the ball."""," ""People are playing basketball.""","IsInRed(a),  IsChallenging(a, b),  IsInWhite(b)",IsPlayingBasketball(d),[],[],"[(' The basketball player in red', ' People'), (' the player in white', ' People')]","IsInRed(a) and IsChallenging(a, b) and IsInWhite(b)",IsPlayingBasketball(d),"(exists b (exists a (IsInRed(a) and IsChallenging(a, b) and IsInWhite(b)))) -> (forall d (IsPlayingBasketball(d)))","(exists a (exists b (IsInRed(a) and IsChallenging(a, b) and IsInWhite(b)))) -> (exists d (IsPlayingBasketball(d)))",LF
195,1,,"A older man with gray hair wearing a gray suit next to a green and yellow taxi. Thus, a older man with gray hair wearing a gray suit."," ""An older man with gray hair is wearing a gray suit.""  "," ""An older man with gray hair is wearing a gray suit.""","IsOlder(a),  HasGrayHair(a),  IsWearingGraySuit(a)","IsOlder(a),  HasGrayHair(a),  IsWearingGraySuit(a)","[('  HasGrayHair(a)', 'IsOlder(a)'), ('  IsWearingGraySuit(a)', 'IsOlder(a)'), ('  HasGrayHair(a)', 'IsOlder(a)'), ('  IsWearingGraySuit(a)', 'IsOlder(a)')]","[(' Older man', ' Older man'), (' gray hair', ' gray hair'), (' gray suit', ' gray suit')]",[],IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a),IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a),(IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a) & (forall a (  HasGrayHair(a) -> IsOlder(a))) & (forall a (  IsWearingGraySuit(a) -> IsOlder(a))) & (forall a (  HasGrayHair(a) -> IsOlder(a))) & (forall a (  IsWearingGraySuit(a) -> IsOlder(a)))) -> (IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a)),(exists a (IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a)) & (forall d (  HasGrayHair(d) -> IsOlder(d))) & (forall e (  IsWearingGraySuit(e) -> IsOlder(e))) & (forall f (  HasGrayHair(f) -> IsOlder(f))) & (forall g (  IsWearingGraySuit(g) -> IsOlder(g)))) -> (exists a (IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a))),Valid
196,1,,"A man drops something, reaching for it while a woman in a beige blazer discusses an important topic. Hence, a woman is talking while a man is reaching for something.", A woman in a beige blazer is discussing an important topic while a man is reaching for something.  , A woman is talking while a man is reaching for something.,"IsInBeigeBlazer(c),  IsDiscussing(c, a),  IsReachingFor(b, a)","IsTalking(d),  IsReachingFor(b, a)","[('  IsDiscussing(c, a)', 'IsTalking(d)')]","[(' something', ' an important topic'), (' a man', ' a man'), (' something', ' something')]","[(' A woman in a beige blazer', ' A woman'), (' a man', ' something')]","IsInBeigeBlazer(c) and IsDiscussing(c, a) and IsReachingFor(b, a)","IsTalking(d) and IsReachingFor(b, a)","(exists b (exists c (IsInBeigeBlazer(c) and IsDiscussing(c, a) and IsReachingFor(b, a))) & (forall a (forall c (forall d (  IsDiscussing(c, a) -> IsTalking(d)))))) -> (exists b (forall a (forall d (IsTalking(d) and IsReachingFor(b, a)))))","(exists a (exists c (exists b (IsInBeigeBlazer(c) and IsDiscussing(c, a) and IsReachingFor(b, a)))) & (forall g (forall h (forall f (  IsDiscussing(f,g) -> IsTalking(h)))))) -> (exists a (exists b (exists d (IsTalking(d) and IsReachingFor(b, a)))))",Valid
197,1,,A crowd watching a skateboarder. This implies that a person is skateboarding.," ""A person is skateboarding.""  "," ""A crowd is watching.""",IsSkateboarding(a),IsWatching(b),[],[],"[(' A person', ' A crowd')]",IsSkateboarding(a),IsWatching(b),(exists a (IsSkateboarding(a))) -> (forall b (IsWatching(b))),(exists a (IsSkateboarding(a))) -> (exists b (IsWatching(b))),LF
198,1,,"A male guitar player is vigorously singing a not to a song in a poorly lit room. As a consequence, a man is singing indoors.", A male guitar player is singing a note to a song in a poorly lit room., A man is singing indoors.,"IsSinging(a),  IsMale(a),  IsGuitarPlayer(a),  IsNoteOfSong(b, c),  IsInRoom(a, d),  IsPoorlyLit(d)","IsSinging(e),  IsIndoors(e, f)","[('  IsIndoors(e, f)', '  IsPoorlyLit(d)')]",[],"[(' Male guitar player', ' A man'), (' room', ' indoors')]","IsMale(a) and IsGuitarPlayer(a) and IsSinging(a) and IsNoteOfSong(b, c) and IsInRoom(a, d) and IsPoorlyLit(d)","IsSinging(e) and IsIndoors(e, f)","(exists d (exists a (IsMale(a) and IsGuitarPlayer(a) and IsSinging(a) and IsNoteOfSong(b, c) and IsInRoom(a, d) and IsPoorlyLit(d))) & (forall e (forall d (forall f (  IsIndoors(e, f) ->   IsPoorlyLit(d)))))) -> (forall f (forall e (IsSinging(e) and IsIndoors(e, f))))","(exists a (exists b (exists d (exists c (IsMale(a) and IsGuitarPlayer(a) and IsSinging(a) and IsNoteOfSong(b, c) and IsInRoom(a, d) and IsPoorlyLit(d))))) & (forall i (forall g (forall h (  IsIndoors(g,h) ->   IsPoorlyLit(i)))))) -> (exists e (exists f (IsSinging(e) and IsIndoors(e, f))))",LF
199,1,,"The sun breaks through the trees as a child rides a swing. Thus, a child rides a swing in the daytime."," ""The sun breaks through the trees as a child rides a swing.""  "," ""A child rides a swing in the daytime.""","BreaksThrough(c, d),  Rides(a, b)","Rides(a, b),  IsInDaytime(a)",[],"[(' a child', ' A child'), (' a swing', ' a swing')]",[],"BreaksThrough(c, d) and Rides(a, b)","Rides(a, b) and IsInDaytime(a)","(BreaksThrough(c, d) and Rides(a, b)) -> (Rides(a, b) and IsInDaytime(a))","(exists a (exists b (exists c (exists d (BreaksThrough(c, d) and Rides(a, b)))))) -> (exists a (exists b (Rides(a, b) and IsInDaytime(a))))",LF
