label,updated_label,articles,Claim,Implication,Referring Expressions - Claim,Referring Expressions - Implication,Property Implications,Equal Entities,Subset Entities,Claim Lfs,Implication Lfs,Logical Form,Logical Form 2
0,false causality,"Giving 10% of your income to the Church will free a child’s soul from Limbo into Heaven, so give your money!", Giving 10% of your income to the Church will free a child’s soul from Limbo into Heaven., You should give your money to the Church.,"IsGiven(b, a),  IsInLimbo(c),  IsInHeaven(c)","IsGiven(f, a)",[],"[(' the Church', ' the Church')]","[(' Your income', ' Your money')]","(IsGiven(b, a) and IsInLimbo(c)) and IsInHeaven(c)","IsGiven(f, a)","(exists b ((IsGiven(b, a) and IsInLimbo(c)) and IsInHeaven(c))) -> (forall f (IsGiven(f, a)))","(exists a (exists c (exists b ((IsGiven(b, a) and IsInLimbo(c)) and IsInHeaven(c))))) -> (exists f (exists a (IsGiven(f, a))))"
0,appeal to emotion,"If everyone lived his or her life exactly like Jesus lived his life, the world would be a beautiful place!", Jesus lived his life beautifully.  , The world would be a beautiful place if everyone lived like Jesus.,LivedBeautifully(a),"IsBeautifulPlace(c),  LivedLikeJesus(e)",[],"[(' Jesus', ' Jesus')]",[],LivedBeautifully(a),(LivedLikeJesus(e) and IsBeautifulPlace(c)) and IsBeautifulPlace(d),(LivedBeautifully(a)) -> ((LivedLikeJesus(e) and IsBeautifulPlace(c)) and IsBeautifulPlace(d)),(exists a (LivedBeautifully(a))) -> (exists c (exists e (exists d ((LivedLikeJesus(e) and IsBeautifulPlace(c)) and IsBeautifulPlace(d)))))
0,appeal to emotion,"I know you don’t like the kitty-cat sweater that Grandma knitted for you, but she worked so hard on it and it will make her happy to see you wear it in the family holiday photo.", Grandma knitted the kitty-cat sweater for you., Wearing the kitty-cat sweater in the family holiday photo makes Grandma happy.,"Knitted(b, a),  ForYou(b, c)","WornInFamilyHolidayPhoto(b, d),  MakesHappy(b, a)",[],"[(' Grandma', ' Grandma'), (' the kitty-cat sweater', ' Kitty-cat sweater')]",[],"Knitted(b, a) and ForYou(b, c)","WornInFamilyHolidayPhoto(b, d) and MakesHappy(b, a)","(Knitted(b, a) and ForYou(b, c)) -> (WornInFamilyHolidayPhoto(b, d) and MakesHappy(b, a))","(exists a (exists c (exists b (Knitted(b, a) and ForYou(b, c))))) -> (exists a (exists d (exists b (WornInFamilyHolidayPhoto(b, d) and MakesHappy(b, a)))))"
0,ad populum,"Dave wants you to break into the spooky cabin with him. “Everyone does it,” he claims. What fallacy has he committed?", Everyone breaks into the spooky cabin.  , You should break into the spooky cabin.,"IsSpooky(a),  BreaksInto(b, a)","IsSpooky(a),  BreaksInto(c, a)",[],"[(' spooky cabin', ' spooky cabin')]","[(' Everyone', ' You')]","IsSpooky(a) and BreaksInto(b, a)","IsSpooky(a) and BreaksInto(c, a)","(exists b (IsSpooky(a) and BreaksInto(b, a))) -> (forall c (IsSpooky(a) and BreaksInto(c, a)))","(exists a (exists b (IsSpooky(a) and BreaksInto(b, a)))) -> (exists a (exists c (IsSpooky(a) and BreaksInto(c, a))))"
0,fallacy of credibility,"Ms. Drayer, the smartest person in the universe, says the debate is the best class, therefore it is."," ""Ms. Drayer is the smartest person in the universe and says the debate is the best class."""," ""The debate is the best class.""","IsSmartest(b),  IsSmartest(c),  SaysBestClass(b, a)",IsBestClass(a),[],"[(' the debate', ' The debate')]",[],"IsSmartest(b) and IsSmartest(c) and SaysBestClass(b, a)",IsBestClass(a),"(IsSmartest(b) and IsSmartest(c) and SaysBestClass(b, a)) -> (IsBestClass(a))","(exists a (exists c (exists b (IsSmartest(b) and IsSmartest(c) and SaysBestClass(b, a))))) -> (exists a (IsBestClass(a)))"
0,faulty generalization,Why did the blond cross the road?  Because she saw a shoe sale!, A blond crossed the road because she saw a shoe sale.  , Blonds cross roads for shoe sales.,"CrossedRoad(a),  SawShoeSale(b)","CrossRoads(a),  ForShoeSales(a)",[],"[(' Blonds', ' A blond')]",[],CrossedRoad(a) and SawShoeSale(b),CrossRoads(a) and ForShoeSales(a),(CrossedRoad(a) and SawShoeSale(b)) -> (CrossRoads(a) and ForShoeSales(a)),(exists a (exists b (CrossedRoad(a) and SawShoeSale(b)))) -> (exists a (CrossRoads(a) and ForShoeSales(a)))
0,appeal to emotion,"Timmy: Mom, what if I don’t believe in God?
Mom: Then you burn in Hell forever.  Why do you ask?
Timmy: No reason.
", Timmy doesn't believe in God.  , Timmy burns in Hell forever.,"DoesNotBelieveIn(a, b)","BurnsIn(a, c),  IsInHellForever(a)",[],"[(' Timmy', ' Timmy')]",[],"DoesNotBelieveIn(a, b)","BurnsIn(a, c) and IsInHellForever(a)","(DoesNotBelieveIn(a, b)) -> (BurnsIn(a, c) and IsInHellForever(a))","(exists a (exists b (DoesNotBelieveIn(a, b)))) -> (exists a (exists c (BurnsIn(a, c) and IsInHellForever(a))))"
0,false dilemma,"""If you never gave money to charity, then you must be a greedy millionaire."" What is this?"," ""You never gave money to charity."""," ""You are a greedy millionaire.""",GaveMoneyToCharity(a),"IsGreedy(a),  IsMillionaire(a)",[],"[(' You', ' You')]",[],~GaveMoneyToCharity(a),IsGreedy(a) and IsMillionaire(a),(~GaveMoneyToCharity(a)) -> (IsGreedy(a) and IsMillionaire(a)),(exists a (~GaveMoneyToCharity(a))) -> (exists a (IsGreedy(a) and IsMillionaire(a)))
0,fallacy of extension,Caroline says that she is going to have lunch with the new girl. Jenna says that she can't believe that Caroline is ditching her old friends for the new girl., Caroline is going to have lunch with the new girl.  , Caroline is ditching her old friends for the new girl.,"IsGoingToHaveLunchWith(a, b)","IsDitchingFor(a, b),  IsOldFriends(d)",[],"[(' Caroline', ' Caroline'), (' the new girl', ' the new girl')]",[],"IsGoingToHaveLunchWith(a, b)","IsDitchingFor(a, b) and IsOldFriends(d)","(IsGoingToHaveLunchWith(a, b)) -> (IsDitchingFor(a, b) and IsOldFriends(d))","(exists a (exists b (IsGoingToHaveLunchWith(a, b)))) -> (exists a (exists d (exists b (IsDitchingFor(a, b) and IsOldFriends(d)))))"
0,faulty generalization,"""You can never give anyone a break. If you do, they'll walk all over you."""," ""You cannot give anyone a break."""," ""People will walk all over you.""","CannotGiveBreak(a, a)","WillWalkOver(b, a)",[],"[(' You', ' you'), (' you', ' anyone')]","[(' You', ' People'), (' anyone', ' People')]","CannotGiveBreak(a, a)","WillWalkOver(b, a)","(exists a (CannotGiveBreak(a, a))) -> (forall b (WillWalkOver(b, a)))","(exists a (CannotGiveBreak(a, a))) -> (exists a (exists b (WillWalkOver(b, a))))"
0,false causality,"Believing that ""runs"" occur to statistically independent phenomena such as routine wheel spirits."," ""Runs occur to statistically independent phenomena such as routine wheel spins.""  "," ""Runs do not happen in statistically independent phenomena like routine wheel spins.""","OccurTo(a, b),  AreRoutineWheelSpins(c)","DoNotHappenIn(a, b),  AreRoutineWheelSpins(c)",[],"[(' Runs', ' Runs'), (' statistically independent phenomena', ' statistically independent phenomena'), (' routine wheel spins', ' routine wheel spins')]",[],"OccurTo(a, b) and AreRoutineWheelSpins(c)","DoNotHappenIn(a, b) and AreRoutineWheelSpins(c)","(OccurTo(a, b) and AreRoutineWheelSpins(c)) -> (DoNotHappenIn(a, b) and AreRoutineWheelSpins(c))","(exists a (exists c (exists b (OccurTo(a, b) and AreRoutineWheelSpins(c))))) -> (exists a (exists c (exists b (DoNotHappenIn(a, b) and AreRoutineWheelSpins(c)))))"
0,false causality,"I broke a mirror earlier in the day, and then I received an F on my history final. Therefore, I received the F because I broke the mirror."," ""I broke a mirror and received an F on the history final.""  "," ""Breaking a mirror caused receiving an F on the history final.""","Broke(d, a),  Received(d, b),  On(b, c)","IsBroken(a),  CausesReceiving(a, b),  On(b, c)",[],"[(' a mirror', ' A mirror'), (' an F', ' an F'), (' the history final', ' the history final')]",[],"Broke(d, a) and Received(d, b) and On(b, c)","IsBroken(a) and (CausesReceiving(a, b) and On(b, c))","(Broke(d, a) and Received(d, b) and On(b, c)) -> (IsBroken(a) and (CausesReceiving(a, b) and On(b, c)))","(exists a (exists c (exists b (exists d (Broke(d, a) and Received(d, b) and On(b, c)))))) -> (exists a (exists c (exists b (IsBroken(a) and (CausesReceiving(a, b) and On(b, c))))))"
0,fallacy of extension,"Charlie: I think we should put more money into schools. Quality public education is so important.
Bob: So you’re saying we should cut military spending and spend it instead on more spiral notebooks and crayons? I guess you want our country to be a weak, defenseless target for terrorists.
Charlie: Creo que deberíamos invertir más dinero en las escuelas. La educación pública de calidad es muy importante.

Bob: ¿Entonces estás diciendo que deberíamos recortar el gasto militar y gastarlo en más cuadernos de espiral y crayones? Supongo que quiere que nuestro país sea un objetivo débil e indefenso para los terroristas.", We should invest more money in schools for quality public education.  ," Investing in education will make the country a weak, defenseless target for terrorists.","InvestedIn(a),  ForQualityEducation(c)","InvestedIn(d),  IsWeak(e),  IsDefenseless(e),  IsTargetFor(f, g)",[],[],"[(' schools', ' Education'), (' quality public education', ' Education')]",InvestedIn(a) and ForQualityEducation(c),"(InvestedIn(d) and IsWeak(e) and IsDefenseless(e)) and IsTargetFor(f, g)","(exists c (InvestedIn(a) and ForQualityEducation(c))) -> (forall d ((InvestedIn(d) and IsWeak(e) and IsDefenseless(e)) and IsTargetFor(f, g)))","(exists a (exists c (InvestedIn(a) and ForQualityEducation(c)))) -> (exists f (exists e (exists g (exists d ((InvestedIn(d) and IsWeak(e) and IsDefenseless(e)) and IsTargetFor(f, g))))))"
0,false causality,"Cellphones weren’t invented before I was born. Now, they are everywhere! Therefore, cellphones were created because I was born."," ""Cellphones were not invented before I was born and now they are everywhere."""," ""Cellphones were created because I was born.""","WereNotInvented(a),  AreEverywhere(a)",WereCreated(a),[],"[(' Cellphones', ' Cellphones'), (' I', ' I')]",[],WereNotInvented(a) and AreEverywhere(a),WasBorn(b) and WereCreated(a),(WereNotInvented(a) and AreEverywhere(a)) -> (WasBorn(b) and WereCreated(a)),(exists a (WereNotInvented(a) and AreEverywhere(a))) -> (exists a (exists b (WasBorn(b) and WereCreated(a))))
0,ad hominem,Ms. Baker assigned me a lot of homework because she’s a witch!, Ms. Baker is a witch.  , Ms. Baker assigned a lot of homework.,IsWitch(a),"AssignedHomework(a, c)",[],"[(' Ms. Baker', ' Ms. Baker')]",[],IsWitch(a),"AssignedHomework(a, c)","(IsWitch(a)) -> (AssignedHomework(a, c))","(exists a (IsWitch(a))) -> (exists a (exists c (AssignedHomework(a, c))))"
0,fallacy of credibility,"My dad went to school, so he knows everything about the education system."," ""Dad went to school.""  "," ""Dad knows everything about the education system.""","WentTo(b, a)","KnowsEverythingAbout(c, a)",[],"[(' Dad', ' Dad')]","[(' school', ' the education system')]","WentTo(b, a)","KnowsEverythingAbout(c, a)","(exists b (WentTo(b, a))) -> (forall c (KnowsEverythingAbout(c, a)))","(exists a (exists b (WentTo(b, a)))) -> (exists a (exists c (KnowsEverythingAbout(c, a))))"
0,ad populum,Everyone is doing the Low-Carb Diet., Everyone is doing the Low-Carb Diet.  , You should do the Low-Carb Diet.,"IsDoing(a, b)","IsDoing(a, c)",[],"[(' Low-Carb Diet', ' the Low-Carb Diet')]","[(' Everyone', ' You')]","IsDoing(a, b)","IsDoing(a, c)","(exists b (IsDoing(a, b))) -> (forall c (IsDoing(a, c)))","(exists a (exists b (IsDoing(a, b)))) -> (exists a (exists c (IsDoing(a, c))))"
0,fallacy of extension,"Parent: You need to clean out your backpack.
Child: You know I have ADD! Why can’t you just accept me as I am?", The child has ADD.  , The parent should accept the child as the child is.,HasADD(a),"ShouldAccept(c, a)",[],"[(' The child', ' the child'), (' The child', ' the child')]",[],HasADD(a),"ShouldAccept(c, a)","(HasADD(a)) -> (ShouldAccept(c, a))","(exists a (HasADD(a))) -> (exists a (exists c (ShouldAccept(c, a))))"
0,fallacy of credibility,"X has been around for years now.
Y is new.
Therefore, Y is better than X.", Y is new.  , Y is better than X.,IsNew(a),"IsBetterThan(a, b)",[],"[(' Y', ' Y')]",[],IsNew(a),"IsBetterThan(a, b)","(IsNew(a)) -> (IsBetterThan(a, b))","(exists a (IsNew(a))) -> (exists a (exists b (IsBetterThan(a, b))))"
0,false causality,"""Right when I sneezed, the power went off. I must've caused the outage."" Bragged Zohaw."," ""Zohaw sneezed and the power went off."""," ""Zohaw caused the power outage.""","Sneezed(a),  WentOff(b)","Caused(a, c)",[],"[(' Zohaw', ' Zohaw')]",[],Sneezed(a) and WentOff(b),"Caused(a, c)","(Sneezed(a) and WentOff(b)) -> (Caused(a, c))","(exists a (exists b (Sneezed(a) and WentOff(b)))) -> (exists a (exists c (Caused(a, c))))"
0,equivocation,"I like my steak rare. But I don’t care for aardvark steak, even though it’s the rarest steak in the world.", Aardvark steak is the rarest steak in the world.  , Aardvark steak is not liked.,IsRare(a),IsNotLiked(a),[],"[(' Aardvark steak', ' Aardvark steak'), (' Aardvark steak', ' steak')]",[],IsRare(a),~IsLiked(a),(IsRare(a)) -> (~IsLiked(a)),(exists a (IsRare(a))) -> (exists a (~IsLiked(a)))
0,faulty generalization,"If you allow the students to redo this one test, they will always want to redo all future tests", Students will always want to redo all future tests.  , Do not allow the students to redo this one test.,WantsToRedoTests(a),WantsToRedoTest(c),[],[],"[(' Students', ' The students')]",WantsToRedoTests(a),WantsToRedoTest(c),(exists a (WantsToRedoTests(a))) -> (forall c (WantsToRedoTest(c))),(exists a (WantsToRedoTests(a))) -> (exists c (WantsToRedoTest(c)))
0,fallacy of relevance,"There is no need for additional taxes for education. Every year we throw more money into education, and all they do is hire more management and build more buildings. None of the money actually reaches the classroom or is really used for education."," More money is thrown into education every year, and it is used to hire more management and build more buildings.", There is no need for additional taxes for education.,"IsThrownInto(b, a),  IsUsedToHire(c),  IsUsedToBuild(d)","IsFor(e, a)",[],"[(' education', ' education')]",[],"IsThrownInto(b, a) and IsUsedToHire(c) and IsUsedToBuild(d)","~IsFor(e, a)","(IsThrownInto(b, a) and IsUsedToHire(c) and IsUsedToBuild(d)) -> (~IsFor(e, a))","(exists a (exists c (exists d (exists b (IsThrownInto(b, a) and IsUsedToHire(c) and IsUsedToBuild(d)))))) -> (exists a (exists e (~IsFor(e, a))))"
0,false causality,Believing that the cause of the Reformation was simply Martin Luther posting his theses, Martin Luther posting his theses was the cause of the Reformation.  , The cause of the Reformation was Martin Luther posting his theses.,"PostedTheses(a, b),  CausedReformation(b, c)","CausedReformation(d, b),  PostedTheses(a, b)",[],"[(' Martin Luther', ' Martin Luther'), (' his theses', ' his theses')]","[(' Martin Luther', ' The cause of the Reformation'), (' his theses', ' The cause of the Reformation'), (' his theses', ' Martin Luther')]","PostedTheses(a, b) and CausedReformation(b, c)","PostedTheses(a, b) and CausedReformation(d, b)","(exists b (exists a (PostedTheses(a, b) and CausedReformation(b, c)))) -> (exists b (forall a (forall d (PostedTheses(a, b) and CausedReformation(d, b)))))","(exists a (exists c (exists b (PostedTheses(a, b) and CausedReformation(b, c))))) -> (exists a (exists d (exists b (PostedTheses(a, b) and CausedReformation(d, b)))))"
0,false causality,The party was going great! Then Gerald showed up and little by little people started collecting their coats and heading home. Gerald ruined the party., Gerald ruined the party.  , People left the party because of Gerald.,"Ruined(a, b)","Left(c, b),  BecauseOf(a, b)",[],"[(' Gerald', ' Gerald'), (' the party', ' the party')]","[(' Gerald', ' People')]","Ruined(a, b)","Left(c, b) and BecauseOf(c, a)","(exists a (Ruined(a, b))) -> (forall c (Left(c, b) and BecauseOf(c, a)))","(exists a (exists b (Ruined(a, b)))) -> (exists a (exists c (exists b (Left(c, b) and BecauseOf(c, a)))))"
0,fallacy of logic,"I can’t stop eating these chocolates.  I really love chocolate, or I seriously lack willpower.  I know I really love chocolate; therefore, I cannot lack willpower."," ""I really love chocolate."""," ""I do not lack willpower.""",LovesChocolate(a),HasWillpower(a),[],"[(' I', ' I')]",[],LovesChocolate(a),~LacksWillpower(a),(LovesChocolate(a)) -> (~LacksWillpower(a)),(exists a (LovesChocolate(a))) -> (exists a (~LacksWillpower(a)))
0,false causality,"Shortly after MySpace became popular, U.S. soldiers found Saddam Hussein.", U.S. soldiers found Saddam Hussein shortly after MySpace became popular.  , MySpace becoming popular was related to U.S. soldiers finding Saddam Hussein.,"FoundSaddam(a),  BecamePopular(c)","IsPopular(c),  RelatedToFindingSaddam(a)",[],"[(' U.S. soldiers', ' U.S. soldiers'), (' Saddam Hussein', ' Saddam Hussein'), (' MySpace', ' MySpace')]",[],FoundSaddam(a) and BecamePopular(c),IsPopular(c) and RelatedToFindingSaddam(a),(FoundSaddam(a) and BecamePopular(c)) -> (IsPopular(c) and RelatedToFindingSaddam(a)),(exists a (exists c (FoundSaddam(a) and BecamePopular(c)))) -> (exists a (exists c (IsPopular(c) and RelatedToFindingSaddam(a))))
0,false causality,Jimmy isn't at school today. He must be on a family trip.," ""Jimmy isn't at school today.""  "," ""Jimmy is on a family trip.""","IsNotAt(a, b)","IsOn(a, c)",[],"[(' Jimmy', ' Jimmy')]",[],"IsNotAt(a, b)","IsOn(a, c)","(IsNotAt(a, b)) -> (IsOn(a, c))","(exists a (exists b (IsNotAt(a, b)))) -> (exists a (exists c (IsOn(a, c))))"
0,circular reasoning,"I am athletic because I run, and I run because I'm athletic."," ""I am athletic and I run.""  "," ""Running makes a person athletic.""","IsAthletic(a),  Runs(a)","Runs(b),  IsAthletic(b)",[],[],[],IsAthletic(a) and Runs(a),Runs(b) and IsAthletic(b),(IsAthletic(a) and Runs(a)) -> (Runs(b) and IsAthletic(b)),(exists a (IsAthletic(a) and Runs(a))) -> (exists b (Runs(b) and IsAthletic(b)))
0,false causality,You know Jane Fonda’s exercise videos must be worth the money. Look at the great shape she’s in., Jane Fonda is in great shape.  , Jane Fonda's exercise videos are worth the money.,IsInGreatShape(a),IsWorthTheMoney(a),[],"[("" Jane Fonda's exercise videos"", ' Jane Fonda')]",[],IsInGreatShape(a),IsWorthTheMoney(a),(IsInGreatShape(a)) -> (IsWorthTheMoney(a)),(exists a (IsInGreatShape(a))) -> (exists a (IsWorthTheMoney(a)))
0,fallacy of credibility,Albert Einstein was extremely impressed with this theory.," ""Albert Einstein was extremely impressed with this theory.""  "," ""This theory is impressive.""","IsImpressedWith(b, a)",IsImpressive(a),[],"[(' this theory', ' This theory')]",[],"IsImpressedWith(b, a)",IsImpressive(a),"(IsImpressedWith(b, a)) -> (IsImpressive(a))","(exists a (exists b (IsImpressedWith(b, a)))) -> (exists a (IsImpressive(a)))"
0,false causality,“I sneezed exactly at the same time the power went off. My sneeze must’ve done something to make the power go off. “," ""I sneezed exactly when the power went off.""  "," ""My sneeze made the power go off.""","Sneezed(b),  WentOff(a)","MadeGoOff(c, a)",[],"[(' the power', ' the power')]",[],Sneezed(b) and WentOff(a),"MadeGoOff(c, a)","(Sneezed(b) and WentOff(a)) -> (MadeGoOff(c, a))","(exists a (exists b (Sneezed(b) and WentOff(a)))) -> (exists a (exists c (MadeGoOff(c, a))))"
0,faulty generalization,"It’s getting late, and we still have to decide on the school budget. What do you say we just leave it as is and we can call it a night?", It’s getting late.  , We should leave the school budget as is.,IsLate(a),LeaveAsIs(c),[],[],[],IsLate(a),LeaveAsIs(c),(IsLate(a)) -> (LeaveAsIs(c)),(exists a (IsLate(a))) -> (exists c (LeaveAsIs(c)))
0,ad hominem,"Speaker 1 (Democrat): “Donald Trump is a known adulterer. It reflects badly on his character, and suggests he might not be trustworthy.”
Speaker 2 (Republican): “What about Bill Clinton? You didn’t seem to care when he cheated.”"," ""Donald Trump is a known adulterer""  "," ""Donald Trump might not be trustworthy""",IsKnownAdulterer(a),IsNotTrustworthy(a),[],"[(' Donald Trump', ' Donald Trump')]",[],IsKnownAdulterer(a),~IsNotTrustworthy(a),(IsKnownAdulterer(a)) -> (~IsNotTrustworthy(a)),(exists a (IsKnownAdulterer(a))) -> (exists a (~IsNotTrustworthy(a)))
0,ad hominem,"I hope I presented my argument clearly.  Now, my opponent will attempt to refute my argument by his own fallacious, incoherent, illogical version of history."," My opponent's version of history is fallacious, incoherent, and illogical.  ", My opponent will not refute my argument effectively.,"IsFallacious(a),  IsIncoherent(a),  IsIllogical(a)","WillNotRefuteEffectively(b, c)",[],[],"[("" My opponent's version of history"", ' My opponent')]",IsFallacious(a) and IsIncoherent(a) and IsIllogical(a),"WillNotRefuteEffectively(b, c)","(exists a (IsFallacious(a) and IsIncoherent(a) and IsIllogical(a))) -> (forall b (WillNotRefuteEffectively(b, c)))","(exists a (IsFallacious(a) and IsIncoherent(a) and IsIllogical(a))) -> (exists c (exists b (WillNotRefuteEffectively(b, c))))"
0,false causality,"Every time we sacrifice virgins, it rains. Therefore, sacrificing virgins causes it to rain.", Sacrificing virgins is followed by rain., Sacrificing virgins causes rain.,"IsSacrificed(a),  IsFollowedBy(b)","IsSacrificed(a),  CausesRain(a)",[],"[(' Virgins', ' Virgins'), (' rain', ' rain')]",[],IsSacrificed(a) and IsFollowedBy(b),IsSacrificed(a) and CausesRain(b),(IsSacrificed(a) and IsFollowedBy(b)) -> (IsSacrificed(a) and CausesRain(b)),(exists a (exists b (IsSacrificed(a) and IsFollowedBy(b)))) -> (exists a (exists b (IsSacrificed(a) and CausesRain(b))))
0,ad hominem,"Salesman: This car gets better than average gas mileage and is one of the most reliable cars according to Consumer Reports.
Will: I doubt it—you obviously just want to sell me that car.
"," ""The car gets better than average gas mileage and is one of the most reliable cars according to Consumer Reports.""  "," ""The salesman just wants to sell Will the car.""","GetsBetterGasMileage(a, b),  IsReliable(a),  AccordingTo(a, d)","WantsToSell(e, a, f)",[],"[(' The car', ' the car')]","[(' one of the most reliable cars', ' the car')]","GetsBetterGasMileage(a, b) and IsReliable(a) and AccordingTo(a, d)","WantsToSell(e, a, f)","(GetsBetterGasMileage(a, b) and IsReliable(a) and AccordingTo(a, d)) -> (WantsToSell(e, a, f))","(exists a (exists d (exists b (GetsBetterGasMileage(a, b) and IsReliable(a) and AccordingTo(a, d))))) -> (exists f (exists a (exists e (WantsToSell(e, a, f)))))"
0,fallacy of relevance,Labor unions in America are just as bad as Russia under Stalin!," ""Labor unions in America are as bad as Russia under Stalin.""  "," ""Labor unions in America are bad""","IsBad(a),  IsUnder(b, c)",IsBad(d),[],[],"[(' Labor unions in America', ' Labor unions'), (' Labor unions in America', ' America')]",IsBad(a) and (b = c),IsBad(d),(exists a (IsBad(a) and (b = c))) -> (forall d (IsBad(d))),(exists a (exists c (exists b (IsBad(a) and (b = c))))) -> (exists d (IsBad(d)))
0,ad populum,"""Everyone was driving over the speed limit, so I shouldn't have gotten a ticket for it!"" is an example of which logical fallacy?"," ""Everyone was driving over the speed limit"""," ""I should not have gotten a ticket for driving over the speed limit""","IsDriving(a),  IsOverSpeedLimit(a)","IsDriving(a),  IsOverSpeedLimit(a),  HasTicket(a)",[],"[(' I', ' Everyone'), (' the speed limit', ' the speed limit')]",[],IsDriving(a) and IsOverSpeedLimit(a),IsDriving(a) and IsOverSpeedLimit(a) and HasTicket(a),(IsDriving(a) and IsOverSpeedLimit(a)) -> (IsDriving(a) and IsOverSpeedLimit(a) and HasTicket(a)),(exists a (IsDriving(a) and IsOverSpeedLimit(a))) -> (exists a (IsDriving(a) and IsOverSpeedLimit(a) and HasTicket(a)))
0,ad hominem,Why would you trust Paris Hilton to sell health food? She drinks and parties and has multiple partners.," ""Paris Hilton drinks and parties and has multiple partners.""  "," ""Paris Hilton should not be trusted to sell health food.""","Drinks(a),  Parties(a),  HasMultiplePartners(a)","NotTrustedToSell(a, c)",[],"[(' Paris Hilton', ' Paris Hilton')]",[],Drinks(a) and Parties(a) and HasMultiplePartners(a),"~NotTrustedToSell(a, c)","(Drinks(a) and Parties(a) and HasMultiplePartners(a)) -> (~NotTrustedToSell(a, c))","(exists a (Drinks(a) and Parties(a) and HasMultiplePartners(a))) -> (exists a (exists c (~NotTrustedToSell(a, c))))"
0,false causality,"“Yesterday, I walked under a ladder with an open umbrella indoors while spilling salt in front of a black cat. And I forgot to knock on wood with my lucky dice. That must be why I’m having such a bad day today. It’s bad luck.”"," ""I walked under a ladder with an open umbrella indoors while spilling salt in front of a black cat."""," ""I am having a bad day because of bad luck.""","WalkedUnderLadder(a, b),  HasOpenUmbrella(c),  Indoors(c),  SpilledSalt(a, d),  InFrontOfBlackCat(a, e)","IsHavingBadDay(a, f),  IsBecauseOfBadLuck(f, g)",[],"[(' I', ' I')]",[],"WalkedUnderLadder(a, b) and HasOpenUmbrella(c) and Indoors(c) and SpilledSalt(a, d) and InFrontOfBlackCat(a, e)","IsHavingBadDay(a, f) and IsBecauseOfBadLuck(f, g)","(WalkedUnderLadder(a, b) and HasOpenUmbrella(c) and Indoors(c) and SpilledSalt(a, d) and InFrontOfBlackCat(a, e)) -> (IsHavingBadDay(a, f) and IsBecauseOfBadLuck(f, g))","(exists c (exists d (exists a (exists b (exists e (WalkedUnderLadder(a, b) and HasOpenUmbrella(c) and Indoors(c) and SpilledSalt(a, d) and InFrontOfBlackCat(a, e))))))) -> (exists f (exists a (exists g (IsHavingBadDay(a, f) and IsBecauseOfBadLuck(f, g)))))"
0,faulty generalization,"A car makes less pollution than a bus. Therefore, cars are less of a pollution problem than buses", A car makes less pollution than a bus.  , Cars are less of a pollution problem than buses.,"MakesLessPollution(a, b)","IsLessOfPollutionProblem(c, e)",[],[],"[(' a bus', ' buses')]","MakesLessPollution(a, b)","IsLessOfPollutionProblem(c, e)","(exists b (MakesLessPollution(a, b))) -> (forall e (IsLessOfPollutionProblem(c, e)))","(exists a (exists b (MakesLessPollution(a, b)))) -> (exists c (exists e (IsLessOfPollutionProblem(c, e))))"
0,appeal to emotion,"Preys on people’s emotions and sensitivities, can turn into a slippery slope", Preys on people’s emotions and sensitivities.  , It turns into a slippery slope.,"PreysOn(a),  PreysOn(b)","TurnsInto(c, d)",[],[],[],PreysOn(a) and PreysOn(b),"TurnsInto(c, d)","(PreysOn(a) and PreysOn(b)) -> (TurnsInto(c, d))","(exists a (exists b (PreysOn(a) and PreysOn(b)))) -> (exists c (exists d (TurnsInto(c, d))))"
0,fallacy of logic,"Bats are mammals. Bats can fly. Pigs are also mammals, therefore pigs can fly."," ""Bats are mammals and bats can fly.""  "," ""Pigs can fly.""","IsMammal(b),  CanFly(b)",CanFly(a),[],"[(' Pigs', ' mammals')]",[],IsMammal(b) and CanFly(b),CanFly(a),(IsMammal(b) and CanFly(b)) -> (CanFly(a)),(exists b (IsMammal(b) and CanFly(b))) -> (exists a (CanFly(a)))
0,intentional,The Geo Metro is a superior car because it averages 43 miles per gallon., The Geo Metro averages 43 miles per gallon.  , The Geo Metro is a superior car.,Averages43MPG(a),IsSuperiorCar(a),[],"[(' The Geo Metro', ' The Geo Metro')]",[],Averages43MPG(a),IsSuperiorCar(a),(Averages43MPG(a)) -> (IsSuperiorCar(a)),(exists a (Averages43MPG(a))) -> (exists a (IsSuperiorCar(a)))
0,fallacy of relevance,"“While you may have concerns about my votes about the environment, I can assure you that I am an open minded individual. What we should really discuss is my record on votes that expanded educational opportunities for all children."""," ""I am an open-minded individual who has a record on votes that expanded educational opportunities for all children."""," ""Concerns about my votes on the environment are not important.""","IsOpenMindedIndividual(a),  HasRecordOnVotes(a),  ExpandsEducationalOpportunities(e, f)","ConcernsAbout(g, h)",[],[],[],"IsOpenMindedIndividual(a) and HasRecordOnVotes(a) and ExpandsEducationalOpportunities(e, f)","ConcernsAbout(g, h) and ~IsImportant(g)","(IsOpenMindedIndividual(a) and HasRecordOnVotes(a) and ExpandsEducationalOpportunities(e, f)) -> (ConcernsAbout(g, h) and ~IsImportant(g))","(exists f (exists a (exists e (IsOpenMindedIndividual(a) and HasRecordOnVotes(a) and ExpandsEducationalOpportunities(e, f))))) -> (exists h (exists g (ConcernsAbout(g, h) and ~IsImportant(g))))"
0,intentional,"Fish are the easiest pets to keep; they are inexpensive and require no maintenance at all. Plus, they are really pretty and soothing to watch.", Fish are inexpensive and require no maintenance at all.  , Fish are the easiest pets to keep.,"IsInexpensive(a),  RequiresNoMaintenance(a)","IsFish(a),  IsPet(a),  IsEasiestToKeep(a)",[],"[(' Fish', ' Fish')]","[(' Fish', ' pets')]",IsInexpensive(a) and RequiresNoMaintenance(a),IsFish(a) and IsPet(a) and IsEasiestToKeep(a),(IsInexpensive(a) and RequiresNoMaintenance(a)) -> (IsFish(a) and IsPet(a) and IsEasiestToKeep(a)),(exists a (IsInexpensive(a) and RequiresNoMaintenance(a))) -> (exists a (IsFish(a) and IsPet(a) and IsEasiestToKeep(a)))
0,intentional,I am only slightly obese.  That is perfectly normal here in America.," ""I am slightly obese.""  "," ""Being slightly obese is normal in America.""",IsSlightlyObese(a),"IsSlightlyObese(x),  IsNormalIn(y, b)",[],[],[],IsSlightlyObese(a),"IsSlightlyObese(x) and IsNormalIn(x, b)","(IsSlightlyObese(a)) -> (IsSlightlyObese(x) and IsNormalIn(x, b))","(exists a (IsSlightlyObese(a))) -> (exists x (exists b (IsSlightlyObese(x) and IsNormalIn(x, b))))"
0,ad populum,"Most people think the world is flat, therefore it is flat.", Most people think the world is flat.  , The world is flat.,ThinkWorldIsFlat(b),IsFlat(a),[],"[(' the world', ' The world')]",[],ThinkWorldIsFlat(b),IsFlat(a),(ThinkWorldIsFlat(b)) -> (IsFlat(a)),(exists b (ThinkWorldIsFlat(b))) -> (exists a (IsFlat(a)))
0,appeal to emotion,You have to give me a passing grade. I spent 150 hours on that project and missed every party this quarter.," ""I spent 150 hours on that project and missed every party this quarter."""," ""You have to give me a passing grade.""","SpentHours(a, b),  MissedParty(a, c)","Give(e, f, g)",[],[],[],"SpentHours(a, b) and MissedParty(a, c)","Give(e, f, g)","(SpentHours(a, b) and MissedParty(a, c)) -> (Give(e, f, g))","(exists a (exists c (exists b (SpentHours(a, b) and MissedParty(a, c))))) -> (exists f (exists e (exists g (Give(e, f, g)))))"
0,ad populum,"I guess I should buy my 12 year old daughter an iPhone. Everyone at her school has one, and I want her to fit in with the other kids.", Everyone at her school has an iPhone.  , You should buy your 12-year-old daughter an iPhone to help her fit in with the other kids.,"HasiPhone(b),  IsAtSchool(b, c)","Is12YearsOld(d),  HasDaughter(x,d)",[],"[(' iPhone', ' iPhone')]",[],"IsAtSchool(b, c) and HasiPhone(b)","HasDaughter(x,d) and Is12YearsOld(d) and Buys(x,a) and FitsInWith(d,e)","(IsAtSchool(b, c) and HasiPhone(b)) -> (HasDaughter(x,d) and Is12YearsOld(d) and Buys(x,a) and FitsInWith(d,e))","(exists c (exists b (IsAtSchool(b, c) and HasiPhone(b)))) -> (exists a (exists e (exists x (exists d (HasDaughter(x,d) and Is12YearsOld(d) and Buys(x,a) and FitsInWith(d,e))))))"
0,intentional,Kerry’s plan will raise taxes by at least $900 billion his first hundred days., Kerry's plan will raise taxes by at least $900 billion in his first hundred days.  , Taxes will increase by at least $900 billion in Kerry's first hundred days.,"WillRaiseTaxes(c, a),  Amount(b),  TimeFrame(d)","WillIncrease(a),  Amount(b),  TimeFrame(e)",[],"[(' taxes', ' Taxes'), (' $900 billion', ' $900 billion')]",[],"WillRaiseTaxes(c, a) and Amount(b) and TimeFrame(d)",WillIncrease(a) and Amount(b) and TimeFrame(e),"(WillRaiseTaxes(c, a) and Amount(b) and TimeFrame(d)) -> (WillIncrease(a) and Amount(b) and TimeFrame(e))","(exists a (exists c (exists d (exists b (WillRaiseTaxes(c, a) and Amount(b) and TimeFrame(d)))))) -> (exists a (exists e (exists b (WillIncrease(a) and Amount(b) and TimeFrame(e)))))"
0,fallacy of extension,"If you told a person, ""I think we should all stay inside to bend the curve of COVID-19"" and they replied, ""so I guess you want people to lose their jobs then,"" what logical fallacy are they using?"," ""You want people to lose their jobs.""  "," ""You should not want people to stay inside.""","WantToLoseJobs(a, b)","WantToStayInside(a, b)",[],"[(' You', ' You'), (' people', ' people')]","[(' You', ' people'), (' people', ' You')]","WantToLoseJobs(a, b)","~WantToStayInside(a, b)","(exists b (exists a (WantToLoseJobs(a, b)))) -> (exists a (forall b (~WantToStayInside(a, b))))","(exists a (exists b (WantToLoseJobs(a, b)))) -> (exists a (exists b (~WantToStayInside(a, b))))"
0,appeal to emotion,"Power lines cause cancer. I met a little boy with cancer who lived just 20 miles from a power line who looked into my eyes and said, in his weak voice, “Please do whatever you can so that other kids won’t have to go through what I am going through.” I urge you to vote for this bill to tear down all power lines and replace them with monkeys on treadmills."," ""Power lines cause cancer."""," ""Vote for this bill to tear down all power lines and replace power lines with monkeys on treadmills.""",CauseCancer(a),"TearsDown(c, a),  Replaces(a, d),  On(d, e)",[],"[(' Power lines', ' power lines')]",[],CauseCancer(a),"TearsDown(c, a) and Replaces(a, d) and On(d, e)","(CauseCancer(a)) -> (TearsDown(c, a) and Replaces(a, d) and On(d, e))","(exists a (CauseCancer(a))) -> (exists a (exists c (exists e (exists d (TearsDown(c, a) and Replaces(a, d) and On(d, e))))))"
0,ad hominem,"Student: Hey, Professor Moore, we shouldn't have to read this book by Freud. Everyone knows he used cocaine.", Freud used cocaine.  , We should not have to read the book by Freud.,"Used(a, b)","Read(c, d),  WrittenBy(d, a)",[],"[(' Freud', ' Freud')]",[],"Used(a, b)","Read(c, d) and WrittenBy(d, a) and ~Read(c, d)","(Used(a, b)) -> (Read(c, d) and WrittenBy(d, a) and ~Read(c, d))","(exists a (exists b (Used(a, b)))) -> (exists a (exists c (exists d (Read(c, d) and WrittenBy(d, a) and ~Read(c, d)))))"
0,false causality,"Our house was burglarized right after that new family moved in next door. Therefore, that new family must have been involved.", The house was burglarized after the new family moved in next door.  , The new family was involved in the burglary.,"Burglarized(b),  MovedIn(a, c)","InvolvedIn(a, d)",[],"[(' the new family', ' The new family')]",[],"MovedIn(a, c) and Burglarized(b)","InvolvedIn(a, d)","(MovedIn(a, c) and Burglarized(b)) -> (InvolvedIn(a, d))","(exists a (exists c (exists b (MovedIn(a, c) and Burglarized(b))))) -> (exists a (exists d (InvolvedIn(a, d))))"
0,circular reasoning,"Witchcraft remains our most urgent spiritual problem because it threatens
our very souls.", Witchcraft is an urgent spiritual problem.  , Witchcraft threatens our souls.,IsSpiritualProblem(a),"Threatens(a, c)",[],"[(' Witchcraft', ' Witchcraft')]",[],IsSpiritualProblem(a),"Threatens(a, c)","(IsSpiritualProblem(a)) -> (Threatens(a, c))","(exists a (IsSpiritualProblem(a))) -> (exists a (exists c (Threatens(a, c))))"
0,false dilemma,"Senator Jill: ""We'll have to cut education funding this year.""
Senator Bill: ""Why?""
Senator Jill: ""Well, either we cut the social programs or we live with a huge deficit and we can't live with the deficit."""," ""We cannot live with a huge deficit.""  "," ""We have to cut education funding this year.""","CannotLiveWith(a, b)","HaveToCut(c),  IsThisYear(d)",[],[],[],"~CannotLiveWith(a, b)",HaveToCut(c) and IsThisYear(d),"(~CannotLiveWith(a, b)) -> (HaveToCut(c) and IsThisYear(d))","(exists a (exists b (~CannotLiveWith(a, b)))) -> (exists c (exists d (HaveToCut(c) and IsThisYear(d))))"
0,appeal to emotion,"""You'll make the right decision because you have something that not many people do: you have heart.""?"," ""You have heart.""  "," ""You will make the right decision.""",HasHeart(a),WillMakeDecision(a),[],"[(' You', ' You')]",[],HasHeart(a),WillMakeDecision(a),(HasHeart(a)) -> (WillMakeDecision(a)),(exists a (HasHeart(a))) -> (exists a (WillMakeDecision(a)))
0,faulty generalization,Christine has a terrible experience with a boyfriend. She decides that all boys are mean. This is an example of which logical fallacy?, Christine had a terrible experience with a boyfriend.  , All boys are mean.,"HadExperienceWith(b, a),  IsTerrible(c)",IsMean(a),[],"[(' All boys', ' boyfriend')]",[],"HadExperienceWith(b, a) and IsTerrible(c)",IsBoy(a) and IsMean(a),"(HadExperienceWith(b, a) and IsTerrible(c)) -> (IsBoy(a) and IsMean(a))","(exists a (exists c (exists b (HadExperienceWith(b, a) and IsTerrible(c))))) -> (exists a (IsBoy(a) and IsMean(a)))"
0,circular reasoning,Smoking pot is against the law because it's wrong; I know it's wrong because it is against the law., Smoking pot is against the law., Smoking pot is wrong.,"IsSmoked(x),  IsAgainst(b)",IsWrong(c),[],[],[],IsSmoked(a) and IsAgainst(b),IsWrong(c),(IsSmoked(a) and IsAgainst(b)) -> (IsWrong(c)),(exists a (exists b (IsSmoked(a) and IsAgainst(b)))) -> (exists c (IsWrong(c)))
0,circular reasoning,"""You can't give me a D because I'm an A student!"""," ""I am an A student.""  "," ""I should not receive a D grade.""",IsAStudent(a),"ShouldNotReceive(a, c)",[],"[(' I', ' I')]",[],IsAStudent(a),"ShouldNotReceive(a, c)","(IsAStudent(a)) -> (ShouldNotReceive(a, c))","(exists a (IsAStudent(a))) -> (exists a (exists c (ShouldNotReceive(a, c))))"
0,fallacy of logic,People who buy stocks are no different from people who bet on horse racing. They both risk their money with little chance of making a big profit., People who buy stocks risk their money with little chance of making a big profit.  , People who bet on horse racing risk their money with little chance of making a big profit.,"BuysStocks(b),  RisksMoney(b),  HasLittleChanceOfMakingBigProfit(b),  IsRisked(c)","BetsOnHorseRacing(d),  RisksMoney(d),  HasLittleChanceOfMakingBigProfit(d),  IsRisked(e)",[],"[(' big profit', ' big profit')]","[(' People who buy stocks', ' People'), (' their money', ' money')]",BuysStocks(b) and (RisksMoney(b) and HasLittleChanceOfMakingBigProfit(b) and IsRisked(c)),BetsOnHorseRacing(d) and (RisksMoney(d) and HasLittleChanceOfMakingBigProfit(d)),(exists b (BuysStocks(b) and (RisksMoney(b) and HasLittleChanceOfMakingBigProfit(b) and IsRisked(c)))) -> (forall d (BetsOnHorseRacing(d) and (RisksMoney(d) and HasLittleChanceOfMakingBigProfit(d)))),(exists c (exists b (BuysStocks(b) and (RisksMoney(b) and HasLittleChanceOfMakingBigProfit(b) and IsRisked(c))))) -> (exists d (BetsOnHorseRacing(d) and (RisksMoney(d) and HasLittleChanceOfMakingBigProfit(d))))
0,appeal to emotion,"I cannot get a job because the public education system failed me;  I have to steal to  survive.  It is society's fault, not mine."," ""The public education system failed me.""  "," ""I am not at fault for stealing.""","Failed(a, b)","AtFault(c),  IsStealing(c)",[],[],[],"Failed(a, b)",~AtFault(c) and IsStealing(c),"(Failed(a, b)) -> (~AtFault(c) and IsStealing(c))","(exists a (exists b (Failed(a, b)))) -> (exists c (~AtFault(c) and IsStealing(c)))"
0,faulty generalization,"Trump presents a dark image of America if Clinton is elected, with “Syrian refugees flooding in, illegal immigrants convicted of crimes staying.”"," ""Syrian refugees are flooding in and illegal immigrants convicted of crimes are staying."""," ""America will be in a dark state if Clinton is elected.""","FloodingIn(a),  Staying(b)","IsInDarkState(c),  IsElected(e)",[],[],[],FloodingIn(a) and Staying(b),IsElected(e) and IsInDarkState(c),(FloodingIn(a) and Staying(b)) -> (IsElected(e) and IsInDarkState(c)),(exists a (exists b (FloodingIn(a) and Staying(b)))) -> (exists c (exists e (IsElected(e) and IsInDarkState(c))))
0,ad hominem,"Charlie: Fast food is filled with salt, fat, and added sugars. We need better regulation of the industry.
Bob: That my be, but you're such a hypocrite! I saw you devour a Triple-Baconator, super-sized fries, and 64oz of soda yesterday!"," ""Fast food is filled with salt, fat, and added sugars."""," ""We need better regulation of the fast food industry.""","IsFilledWithSalt(a),  IsFilledWithFat(a),  IsFilledWithAddedSugars(a)","NeedsBetterRegulation(b, d)",[],[],"[(' Fast food', ' fast food industry')]",IsFilledWithSalt(a) and IsFilledWithFat(a) and IsFilledWithAddedSugars(a),"NeedsBetterRegulation(b, d)","(exists a (IsFilledWithSalt(a) and IsFilledWithFat(a) and IsFilledWithAddedSugars(a))) -> (forall d (NeedsBetterRegulation(b, d)))","(exists a (IsFilledWithSalt(a) and IsFilledWithFat(a) and IsFilledWithAddedSugars(a))) -> (exists d (exists b (NeedsBetterRegulation(b, d))))"
0,faulty generalization,Christine has a terrible experience with a boyfriend. She decides that all boys are mean.," ""Christine had a terrible experience with a boyfriend."""," ""All boys are mean.""","HadTerribleExperience(a, b),  WithBoyfriend(b, c)",IsMean(d),[],[],"[(' boyfriend', ' All boys')]","HadTerribleExperience(a, b) and WithBoyfriend(b, c)",IsBoy(d) and IsMean(d),"(exists c (HadTerribleExperience(a, b) and WithBoyfriend(b, c))) -> (forall d (IsBoy(d) and IsMean(d)))","(exists a (exists c (exists b (HadTerribleExperience(a, b) and WithBoyfriend(b, c))))) -> (exists d (IsBoy(d) and IsMean(d)))"
0,intentional,"Barbara believes the marketing agency's office is haunted. The cleaning crew once said they heard a other-worldly noise late at night. Since no one could prove that it wasn't a ghost, the office must be haunted."," ""Barbara believes the office is haunted and the cleaning crew heard a noise they couldn't identify.""  "," ""The office is haunted.""","BelievesHaunted(b, a),  HeardNoise(c, d),  CannotIdentify(c, d)",IsHaunted(a),[],"[(' the office', ' The office')]",[],"BelievesHaunted(b, a) and (HeardNoise(c, d) and CannotIdentify(c, d))",IsHaunted(a),"(BelievesHaunted(b, a) and (HeardNoise(c, d) and CannotIdentify(c, d))) -> (IsHaunted(a))","(exists a (exists c (exists d (exists b (BelievesHaunted(b, a) and (HeardNoise(c, d) and CannotIdentify(c, d))))))) -> (exists a (IsHaunted(a)))"
0,ad populum,"I am voting for Pepitone for President because the rest of my family is voting for her, and I don't want to be the only one not doing so."," ""The rest of my family is voting for Pepitone for President."""," ""You should vote for Pepitone for President.""","IsVoting(c, a),  IsPresident(b)","IsVoting(d, a),  IsPresident(b)",[],"[(' Pepitone', ' Pepitone'), (' President', ' President')]",[],"IsVoting(c, a) and IsPresident(b)","IsVoting(d, a) and IsPresident(b)","(IsVoting(c, a) and IsPresident(b)) -> (IsVoting(d, a) and IsPresident(b))","(exists a (exists c (exists b (IsVoting(c, a) and IsPresident(b))))) -> (exists a (exists b (exists d (IsVoting(d, a) and IsPresident(b)))))"
0,fallacy of credibility,"“I admire the president for being a good role model.” REPLY: “But the New York Times says he’s a lousy role model, so you’re wrong.”"," ""The New York Times says the president is a lousy role model."""," ""The president is not a good role model.""","Says(b, a, c),  IsLousyRoleModel(a)",IsNotGoodRoleModel(a),[],"[(' The president', ' The president')]",[],"Says(b, a, c) and IsLousyRoleModel(a)",IsNotGoodRoleModel(a),"(Says(b, a, c) and IsLousyRoleModel(a)) -> (IsNotGoodRoleModel(a))","(exists a (exists c (exists b (Says(b, a, c) and IsLousyRoleModel(a))))) -> (exists a (IsNotGoodRoleModel(a)))"
0,faulty generalization,The numbers on gun violence speak for themselves. We should ban guns in the country!," ""The numbers on gun violence are significant.""  "," ""The country should ban guns.""","OnGunViolence(a),  AreSignificant(a)","ShouldBan(c, d)",[],[],[],OnGunViolence(a) and AreSignificant(a),"ShouldBan(c, d)","(OnGunViolence(a) and AreSignificant(a)) -> (ShouldBan(c, d))","(exists a (OnGunViolence(a) and AreSignificant(a))) -> (exists c (exists d (ShouldBan(c, d))))"
0,false causality,"“The temperature has dropped this morning, and I also have a headache. Therefore, the cold weather must be causing my headache. “"," ""The temperature has dropped this morning and I have a headache."""," ""The cold weather is causing my headache.""","HasDropped(a),  HasHeadache(b)","IsColdWeather(d),  IsCausing(d, e)",[],[],[],HasDropped(a) and HasHeadache(b),"IsColdWeather(d) and IsCausing(d, e)","(HasDropped(a) and HasHeadache(b)) -> (IsColdWeather(d) and IsCausing(d, e))","(exists a (exists b (HasDropped(a) and HasHeadache(b)))) -> (exists e (exists d (IsColdWeather(d) and IsCausing(d, e))))"
0,ad hominem,"My teacher says the Earth is flat, so it definitely is flat."," ""The teacher says the Earth is flat.""  "," ""The Earth is flat.""","SaysFlat(b, a)",IsFlat(a),[],"[(' the Earth', ' The Earth')]",[],"SaysFlat(b, a)",IsFlat(a),"(SaysFlat(b, a)) -> (IsFlat(a))","(exists a (exists b (SaysFlat(b, a)))) -> (exists a (IsFlat(a)))"
0,equivocation,"The fallacy of equivocation occurs when a key term or phrase in an argument is used in an ambiguous way, with one meaning in one portion of the argument and then another meaning in another portion of the argument.", A key term or phrase in an argument is used ambiguously with different meanings in different parts of the argument., The fallacy of equivocation occurs.,"IsUsedAmbiguously(a),  IsInArgument(a,b),  HasDifferentMeanings(a,c),  IsInDifferentParts(a,d)","IsFallacy(e),  IsEquivocation(e)",[],[],[],"IsUsedAmbiguously(a) and IsInArgument(a,b) and HasDifferentMeanings(a,c) and IsInDifferentParts(a,d)",IsFallacy(e) and IsEquivocation(e),"(IsUsedAmbiguously(a) and IsInArgument(a,b) and HasDifferentMeanings(a,c) and IsInDifferentParts(a,d)) -> (IsFallacy(e) and IsEquivocation(e))","(exists a (exists c (exists d (exists b (IsUsedAmbiguously(a) and IsInArgument(a,b) and HasDifferentMeanings(a,c) and IsInDifferentParts(a,d)))))) -> (exists e (IsFallacy(e) and IsEquivocation(e)))"
0,faulty generalization,When you have too little or unrepresentative data to make claim., Too little or unrepresentative data is available.  , A claim cannot be made.,"IsAvailable(a),  IsAvailable(b)",CannotBeMade(c),[],[],[],IsAvailable(a) and IsAvailable(b),CannotBeMade(c),(IsAvailable(a) and IsAvailable(b)) -> (CannotBeMade(c)),(exists a (exists b (IsAvailable(a) and IsAvailable(b)))) -> (exists c (CannotBeMade(c)))
0,ad populum,"The majority of people believe advertisers should spend more money on billboards, so billboards are objectively the best form of advertisement.", The majority of people believe advertisers should spend more money on billboards.  , Billboards are the best form of advertisement.,"Believes(c,b),  SpendsMoreMoneyOn(c,a)",IsBestFormOfAdvertisement(a),[],"[(' billboards', ' Billboards')]","[(' billboards', ' form of advertisement')]","Believes(c,b) and SpendsMoreMoneyOn(c,a)",IsBestFormOfAdvertisement(a),"(Believes(c,b) and SpendsMoreMoneyOn(c,a)) -> (IsBestFormOfAdvertisement(a))","(exists a (exists c (exists b (Believes(c,b) and SpendsMoreMoneyOn(c,a))))) -> (exists a (IsBestFormOfAdvertisement(a)))"
0,faulty generalization,"If we ban Hummers because they are bad for the environment, eventually the government will ban all cars, so we should not ban Hummers.", Hummers are bad for the environment.  , The government will ban all cars.,IsBadForEnvironment(a),"WillBan(c, d)",[],[],"[(' Hummers', ' all cars')]",IsBadForEnvironment(a),"WillBan(c, d)","(exists a (IsBadForEnvironment(a))) -> (forall d (WillBan(c, d)))","(exists a (IsBadForEnvironment(a))) -> (exists c (exists d (WillBan(c, d))))"
0,ad hominem,"My opponent raised a good point, but can we trust him? I mean he just moved to town only 5 months ago, how much could he really know?"," ""My opponent moved to town 5 months ago.""  "," ""My opponent does not know much.""","MovedToTown(a, b)",DoesNotKnowMuch(a),[],"[(' My opponent', ' My opponent')]",[],"MovedToTown(a, b)",DoesNotKnowMuch(a),"(MovedToTown(a, b)) -> (DoesNotKnowMuch(a))","(exists a (exists b (MovedToTown(a, b)))) -> (exists a (DoesNotKnowMuch(a)))"
0,false dilemma,"Either you can save your money to buy a new car for yourself, or you can just take an Uber around for the rest of your life.", You can save money to buy a new car for yourself., You will take an Uber around for the rest of your life.,"CanSaveMoney(a),  ToBuy(a, c)","WillTakeUber(a, d),  IsForRestOfLife(e)",[],"[(' You', ' You'), (' yourself', ' You')]",[],"CanSaveMoney(a) and ToBuy(a, c)","WillTakeUber(a, d) and IsForRestOfLife(e)","(CanSaveMoney(a) and ToBuy(a, c)) -> (WillTakeUber(a, d) and IsForRestOfLife(e))","(exists a (exists c (CanSaveMoney(a) and ToBuy(a, c)))) -> (exists a (exists e (exists d (WillTakeUber(a, d) and IsForRestOfLife(e)))))"
0,false causality,"Matthieu was the only player on the team who didn't grow a playoff beard, and thus he ended up getting injured.", Matthieu was the only player on the team who didn't grow a playoff beard.  , Not growing a playoff beard leads to getting injured.,"Didn'tGrow(a, c)",NotGrown(a),[],"[(' playoff beard', ' Playoff beard')]",[],"Didn'tGrow(a, b) and (c = b)",NotGrown(a),"(Didn'tGrow(a, b) and (c = b)) -> (NotGrown(a))","(exists a (exists c (exists b (Didn'tGrow(a, b) and (c = b))))) -> (exists a (NotGrown(a)))"
0,intentional,"John: Members of the UbaTuba White Men's Club are upstanding citizens of the community.
Marvin: Then why are there so many of these members in jail?
John: They were never true UbaTuba White Men's Club members.
Marvin: What’s a true UbaTuba White Men's Club member?
John: Those who don't go to jail.
", UbaTuba White Men's Club members are upstanding citizens of the community.  , True UbaTuba White Men's Club members do not go to jail.,"IsMemberOfCommunity(a),  IsUpstandingCitizen(a)","IsTrueMember(c),  DoesNotGoToJail(c)",[],[],"[("" UbaTuba White Men's Club members"", "" True UbaTuba White Men's Club members"")]",IsMemberOfCommunity(a) and IsUpstandingCitizen(a),IsTrueMember(c) and DoesNotGoToJail(c),(exists a (IsMemberOfCommunity(a) and IsUpstandingCitizen(a))) -> (forall c (IsTrueMember(c) and DoesNotGoToJail(c))),(exists a (IsMemberOfCommunity(a) and IsUpstandingCitizen(a))) -> (exists c (IsTrueMember(c) and DoesNotGoToJail(c)))
0,faulty generalization,"""Animal experimentation reduces our respect for life. If we don't respect life, we are likely to be more and more tolerant of violent acts like war and murder. Soon our society will become a battlefield in which everyone constantly fears for their lives. It will be the end of civilization. To prevent this terrible consequence, we should make animal experimentation illegal right now."""," ""Animal experimentation reduces our respect for life."""," ""Society will become a battlefield and civilization will end.""","Reduces(a, b)","WillBecome(d, e),  WillEnd(f)",[],[],[],"Reduces(a, b)","WillBecome(d, e) and WillEnd(f)","(Reduces(a, b)) -> (WillBecome(d, e) and WillEnd(f))","(exists a (exists b (Reduces(a, b)))) -> (exists f (exists e (exists d (WillBecome(d, e) and WillEnd(f)))))"
0,false causality,You know Jane Fonda's exercise videos must be worth the money. Look at the great shape she's in., Jane Fonda is in great shape.  , Jane Fonda's exercise videos are worth the money.,IsInGreatShape(a),"AreWorth(a, b)",[],"[("" Jane Fonda's exercise videos"", ' Jane Fonda')]",[],IsInGreatShape(a),"AreWorth(a, b)","(IsInGreatShape(a)) -> (AreWorth(a, b))","(exists a (IsInGreatShape(a))) -> (exists a (exists b (AreWorth(a, b))))"
0,faulty generalization,"Asians make lousy athletes, but do well at the Math Olympiad."," ""Asians make lousy athletes and do well at the Math Olympiad.""  "," ""Asians are not good at sports but are good at mathematics.""","MakeLousyAthletes(a),  DoWellAtMathOlympiad(a)","NotGoodAtSports(a),  GoodAtMathematics(a)",[],"[(' Asians', ' Asians')]","[(' Math Olympiad', ' mathematics')]",MakeLousyAthletes(a) and DoWellAtMathOlympiad(a),NotGoodAtSports(a) and GoodAtMathematics(a),(MakeLousyAthletes(a) and DoWellAtMathOlympiad(a)) -> (NotGoodAtSports(a) and GoodAtMathematics(a)),(exists a (MakeLousyAthletes(a) and DoWellAtMathOlympiad(a))) -> (exists a (NotGoodAtSports(a) and GoodAtMathematics(a)))
0,false dilemma,"“Caldwell Hall is in bad shape. Either we tear it down and put up a new building, or we continue to risk students’ safety. Obviously we shouldn’t risk anyone’s safety, so we must tear the building down.”"," ""Caldwell Hall is in bad shape."""," ""Caldwell Hall must be torn down.""",IsInBadShape(a),MustBeTornDown(a),[],"[(' Caldwell Hall', ' Caldwell Hall')]",[],IsInBadShape(a),MustBeTornDown(a),(IsInBadShape(a)) -> (MustBeTornDown(a)),(exists a (IsInBadShape(a))) -> (exists a (MustBeTornDown(a)))
0,faulty generalization,Did you really vote for Donald as class treasurer? Didn't you hear that his uncle was imprisoned for embezzling $1.5 million?, Donald's uncle was imprisoned for embezzling $1.5 million.  , Donald is not suitable for class treasurer.,IsImprisoned(a),"IsNotSuitable(b, c)",[],[],[],IsImprisoned(a),"IsNotSuitable(b, c)","(IsImprisoned(a)) -> (IsNotSuitable(b, c))","(exists a (IsImprisoned(a))) -> (exists c (exists b (IsNotSuitable(b, c))))"
0,fallacy of logic,"If the ozone layer is destroyed, many people will get cancer and suffer from other illnesses.  The ozone layer is being protected, not destroyed.  So, many people will be spared the pain of cancer and other illnesses.", The ozone layer is being protected.  , Many people will be spared the pain of cancer and other illnesses.,IsProtected(a),"IsSparedPain(b, c),  IsSparedPain(b, d)",[],[],[],IsProtected(a),"IsSparedPain(b, c) and IsSparedPain(b, d)","(IsProtected(a)) -> (IsSparedPain(b, c) and IsSparedPain(b, d))","(exists a (IsProtected(a))) -> (exists c (exists d (exists b (IsSparedPain(b, c) and IsSparedPain(b, d)))))"
0,faulty generalization,"Broccoli has significantly less fat than the leading candy bar! Plus, it's nowhere near as hot as Hot Cheetos!", Broccoli has significantly less fat than the leading candy bar. , Broccoli is healthier than Hot Cheetos.,"LessFatThan(a, b)","HealthierThan(a, c)",[],"[(' Broccoli', ' Broccoli')]",[],"LessFatThan(a, b)","HealthierThan(a, c)","(LessFatThan(a, b)) -> (HealthierThan(a, c))","(exists a (exists b (LessFatThan(a, b)))) -> (exists a (exists c (HealthierThan(a, c))))"
0,fallacy of relevance,You're complaining because you have to walk to school? I used to have to give my parents my entire paycheck.," ""I used to have to give my parents my entire paycheck.""  "," ""You should not complain about walking to school.""","IsGiven(b, a)","ComplainsAboutWalkingTo(c, d)",[],[],[],"IsGiven(b, a)","~ComplainsAboutWalkingTo(c, d)","(IsGiven(b, a)) -> (~ComplainsAboutWalkingTo(c, d))","(exists a (exists b (IsGiven(b, a)))) -> (exists c (exists d (~ComplainsAboutWalkingTo(c, d))))"
0,fallacy of extension,Robot 2 (Blue) has been refuting all of Robot 1's (Orange) arguments. Robot 1 launches the above counterargument. What is this fallacy?, Robot 2 has been refuting all of Robot 1's arguments.  , Robot 1's counterargument contains a fallacy.,"IsRefuting(a, b)",ContainsFallacy(c),[],[],[],"IsRefuting(a, b)",ContainsFallacy(c),"(IsRefuting(a, b)) -> (ContainsFallacy(c))","(exists a (exists b (IsRefuting(a, b)))) -> (exists c (ContainsFallacy(c)))"
0,ad hominem,Personally attacking someone to shift attention away from your views is," ""Personally attacking someone shifts attention away from your views."""," ""You should personally attack someone to shift attention from your views.""","IsPersonallyAttacked(a),  HasAttentionShiftedFrom(b)","PersonallyAttacks(c, a),  HasAttentionShiftedFrom(b)",[],"[(' Someone', ' someone'), (' your views', ' your views')]","[(' your views', ' You')]",IsPersonallyAttacked(a) and HasAttentionShiftedFrom(b),"PersonallyAttacks(c, a) and HasAttentionShiftedFrom(b)","(exists b (IsPersonallyAttacked(a) and HasAttentionShiftedFrom(b))) -> (forall c (PersonallyAttacks(c, a) and HasAttentionShiftedFrom(b)))","(exists a (exists b (IsPersonallyAttacked(a) and HasAttentionShiftedFrom(b)))) -> (exists a (exists c (exists b (PersonallyAttacks(c, a) and HasAttentionShiftedFrom(b)))))"
0,ad hominem,"""She's such a mean teacher and person – that's why she wouldn't raise my grade ONE percent!"""," ""The teacher is mean.""  "," ""The teacher would not raise my grade by one percent.""",IsMean(a),"WouldNotRaiseGrade(a, b)",[],"[(' The teacher', ' The teacher')]",[],IsMean(a),"~WouldNotRaiseGrade(a, b)","(IsMean(a)) -> (~WouldNotRaiseGrade(a, b))","(exists a (IsMean(a))) -> (exists a (exists b (~WouldNotRaiseGrade(a, b))))"
0,appeal to emotion,"If you don't buy the black pencils, you will get made fun of. You will not be chosen for group projects."," ""If you don't buy the black pencils, you will get made fun of and not be chosen for group projects."""," ""You must buy the black pencils.""","WillNotBuy(a, b),  WillBeMadeFunOf(a),  WillNotBeChosenFor(c, a)","MustBuy(a, b)",[],"[(' You', ' You'), (' black pencils', ' the black pencils')]",[],"WillNotBuy(a, b) and (WillBeMadeFunOf(a) and WillNotBeChosenFor(c, a))","MustBuy(a, b)","(WillNotBuy(a, b) and (WillBeMadeFunOf(a) and WillNotBeChosenFor(c, a))) -> (MustBuy(a, b))","(exists a (exists c (exists b (WillNotBuy(a, b) and (WillBeMadeFunOf(a) and WillNotBeChosenFor(c, a)))))) -> (exists a (exists b (MustBuy(a, b))))"
0,faulty generalization,"Jeff's mom is concerned when she finds out that he skipped class one day. She tells him that she is concerned that since he skipped one class, he will start skipping more frequently. Then he will drop out altogether, never graduate or get into college, and end up unemployed and living at home for the rest of his life. What type of fallacy has Jeff's mom committed?", Jeff skipped one class.  , Jeff will drop out and live at home for the rest of his life.,"Skipped(a, b)","WillDropOut(a),  WillLiveAtHome(a),  IsForRestOfLife(a, d)",[],"[(' Jeff', ' Jeff')]",[],"Skipped(a, b)","WillDropOut(a) and WillLiveAtHome(a) and IsForRestOfLife(a, d)","(Skipped(a, b)) -> (WillDropOut(a) and WillLiveAtHome(a) and IsForRestOfLife(a, d))","(exists a (exists b (Skipped(a, b)))) -> (exists a (exists d (WillDropOut(a) and WillLiveAtHome(a) and IsForRestOfLife(a, d))))"
0,ad hominem,"How can you tell me I should exercise to lose weight? All you do is sit behind a desk all day. I've never seen you do a lick of exercise.

Identify the logical fallacy commited in this argument."," ""You sit behind a desk all day and do not exercise."""," ""You should not tell me to exercise to lose weight.""","SitsBehindDesk(a),  DoesNotExercise(a)","ShouldNotTellToExercise(a, c),  IsForLosingWeight(d)",[],"[(' You', ' You')]",[],SitsBehindDesk(a) and DoesNotExercise(a),"ShouldNotTellToExercise(a, c) and IsForLosingWeight(d)","(SitsBehindDesk(a) and DoesNotExercise(a)) -> (ShouldNotTellToExercise(a, c) and IsForLosingWeight(d))","(exists a (SitsBehindDesk(a) and DoesNotExercise(a))) -> (exists a (exists c (exists d (ShouldNotTellToExercise(a, c) and IsForLosingWeight(d)))))"
0,fallacy of logic,"""We both like music, so we should get married."""," ""We both like music.""  "," ""We should get married.""",LikesMusic(a),ShouldGetMarried(a),[],"[(' We', ' We')]",[],LikesMusic(a),ShouldGetMarried(a),(LikesMusic(a)) -> (ShouldGetMarried(a)),(exists a (LikesMusic(a))) -> (exists a (ShouldGetMarried(a)))
0,ad hominem,"Brandon: We should have tastier lunches!
Jaylen: Don't listen to him! He's a terrible person! I saw him trip another student and steal his lunch money!"," ""Brandon is a terrible person who tripped another student and stole lunch money.""  "," ""We should not listen to Brandon.""","IsTerriblePerson(a),  Tripped(a, b),  Stole(a, c)","NotListenTo(d, a)",[],"[(' Brandon', ' Brandon')]",[],"IsTerriblePerson(a) and Tripped(a, b) and Stole(a, c)","~NotListenTo(d, a)","(IsTerriblePerson(a) and Tripped(a, b) and Stole(a, c)) -> (~NotListenTo(d, a))","(exists a (exists c (exists b (IsTerriblePerson(a) and Tripped(a, b) and Stole(a, c))))) -> (exists a (exists d (~NotListenTo(d, a))))"
0,ad hominem,Of course Marx' theories about the ideal society are bunk. The guy spent all his time in the library.," ""Marx spent all his time in the library."""," ""Marx's theories about the ideal society are bunk.""","SpentTimeIn(a, c)","AboutIdealSociety(d, e)",[],[],[],"SpentTimeIn(a, c)","AboutIdealSociety(d, e) and Bunk(d)","(SpentTimeIn(a, c)) -> (AboutIdealSociety(d, e) and Bunk(d))","(exists a (exists c (SpentTimeIn(a, c)))) -> (exists e (exists d (AboutIdealSociety(d, e) and Bunk(d))))"
0,fallacy of relevance,"I'm tailgating her, because she cut me off!"," ""She cut me off.""  "," ""I should tailgate her.""","CutOff(b, a)","Tailgate(a, c)",[],"[(' me', ' I')]",[],"CutOff(b, a)","Tailgate(a, c)","(CutOff(b, a)) -> (Tailgate(a, c))","(exists a (exists b (CutOff(b, a)))) -> (exists a (exists c (Tailgate(a, c))))"
0,faulty generalization,President Petutti ordered a military strike that killed many civilians. He is no different than any other mass murder and he belongs in prison!, President Petutti ordered a military strike that killed many civilians.  , President Petutti is a mass murderer and belongs in prison.,"OrderedMilitaryStrike(a, b),  KilledCivilians(b, c)","IsMassMurderer(a),  BelongsInPrison(a)",[],"[(' President Petutti', ' President Petutti')]",[],"OrderedMilitaryStrike(a, b) and KilledCivilians(b, c)",IsMassMurderer(a) and BelongsInPrison(a),"(OrderedMilitaryStrike(a, b) and KilledCivilians(b, c)) -> (IsMassMurderer(a) and BelongsInPrison(a))","(exists a (exists c (exists b (OrderedMilitaryStrike(a, b) and KilledCivilians(b, c))))) -> (exists a (IsMassMurderer(a) and BelongsInPrison(a)))"
1,,"Coach talks with football player, other players and crowd in background. Thus, a football coach talks with his player in front of the team and the crowd."," ""A football coach talks with a football player in front of the team and the crowd."""," ""Football coaches talk with players in front of teams and crowds.""","TalksWith(b, c),  TalksInFrontOf(b, a),  TalksInFrontOf(b, d)","TalksWith(e, f),  TalksInFrontOf(e, a),  TalksInFrontOf(e, g)",[],"[(' teams', ' the team')]","[(' A football coach', ' Football coaches'), (' a football player', ' players'), (' the team', ' players')]","TalksWith(b, c) and TalksInFrontOf(b, a) and TalksInFrontOf(b, d)","TalksWith(e, f) and TalksInFrontOf(e, a) and TalksInFrontOf(e, g)","(exists a (exists c (exists b (TalksWith(b, c) and TalksInFrontOf(b, a) and TalksInFrontOf(b, d))))) -> (forall f (forall e (TalksWith(e, f) and TalksInFrontOf(e, a) and TalksInFrontOf(e, g))))","(exists a (exists c (exists d (exists b (TalksWith(b, c) and TalksInFrontOf(b, a) and TalksInFrontOf(b, d)))))) -> (exists f (exists a (exists e (exists g (TalksWith(e, f) and TalksInFrontOf(e, a) and TalksInFrontOf(e, g))))))"
1,,"Two men watching one man make a golf putt on the set of Sports Center. As a consequence, people watching sports."," ""One man is making a golf putt on the set of Sports Center.""  "," ""People watch sports.""","IsMakingGolfPutt(b),  IsOnSet(b, d),  IsSetOfSportsCenter(d, a)",WatchesSports(e),[],"[(' sports', ' Sports Center')]","[(' One man', ' People'), (' golf putt', ' sports')]","IsMakingGolfPutt(b) and IsOnSet(b, d) and IsSetOfSportsCenter(d, a)",WatchesSports(e),"(exists b (IsMakingGolfPutt(b) and IsOnSet(b, d) and IsSetOfSportsCenter(d, a))) -> (forall e (WatchesSports(e)))","(exists a (exists d (exists b (IsMakingGolfPutt(b) and IsOnSet(b, d) and IsSetOfSportsCenter(d, a))))) -> (exists e (WatchesSports(e)))"
1,,"Six women wait to use a port-o-john in a field. Thus, women are outside."," ""Six women wait to use a port-o-john in a field.""  "," ""Women are outside.""","WaitingToUse(a, b),  IsInField(b, c)",IsOutside(d),[],[],"[(' Six women', ' Women')]","WaitingToUse(a, b) and IsInField(b, c)",IsOutside(d),"(exists a (WaitingToUse(a, b) and IsInField(b, c))) -> (forall d (IsOutside(d)))","(exists a (exists c (exists b (WaitingToUse(a, b) and IsInField(b, c))))) -> (exists d (IsOutside(d)))"
1,,Women wearing a black top and glasses speaking into a blue tipped microphone with another woman beside her writing. It follows that one woman speaking into a microphone while a second woman writes beside her.," ""A woman wearing a black top and glasses is speaking into a blue tipped microphone while another woman is writing beside her."""," ""One woman speaks into a microphone while a second woman writes beside her.""","IsWearingBlackTop(b),  IsWearingGlasses(b),  IsSpeakingIntoMicrophone(b),  IsWriting(c)","IsSpeakingIntoMicrophone(d),  IsWriting(e)",[],"[(' microphone', ' microphone')]","[(' A woman wearing a black top and glasses', ' One woman')]",IsWearingBlackTop(b) and IsWearingGlasses(b) and IsSpeakingIntoMicrophone(b) and IsWriting(c),IsSpeakingIntoMicrophone(d) and IsWriting(e),(exists b (IsWearingBlackTop(b) and IsWearingGlasses(b) and IsSpeakingIntoMicrophone(b) and IsWriting(c))) -> (forall d (IsSpeakingIntoMicrophone(d) and IsWriting(e))),(exists c (exists b (IsWearingBlackTop(b) and IsWearingGlasses(b) and IsSpeakingIntoMicrophone(b) and IsWriting(c)))) -> (exists e (exists d (IsSpeakingIntoMicrophone(d) and IsWriting(e))))
1,,"One tan girl with a wool hat is running and leaning over an object, while another person in a wool hat is sitting on the ground. Therefore, a tan girl runs leans over an object."," ""A tan girl with a wool hat is running and leaning over an object."""," ""A tan girl runs leans over an object.""","IsTan(b),  WearsWoolHat(b),  IsRunning(b),  IsLeaningOver(b, a)","IsTan(d),  IsRunning(d),  IsLeaningOver(d, a)",[],"[(' an object', ' object')]","[(' A tan girl', ' object'), (' a wool hat', ' object')]","IsTan(b) and WearsWoolHat(b) and IsRunning(b) and IsLeaningOver(b, a)","IsTan(d) and IsRunning(d) and IsLeaningOver(d, a)","(exists b (IsTan(b) and WearsWoolHat(b) and IsRunning(b) and IsLeaningOver(b, a))) -> (forall a (IsTan(d) and IsRunning(d) and IsLeaningOver(d, a)))","(exists a (exists b (IsTan(b) and WearsWoolHat(b) and IsRunning(b) and IsLeaningOver(b, a)))) -> (exists a (exists d (IsTan(d) and IsRunning(d) and IsLeaningOver(d, a))))"
1,,A scientist studies a slide in order to work on her new creation. It follows that a scientist studies a slide that is related to her invention.," ""A scientist studies a slide for her new creation."""," ""A scientist studies a slide related to her invention.""","StudiesSlide(c),  ForNewCreation(a)","StudiesSlide(d),  RelatedToInvention(a)",[],"[(' a slide', ' slide'), (' her new creation', ' her invention')]","[(' A scientist', ' Scientist')]",StudiesSlide(c) and ForNewCreation(a),StudiesSlide(d) and RelatedToInvention(a),(exists c (StudiesSlide(c) and ForNewCreation(a))) -> (forall d (StudiesSlide(d) and RelatedToInvention(a))),(exists a (exists c (StudiesSlide(c) and ForNewCreation(a)))) -> (exists a (exists d (StudiesSlide(d) and RelatedToInvention(a))))
1,,"A red dog jumps and catches a tennis ball in its mouth. Consequently, a dog catching a ball."," ""A red dog jumps and catches a tennis ball in its mouth.""  "," ""A dog catches a ball.""","IsRed(a),  Jumps(a),  Catches(b, c),  IsIn(c)","Catches(d, e)",[],[],"[(' A red dog', ' A dog'), (' a tennis ball', ' a ball')]","IsRed(a) and Jumps(a) and Catches(b, c) and IsIn(c)","Catches(d, e)","(exists b (exists a (IsRed(a) and Jumps(a) and Catches(b, c) and IsIn(c)))) -> (forall e (forall d (Catches(d, e))))","(exists a (exists c (exists b (IsRed(a) and Jumps(a) and Catches(b, c) and IsIn(c))))) -> (exists e (exists d (Catches(d, e))))"
1,,"A group of dogs stand in the snow. Thus, there are animals outdoors."," ""A group of dogs stand in the snow.""  "," ""There are animals outdoors.""",IsInSnow(a),IsOutdoors(c),[],[],"[(' A group of dogs', ' Animals')]",IsInSnow(a),IsOutdoors(c),(exists a (IsInSnow(a))) -> (forall c (IsOutdoors(c))),(exists a (IsInSnow(a))) -> (exists c (IsOutdoors(c)))
1,,This person looks to be snowboarding on a very small pile of snow on a sunny cold day. This implies that young snowboarder sizing up their next jump.," ""This person is snowboarding on a very small pile of snow on a sunny cold day.""  "," ""The young snowboarder is sizing up the next jump.""","IsSnowboarding(a),  IsVerySmall(b),  IsSunny(c),  IsCold(c)","IsYoung(d),  IsSizingUp(d, e)",[],[],[],IsSnowboarding(a) and IsVerySmall(b) and IsSunny(c) and IsCold(c),"IsYoung(d) and IsSizingUp(d, e)","(IsSnowboarding(a) and IsVerySmall(b) and IsSunny(c) and IsCold(c)) -> (IsYoung(d) and IsSizingUp(d, e))","(exists a (exists c (exists b (IsSnowboarding(a) and IsVerySmall(b) and IsSunny(c) and IsCold(c))))) -> (exists e (exists d (IsYoung(d) and IsSizingUp(d, e))))"
1,,"A large number of people are watching men dressed in kilts, one of whom has thrown a long pole. As a consequence, people watch men in kilts."," ""A man dressed in a kilt has thrown a long pole.""  "," ""People watch men in kilts.""","IsDressedInKilt(a),  HasThrown(a),  IsLongPole(b)","Watches(c,d),  IsInKilts(d)",[],[],"[(' A man dressed in a kilt', ' People'), (' A man dressed in a kilt', ' men'), (' A man dressed in a kilt', ' kilts')]",IsDressedInKilt(a) and HasThrown(a) and IsLongPole(b),"Watches(c,d) and IsInKilts(d)","(exists a (IsDressedInKilt(a) and HasThrown(a) and IsLongPole(b))) -> (forall d (forall c (Watches(c,d) and IsInKilts(d))))","(exists a (exists b (IsDressedInKilt(a) and HasThrown(a) and IsLongPole(b)))) -> (exists c (exists d (Watches(c,d) and IsInKilts(d))))"
1,,"A boy is riding down the road between two cows. Consequently, a boy, a road and two cows."," ""A boy is riding down the road between two cows.""  "," ""There are a boy, a road, and two cows.""","IsRiding(a),  IsBetween(a, b)","Exists(a),  Exists(b),  Exists(d)",[],"[(' A boy', ' A boy'), (' two cows', ' two cows')]",[],"IsRiding(a) and IsBetween(a, b)",Exists(a) and Exists(b) and Exists(d),"(IsRiding(a) and IsBetween(a, b)) -> (Exists(a) and Exists(b) and Exists(d))","(exists a (exists b (IsRiding(a) and IsBetween(a, b)))) -> (exists a (exists d (exists b (Exists(a) and Exists(b) and Exists(d)))))"
1,,A bald man is getting out of a small blue car. It follows that the man is bald.," ""A bald man is getting out of a small blue car.""  "," ""The man is bald.""","IsBald(a),  IsGettingOutOf(a, b),  IsSmall(b),  IsBlue(b)",IsBald(c),[],[],"[(' A bald man', ' The man')]","IsBald(a) and IsGettingOutOf(a, b) and IsSmall(b) and IsBlue(b)",IsBald(c),"(exists a (IsBald(a) and IsGettingOutOf(a, b) and IsSmall(b) and IsBlue(b))) -> (forall c (IsBald(c)))","(exists a (exists b (IsBald(a) and IsGettingOutOf(a, b) and IsSmall(b) and IsBlue(b)))) -> (exists c (IsBald(c)))"
1,,"Young boys in green and blue jerseys kick around a soccer ball while other soccer games take place in the background. Thus, young boys kicking around a soccer ball."," ""Young boys in green and blue jerseys kick around a soccer ball."""," ""Young boys are playing soccer.""","IsYoung(a),  IsInGreenAndBlueJerseys(a),  KicksSoccerBall(a)","IsYoung(a),  PlaysSoccer(a)",[],"[(' Young boys', ' Young boys')]","[(' soccer ball', ' soccer')]",IsYoung(a) and IsInGreenAndBlueJerseys(a) and KicksSoccerBall(a),IsYoung(a) and PlaysSoccer(a),(IsYoung(a) and IsInGreenAndBlueJerseys(a) and KicksSoccerBall(a)) -> (IsYoung(a) and PlaysSoccer(a)),(exists a (IsYoung(a) and IsInGreenAndBlueJerseys(a) and KicksSoccerBall(a))) -> (exists a (IsYoung(a) and PlaysSoccer(a)))
1,,"A girl playing a violin along with a group of people. Consequently, a girl is playing an instrument.", A girl is playing a violin with a group of people.  , A girl is playing an instrument.,"IsPlayingViolin(a),  IsWithGroupOfPeople(a)",IsPlayingInstrument(a),[],"[(' A girl', ' A girl')]","[(' a violin', ' an instrument')]",IsPlayingViolin(a) and IsWithGroupOfPeople(a),IsPlayingInstrument(a),(IsPlayingViolin(a) and IsWithGroupOfPeople(a)) -> (IsPlayingInstrument(a)),(exists a (IsPlayingViolin(a) and IsWithGroupOfPeople(a))) -> (exists a (IsPlayingInstrument(a)))
1,,Two small boys in blue soccer uniforms use a wooden set of steps to wash their hands in an adult-sized bathroom. It follows that two boys washing their hands.," ""Two small boys in blue soccer uniforms use a wooden set of steps to wash their hands in an adult-sized bathroom."""," ""Two boys are washing their hands.""","IsSmall(b),  IsInBlueSoccerUniforms(b),  Uses(b, d),  IsWooden(d),  WashesHands(b, a),  IsAdultSized(e)","IsWashingHands(f, a)",[],"[(' their hands', ' their hands')]","[(' Two small boys', ' Two boys'), (' their hands', ' Two boys')]","IsSmall(b) and IsInBlueSoccerUniforms(b) and IsWooden(d) and Uses(b, d) and WashesHands(b, a) and IsAdultSized(e)","IsWashingHands(f, a)","(exists a (exists b (IsSmall(b) and IsInBlueSoccerUniforms(b) and IsWooden(d) and Uses(b, d) and WashesHands(b, a) and IsAdultSized(e)))) -> (forall f (IsWashingHands(f, a)))","(exists a (exists d (exists e (exists b (IsSmall(b) and IsInBlueSoccerUniforms(b) and IsWooden(d) and Uses(b, d) and WashesHands(b, a) and IsAdultSized(e)))))) -> (exists f (exists a (IsWashingHands(f, a))))"
1,,A soccer player in white kicks a ball as another soccer player lunges towards the ball and a third soccer player in red follows close by. This implies that there are three soccer players., A soccer player in white kicks a ball as another soccer player lunges towards the ball and a third soccer player in red follows close by., There are three soccer players.,"InWhite(a),  KicksBall(a)","IsSoccerPlayer(b),  IsThree(b)",[],[],[],InWhite(a) and KicksBall(a),IsSoccerPlayer(b) and IsThree(b),(InWhite(a) and KicksBall(a)) -> (IsSoccerPlayer(b) and IsThree(b)),(exists a (InWhite(a) and KicksBall(a))) -> (exists b (IsSoccerPlayer(b) and IsThree(b)))
1,,"Children playing a video game together. Thus, the kids are indoors playing a video game."," ""Children are playing a video game together indoors.""  "," ""The kids are not outdoors.""","IsPlaying(a, b),  AreIndoors(a)",AreNotOutdoors(c),[],[],[],"IsPlaying(a, b) and AreIndoors(a)",AreNotOutdoors(c),"(IsPlaying(a, b) and AreIndoors(a)) -> (AreNotOutdoors(c))","(exists a (exists b (IsPlaying(a, b) and AreIndoors(a)))) -> (exists c (AreNotOutdoors(c)))"
1,,Two people in coats kiss on the side of a road. This implies that people show their appreciation for another.," ""Two people in coats kiss on the side of a road.""  "," ""People show appreciation for another.""","IsInCoat(a),  KissesOnSideOfRoad(a)","ShowAppreciation(d, e)",[],[],"[(' Two people', ' People')]",IsInCoat(a) and KissesOnSideOfRoad(a),"ShowAppreciation(d, e)","(exists a (IsInCoat(a) and KissesOnSideOfRoad(a))) -> (forall d (ShowAppreciation(d, e)))","(exists a (IsInCoat(a) and KissesOnSideOfRoad(a))) -> (exists e (exists d (ShowAppreciation(d, e))))"
1,,Woman reading a book with a grocery tote. It follows that a woman is reading., A woman is reading a book with a grocery tote.  , A woman is reading.,"IsReading(a),  HasGroceryTote(a)",IsReading(a),[],"[(' A woman', ' A woman')]",[],IsReading(a) and HasGroceryTote(a),IsReading(a),(IsReading(a) and HasGroceryTote(a)) -> (IsReading(a)),(exists a (IsReading(a) and HasGroceryTote(a))) -> (exists a (IsReading(a)))
1,,"A man wearing a brown hoodie is shopping for snacks. As a consequence, the man is wearing brown."," ""A man wearing a brown hoodie is shopping for snacks.""  "," ""The man is wearing brown.""","IsWearingBrownHoodie(a),  IsShoppingForSnacks(a)",IsWearingBrown(c),[],[],"[(' A man wearing a brown hoodie', ' The man')]",IsWearingBrownHoodie(a) and IsShoppingForSnacks(a),IsWearingBrown(c),(exists a (IsWearingBrownHoodie(a) and IsShoppingForSnacks(a))) -> (forall c (IsWearingBrown(c))),(exists a (IsWearingBrownHoodie(a) and IsShoppingForSnacks(a))) -> (exists c (IsWearingBrown(c)))
1,,"A young man in a blue T-shirt and sweatpants stands over a stove and looks at the camera while another young man stands behind him. As a consequence, a man is in front of a camera.", A young man in a blue T-shirt and sweatpants stands over a stove and looks at the camera.  , A man is in front of a camera.,"IsYoung(b),  IsInBlueTShirt(b),  IsInSweatpants(b),  StandsOverStove(b),  LooksAtCamera(b)",IsInFrontOfCamera(f),[],"[(' camera', ' camera')]","[(' A young man', ' A man')]",IsYoung(b) and IsInBlueTShirt(b) and IsInSweatpants(b) and StandsOverStove(b) and LooksAtCamera(b),IsInFrontOfCamera(f),(exists b (IsYoung(b) and IsInBlueTShirt(b) and IsInSweatpants(b) and StandsOverStove(b) and LooksAtCamera(b))) -> (forall f (IsInFrontOfCamera(f))),(exists b (IsYoung(b) and IsInBlueTShirt(b) and IsInSweatpants(b) and StandsOverStove(b) and LooksAtCamera(b))) -> (exists f (IsInFrontOfCamera(f)))
1,,"This church choir sings to the masses as they sing joyous songs from the book at a church. Therefore, the church is filled with song.", The church choir sings joyous songs from the book at a church., The church is filled with song.,"SingsSongs(a, b),  IsFromBook(b, c),  IsAtChurch(a, d)","IsFilledWithSong(e, f)",[],[],"[(' The church choir', ' The church'), (' joyous songs', ' song')]","SingsSongs(a, b) and IsFromBook(b, c) and IsAtChurch(a, d)","IsFilledWithSong(e, f)","(exists b (exists a (SingsSongs(a, b) and IsFromBook(b, c) and IsAtChurch(a, d)))) -> (forall f (forall e (IsFilledWithSong(e, f))))","(exists a (exists c (exists d (exists b (SingsSongs(a, b) and IsFromBook(b, c) and IsAtChurch(a, d)))))) -> (exists f (exists e (IsFilledWithSong(e, f))))"
1,,"A man and a woman are standing at the side of an inflatable climbing structure. As a consequence, a man and a woman are standing.", A man and a woman are standing at the side of an inflatable climbing structure.  , A man and a woman are standing.,"IsStandingAtTheSide(a, c),  IsStandingAtTheSide(b, c),  IsSideOf(c, d)","IsStanding(a),  IsStanding(b)",[],"[(' A man', ' A man'), (' a woman', ' a woman')]",[],"IsStandingAtTheSide(a, c) and IsStandingAtTheSide(b, c) and IsSideOf(c, d)",IsStanding(a) and IsStanding(b),"(IsStandingAtTheSide(a, c) and IsStandingAtTheSide(b, c) and IsSideOf(c, d)) -> (IsStanding(a) and IsStanding(b))","(exists a (exists c (exists d (exists b (IsStandingAtTheSide(a, c) and IsStandingAtTheSide(b, c) and IsSideOf(c, d)))))) -> (exists a (exists b (IsStanding(a) and IsStanding(b))))"
1,,An asian teenager wearing a white shirt with black stripes is sitting on the steps with his face resting on his hand. This implies that the teenager is seated.," ""An Asian teenager wearing a white shirt with black stripes is sitting on the steps with his face resting on his hand."""," ""The teenager is seated.""","IsAsian(a),  IsTeenager(a),  IsWearingWhiteShirtWithBlackStripes(a),  IsSittingOnSteps(a),  HasFaceRestingOnHand(a)","IsTeenager(b),  IsSeated(b)",[],[],[],IsAsian(a) and IsTeenager(a) and IsWearingWhiteShirtWithBlackStripes(a) and IsSittingOnSteps(a) and HasFaceRestingOnHand(a),IsTeenager(b) and IsSeated(b),(IsAsian(a) and IsTeenager(a) and IsWearingWhiteShirtWithBlackStripes(a) and IsSittingOnSteps(a) and HasFaceRestingOnHand(a)) -> (IsTeenager(b) and IsSeated(b)),(exists a (IsAsian(a) and IsTeenager(a) and IsWearingWhiteShirtWithBlackStripes(a) and IsSittingOnSteps(a) and HasFaceRestingOnHand(a))) -> (exists b (IsTeenager(b) and IsSeated(b)))
1,,"Boy in red and black shirt walks through grass. Therefore, the boy is walking."," ""The boy is wearing a red and black shirt and is walking through grass.""  "," ""The boy is walking.""","IsWearing(a, b),  IsRedAndBlack(b),  IsWalking(a),  IsThroughGrass(a)",IsWalking(a),[],"[(' The boy', ' The boy')]",[],"IsWearing(a, b) and IsRedAndBlack(b) and IsWalking(a) and IsThroughGrass(a)",IsWalking(a),"(IsWearing(a, b) and IsRedAndBlack(b) and IsWalking(a) and IsThroughGrass(a)) -> (IsWalking(a))","(exists a (exists b (IsWearing(a, b) and IsRedAndBlack(b) and IsWalking(a) and IsThroughGrass(a)))) -> (exists a (IsWalking(a)))"
1,,"These girls are having a great time looking for seashells. As a consequence, the girls are happy."," ""The girls are having a great time looking for seashells.""  "," ""The girls are happy.""","AreHavingGreatTime(a),  IsLookingFor(a, b)",IsHappy(a),[],"[(' The girls', ' The girls')]",[],"AreHavingGreatTime(a) and IsLookingFor(a, b)",IsHappy(a),"(AreHavingGreatTime(a) and IsLookingFor(a, b)) -> (IsHappy(a))","(exists a (exists b (AreHavingGreatTime(a) and IsLookingFor(a, b)))) -> (exists a (IsHappy(a)))"
1,,"Small girl in a pink dress is playing electronic drum pads with sticks. Consequently, a girl is playing electronic drums."," ""A small girl in a pink dress is playing electronic drum pads with sticks."""," ""A girl is playing electronic drums.""","IsSmall(a),  IsInPinkDress(a),  IsPlayingElectronicDrumPads(a),  UsesSticks(a)",IsPlayingElectronicDrums(e),[],[],"[(' A small girl', ' A girl'), (' electronic drum pads', ' electronic drums')]",IsSmall(a) and IsInPinkDress(a) and IsPlayingElectronicDrumPads(a) and UsesSticks(a),IsPlayingElectronicDrums(e),(exists a (IsSmall(a) and IsInPinkDress(a) and IsPlayingElectronicDrumPads(a) and UsesSticks(a))) -> (forall e (IsPlayingElectronicDrums(e))),(exists a (IsSmall(a) and IsInPinkDress(a) and IsPlayingElectronicDrumPads(a) and UsesSticks(a))) -> (exists e (IsPlayingElectronicDrums(e)))
1,,"A blond woman with a tattoo of on an angel on her arm walking down the street, a concrete wall in the background. As a consequence, a person with a tattoo."," ""A blond woman has a tattoo of an angel on her arm."""," ""A person has a tattoo.""","IsBlond(b),  HasTattoo(b),  IsOfAngel(a),  IsOnArm(a)",HasTattoo(e),[],"[(' tattoo', ' tattoo')]","[(' A blond woman', ' A person'), (' her arm', ' A person')]",IsBlond(b) and HasTattoo(b) and IsOfAngel(a) and IsOnArm(a),HasTattoo(e),(exists b (IsBlond(b) and HasTattoo(b) and IsOfAngel(a) and IsOnArm(a))) -> (forall e (HasTattoo(e))),(exists a (exists b (IsBlond(b) and HasTattoo(b) and IsOfAngel(a) and IsOnArm(a)))) -> (exists e (HasTattoo(e)))
1,,"A tan dog chases a black and white soccer ball. Therefore, a dog is chasing a ball.", A tan dog chases a black and white soccer ball.  , A dog is chasing a ball.,"IsTan(a),  ChasesSoccerBall(a)","IsChasing(c, d)",[],[],"[(' A tan dog', ' A dog'), (' a black and white soccer ball', ' a ball')]",IsTan(a) and ChasesSoccerBall(a),"IsChasing(c, d)","(exists a (IsTan(a) and ChasesSoccerBall(a))) -> (forall c (IsChasing(c, d)))","(exists a (IsTan(a) and ChasesSoccerBall(a))) -> (exists c (exists d (IsChasing(c, d))))"
1,,"A dusty boy runs along a dirt path through the grass. As a consequence, a boy is outside running."," ""A dusty boy runs along a dirt path through the grass.""  "," ""A boy is outside running.""","IsDusty(a),  Runs(a),  IsAlong(a, b),  IsThrough(a, c)","IsOutside(d),  IsRunning(d)",[],[],"[(' A dusty boy', ' A boy')]","IsDusty(a) and Runs(a) and IsAlong(a, b) and IsThrough(a, c)",IsOutside(d) and IsRunning(d),"(exists a (IsDusty(a) and Runs(a) and IsAlong(a, b) and IsThrough(a, c))) -> (forall d (IsOutside(d) and IsRunning(d)))","(exists a (exists c (exists b (IsDusty(a) and Runs(a) and IsAlong(a, b) and IsThrough(a, c))))) -> (exists d (IsOutside(d) and IsRunning(d)))"
1,,"A guy with a football, a crowd watching him. Consequently, there is a guy holding a football.", A guy is holding a football.  , A crowd is watching a guy with a football.,"IsHolding(a, b)","IsWatching(c, d),  HasFootball(d)",[],[],"[(' A guy', ' Crowd'), (' a football', ' football')]","IsHolding(a, b)","IsWatching(c, d) and HasFootball(d)","(exists a (IsHolding(a, b))) -> (forall c (IsWatching(c, d) and HasFootball(d)))","(exists a (exists b (IsHolding(a, b)))) -> (exists c (exists d (IsWatching(c, d) and HasFootball(d))))"
1,,Two women are tending to their herd of animals including cows and goats near a building made primarily of stone. It follows that the two women are taking care of a herd of animals.," ""Two women are tending to a herd of animals including cows and goats near a stone building."""," ""The two women are taking care of a herd of animals.""","IsTendingTo(b, a),  IncludesCows(a, c),  IncludesGoats(a, d),  IsNear(b, e)","IsTakingCareOf(f, a)",[],"[(' herd of animals', ' a herd of animals')]","[(' cows', ' a herd of animals'), (' goats', ' a herd of animals')]","IsTendingTo(b, a) and IncludesCows(a, c) and IncludesGoats(a, d) and IsNear(b, e)","IsTakingCareOf(f, a)","(exists d (exists c (IsTendingTo(b, a) and IncludesCows(a, c) and IncludesGoats(a, d) and IsNear(b, e)))) -> (forall a (IsTakingCareOf(f, a)))","(exists c (exists d (exists a (exists b (exists e (IsTendingTo(b, a) and IncludesCows(a, c) and IncludesGoats(a, d) and IsNear(b, e))))))) -> (exists f (exists a (IsTakingCareOf(f, a))))"
1,,"A boy and girl play together on a pile or rocks in a residential area. Thus, the boy and girl are outside.", A boy and girl play together on a pile of rocks in a residential area.  , The boy and girl are outside.,"PlaysTogether(a, b),  IsOnPileOfRocks(a),  IsOnPileOfRocks(b),  IsInResidentialArea(c)","IsOutside(e),  IsOutside(a)",[],"[(' girl', ' girl')]",[],"PlaysTogether(a, b) and IsOnPileOfRocks(a) and IsOnPileOfRocks(b) and IsInResidentialArea(c)",IsOutside(e) and IsOutside(a),"(PlaysTogether(a, b) and IsOnPileOfRocks(a) and IsOnPileOfRocks(b) and IsInResidentialArea(c)) -> (IsOutside(e) and IsOutside(a))","(exists a (exists c (exists b (PlaysTogether(a, b) and IsOnPileOfRocks(a) and IsOnPileOfRocks(b) and IsInResidentialArea(c))))) -> (exists a (exists e (IsOutside(e) and IsOutside(a))))"
1,,"A boy stands in the middle of a crowd of teenagers. Thus, a person stands in the middle of a crowd of teenagers."," ""A boy stands in the middle of a crowd of teenagers.""  "," ""A person stands in the middle of a crowd of teenagers.""","IsBoy(b),  StandsIn(b, a),  IsInMiddle(a, c),  IsCrowdOf(c, d),  IsTeenager(d)","IsPerson(e),  StandsIn(e, a),  IsInMiddle(a, f),  IsCrowdOfTeenagers(f)",[],"[(' middle', ' the middle')]","[(' A boy', ' A person'), (' A boy', ' a crowd of teenagers'), (' crowd', ' a crowd of teenagers'), (' teenagers', ' A person'), (' teenagers', ' a crowd of teenagers')]","IsBoy(b) and StandsIn(b, a) and IsInMiddle(a, c) and IsCrowdOf(c, d) and IsTeenager(d)","IsPerson(e) and StandsIn(e, a) and IsInMiddle(a, f) and IsCrowdOfTeenagers(f)","(exists d (exists c (exists b (IsBoy(b) and StandsIn(b, a) and IsInMiddle(a, c) and IsCrowdOf(c, d) and IsTeenager(d))))) -> (forall f (forall e (IsPerson(e) and StandsIn(e, a) and IsInMiddle(a, f) and IsCrowdOfTeenagers(f))))","(exists a (exists c (exists d (exists b (IsBoy(b) and StandsIn(b, a) and IsInMiddle(a, c) and IsCrowdOf(c, d) and IsTeenager(d)))))) -> (exists f (exists a (exists e (IsPerson(e) and StandsIn(e, a) and IsInMiddle(a, f) and IsCrowdOfTeenagers(f)))))"
1,,"Two men are standing in a boat. Thus, some people are in a boat."," ""Two men are standing in a boat.""  "," ""Some people are in a boat.""","IsStandingIn(b, a)","IsIn(c, a)",[],"[(' boat', ' a boat')]","[(' Two men', ' Some people')]","IsStandingIn(b, a)","IsIn(c, a)","(exists b (IsStandingIn(b, a))) -> (forall c (IsIn(c, a)))","(exists a (exists b (IsStandingIn(b, a)))) -> (exists a (exists c (IsIn(c, a))))"
1,,An Asian woman dressed in a colorful outfit laughing. It follows that a woman is wearing colorful clothing.," ""An Asian woman is dressed in a colorful outfit and laughing.""  "," ""A woman is wearing colorful clothing.""","IsAsian(a),  IsDressedIn(a, b),  IsColorful(b),  IsLaughing(a)","IsWearing(c, d),  IsColorful(d)",[],[],"[(' Asian woman', ' A woman'), (' colorful outfit', ' colorful clothing')]","IsAsian(a) and IsDressedIn(a, b) and IsColorful(b) and IsLaughing(a)","IsWearing(c, d) and IsColorful(d)","(exists b (exists a (IsAsian(a) and IsDressedIn(a, b) and IsColorful(b) and IsLaughing(a)))) -> (forall d (forall c (IsWearing(c, d) and IsColorful(d))))","(exists a (exists b (IsAsian(a) and IsDressedIn(a, b) and IsColorful(b) and IsLaughing(a)))) -> (exists c (exists d (IsWearing(c, d) and IsColorful(d))))"
1,,"A woman in black reviews a message as she walks to work. Hence, the woman in black has a job.", A woman in black reviews a message while walking to work.  , The woman in black has a job.,"IsInBlack(a),  ReviewsMessage(a),  WalksToWork(a)","IsInBlack(d),  HasJob(d)",[],[],[],IsInBlack(a) and ReviewsMessage(a) and WalksToWork(a),IsInBlack(d) and HasJob(d),(IsInBlack(a) and ReviewsMessage(a) and WalksToWork(a)) -> (IsInBlack(d) and HasJob(d)),(exists a (IsInBlack(a) and ReviewsMessage(a) and WalksToWork(a))) -> (exists d (IsInBlack(d) and HasJob(d)))
1,,"A shirtless man rock climbs. As a consequence, a man is outside."," ""A shirtless man rock climbs.""  "," ""A man is outside.""","IsShirtless(a),  RockClimbs(a)",IsOutside(b),[],[],"[(' A shirtless man', ' A man')]",IsShirtless(a) and RockClimbs(a),IsOutside(b),(exists a (IsShirtless(a) and RockClimbs(a))) -> (forall b (IsOutside(b))),(exists a (IsShirtless(a) and RockClimbs(a))) -> (exists b (IsOutside(b)))
1,,"A man wearing a kilt has thrown a large pole. Therefore, a man is wearing a skirt."," ""A man wearing a kilt has thrown a large pole.""  "," ""A man is wearing a skirt.""","IsWearingKilt(a),  HasThrown(a, b)","IsWearing(c, d)",[],[],"[(' A man wearing a kilt', ' A man'), (' A man wearing a kilt', ' a skirt')]","IsWearingKilt(a) and HasThrown(a, b)","IsWearing(c, d)","(exists a (IsWearingKilt(a) and HasThrown(a, b))) -> (forall d (forall c (IsWearing(c, d))))","(exists a (exists b (IsWearingKilt(a) and HasThrown(a, b)))) -> (exists c (exists d (IsWearing(c, d))))"
1,,"A man in a blue t-shirt is taking a picture while a woman with an umbrella walks behind him. Consequently, a man is taking a picture outdoors while a woman walks behind him."," ""A man in a blue t-shirt is taking a picture while a woman with an umbrella walks behind him.""  "," ""A man is taking a picture outdoors while a woman walks behind him.""","IsInBlueTshirt(a),  IsTakingPicture(a),  HasUmbrella(c),  WalksBehind(c, a)","IsTakingPicture(d),  IsOutdoors(d),  WalksBehind(f, d)",[],"[(' him', ' A man in a blue t-shirt'), (' him', ' him')]","[(' A man in a blue t-shirt', ' A man'), (' woman with an umbrella', ' a woman')]","IsInBlueTshirt(a) and IsTakingPicture(a) and HasUmbrella(c) and WalksBehind(c, a)","IsTakingPicture(d) and IsOutdoors(d) and WalksBehind(f, d)","(exists c (exists a (IsInBlueTshirt(a) and IsTakingPicture(a) and HasUmbrella(c) and WalksBehind(c, a)))) -> (forall f (forall d (IsTakingPicture(d) and IsOutdoors(d) and WalksBehind(f, d))))","(exists a (exists c (IsInBlueTshirt(a) and IsTakingPicture(a) and HasUmbrella(c) and WalksBehind(c, a)))) -> (exists f (exists d (IsTakingPicture(d) and IsOutdoors(d) and WalksBehind(f, d))))"
1,,"A child and a parent or older sibling going for a hike. Consequently, two people are going for a hike."," ""A child and a parent or older sibling are going for a hike.""  "," ""Two people are going for a hike.""","IsGoingForHike(a),  IsGoingForHike(b),  IsGoingForHike(c)",IsGoingForHike(d),[],[],[],(IsGoingForHike(a) and IsGoingForHike(b)) or IsGoingForHike(c),IsGoingForHike(d),((IsGoingForHike(a) and IsGoingForHike(b)) or IsGoingForHike(c)) -> (IsGoingForHike(d)),(exists a (exists c (exists b ((IsGoingForHike(a) and IsGoingForHike(b)) or IsGoingForHike(c))))) -> (exists d (IsGoingForHike(d)))
1,,"Two kids in black trunks bouncing on a wet trampoline. Consequently, children play on trampolines outdoors.", Two kids in black trunks are bouncing on a wet trampoline.  , Children play on trampolines outdoors.,"IsInBlackTrunks(a),  IsBouncing(a),  IsWet(c)","PlaysOnTrampolines(d),  IsOutdoors(d)",[],[],"[(' Two kids', ' Children'), (' wet trampoline', ' trampolines')]",IsInBlackTrunks(a) and IsBouncing(a) and IsWet(c),PlaysOnTrampolines(d) and IsOutdoors(d),(exists a (IsInBlackTrunks(a) and IsBouncing(a) and IsWet(c))) -> (forall d (PlaysOnTrampolines(d) and IsOutdoors(d))),(exists a (exists c (IsInBlackTrunks(a) and IsBouncing(a) and IsWet(c)))) -> (exists d (PlaysOnTrampolines(d) and IsOutdoors(d)))
1,,"2 people with backpacks are at a table with a woman with a beige blazer sitting behind it. Thus, 2 people are at a table."," ""Two people with backpacks are at a table."""," ""Two people are at a table.""","IsWithBackpacks(a),  IsAtTable(a)",IsAtTable(a),[],"[(' Two people', ' Two people'), (' table', ' table')]",[],IsWithBackpacks(a) and IsAtTable(a),IsAtTable(a),(IsWithBackpacks(a) and IsAtTable(a)) -> (IsAtTable(a)),(exists a (IsWithBackpacks(a) and IsAtTable(a))) -> (exists a (IsAtTable(a)))
1,,"A group stands and watches two men, apparently dressed in some sort of costume, wrestle on the ground. It follows that there are people wrestling."," ""Two men are dressed in costume and wrestling on the ground.""  "," ""People are wrestling.""","IsDressedInCostume(a),  IsWrestlingOnGround(a)",IsWrestling(d),[],[],"[(' Two men', ' People')]",IsDressedInCostume(a) and IsWrestlingOnGround(a),IsWrestling(d),(exists a (IsDressedInCostume(a) and IsWrestlingOnGround(a))) -> (forall d (IsWrestling(d))),(exists a (IsDressedInCostume(a) and IsWrestlingOnGround(a))) -> (exists d (IsWrestling(d)))
1,,"two girls looking out the window at ""Hair at Hart."" Hence, two people look out a window."," Two girls are looking out the window at ""Hair at Hart.""  ", Two people look out a window.,"LookingOutWindow(b),  LookingAt(c)",LookingOutWindow(d),[],"[(' window', ' a window')]","[(' Two girls', ' Two people')]",LookingOutWindow(b) and LookingAt(c),LookingOutWindow(d),(exists b (LookingOutWindow(b) and LookingAt(c))) -> (forall d (LookingOutWindow(d))),(exists c (exists b (LookingOutWindow(b) and LookingAt(c)))) -> (exists d (LookingOutWindow(d)))
1,,"A man visiting a friend in the hospital. Therefore, a man in a hospital receives a visiting friend.", A man receives a visiting friend in the hospital.  , A man is in the hospital.,"ReceivesVisitingFriend(a, c),  InHospital(c, b)","IsInHospital(a, b)",[],"[(' A man', ' A man'), (' hospital', ' the hospital')]",[],"ReceivesVisitingFriend(a, c) and InHospital(c, b)","IsInHospital(a, b)","(ReceivesVisitingFriend(a, c) and InHospital(c, b)) -> (IsInHospital(a, b))","(exists a (exists c (exists b (ReceivesVisitingFriend(a, c) and InHospital(c, b))))) -> (exists a (exists b (IsInHospital(a, b))))"
1,,"A schoolgirl is jumping over a low hurdle. Consequently, a girl is jumping over a hurdle."," ""A schoolgirl is jumping over a low hurdle."""," ""A girl is jumping over a hurdle.""","IsJumpingOver(a, b),  IsLow(b)","IsJumpingOver(c, d)",[],[],"[(' A schoolgirl', ' A girl'), (' a low hurdle', ' a hurdle')]","IsJumpingOver(a, b) and IsLow(b)","IsJumpingOver(c, d)","(exists b (exists a (IsJumpingOver(a, b) and IsLow(b)))) -> (forall d (forall c (IsJumpingOver(c, d))))","(exists a (exists b (IsJumpingOver(a, b) and IsLow(b)))) -> (exists c (exists d (IsJumpingOver(c, d))))"
1,,"Young Asian girl is sitting on the ground in rubble. Hence, the young Asian girl is outside in the rubble.", Young Asian girl is sitting on the ground in rubble.  , Young Asian girl is outside in the rubble.,"IsSittingOn(a, c),  IsInRubble(a)","IsOutside(a),  IsInRubble(a)",[],"[(' Young Asian girl', ' Young Asian girl'), (' rubble', ' rubble')]",[],"IsSittingOn(a, c) and IsInRubble(a)",IsOutside(a) and IsInRubble(a),"(IsSittingOn(a, c) and IsInRubble(a)) -> (IsOutside(a) and IsInRubble(a))","(exists a (exists c (IsSittingOn(a, c) and IsInRubble(a)))) -> (exists a (IsOutside(a) and IsInRubble(a)))"
1,,"A group of women sing together while wearing matching black dresses. Thus, there are women singing."," ""A group of women sing together while wearing matching black dresses.""  "," ""There are women singing.""","SingTogether(a),  IsWearing(a, b)",IsSinging(c),[],[],"[(' A group of women', ' Women')]","SingTogether(a) and IsWearing(a, b)",IsSinging(c),"(exists a (SingTogether(a) and IsWearing(a, b))) -> (forall c (IsSinging(c)))","(exists a (exists b (SingTogether(a) and IsWearing(a, b)))) -> (exists c (IsSinging(c)))"
1,,Two boys in running clothes stretching. This implies that the boys are stretching.," ""Two boys are in running clothes stretching.""  "," ""The boys are stretching.""","IsInRunningClothes(a),  IsStretching(a)",IsStretching(c),[],[],"[(' Two boys', ' The boys')]",IsInRunningClothes(a) and IsStretching(a),IsStretching(c),(exists a (IsInRunningClothes(a) and IsStretching(a))) -> (forall c (IsStretching(c))),(exists a (IsInRunningClothes(a) and IsStretching(a))) -> (exists c (IsStretching(c)))
1,,A group of young men in a gym take turns scoring in basketball. This implies that guys are indoors., A group of young men in a gym take turns scoring in basketball.  , Guys are indoors.,"IsYoungMen(a),  IsInGym(a),  ScoresInBasketball(a)",IsIndoors(d),[],[],"[(' A group of young men', ' Guys')]",IsYoungMen(a) and IsInGym(a) and ScoresInBasketball(a),IsIndoors(d),(exists a (IsYoungMen(a) and IsInGym(a) and ScoresInBasketball(a))) -> (forall d (IsIndoors(d))),(exists a (IsYoungMen(a) and IsInGym(a) and ScoresInBasketball(a))) -> (exists d (IsIndoors(d)))
1,,"An Eastern vendor sits by his stall with a rooster nearby. Consequently, a rooster near a vendor."," ""An Eastern vendor sits by his stall with a rooster nearby.""  "," ""A rooster is near a vendor.""","IsSittingBy(b, c),  IsNear(a, b)","IsNear(a, d)",[],"[(' rooster', ' A rooster')]","[(' An Eastern vendor', ' a vendor')]","IsSittingBy(b, c) and IsNear(a, b)","IsNear(a, d)","(exists b (IsSittingBy(b, c) and IsNear(a, b))) -> (forall d (IsNear(a, d)))","(exists a (exists c (exists b (IsSittingBy(b, c) and IsNear(a, b))))) -> (exists a (exists d (IsNear(a, d))))"
1,,"A bird is perched on a tree branch. Thus, a bird is perching in a tree."," ""A bird is perched on a tree branch.""  "," ""A bird is perching in a tree.""","IsPerchedOn(a, b)","IsPerchingIn(a, c)",[],"[(' A bird', ' A bird')]","[(' tree branch', ' a tree')]","IsPerchedOn(a, b)","IsPerchingIn(a, c)","(exists b (IsPerchedOn(a, b))) -> (forall c (IsPerchingIn(a, c)))","(exists a (exists b (IsPerchedOn(a, b)))) -> (exists a (exists c (IsPerchingIn(a, c))))"
1,,"A man in an overcoat putting on his gloves at a subway station. Therefore, a person is in the subway station.", A man in an overcoat is putting on his gloves at a subway station.  , A person is in the subway station.,"IsInOvercoat(b),  IsPuttingOnGloves(b),  IsAtSubwayStation(b)",IsInSubwayStation(d),[],"[(' subway station', ' subway station')]","[(' A man in an overcoat', ' A person')]",IsInOvercoat(b) and IsPuttingOnGloves(b) and IsAtSubwayStation(b),IsInSubwayStation(d),(exists b (IsInOvercoat(b) and IsPuttingOnGloves(b) and IsAtSubwayStation(b))) -> (forall d (IsInSubwayStation(d))),(exists b (IsInOvercoat(b) and IsPuttingOnGloves(b) and IsAtSubwayStation(b))) -> (exists d (IsInSubwayStation(d)))
1,,"Person with umbrella observes flooded streets with cars in the water. Consequently, a person is outside."," ""The streets are flooded with cars in the water."""," ""A person is outside because streets are flooded.""","IsFloodedWith(a, b),  IsInWater(b)","IsOutside(d),  IsFlooded(e)",[],[],[],"IsFloodedWith(a, b) and IsInWater(b)",IsFlooded(e) and IsOutside(d),"(IsFloodedWith(a, b) and IsInWater(b)) -> (IsFlooded(e) and IsOutside(d))","(exists a (exists b (IsFloodedWith(a, b) and IsInWater(b)))) -> (exists e (exists d (IsFlooded(e) and IsOutside(d))))"
1,,A group of people are camping out on some rocks. This implies that people are outdoors., A group of people are camping on some rocks.  , People are outdoors.,IsCampingOnRocks(a),IsOutdoors(c),[],[],"[(' A group of people', ' People')]",IsCampingOnRocks(a),IsOutdoors(c),(exists a (IsCampingOnRocks(a))) -> (forall c (IsOutdoors(c))),(exists a (IsCampingOnRocks(a))) -> (exists c (IsOutdoors(c)))
1,,A choir made up of varying ages of people are performing. This implies that the choir is singing., A choir made up of varying ages of people are performing.  , The choir is singing.,"IsMadeUpOf(a, b),  IsPerforming(a)",IsSinging(c),[],[],[],"IsMadeUpOf(a, b) and IsPerforming(a)",IsSinging(c),"(IsMadeUpOf(a, b) and IsPerforming(a)) -> (IsSinging(c))","(exists a (exists b (IsMadeUpOf(a, b) and IsPerforming(a)))) -> (exists c (IsSinging(c)))"
1,,A man scales a rock climbing wall. It follows that a man rock climbing., A man scales a rock climbing wall.  , A man is rock climbing.,"Scales(a, b)",IsRockClimbing(a),[],"[(' A man', ' A man')]",[],"Scales(a, b)",IsRockClimbing(a),"(Scales(a, b)) -> (IsRockClimbing(a))","(exists a (exists b (Scales(a, b)))) -> (exists a (IsRockClimbing(a)))"
1,,"A little white dog runs outside, their ears blown back in the wind. It follows that there is an animal outside."," ""A little white dog runs outside with ears blown back in the wind."""," ""There is an animal outside.""","IsLittle(a),  IsWhite(a),  Runs(a),  IsOutside(a),  AreBlownBack(b),  IsInWind(b)","IsAnimal(d),  IsOutside(d)",[],[],[],IsLittle(a) and IsWhite(a) and Runs(a) and IsOutside(a) and AreBlownBack(b) and IsInWind(b),IsAnimal(d) and IsOutside(d),(IsLittle(a) and IsWhite(a) and Runs(a) and IsOutside(a) and AreBlownBack(b) and IsInWind(b)) -> (IsAnimal(d) and IsOutside(d)),(exists a (exists b (IsLittle(a) and IsWhite(a) and Runs(a) and IsOutside(a) and AreBlownBack(b) and IsInWind(b)))) -> (exists d (IsAnimal(d) and IsOutside(d)))
1,,"A bearded man sits near a white van. As a consequence, a man sitting outside near a van."," ""A bearded man sits near a white van."""," ""A man is sitting outside near a van.""","IsBearded(a),  SitsNear(a, b)","SittingOutside(c),  SitsNear(c, d)",[],[],"[(' A bearded man', ' A man'), (' a white van', ' van')]","IsBearded(a) and SitsNear(a, b)","SittingOutside(c) and SitsNear(c, d)","(exists b (exists a (IsBearded(a) and SitsNear(a, b)))) -> (forall d (forall c (SittingOutside(c) and SitsNear(c, d))))","(exists a (exists b (IsBearded(a) and SitsNear(a, b)))) -> (exists c (exists d (SittingOutside(c) and SitsNear(c, d))))"
1,,"Two children wearing hooded tops laughing with each other. Thus, children laugh."," ""Two children wearing hooded tops are laughing with each other.""  "," ""Children laugh.""","IsWearing(a, b),  IsLaughingWithEachOther(a)",Laugh(c),[],[],"[(' Two children', ' Children')]","IsWearing(a, b) and IsLaughingWithEachOther(a)",Laugh(c),"(exists a (IsWearing(a, b) and IsLaughingWithEachOther(a))) -> (forall c (Laugh(c)))","(exists a (exists b (IsWearing(a, b) and IsLaughingWithEachOther(a)))) -> (exists c (Laugh(c)))"
1,,"A man in glasses in a basement. Thus, the basement has a man in it."," ""A man in glasses is in a basement.""  "," ""The basement has a man in it.""","IsWearingGlasses(b),  IsInBasement(b)","IsIn(a, c)",[],"[(' basement', ' The basement')]","[(' A man in glasses', ' a man')]",IsWearingGlasses(b) and IsInBasement(b),"IsIn(a, c)","(exists b (IsWearingGlasses(b) and IsInBasement(b))) -> (forall c (IsIn(a, c)))","(exists b (IsWearingGlasses(b) and IsInBasement(b))) -> (exists a (exists c (IsIn(a, c))))"
1,,A man in a white shirt speaks into a microphone as other men gather behind him at a public event. This implies that a man in a white shirt is making a speech in front of a crowd., A man in a white shirt is speaking into a microphone., A man in a white shirt is making a speech in front of a crowd.,"IsInWhiteShirt(b),  IsSpeakingIntoMicrophone(b)","IsInWhiteShirt(d),  IsMakingSpeech(d),  IsInFrontOfCrowd(d)",[],"[(' white shirt', ' white shirt')]",[],IsInWhiteShirt(b) and IsSpeakingIntoMicrophone(b),IsInWhiteShirt(d) and IsMakingSpeech(d) and IsInFrontOfCrowd(d),(IsInWhiteShirt(b) and IsSpeakingIntoMicrophone(b)) -> (IsInWhiteShirt(d) and IsMakingSpeech(d) and IsInFrontOfCrowd(d)),(exists b (IsInWhiteShirt(b) and IsSpeakingIntoMicrophone(b))) -> (exists d (IsInWhiteShirt(d) and IsMakingSpeech(d) and IsInFrontOfCrowd(d)))
1,,A brown and white dog is chained up near a red chair. It follows that the dog is chained to a chair.," ""A brown and white dog is chained up near a red chair."""," ""The dog is chained to a chair.""","IsBrownAndWhite(b),  IsChainedUp(b),  IsNear(b, a)","IsChainedTo(c, a)",[],"[(' a chair', ' red chair')]","[(' Brown and white dog', ' The dog')]","IsBrownAndWhite(b) and IsChainedUp(b) and IsNear(b, a)","IsChainedTo(c, a)","(exists b (IsBrownAndWhite(b) and IsChainedUp(b) and IsNear(b, a))) -> (forall c (IsChainedTo(c, a)))","(exists a (exists b (IsBrownAndWhite(b) and IsChainedUp(b) and IsNear(b, a)))) -> (exists a (exists c (IsChainedTo(c, a))))"
1,,"This is when daddy taught her how to ride her scooter. Consequently, daddy taught her."," ""Daddy taught her how to ride her scooter."""," ""Daddy taught her.""","Taught(a, b),  Rides(b, c)","Taught(a, b)",[],"[(' Daddy', ' Daddy'), (' her', ' her')]",[],"Taught(a, b) and Rides(b, c)","Taught(a, b)","(Taught(a, b) and Rides(b, c)) -> (Taught(a, b))","(exists a (exists c (exists b (Taught(a, b) and Rides(b, c))))) -> (exists a (exists b (Taught(a, b))))"
1,,"A small girl with short brown hair is pushing a pink scooter over grass with brown leaves with threes in the background. Therefore, the girl is outside.", A small girl with short brown hair is pushing a pink scooter over grass with brown leaves with trees in the background.  , The girl is outside.,"IsSmall(a),  HasShortBrownHair(a),  IsPushing(a, c),  IsPink(c),  IsOverGrass(c),  HasBrownLeaves(d),  IsWithTreesInBackground(d)",IsOutside(h),[],[],"[(' A small girl', ' The girl')]","IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, c) and IsPink(c) and IsOverGrass(c) and HasBrownLeaves(d) and IsWithTreesInBackground(d)",IsOutside(h),"(exists a (IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, c) and IsPink(c) and IsOverGrass(c) and HasBrownLeaves(d) and IsWithTreesInBackground(d))) -> (forall h (IsOutside(h)))","(exists a (exists c (exists d (IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, c) and IsPink(c) and IsOverGrass(c) and HasBrownLeaves(d) and IsWithTreesInBackground(d))))) -> (exists h (IsOutside(h)))"
1,,"A man wearing a black cap is suspended in the air on a swing, as children are swinging on a swing set. Hence, a man in a black hat is swinging with some children."," ""A man wearing a black cap is suspended in the air on a swing while children are swinging on a swing set.""  "," ""A man in a black hat is swinging with some children.""","IsWearingBlackCap(b),  IsSuspendedInAir(b),  IsOnSwing(b),  IsSwingingOnSwingSet(a)","IsInBlackHat(f),  IsSwinging(f),  IsWithChildren(f)",[],"[(' children', ' children')]",[],IsWearingBlackCap(b) and IsSuspendedInAir(b) and IsOnSwing(b) and IsSwingingOnSwingSet(a),IsInBlackHat(f) and IsSwinging(f) and IsWithChildren(f),(IsWearingBlackCap(b) and IsSuspendedInAir(b) and IsOnSwing(b) and IsSwingingOnSwingSet(a)) -> (IsInBlackHat(f) and IsSwinging(f) and IsWithChildren(f)),(exists a (exists b (IsWearingBlackCap(b) and IsSuspendedInAir(b) and IsOnSwing(b) and IsSwingingOnSwingSet(a)))) -> (exists f (IsInBlackHat(f) and IsSwinging(f) and IsWithChildren(f)))
1,,"A man with a blue, collared shirt sits in front of another man. This implies that a man sits in front of another man."," A man with a blue, collared shirt sits in front of another man.  ", A man sits in front of another man.,"IsInBlueCollaredShirt(a),  SitsInFrontOf(a, b)","SitsInFrontOf(a, b)",[],"[(' A man', ' A man with a blue'), (' another man', ' another man')]","[(' another man', ' A man')]","IsInBlueCollaredShirt(a) and SitsInFrontOf(a, b)","SitsInFrontOf(a, b)","(exists b (IsInBlueCollaredShirt(a) and SitsInFrontOf(a, b))) -> (exists b (forall a (SitsInFrontOf(a, b))))","(exists a (exists b (IsInBlueCollaredShirt(a) and SitsInFrontOf(a, b)))) -> (exists a (exists b (SitsInFrontOf(a, b))))"
1,,"A young man in an orange shirt, maneuvers a skateboard at the top of a ramp. Therefore, a person rides a skateboard."," ""A young man in an orange shirt maneuvers a skateboard at the top of a ramp.""  "," ""A person rides a skateboard.""","IsYoung(b),  IsInOrangeShirt(b),  ManeuversSkateboard(b, a),  IsAtTop(b, d),  IsOfRamp(d, e)","RidesSkateboard(f, a)",[],"[(' a skateboard', ' a skateboard')]","[(' A young man', ' A person')]","IsYoung(b) and IsInOrangeShirt(b) and ManeuversSkateboard(b, a) and IsAtTop(b, d) and IsOfRamp(d, e)","RidesSkateboard(f, a)","(exists b (IsYoung(b) and IsInOrangeShirt(b) and ManeuversSkateboard(b, a) and IsAtTop(b, d) and IsOfRamp(d, e))) -> (forall f (RidesSkateboard(f, a)))","(exists a (exists d (exists e (exists b (IsYoung(b) and IsInOrangeShirt(b) and ManeuversSkateboard(b, a) and IsAtTop(b, d) and IsOfRamp(d, e)))))) -> (exists f (exists a (RidesSkateboard(f, a))))"
1,,"A large group of people walking in a busy city at night. Consequently, people are walking a city."," ""A large group of people is walking in a busy city at night.""  "," ""People are walking in a city.""","IsWalking(b),  IsLargeGroup(b),  IsBusyCity(a),  IsNight(c)","IsWalking(d),  IsInCity(d)",[],"[(' city', ' busy city')]","[(' A large group of people', ' People')]",IsLargeGroup(b) and IsWalking(b) and IsBusyCity(a) and IsNight(c),IsWalking(d) and IsInCity(d),(exists b (IsLargeGroup(b) and IsWalking(b) and IsBusyCity(a) and IsNight(c))) -> (forall d (IsWalking(d) and IsInCity(d))),(exists a (exists c (exists b (IsLargeGroup(b) and IsWalking(b) and IsBusyCity(a) and IsNight(c))))) -> (exists d (IsWalking(d) and IsInCity(d)))
1,,"A group of people are walking by a van. Therefore, some people outdoors."," ""A group of people are walking by a van.""  "," ""Some people are outdoors.""","IsWalkingBy(a, b)",IsOutdoors(c),[],[],"[(' A group of people', ' Some people')]","IsWalkingBy(a, b)",IsOutdoors(c),"(exists a (IsWalkingBy(a, b))) -> (forall c (IsOutdoors(c)))","(exists a (exists b (IsWalkingBy(a, b)))) -> (exists c (IsOutdoors(c)))"
1,,"A white and a black dog fighting in a fenced in room. As a consequence, the dogs are fighting."," ""A white and a black dog are fighting in a fenced-in room."""," ""The dogs are fighting.""","IsWhite(a),  IsBlack(b),  IsFighting(a),  IsFighting(b),  IsInRoom(a),  IsInRoom(b),  IsRoomFencedIn(c)",IsFighting(d),[],[],"[(' A white dog', ' The dogs'), (' a black dog', ' The dogs')]",(IsWhite(a) and IsInRoom(a) and IsFighting(a)) and (IsBlack(b) and IsInRoom(b) and IsFighting(b) and IsRoomFencedIn(c)),IsFighting(d),(exists b (exists a ((IsWhite(a) and IsInRoom(a) and IsFighting(a)) and (IsBlack(b) and IsInRoom(b) and IsFighting(b) and IsRoomFencedIn(c))))) -> (forall d (IsFighting(d))),(exists a (exists c (exists b ((IsWhite(a) and IsInRoom(a) and IsFighting(a)) and (IsBlack(b) and IsInRoom(b) and IsFighting(b) and IsRoomFencedIn(c)))))) -> (exists d (IsFighting(d)))
1,,"A white greyhound dog wearing a muzzle runs around a track. Hence, the dog is racing other dogs.", A white greyhound dog wearing a muzzle runs around a track., The dog is racing other dogs.,"WearingMuzzle(a),  RunsAroundTrack(a)","IsRacing(d),  AreOtherDogs(a)",[],"[(' other dogs.', ' A white greyhound dog')]","[(' A white greyhound dog', ' The dog')]",WearingMuzzle(a) and RunsAroundTrack(a),IsRacing(d) and AreOtherDogs(a),(exists a (WearingMuzzle(a) and RunsAroundTrack(a))) -> (forall d (IsRacing(d) and AreOtherDogs(a))),(exists a (WearingMuzzle(a) and RunsAroundTrack(a))) -> (exists a (exists d (IsRacing(d) and AreOtherDogs(a))))
1,,The pitcher is pitching the ball in a game of baseball. It follows that the pitcher throws the ball.," ""The pitcher is pitching the ball in a game of baseball."""," ""The pitcher throws the ball.""","IsPitching(a, b),  IsInGameOfBaseball(a, c)","Throws(a, b)",[],"[(' The pitcher', ' The pitcher'), (' the ball', ' the ball')]",[],"IsPitching(a, b) and IsInGameOfBaseball(a, c)","Throws(a, b)","(IsPitching(a, b) and IsInGameOfBaseball(a, c)) -> (Throws(a, b))","(exists a (exists c (exists b (IsPitching(a, b) and IsInGameOfBaseball(a, c))))) -> (exists a (exists b (Throws(a, b))))"
1,,"Girl in a red coat, blue head wrap and jeans is making a snow angel. As a consequence, a girl outside plays in the snow."," ""A girl in a red coat, blue head wrap, and jeans is making a snow angel.""  "," ""A girl outside plays in the snow.""","IsInRedCoat(a),  IsInBlueHeadWrap(a),  IsInJeans(a),  IsMakingSnowAngel(a)","IsOutside(a),  PlaysInTheSnow(a)",[],"[(' A girl', ' A girl')]",[],IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a),IsOutside(a) and PlaysInTheSnow(a),(IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a)) -> (IsOutside(a) and PlaysInTheSnow(a)),(exists a (IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a))) -> (exists a (IsOutside(a) and PlaysInTheSnow(a)))
1,,"Men in an office with computers and a projector screen. Consequently, there are computers and a projector screen in the room.", Men are in an office with computers and a projector screen.  , There are computers and a projector screen in the room.,"IsInOffice(c),  HasComputers(c),  HasProjectorScreen(c)","IsInRoom(a),  IsInRoom(b)",[],"[(' computers', ' Computers'), (' projector screen', ' projector screen')]",[],IsInOffice(c) and HasComputers(c) and HasProjectorScreen(c),IsInRoom(a) and IsInRoom(b),(IsInOffice(c) and HasComputers(c) and HasProjectorScreen(c)) -> (IsInRoom(a) and IsInRoom(b)),(exists c (IsInOffice(c) and HasComputers(c) and HasProjectorScreen(c))) -> (exists a (exists b (IsInRoom(a) and IsInRoom(b))))
1,,"A small child in a red jacket is sitting on a man's shoulders and holding his head. Therefore, the child's hands are on the man's head.", A small child in a red jacket is sitting on a man's shoulders and holding the man's head.  , The child's hands are on the man's head.,"IsSmall(b),  IsInRedJacket(b),  IsSittingOnShoulders(b, d),  IsHolding(b, a)","IsOn(e, a)",[],"[("" the man's head"", "" the man's head"")]",[],"IsSmall(b) and IsInRedJacket(b) and IsSittingOnShoulders(b, d) and IsHolding(b, a)","IsOn(e, a)","(IsSmall(b) and IsInRedJacket(b) and IsSittingOnShoulders(b, d) and IsHolding(b, a)) -> (IsOn(e, a))","(exists a (exists d (exists b (IsSmall(b) and IsInRedJacket(b) and IsSittingOnShoulders(b, d) and IsHolding(b, a))))) -> (exists a (exists e (IsOn(e, a))))"
1,,Three girls are standing and talking to each other. It follows that three girls are talking.," ""Three girls are standing and talking to each other."""," ""Three girls are talking.""","IsStanding(a),  IsTalkingTo(a, b)",IsTalking(a),[],"[(' Three girls', ' Three girls')]",[],"IsStanding(a) and IsTalkingTo(a, b)",IsTalking(a),"(IsStanding(a) and IsTalkingTo(a, b)) -> (IsTalking(a))","(exists a (exists b (IsStanding(a) and IsTalkingTo(a, b)))) -> (exists a (IsTalking(a)))"
1,,"a man with a cap and not wearing shirt is laying a wooden bench. Consequently, a man relaxes on a bench.", A man with a cap and no shirt is laying on a wooden bench.  , A man relaxes on a bench.,"IsWithCap(a),  IsWithoutShirt(a),  IsLayingOnBench(a)","IsRelaxing(a),  IsOnBench(a)",[],"[(' A man', ' A man with a cap and no shirt')]","[(' wooden bench', ' a bench')]",IsWithCap(a) and IsWithoutShirt(a) and IsLayingOnBench(a),IsRelaxing(a) and IsOnBench(a),(IsWithCap(a) and IsWithoutShirt(a) and IsLayingOnBench(a)) -> (IsRelaxing(a) and IsOnBench(a)),(exists a (IsWithCap(a) and IsWithoutShirt(a) and IsLayingOnBench(a))) -> (exists a (IsRelaxing(a) and IsOnBench(a)))
1,,"A man in a red shirt is being filmed by another man on a sports field with a huge audience of people watching and cheering. Therefore, the man is being filmed by another man."," ""A man in a red shirt is being filmed by another man on a sports field with a huge audience watching and cheering.""  "," ""The man is being filmed by another man.""","IsInRedShirt(b),  IsBeingFilmed(b),  IsFilming(a),  IsOnSportsField(c),  IsHugeAudience(d),  IsWatching(d),  IsCheering(d)","IsBeingFilmed(e),  IsFilming(a)",[],"[(' another man', ' another man')]","[(' A man in a red shirt', ' The man')]",IsInRedShirt(b) and IsBeingFilmed(b) and IsFilming(a) and IsOnSportsField(c) and IsHugeAudience(d) and IsWatching(d) and IsCheering(d),IsBeingFilmed(e) and IsFilming(a),(exists b (IsInRedShirt(b) and IsBeingFilmed(b) and IsFilming(a) and IsOnSportsField(c) and IsHugeAudience(d) and IsWatching(d) and IsCheering(d))) -> (forall e (IsBeingFilmed(e) and IsFilming(a))),(exists a (exists c (exists d (exists b (IsInRedShirt(b) and IsBeingFilmed(b) and IsFilming(a) and IsOnSportsField(c) and IsHugeAudience(d) and IsWatching(d) and IsCheering(d)))))) -> (exists a (exists e (IsBeingFilmed(e) and IsFilming(a))))
1,,"A man in a suit cheering in a library in front of children. Thus, a guy is cheering near some children."," ""A man in a suit is cheering in a library in front of children.""  "," ""A guy is cheering near some children.""","IsInSuit(b),  IsCheering(b),  IsInLibrary(b),  IsInFrontOfChildren(b)","IsCheering(d),  IsNearChildren(d)",[],"[(' some children', ' children')]","[(' A man in a suit', ' A guy')]",IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b),IsCheering(d) and IsNearChildren(d),(exists b (IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b))) -> (forall d (IsCheering(d) and IsNearChildren(d))),(exists b (IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b))) -> (exists d (IsCheering(d) and IsNearChildren(d)))
1,,A man in suit waiting for the green light. This implies that a man waits at a red light.," ""A man in a suit is waiting for the green light.""  "," ""A man waits at a red light.""","IsInSuit(a),  IsWaitingForGreenLight(a)",IsWaitingAtRedLight(c),[],[],"[(' A man in a suit', ' A man')]",IsInSuit(a) and IsWaitingForGreenLight(a),IsWaitingAtRedLight(c),(exists a (IsInSuit(a) and IsWaitingForGreenLight(a))) -> (forall c (IsWaitingAtRedLight(c))),(exists a (IsInSuit(a) and IsWaitingForGreenLight(a))) -> (exists c (IsWaitingAtRedLight(c)))
1,,"A man smokes while leaning against a pillar, which has a ""missing person"" flier posted on it. Thus, a guy smoking against a wall with a flier on it."," A man smokes while leaning against a pillar with a ""missing person"" flier on it.  ", A guy is smoking against a wall with a flier on it.,"Smokes(a),  LeansAgainst(a, b),  HasFlier(b, c)","Smokes(d),  IsAgainst(d, e),  HasFlier(e, f)",[],[],"[(' ""missing person"" flier', ' a flier')]","Smokes(a) and LeansAgainst(a, b) and HasFlier(b, c)","Smokes(d) and IsAgainst(d, e) and HasFlier(e, f)","(exists c (Smokes(a) and LeansAgainst(a, b) and HasFlier(b, c))) -> (forall f (Smokes(d) and IsAgainst(d, e) and HasFlier(e, f)))","(exists a (exists c (exists b (Smokes(a) and LeansAgainst(a, b) and HasFlier(b, c))))) -> (exists f (exists e (exists d (Smokes(d) and IsAgainst(d, e) and HasFlier(e, f)))))"
1,,"A woman is standing at a podium. Thus, a person is at a podium.", A woman is standing at a podium.  , A person is at a podium.,"IsStandingAt(b, a)","IsAt(c, a)",[],"[(' podium', ' podium')]","[(' A woman', ' A person')]","IsStandingAt(b, a)","IsAt(c, a)","(exists b (IsStandingAt(b, a))) -> (forall c (IsAt(c, a)))","(exists a (exists b (IsStandingAt(b, a)))) -> (exists a (exists c (IsAt(c, a))))"
1,,Four boys are about to be hit by an approaching wave. It follows that a wave is about hit some boys.," ""Four boys are about to be hit by an approaching wave.""  "," ""A wave is about to hit some boys.""","IsHitByWave(a),  IsApproaching(b)","IsHittingWave(c),  IsAboutToHit(c, d)",[],[],"[(' Four boys', ' some boys'), (' approaching wave', ' A wave')]",IsApproaching(b) and IsHitByWave(a),"IsHittingWave(c) and IsAboutToHit(c, d)","(exists b (exists a (IsApproaching(b) and IsHitByWave(a)))) -> (forall c (forall d (IsHittingWave(c) and IsAboutToHit(c, d))))","(exists a (exists b (IsApproaching(b) and IsHitByWave(a)))) -> (exists c (exists d (IsHittingWave(c) and IsAboutToHit(c, d))))"
1,,"people are sitting on a bench in front of buildings. Thus, some people are seated on a bench outside.", People are sitting on a bench in front of buildings.  , Some people are seated on a bench outside.,"IsSittingOn(a, b),  IsInFrontOf(b, c)","IsSeatedOn(a, b),  IsOutside(b)",[],"[(' Some people', ' People'), (' bench', ' a bench')]",[],"IsSittingOn(a, b) and IsInFrontOf(b, c)","IsSeatedOn(a, b) and IsOutside(b)","(IsSittingOn(a, b) and IsInFrontOf(b, c)) -> (IsSeatedOn(a, b) and IsOutside(b))","(exists a (exists c (exists b (IsSittingOn(a, b) and IsInFrontOf(b, c))))) -> (exists a (exists b (IsSeatedOn(a, b) and IsOutside(b))))"
1,,The skateboarder is jumping his board in the air while another skateboarder watches. This implies that a skateboarder is jumping.," ""A skateboarder is jumping his board in the air.""  "," ""A skateboarder is jumping.""","IsJumping(a),  Owns(a, b),  IsInAir(b)",IsJumping(a),[],"[(' A skateboarder', ' A skateboarder')]",[],"IsJumping(a) and Owns(a, b) and IsInAir(b)",IsJumping(a),"(IsJumping(a) and Owns(a, b) and IsInAir(b)) -> (IsJumping(a))","(exists a (exists b (IsJumping(a) and Owns(a, b) and IsInAir(b)))) -> (exists a (IsJumping(a)))"
1,,"A man wearing a black hat and coat makes a face with a crowd behind him. As a consequence, a guy is standing near a crowd of people.", A man is wearing a black hat and coat., A guy stands near a crowd of people.,"IsWearing(a, b),  IsWearing(a, c)","StandsNear(d, e)",[],[],"[(' A man', ' a crowd of people')]","IsWearing(a, b) and IsWearing(a, c)","StandsNear(d, e)","(exists a (IsWearing(a, b) and IsWearing(a, c))) -> (forall e (StandsNear(d, e)))","(exists a (exists c (exists b (IsWearing(a, b) and IsWearing(a, c))))) -> (exists e (exists d (StandsNear(d, e))))"
1,,"A group of soldiers march in a parade. Thus, a group of people march in a parade.", A group of soldiers march in a parade.  , A group of people march in a parade.,"IsMarchingIn(b, a)","IsMarchingIn(c, a)",[],"[(' parade', ' parade')]","[(' A group of soldiers', ' A group of people'), (' parade', ' A group of people')]","IsMarchingIn(b, a)","IsMarchingIn(c, a)","(exists a (exists b (IsMarchingIn(b, a)))) -> (forall c (IsMarchingIn(c, a)))","(exists a (exists b (IsMarchingIn(b, a)))) -> (exists a (exists c (IsMarchingIn(c, a))))"
1,,The 3 dogs are cruising down the street. This implies that three dogs together.," ""Three dogs are cruising down the street.""  "," ""Three dogs are together.""","IsCruising(a),  IsDownTheStreet(a)",AreTogether(a),[],"[(' Three dogs', ' Three dogs')]",[],IsCruising(a) and IsDownTheStreet(a),AreTogether(a),(IsCruising(a) and IsDownTheStreet(a)) -> (AreTogether(a)),(exists a (IsCruising(a) and IsDownTheStreet(a))) -> (exists a (AreTogether(a)))
1,,"The gentleman is speaking while the others are listening. As a consequence, the man is being given respect."," ""The gentleman is speaking while the others are listening.""  "," ""The man is being given respect.""","IsSpeaking(a),  AreListening(b)",IsBeingGivenRespect(c),[],[],"[(' The gentleman', ' The man')]",IsSpeaking(a) and AreListening(b),IsBeingGivenRespect(c),(exists a (IsSpeaking(a) and AreListening(b))) -> (forall c (IsBeingGivenRespect(c))),(exists a (exists b (IsSpeaking(a) and AreListening(b)))) -> (exists c (IsBeingGivenRespect(c)))
1,,"One child in black is walking down a hill covered in white snow while 2 children are on their knees. Thus, there are three children in this picture, and they are all outside."," ""One child is walking down a hill covered in snow, and two children are on their knees.""  "," ""There are three children outside in this picture.""","IsWalking(a),  IsCoveredInSnow(b),  AreOnKnees(d)",AreOutside(f),[],[],[],IsWalking(a) and IsCoveredInSnow(b) and AreOnKnees(d),AreOutside(f),(IsWalking(a) and IsCoveredInSnow(b) and AreOnKnees(d)) -> (AreOutside(f)),(exists a (exists d (exists b (IsWalking(a) and IsCoveredInSnow(b) and AreOnKnees(d))))) -> (exists f (AreOutside(f)))
1,,A group of people are sight seeing and taking pictures. It follows that there are a group of people., A group of people is sightseeing and taking pictures.  , There is a group of people.,"IsSightseeing(a), IsTakingPictures(a)",None,[],"[(' A group of people', ' Group of people')]",[],,,,
1,,"Army men grilling a lot of meat while his troop looks on. Hence, some of the people here have been in the armed forces.", Army men are grilling a lot of meat while the troop looks on.  , Some of the people here have been in the armed forces.,"IsGrilling(a, b),  LooksOn(c)",IsInArmedForces(d),[],[],"[(' Army men', ' the armed forces'), (' the troop', ' the armed forces')]","IsGrilling(a, b) and LooksOn(c)",IsInArmedForces(d),"(IsGrilling(a, b) and LooksOn(c)) -> (IsInArmedForces(d))","(exists a (exists c (exists b (IsGrilling(a, b) and LooksOn(c))))) -> (exists d (IsInArmedForces(d)))"
1,,"The basketball player in red is challenging the player in white for the ball. Consequently, people are playing basketball."," ""The basketball player in red is challenging the player in white for the ball."""," ""People are playing basketball.""","IsInRed(a),  IsChallenging(a, b),  IsInWhite(b)",IsPlayingBasketball(d),[],[],"[(' The basketball player in red', ' People'), (' the player in white', ' People'), (' the ball', ' basketball')]","IsInRed(a) and IsChallenging(a, b) and IsInWhite(b)",IsPlayingBasketball(d),"(exists b (exists a (IsInRed(a) and IsChallenging(a, b) and IsInWhite(b)))) -> (forall d (IsPlayingBasketball(d)))","(exists a (exists b (IsInRed(a) and IsChallenging(a, b) and IsInWhite(b)))) -> (exists d (IsPlayingBasketball(d)))"
1,,"A older man with gray hair wearing a gray suit next to a green and yellow taxi. Thus, a older man with gray hair wearing a gray suit."," ""An older man with gray hair is wearing a gray suit.""  "," ""There is an older man with gray hair wearing a gray suit.""","IsOlder(a),  HasGrayHair(a),  IsWearingGraySuit(a)","IsOlder(a),  HasGrayHair(a),  IsWearingGraySuit(a)",[],"[(' Older man', ' Older man'), (' gray hair', ' gray hair'), (' gray suit', ' gray suit')]",[],IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a),IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a),(IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a)) -> (IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a)),(exists a (IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a))) -> (exists a (IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a)))
1,,"A man drops something, reaching for it while a woman in a beige blazer discusses an important topic. Hence, a woman is talking while a man is reaching for something."," ""A woman in a beige blazer discusses an important topic while a man reaches for something.""  "," ""A woman is talking while a man is reaching for something.""","IsInBeigeBlazer(c),  DiscussesImportantTopic(c),  ReachesForSomething(a)","Talking(e),  ReachingFor(a, b)",[],"[(' a man', ' A man'), (' something', ' Something')]","[(' A woman in a beige blazer', ' A woman')]",IsInBeigeBlazer(c) and DiscussesImportantTopic(c) and ReachesForSomething(a),"Talking(e) and ReachingFor(a, b)","(exists c (IsInBeigeBlazer(c) and DiscussesImportantTopic(c) and ReachesForSomething(a))) -> (forall e (Talking(e) and ReachingFor(a, b)))","(exists a (exists c (IsInBeigeBlazer(c) and DiscussesImportantTopic(c) and ReachesForSomething(a)))) -> (exists a (exists e (exists b (Talking(e) and ReachingFor(a, b)))))"
1,,A crowd watching a skateboarder. This implies that a person is skateboarding.," ""A person is skateboarding.""  "," ""A crowd watches a skateboarder.""",IsSkateboarding(a),"IsWatching(b),  IsSkateboarder(c)",[],[],"[(' A person', ' A crowd'), (' A person', ' skateboarder')]",IsSkateboarding(a),IsWatching(b) and IsSkateboarder(c),(exists a (IsSkateboarding(a))) -> (forall c (forall b (IsWatching(b) and IsSkateboarder(c)))),(exists a (IsSkateboarding(a))) -> (exists c (exists b (IsWatching(b) and IsSkateboarder(c))))
1,,"A male guitar player is vigorously singing a not to a song in a poorly lit room. As a consequence, a man is singing indoors.", A male guitar player is singing indoors.  , A man is singing indoors.,"IsMale(a),  PlaysGuitar(a),  IsSinging(a),  IsIndoors(a)","IsSinging(b),  IsIndoors(b)",[],[],"[(' A male guitar player', ' A man')]",IsMale(a) and PlaysGuitar(a) and IsSinging(a) and IsIndoors(a),IsSinging(b) and IsIndoors(b),(exists a (IsMale(a) and PlaysGuitar(a) and IsSinging(a) and IsIndoors(a))) -> (forall b (IsSinging(b) and IsIndoors(b))),(exists a (IsMale(a) and PlaysGuitar(a) and IsSinging(a) and IsIndoors(a))) -> (exists b (IsSinging(b) and IsIndoors(b)))
1,,"The sun breaks through the trees as a child rides a swing. Thus, a child rides a swing in the daytime."," ""A child rides a swing.""  "," ""A child rides a swing in the daytime.""","Rides(a, b)","Rides(a, b),  IsInDaytime(a)",[],"[(' A child', ' A child'), (' a swing', ' a swing')]",[],"Rides(a, b)","Rides(a, b) and IsInDaytime(a)","(Rides(a, b)) -> (Rides(a, b) and IsInDaytime(a))","(exists a (exists b (Rides(a, b)))) -> (exists a (exists b (Rides(a, b) and IsInDaytime(a))))"
