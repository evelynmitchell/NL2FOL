(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsFormerAustralianDefenseChief (BoundSet) Bool)
(declare-fun IsSeniorRoyalNavyCommander (BoundSet) Bool)
(declare-fun Endorses (BoundSet BoundSet) Bool)
(declare-fun IsHarrowingScenarioAnalysis (BoundSet) Bool)
(declare-fun Analyzes (BoundSet BoundSet) Bool)
(declare-fun IsDueTo (BoundSet BoundSet) Bool)
(declare-fun MightCollapseInComingDecades (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((e BoundSet)) (exists ((d BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsFormerAustralianDefenseChief b) (and (IsSeniorRoyalNavyCommander c) (and (Endorses b d) (and (Endorses c d) (and (IsHarrowingScenarioAnalysis d) (and (Analyzes d e) (IsDueTo e a)))))))))))) (and (forall ((j BoundSet)) (forall ((h BoundSet)) (forall ((i BoundSet)) (=> (MightCollapseInComingDecades h) (Endorses i j))))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((k BoundSet)) (=> (Analyzes k l) (MightCollapseInComingDecades m))))) (and (forall ((o BoundSet)) (forall ((p BoundSet)) (forall ((n BoundSet)) (=> (IsDueTo n o) (MightCollapseInComingDecades p))))) (forall ((r BoundSet)) (forall ((q BoundSet)) (forall ((s BoundSet)) (=> (MightCollapseInComingDecades q) (IsDueTo r s))))))))) (exists ((a BoundSet)) (exists ((f BoundSet)) (and (MightCollapseInComingDecades f) (IsDueTo f a)))))))
(check-sat)
(get-model)