(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun UnderWater (BoundSet) Bool)
(declare-fun AskedToJoinRescueEfforts (BoundSet BoundSet) Bool)
(declare-fun InFloodStage (BoundSet) Bool)
(declare-fun NearCity (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((f BoundSet)) (exists ((e BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (UnderWater a) (and (AskedToJoinRescueEfforts b c) (and (InFloodStage e) (InFloodStage f))))))))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((k BoundSet)) (=> (NearCity k l) (UnderWater m))))) (and (forall ((q BoundSet)) (forall ((o BoundSet)) (forall ((p BoundSet)) (forall ((n BoundSet)) (=> (AskedToJoinRescueEfforts n o) (NearCity p q)))))) (and (forall ((r BoundSet)) (forall ((t BoundSet)) (forall ((s BoundSet)) (=> (NearCity r s) (InFloodStage t))))) (forall ((u BoundSet)) (forall ((v BoundSet)) (forall ((w BoundSet)) (=> (NearCity u v) (InFloodStage w))))))))) (exists ((j BoundSet)) (exists ((i BoundSet)) (NearCity i j))))))
(check-sat)
(get-model)