(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun HasCrept (BoundSet) Bool)
(declare-fun SendsWaterPouring (BoundSet) Bool)
(declare-fun IsIn (BoundSet BoundSet) Bool)
(declare-fun IsFlooded (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((e BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (exists ((d BoundSet)) (exists ((f BoundSet)) (and (HasCrept c) (and (SendsWaterPouring d) (and (SendsWaterPouring e) (and (IsIn f a) (IsIn f b))))))))))) (and (forall ((h BoundSet)) (forall ((i BoundSet)) (=> (SendsWaterPouring h) (IsFlooded i)))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (SendsWaterPouring j) (IsFlooded k)))) (and (forall ((m BoundSet)) (forall ((l BoundSet)) (=> (SendsWaterPouring l) (IsFlooded m)))) (forall ((n BoundSet)) (forall ((p BoundSet)) (forall ((o BoundSet)) (=> (IsIn n o) (IsFlooded p))))))))) (exists ((b BoundSet)) (exists ((a BoundSet)) (and (IsFlooded a) (IsFlooded b)))))))
(check-sat)
(get-model)