(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInWhiteShirt (BoundSet) Bool)
(declare-fun IsSpeakingIntoMicrophone (BoundSet) Bool)
(declare-fun IsAtPublicEvent (BoundSet) Bool)
(declare-fun IsInFrontOfCrowd (BoundSet) Bool)
(declare-fun IsMakingSpeech (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsInWhiteShirt a) (and (IsSpeakingIntoMicrophone a) (IsAtPublicEvent a)))) (and (forall ((f BoundSet)) (=> (IsInWhiteShirt f) (IsInFrontOfCrowd f))) (and (forall ((g BoundSet)) (=> (IsInWhiteShirt g) (IsSpeakingIntoMicrophone g))) (and (forall ((h BoundSet)) (=> (IsSpeakingIntoMicrophone h) (IsMakingSpeech h))) (and (forall ((i BoundSet)) (=> (IsMakingSpeech i) (IsSpeakingIntoMicrophone i))) (and (forall ((j BoundSet)) (=> (IsSpeakingIntoMicrophone j) (IsInFrontOfCrowd j))) (and (forall ((k BoundSet)) (=> (IsInWhiteShirt k) (IsAtPublicEvent k))) (and (forall ((l BoundSet)) (=> (IsAtPublicEvent l) (IsMakingSpeech l))) (and (forall ((m BoundSet)) (=> (IsMakingSpeech m) (IsAtPublicEvent m))) (and (forall ((n BoundSet)) (=> (IsAtPublicEvent n) (IsInFrontOfCrowd n))) (forall ((o BoundSet)) (=> (IsInFrontOfCrowd o) (IsAtPublicEvent o))))))))))))) (exists ((a BoundSet)) (and (IsInWhiteShirt a) (and (IsMakingSpeech a) (IsInFrontOfCrowd a)))))))
(check-sat)
(get-model)