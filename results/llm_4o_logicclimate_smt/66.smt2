(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsFounder (BoundSet BoundSet) Bool)
(declare-fun OffersCreativeServices (BoundSet BoundSet) Bool)
(declare-fun ToRetailIndustry (BoundSet BoundSet) Bool)
(declare-fun Believes (BoundSet BoundSet) Bool)
(declare-fun AreReal (BoundSet) Bool)
(declare-fun IsGoingToHappen (BoundSet BoundSet) Bool)
(declare-fun ( (Bool) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((f BoundSet)) (exists ((e BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (IsFounder b c) (and (OffersCreativeServices d e) (and (ToRetailIndustry d f) (and (Believes b a) (AreReal a))))))))))) (and (forall ((l BoundSet)) (forall ((n BoundSet)) (forall ((m BoundSet)) (forall ((k BoundSet)) (=> (IsGoingToHappen k l) (Believes m n)))))) (and (forall ((o BoundSet)) (forall ((p BoundSet)) (forall ((q BoundSet)) (=> (Believes o p) (AreReal q))))) (and (forall ((r BoundSet)) (forall ((t BoundSet)) (forall ((s BoundSet)) (=> (AreReal r) (Believes s t))))) (and (forall ((u BoundSet)) (forall ((v BoundSet)) (=> (IsGoingToHappen u v) (AreReal u)))) (forall ((w BoundSet)) (forall ((x BoundSet)) (=> (IsGoingToHappen w x) (AreReal w))))))))) (exists ((a BoundSet)) (exists ((g BoundSet)) (exists ((h BoundSet)) (and (exists ((i BoundSet)) (( (and (IsGoingToHappen a g) (and (IsGoingToHappen a h) (IsGoingToHappen a i))))) (AreReal a))))))))
(check-sat)
(get-model)