(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsSmall (BoundSet) Bool)
(declare-fun HasShortBrownHair (BoundSet) Bool)
(declare-fun IsPushing (BoundSet BoundSet) Bool)
(declare-fun IsPink (BoundSet) Bool)
(declare-fun IsOver (BoundSet BoundSet) Bool)
(declare-fun HasBrownLeaves (BoundSet) Bool)
(declare-fun HasTrees (BoundSet BoundSet) Bool)
(declare-fun IsOutside (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((f BoundSet)) (exists ((e BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((g BoundSet)) (and (IsSmall a) (and (HasShortBrownHair a) (and (IsPushing a c) (and (IsPink c) (and (IsOver c d) (and (HasBrownLeaves e) (HasTrees g f))))))))))))) (and (forall ((j BoundSet)) (forall ((i BoundSet)) (=> (IsSmall i) (IsOutside j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (HasShortBrownHair k) (IsOutside l)))) (and (forall ((o BoundSet)) (forall ((m BoundSet)) (forall ((n BoundSet)) (=> (IsPushing m n) (IsOutside o))))) (and (forall ((p BoundSet)) (forall ((q BoundSet)) (=> (IsPink p) (IsOutside q)))) (forall ((r BoundSet)) (forall ((t BoundSet)) (forall ((s BoundSet)) (=> (HasTrees r s) (IsOutside t)))))))))) (exists ((h BoundSet)) (IsOutside h)))))
(check-sat)
(get-model)