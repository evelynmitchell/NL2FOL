(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun { () BoundSet)
(declare-fun IsInBlueTShirt (BoundSet) Bool)
(declare-fun IsTakingPicture (BoundSet BoundSet) Bool)
(declare-fun IsWithUmbrella (BoundSet) Bool)
(declare-fun WalksBehind (BoundSet BoundSet) Bool)
(declare-fun IsOutdoors (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((d BoundSet)) (exists ((c BoundSet)) (and (IsInBlueTShirt c) (and (IsTakingPicture c a) (and (IsWithUmbrella d) (WalksBehind d b)))))))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (forall ((i BoundSet)) (=> (IsTakingPicture g h) (IsOutdoors i))))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (IsWithUmbrella j) (IsOutdoors k)))) (and (forall ((m BoundSet)) (forall ((n BoundSet)) (forall ((l BoundSet)) (=> (IsWithUmbrella l) (WalksBehind m n))))) (and (forall ((o BoundSet)) (forall ((p BoundSet)) (forall ((q BoundSet)) (=> (WalksBehind o p) (IsWithUmbrella q))))) (and (forall ((r BoundSet)) (forall ((t BoundSet)) (forall ((u BoundSet)) (forall ((s BoundSet)) (=> (IsTakingPicture r s) (WalksBehind t u)))))) (and (forall ((v BoundSet)) (forall ((w BoundSet)) (forall ((x BoundSet)) (=> (WalksBehind v w) (IsOutdoors x))))) (forall ((y BoundSet)) (forall ((z BoundSet)) (=> (IsOutdoors y) (WalksBehind z {))))))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((f BoundSet)) (exists ((e BoundSet)) (and (IsTakingPicture e a) (and (IsOutdoors e) (WalksBehind f b))))))))))
(check-sat)
(get-model)