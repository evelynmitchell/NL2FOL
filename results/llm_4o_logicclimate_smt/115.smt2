(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsInWhite (BoundSet) Bool)
(declare-fun Kicks (BoundSet BoundSet) Bool)
(declare-fun LungesTowards (BoundSet BoundSet) Bool)
(declare-fun IsInRed (BoundSet) Bool)
(declare-fun FollowsCloseBy (BoundSet) Bool)
(declare-fun AreSoccerPlayers (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((e BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (IsInWhite a) (and (Kicks a b) (and (LungesTowards c d) (and (IsInRed e) (FollowsCloseBy e)))))))))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsInWhite g) (AreSoccerPlayers h)))) (and (forall ((j BoundSet)) (forall ((i BoundSet)) (forall ((k BoundSet)) (=> (AreSoccerPlayers i) (Kicks j k))))) (and (forall ((m BoundSet)) (forall ((n BoundSet)) (forall ((l BoundSet)) (=> (LungesTowards l m) (AreSoccerPlayers n))))) (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsInRed o) (AreSoccerPlayers p)))))))) (exists ((f BoundSet)) (AreSoccerPlayers f)))))
(check-sat)
(get-model)