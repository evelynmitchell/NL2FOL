(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun StaysAtFreezingPoint (BoundSet BoundSet) Bool)
(declare-fun IsWellStirred (BoundSet) Bool)
(declare-fun Melts (BoundSet) Bool)
(declare-fun RemainsAtFreezingPoint (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((d BoundSet)) (exists ((c BoundSet)) (and (StaysAtFreezingPoint c a) (and (IsWellStirred b) (Melts d))))))) (and (forall ((j BoundSet)) (forall ((h BoundSet)) (forall ((i BoundSet)) (=> (StaysAtFreezingPoint h i) (RemainsAtFreezingPoint j i))))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((k BoundSet)) (=> (RemainsAtFreezingPoint k l) (StaysAtFreezingPoint m l))))) (and (forall ((o BoundSet)) (forall ((p BoundSet)) (forall ((n BoundSet)) (=> (RemainsAtFreezingPoint n o) (Melts p))))) (and (forall ((r BoundSet)) (forall ((q BoundSet)) (=> (IsWellStirred q) (Melts r)))) (forall ((u BoundSet)) (forall ((t BoundSet)) (forall ((s BoundSet)) (=> (IsWellStirred s) (RemainsAtFreezingPoint t u)))))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((e BoundSet)) (and (IsWellStirred b) (RemainsAtFreezingPoint e a))))))))
(check-sat)
(get-model)