(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsOlder (BoundSet) Bool)
(declare-fun HasGrayHair (BoundSet) Bool)
(declare-fun IsWearingGraySuit (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsOlder a) (and (HasGrayHair a) (IsWearingGraySuit a)))) (and (forall ((f BoundSet)) (forall ((e BoundSet)) (=> (HasGrayHair e) (IsOlder f)))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsWearingGraySuit g) (IsOlder h)))) (and (forall ((j BoundSet)) (forall ((i BoundSet)) (=> (HasGrayHair i) (IsOlder j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (HasGrayHair k) (IsWearingGraySuit l)))) (forall ((m BoundSet)) (forall ((n BoundSet)) (=> (IsOlder m) (IsWearingGraySuit n))))))))) (exists ((b BoundSet)) (and (IsOlder b) (and (HasGrayHair b) (IsWearingGraySuit b)))))))
(check-sat)
(get-model)