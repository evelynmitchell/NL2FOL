(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun ControlLand (BoundSet BoundSet) Bool)
(declare-fun IsIn (BoundSet BoundSet) Bool)
(declare-fun HasCoastlines (BoundSet) Bool)
(declare-fun IsRising (BoundSet) Bool)
(declare-fun IsMelting (BoundSet) Bool)
(declare-fun IsBeginning (BoundSet) Bool)
(declare-fun IsFor (BoundSet BoundSet) Bool)
(declare-fun IsGainingGround (BoundSet) Bool)
(declare-fun IsGainingAdvantage (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((f BoundSet)) (exists ((e BoundSet)) (exists ((h BoundSet)) (exists ((i BoundSet)) (exists ((d BoundSet)) (exists ((a BoundSet)) (exists ((g BoundSet)) (exists ((b BoundSet)) (and (ControlLand d e) (and (IsIn e a) (and (HasCoastlines f) (and (IsRising g) (and (IsMelting h) (and (IsBeginning b) (and (IsFor b i) (IsGainingGround c))))))))))))))))) (and (forall ((m BoundSet)) (forall ((n BoundSet)) (forall ((l BoundSet)) (=> (IsIn l m) (IsMelting n))))) (and (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsIn o p) (IsBeginning o)))) (and (forall ((r BoundSet)) (forall ((q BoundSet)) (=> (IsGainingGround q) (IsGainingAdvantage q r)))) (and (forall ((t BoundSet)) (forall ((s BoundSet)) (=> (IsGainingAdvantage s t) (IsGainingGround s)))) (forall ((u BoundSet)) (forall ((v BoundSet)) (forall ((w BoundSet)) (=> (IsGainingGround u) (IsIn v w)))))))))) (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((j BoundSet)) (exists ((k BoundSet)) (and (IsGainingAdvantage c j) (and (IsIn b a) (IsFor b k)))))))))))
(check-sat)
(get-model)