(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsSevere (BoundSet) Bool)
(declare-fun CausesFoodShortages (BoundSet) Bool)
(declare-fun ResultsInForestFires (BoundSet) Bool)
(declare-fun ReleasesGreenhouseGas (BoundSet) Bool)
(declare-fun LeadsToEnvironmentalDisasters (BoundSet) Bool)
(declare-fun LeadsToDeadlyWeatherEvents (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsSevere a) (and (CausesFoodShortages a) (and (ResultsInForestFires a) (ReleasesGreenhouseGas a))))) (and (forall ((f BoundSet)) (forall ((e BoundSet)) (=> (LeadsToEnvironmentalDisasters e) (ResultsInForestFires f)))) (and (forall ((h BoundSet)) (forall ((g BoundSet)) (=> (ReleasesGreenhouseGas g) (LeadsToEnvironmentalDisasters h)))) (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (LeadsToEnvironmentalDisasters i) (ReleasesGreenhouseGas j))))))) (exists ((b BoundSet)) (and (LeadsToDeadlyWeatherEvents b) (LeadsToEnvironmentalDisasters b))))))
(check-sat)
(get-model)