(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun SingsJoyousSongs (BoundSet) Bool)
(declare-fun IsFromBook (BoundSet) Bool)
(declare-fun IsAtChurch (BoundSet BoundSet) Bool)
(declare-fun IsToMasses (BoundSet BoundSet) Bool)
(declare-fun IsFilledWithSong (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((e BoundSet)) (exists ((d BoundSet)) (and (SingsJoyousSongs a) (and (IsFromBook b) (and (IsAtChurch a d) (IsToMasses b e)))))))) (and (forall ((h BoundSet)) (forall ((i BoundSet)) (=> (SingsJoyousSongs h) (IsFilledWithSong i)))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (IsFilledWithSong j) (SingsJoyousSongs k)))) (and (forall ((m BoundSet)) (forall ((n BoundSet)) (forall ((l BoundSet)) (=> (IsAtChurch l m) (IsFilledWithSong n))))) (forall ((o BoundSet)) (forall ((p BoundSet)) (forall ((q BoundSet)) (=> (IsToMasses o p) (IsFilledWithSong q))))))))) (exists ((f BoundSet)) (IsFilledWithSong f)))))
(check-sat)
(get-model)