(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun GainsFrom (BoundSet BoundSet) Bool)
(declare-fun GainsMoney (BoundSet BoundSet) Bool)
(declare-fun GainsPower (BoundSet BoundSet) Bool)
(declare-fun ReceivesMoney (BoundSet BoundSet) Bool)
(declare-fun Confirms (BoundSet BoundSet) Bool)
(declare-fun IsDestructiveForce (BoundSet BoundSet) Bool)
(declare-fun Benefits (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((f BoundSet)) (exists ((j BoundSet)) (exists ((e BoundSet)) (exists ((h BoundSet)) (exists ((i BoundSet)) (exists ((d BoundSet)) (exists ((a BoundSet)) (exists ((g BoundSet)) (exists ((b BoundSet)) (exists ((k BoundSet)) (and (GainsFrom a b) (and (GainsMoney a e) (and (GainsPower a f) (and (ReceivesMoney c g) (and (Confirms c h) (and (IsDestructiveForce h i) (and (Benefits d j) (and (Benefits d e) (Benefits d k)))))))))))))))))))) (forall ((r BoundSet)) (forall ((o BoundSet)) (forall ((p BoundSet)) (forall ((q BoundSet)) (=> (Benefits o p) (Confirms q r))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((d BoundSet)) (exists ((c BoundSet)) (and (Benefits b a) (and (Benefits b c) (Benefits b d))))))))))
(check-sat)
(get-model)