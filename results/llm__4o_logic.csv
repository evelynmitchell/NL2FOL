label,updated_label,articles,Claim,Implication,Referring Expressions - Claim,Referring Expressions - Implication,Property Implications,Equal Entities,Subset Entities,Claim Lfs,Implication Lfs,Logical Form,Logical Form 2
0,false causality,"Giving 10% of your income to the Church will free a child’s soul from Limbo into Heaven, so give your money!", Giving 10% of your income to the Church frees a child's soul from Limbo into Heaven.  , You should give your money to the Church.,"IsGiven(a, b),  IsFreed(c),  IsInLimbo(c),  IsInHeaven(c)","IsGiven(f, g)",[],[],"[(' Your money', ' Your income'), (' Church', ' the Church')]","(IsGiven(a, b) and IsFreed(c) and IsInLimbo(c)) and IsInHeaven(c)","IsGiven(f, g)","(forall b (forall a ((IsGiven(a, b) and IsFreed(c) and IsInLimbo(c)) and IsInHeaven(c)))) -> (exists g (exists f (IsGiven(f, g))))","(exists a (exists b (exists c ((IsGiven(a, b) and IsFreed(c) and IsInLimbo(c)) and IsInHeaven(c))))) -> (exists f (exists g (IsGiven(f, g))))"
0,appeal to emotion,"If everyone lived his or her life exactly like Jesus lived his life, the world would be a beautiful place!", Jesus lived a beautiful life.  , Everyone should live exactly like Jesus.,"IsLivedBy(a, b),  IsBeautiful(b)","IsLike(c, a)",[],"[(' Jesus', ' Jesus')]",[],"IsLivedBy(a, b) and IsBeautiful(b)","∀c IsLike(c, a)","(IsLivedBy(a, b) and IsBeautiful(b)) -> (∀c IsLike(c, a))","(exists a (exists b (IsLivedBy(a, b) and IsBeautiful(b)))) -> (exists a (exists c (∀c IsLike(c, a))))"
0,appeal to emotion,"I know you don’t like the kitty-cat sweater that Grandma knitted for you, but she worked so hard on it and it will make her happy to see you wear it in the family holiday photo.", Grandma knitted the kitty-cat sweater.  , You should wear the kitty-cat sweater in the family holiday photo.,"IsKnittedBy(a, b)","IsWornBy(a, c),  IsIn(d)","[('  IsIn(d)', 'IsKnittedBy(a, b)')]","[(' kitty-cat sweater', ' kitty-cat sweater')]",[],"IsKnittedBy(a, b)","IsWornBy(a, c) and IsIn(d)","(IsKnittedBy(a, b) & (forall a (forall d (forall b (  IsIn(d) -> IsKnittedBy(a, b)))))) -> (IsWornBy(a, c) and IsIn(d))","(exists a (exists b (IsKnittedBy(a, b))) & (forall f (forall g (forall e (  IsIn(e) -> IsKnittedBy(f,g)))))) -> (exists a (exists d (exists c (IsWornBy(a, c) and IsIn(d)))))"
0,ad populum,"Dave wants you to break into the spooky cabin with him. “Everyone does it,” he claims. What fallacy has he committed?", Everyone breaks into the spooky cabin.  , You should break into the spooky cabin.,"IsSpooky(a),  BreaksInto(b, a)","IsSpooky(a),  BreaksInto(c, a)",[],"[(' spooky cabin', ' spooky cabin')]","[(' spooky cabin', ' You')]","IsSpooky(a) and BreaksInto(b, a)","IsSpooky(a) and BreaksInto(c, a)","(exists a (IsSpooky(a) and BreaksInto(b, a))) -> (forall c (IsSpooky(a) and BreaksInto(c, a)))","(exists a (exists b (IsSpooky(a) and BreaksInto(b, a)))) -> (exists a (exists c (IsSpooky(a) and BreaksInto(c, a))))"
0,fallacy of credibility,"Ms. Drayer, the smartest person in the universe, says the debate is the best class, therefore it is."," ""Ms. Drayer is the smartest person in the universe and Ms. Drayer says the debate is the best class.""  "," ""The debate is the best class.""","IsSmartestPersonInTheUniverse(b),  Says(b, a),  IsBestClass(a)",IsBestClass(a),"[('IsSmartestPersonInTheUniverse(b)', 'IsBestClass(a)'), ('  Says(b, a)', 'IsBestClass(a)')]","[(' the debate', ' The debate'), (' the debate', ' the best class')]",[],"IsSmartestPersonInTheUniverse(b) and Says(b, a) and IsBestClass(a)",IsBestClass(a),"(IsSmartestPersonInTheUniverse(b) and Says(b, a) and IsBestClass(a) & (forall a (forall b (IsSmartestPersonInTheUniverse(b) -> IsBestClass(a)))) & (forall a (forall b (  Says(b, a) -> IsBestClass(a))))) -> (IsBestClass(a))","(exists a (exists b (IsSmartestPersonInTheUniverse(b) and Says(b, a) and IsBestClass(a))) & (forall g (forall h (IsSmartestPersonInTheUniverse(g) -> IsBestClass(h)))) & (forall i (forall j (forall k (  Says(i,j) -> IsBestClass(k)))))) -> (exists a (IsBestClass(a)))"
0,faulty generalization,Why did the blond cross the road?  Because she saw a shoe sale!," ""The blond saw a shoe sale.""  "," ""The blond crossed the road due to a shoe sale.""","IsBlond(a),  SawShoeSale(a)","IsBlond(a),  CrossedRoad(a),  IsDueToShoeSale(a, b)","[('  CrossedRoad(a)', 'IsBlond(a)'), ('  CrossedRoad(a)', '  SawShoeSale(a)')]","[(' The blond', ' The blond'), (' shoe sale', ' shoe sale')]",[],IsBlond(a) and SawShoeSale(a),"IsBlond(a) and CrossedRoad(a) and IsDueToShoeSale(a, b)","(IsBlond(a) and SawShoeSale(a) & (forall a (  CrossedRoad(a) -> IsBlond(a))) & (forall a (  CrossedRoad(a) ->   SawShoeSale(a)))) -> (IsBlond(a) and CrossedRoad(a) and IsDueToShoeSale(a, b))","(exists a (IsBlond(a) and SawShoeSale(a)) & (forall d (  CrossedRoad(d) -> IsBlond(d))) & (forall e (  CrossedRoad(e) ->   SawShoeSale(e)))) -> (exists a (exists b (IsBlond(a) and CrossedRoad(a) and IsDueToShoeSale(a, b))))"
0,appeal to emotion,"Timmy: Mom, what if I don’t believe in God?
Mom: Then you burn in Hell forever.  Why do you ask?
Timmy: No reason.
"," ""If Timmy doesn't believe in God, Timmy burns in Hell forever.""  "," ""Timmy must believe in God.""","DoesNotBelieveIn(a, b),  BurnsIn(a, c)","MustBelieveIn(a, b)",[],"[(' Timmy', ' Timmy'), (' God', ' God')]",[],"DoesNotBelieveIn(a, b) and BurnsIn(a, c)","MustBelieveIn(a, b)","(DoesNotBelieveIn(a, b) and BurnsIn(a, c)) -> (MustBelieveIn(a, b))","(exists a (exists b (exists c (DoesNotBelieveIn(a, b) and BurnsIn(a, c))))) -> (exists a (exists b (MustBelieveIn(a, b))))"
0,false dilemma,"""If you never gave money to charity, then you must be a greedy millionaire."" What is this?"," ""You never gave money to charity.""  "," ""You are a greedy millionaire.""","GaveMoney(a, b)","IsGreedy(c),  IsMillionaire(c)",[],"[(' You', ' You'), (' charity', ' You')]","[(' money', ' You')]","~GaveMoney(a, b)",IsGreedy(c) and IsMillionaire(c),"(~GaveMoney(a, b)) -> (IsGreedy(c) and IsMillionaire(c))","(exists a (exists b (~GaveMoney(a, b)))) -> (exists c (IsGreedy(c) and IsMillionaire(c)))"
0,fallacy of extension,Caroline says that she is going to have lunch with the new girl. Jenna says that she can't believe that Caroline is ditching her old friends for the new girl.," ""Caroline is going to have lunch with the new girl."""," ""Caroline is ditching her old friends for the new girl.""","IsGoingToHaveLunchWith(a, c)","IsDitching(a, d),  IsFor(e)","[('IsGoingToHaveLunchWith(a, c)', 'IsDitching(a, d)'), ('IsDitching(a, d)', 'IsGoingToHaveLunchWith(a, c)')]","[(' Caroline', ' Caroline')]","[(' Caroline', ' her old friends'), (' Caroline', ' the new girl'), (' lunch', ' her old friends'), (' Caroline', ' new girl'), (' the new girl', ' new girl')]","IsGoingToHaveLunchWith(a, c)","IsDitching(a, d) and IsFor(e)","(forall c (exists a (IsGoingToHaveLunchWith(a, c))) & (forall a (forall d (forall c (IsGoingToHaveLunchWith(a, c) -> IsDitching(a, d))))) & (forall a (forall d (forall c (IsDitching(a, d) -> IsGoingToHaveLunchWith(a, c)))))) -> (exists a (forall e (forall d (IsDitching(a, d) and IsFor(e)))))","(exists a (exists c (IsGoingToHaveLunchWith(a, c))) & (forall f (forall g (forall h (IsGoingToHaveLunchWith(f,g) -> IsDitching(f,h))))) & (forall i (forall j (forall k (IsDitching(i,j) -> IsGoingToHaveLunchWith(i,k)))))) -> (exists a (exists d (exists e (IsDitching(a, d) and IsFor(e)))))"
0,faulty generalization,"""You can never give anyone a break. If you do, they'll walk all over you."""," ""You can never give anyone a break.""  "," ""People will walk all over you.""","Give(a, b, c)","WalkAllOver(d, a)",[],"[(' You', ' you')]","[(' a break', ' you')]","~Give(a, b, c)","WalkAllOver(d, a)","(exists c (~Give(a, b, c))) -> (forall a (WalkAllOver(d, a)))","(exists a (exists b (exists c (~Give(a, b, c))))) -> (exists a (exists d (WalkAllOver(d, a))))"
0,false causality,"Believing that ""runs"" occur to statistically independent phenomena such as routine wheel spirits."," ""Runs occur in statistically independent phenomena such as routine wheel spins.""  "," ""There are patterns or streaks in routine wheel spins.""","OccurIn(b, a)","OccurIn(c, a),  OccurIn(d, a)",[],"[(' routine wheel spins', ' routine wheel spins')]",[],"OccurIn(b, a)","OccurIn(c, a) or OccurIn(d, a)","(OccurIn(b, a)) -> (OccurIn(c, a) or OccurIn(d, a))","(exists a (exists b (OccurIn(b, a)))) -> (exists a (exists d (exists c (OccurIn(c, a) or OccurIn(d, a)))))"
0,false causality,"I broke a mirror earlier in the day, and then I received an F on my history final. Therefore, I received the F because I broke the mirror."," ""I broke a mirror and received an F on my history final.""  "," ""Breaking a mirror caused receiving an F on the history final.""","Broke(a, b),  ReceivedF(a, c)","Broke(x, d),  Caused(x, e),  ReceivedF(x, f)",[],[],"[(' I', ' the history final'), (' an F', ' my history final'), (' the history final', ' my history final')]","Broke(a, b) and ReceivedF(a, c)","Broke(x, d) and (Caused(x, e) and ReceivedF(x, f))","(forall c (exists a (Broke(a, b) and ReceivedF(a, c)))) -> (exists e (forall f (Broke(x, d) and (Caused(x, e) and ReceivedF(x, f)))))","(exists a (exists b (exists c (Broke(a, b) and ReceivedF(a, c))))) -> (exists f (exists x (exists d (exists e (Broke(x, d) and (Caused(x, e) and ReceivedF(x, f)))))))"
0,fallacy of extension,"Charlie: I think we should put more money into schools. Quality public education is so important.
Bob: So you’re saying we should cut military spending and spend it instead on more spiral notebooks and crayons? I guess you want our country to be a weak, defenseless target for terrorists.
Charlie: Creo que deberíamos invertir más dinero en las escuelas. La educación pública de calidad es muy importante.

Bob: ¿Entonces estás diciendo que deberíamos recortar el gasto militar y gastarlo en más cuadernos de espiral y crayones? Supongo que quiere que nuestro país sea un objetivo débil e indefenso para los terroristas."," ""Public education is important."""," ""Investing more money in schools will make the country a weak target for terrorists.""",IsImportant(a),"IsInvested(b, c),  IsWeakTarget(d),  IsTargetOf(e, f)",[],[],"[(' schools', ' Public education')]",IsImportant(a),"(IsInvested(b, c) and IsWeakTarget(d)) and ~IsTargetOf(d, f)","(forall a (IsImportant(a))) -> (exists c ((IsInvested(b, c) and IsWeakTarget(d)) and ~IsTargetOf(d, f)))","(exists a (IsImportant(a))) -> (exists f (exists d (exists b (exists c ((IsInvested(b, c) and IsWeakTarget(d)) and ~IsTargetOf(d, f))))))"
0,false causality,"Cellphones weren’t invented before I was born. Now, they are everywhere! Therefore, cellphones were created because I was born."," ""Cellphones weren’t invented before I was born."""," ""Cellphones were created because I was born.""","NotInventedBeforeBorn(a, b)","CreatedBecauseBorn(a, b)",[],"[(' Cellphones', ' Cellphones'), (' I', ' I')]",[],"NotInventedBeforeBorn(a, b)","CreatedBecauseBorn(a, b)","(NotInventedBeforeBorn(a, b)) -> (CreatedBecauseBorn(a, b))","(exists a (exists b (NotInventedBeforeBorn(a, b)))) -> (exists a (exists b (CreatedBecauseBorn(a, b))))"
0,ad hominem,Ms. Baker assigned me a lot of homework because she’s a witch!," ""Ms. Baker assigned a lot of homework.""  "," ""Ms. Baker is a witch.""","Assigned(a, b)",IsWitch(a),"[('Assigned(a, b)', 'IsWitch(a)')]","[(' Ms. Baker', ' Ms. Baker')]",[],"Assigned(a, b)",IsWitch(a),"(Assigned(a, b) & (forall a (forall b (Assigned(a, b) -> IsWitch(a))))) -> (IsWitch(a))","(exists a (exists b (Assigned(a, b))) & (forall d (forall e (Assigned(d,e) -> IsWitch(d))))) -> (exists a (IsWitch(a)))"
0,fallacy of credibility,"My dad went to school, so he knows everything about the education system.", Dad went to school.  , Dad knows everything about the education system.,WentToSchool(a),KnowsAboutEducationSystem(a),"[('WentToSchool(a)', 'KnowsAboutEducationSystem(a)'), ('KnowsAboutEducationSystem(a)', 'WentToSchool(a)')]","[(' Dad', ' Dad')]","[(' school', ' education system')]",WentToSchool(a),KnowsAboutEducationSystem(a),(WentToSchool(a) & (forall a (WentToSchool(a) -> KnowsAboutEducationSystem(a))) & (forall a (KnowsAboutEducationSystem(a) -> WentToSchool(a)))) -> (KnowsAboutEducationSystem(a)),(exists a (WentToSchool(a)) & (forall d (WentToSchool(d) -> KnowsAboutEducationSystem(d))) & (forall e (KnowsAboutEducationSystem(e) -> WentToSchool(e)))) -> (exists a (KnowsAboutEducationSystem(a)))
0,ad populum,Everyone is doing the Low-Carb Diet., Everyone is doing the Low-Carb Diet.  , You should do the Low-Carb Diet.,"IsOnDiet(b, a)","IsOnDiet(c, a)",[],"[(' Low-Carb Diet', ' Low-Carb Diet')]","[(' Low-Carb Diet', ' You')]","IsOnDiet(b, a)","IsOnDiet(c, a)","(exists a (IsOnDiet(b, a))) -> (forall c (IsOnDiet(c, a)))","(exists a (exists b (IsOnDiet(b, a)))) -> (exists a (exists c (IsOnDiet(c, a))))"
0,fallacy of extension,"Parent: You need to clean out your backpack.
Child: You know I have ADD! Why can’t you just accept me as I am?", The child has ADD.  , The parent should accept the child as the child is.,HasADD(a),"AcceptsChildAsIs(c, a)","[('HasADD(a)', 'AcceptsChildAsIs(c, a)')]","[(' The child', ' the child')]",[],HasADD(a),"AcceptsChildAsIs(c, a)","(HasADD(a) & (forall a (forall c (HasADD(a) -> AcceptsChildAsIs(c, a))))) -> (AcceptsChildAsIs(c, a))","(exists a (HasADD(a)) & (forall f (forall g (forall e (HasADD(e) -> AcceptsChildAsIs(f,g)))))) -> (exists a (exists c (AcceptsChildAsIs(c, a))))"
0,fallacy of credibility,"X has been around for years now.
Y is new.
Therefore, Y is better than X.", Y is new and X has been around for years.  , Y is better than X.,"IsNew(a),  HasBeenAroundForYears(b)","IsBetterThan(a, b)",[],"[(' Y', ' Y'), (' X', ' X')]",[],IsNew(a) and HasBeenAroundForYears(b),"IsBetterThan(a, b)","(IsNew(a) and HasBeenAroundForYears(b)) -> (IsBetterThan(a, b))","(exists a (exists b (IsNew(a) and HasBeenAroundForYears(b)))) -> (exists a (exists b (IsBetterThan(a, b))))"
0,false causality,"""Right when I sneezed, the power went off. I must've caused the outage."" Bragged Zohaw."," ""Zohaw sneezed and the power went off.""  "," ""Zohaw caused the power outage.""","Sneezed(a),  PowerWentOff(b)","CausedPowerOutage(a, c)","[('Sneezed(a)', 'CausedPowerOutage(a, c)'), ('  PowerWentOff(b)', 'CausedPowerOutage(a, c)')]","[(' Zohaw', ' Zohaw')]","[(' Zohaw', ' the power')]",Sneezed(a) and PowerWentOff(b),"CausedPowerOutage(a, c)","(forall b (Sneezed(a) and PowerWentOff(b)) & (forall a (forall c (Sneezed(a) -> CausedPowerOutage(a, c)))) & (forall a (forall b (forall c (  PowerWentOff(b) -> CausedPowerOutage(a, c)))))) -> (exists a (CausedPowerOutage(a, c)))","(exists a (exists b (Sneezed(a) and PowerWentOff(b))) & (forall d (forall e (Sneezed(d) -> CausedPowerOutage(d,e)))) & (forall f (forall g (forall h (  PowerWentOff(f) -> CausedPowerOutage(g,h)))))) -> (exists a (exists c (CausedPowerOutage(a, c))))"
0,equivocation,"I like my steak rare. But I don’t care for aardvark steak, even though it’s the rarest steak in the world."," ""Aardvark steak is the rarest steak in the world.""  "," ""Aardvark steak is not appealing.""","IsRarest(a),  IsInWorld(b)",IsNotAppealing(a),"[('IsNotAppealing(a)', 'IsRarest(a)'), ('IsNotAppealing(a)', '  IsInWorld(b)')]","[(' Aardvark steak', ' Aardvark steak')]",[],IsRarest(a) and IsInWorld(b),IsNotAppealing(a),(IsRarest(a) and IsInWorld(b) & (forall a (IsNotAppealing(a) -> IsRarest(a))) & (forall a (forall b (IsNotAppealing(a) ->   IsInWorld(b))))) -> (IsNotAppealing(a)),(exists a (exists b (IsRarest(a) and IsInWorld(b))) & (forall d (IsNotAppealing(d) -> IsRarest(d))) & (forall f (forall e (IsNotAppealing(e) ->   IsInWorld(f))))) -> (exists a (IsNotAppealing(a)))
0,faulty generalization,"If you allow the students to redo this one test, they will always want to redo all future tests", The students want to redo this test.  , The students will always want to redo all future tests.,"WantToRedo(a, b)","WantToRedo(a, c)",[],"[(' The students', ' The students')]","[(' this test', ' The students')]","WantToRedo(a, b)","WantToRedo(a, c)","(exists b (WantToRedo(a, b))) -> (forall a (WantToRedo(a, c)))","(exists a (exists b (WantToRedo(a, b)))) -> (exists a (exists c (WantToRedo(a, c))))"
0,fallacy of relevance,"There is no need for additional taxes for education. Every year we throw more money into education, and all they do is hire more management and build more buildings. None of the money actually reaches the classroom or is really used for education."," ""Additional taxes for education are used to hire more management and build more buildings."""," ""There is no need for additional taxes for education.""","AreUsedForEducation(a, b),  AreUsedToHire(a, c),  AreUsedToBuild(a, d)","AreForEducation(a, b)",[],"[(' Additional taxes', ' Additional taxes'), (' education', ' education')]",[],"AreUsedForEducation(a, b) and AreUsedToHire(a, c) and AreUsedToBuild(a, d)","~AreForEducation(a, b)","(AreUsedForEducation(a, b) and AreUsedToHire(a, c) and AreUsedToBuild(a, d)) -> (~AreForEducation(a, b))","(exists a (exists d (exists b (exists c (AreUsedForEducation(a, b) and AreUsedToHire(a, c) and AreUsedToBuild(a, d)))))) -> (exists a (exists b (~AreForEducation(a, b))))"
0,false causality,Believing that the cause of the Reformation was simply Martin Luther posting his theses, Martin Luther posting his theses was the cause of the Reformation.  , The Reformation was caused only by Martin Luther posting his theses.,"PostedTheses(a, b),  CausedReformation(b, c)","CausedOnlyBy(c, a),  PostedTheses(a, b)","[('PostedTheses(a, b)', 'CausedOnlyBy(c, a)'), ('  PostedTheses(a, b)', '  CausedReformation(b, c)')]","[(' Martin Luther', ' Martin Luther'), (' his theses', ' his theses'), (' the cause', ' his theses'), (' the Reformation', ' The Reformation')]","[(' Martin Luther', ' The Reformation'), (' Martin Luther', ' the Reformation')]","PostedTheses(a, b) and CausedReformation(b, c)","CausedOnlyBy(c, a) and PostedTheses(a, b)","(exists a (PostedTheses(a, b) and CausedReformation(b, c)) & (forall a (forall b (forall c (PostedTheses(a, b) -> CausedOnlyBy(c, a))))) & (forall a (forall b (forall c (  PostedTheses(a, b) ->   CausedReformation(b, c)))))) -> (exists a (forall c (CausedOnlyBy(c, a) and PostedTheses(a, b))))","(exists a (exists b (exists c (PostedTheses(a, b) and CausedReformation(b, c)))) & (forall f (forall g (forall i (forall h (PostedTheses(f,g) -> CausedOnlyBy(h,i)))))) & (forall j (forall l (forall k (forall m (  PostedTheses(j,k) ->   CausedReformation(l,m))))))) -> (exists a (exists b (exists c (CausedOnlyBy(c, a) and PostedTheses(a, b)))))"
0,false causality,The party was going great! Then Gerald showed up and little by little people started collecting their coats and heading home. Gerald ruined the party., Gerald ruined the party.  , People left the party because Gerald arrived.,"Ruined(a, b)","Left(c, b),  Arrived(a)","[('Ruined(a, b)', 'Left(c, b)'), ('Left(c, b)', 'Ruined(a, b)'), ('Ruined(a, b)', '  Arrived(a)'), ('  Arrived(a)', 'Ruined(a, b)')]","[(' Gerald', ' Gerald'), (' the party', ' the party')]",[],"Ruined(a, b)","Arrived(a) and Left(c, b)","(Ruined(a, b) & (forall a (forall b (forall c (Ruined(a, b) -> Left(c, b))))) & (forall a (forall b (forall c (Left(c, b) -> Ruined(a, b))))) & (forall a (forall b (Ruined(a, b) ->   Arrived(a)))) & (forall a (forall b (  Arrived(a) -> Ruined(a, b))))) -> (Arrived(a) and Left(c, b))","(exists a (exists b (Ruined(a, b))) & (forall f (forall d (forall e (Ruined(d,e) -> Left(f,e))))) & (forall g (forall i (forall h (Left(g,h) -> Ruined(i,h))))) & (forall j (forall k (Ruined(j,k) ->   Arrived(j)))) & (forall l (forall m (  Arrived(l) -> Ruined(l,m))))) -> (exists a (exists b (exists c (Arrived(a) and Left(c, b)))))"
0,fallacy of logic,"I can’t stop eating these chocolates.  I really love chocolate, or I seriously lack willpower.  I know I really love chocolate; therefore, I cannot lack willpower."," ""I really love chocolate."""," ""I do not lack willpower.""",LovesChocolate(a),HasWillpower(a),"[('LovesChocolate(a)', 'HasWillpower(a)')]","[(' I', ' I')]",[],LovesChocolate(a),HasWillpower(a),(LovesChocolate(a) & (forall a (LovesChocolate(a) -> HasWillpower(a)))) -> (HasWillpower(a)),(exists a (LovesChocolate(a)) & (forall d (LovesChocolate(d) -> HasWillpower(d)))) -> (exists a (HasWillpower(a)))
0,false causality,"Shortly after MySpace became popular, U.S. soldiers found Saddam Hussein.", U.S. soldiers found Saddam Hussein.  , MySpace becoming popular is related to finding Saddam Hussein.,"Found(b, a)","IsPopular(c),  IsRelatedToFinding(a)",[],"[(' Saddam Hussein', ' Saddam Hussein')]",[],"Found(b, a)",IsPopular(c) and IsRelatedToFinding(a),"(Found(b, a)) -> (IsPopular(c) and IsRelatedToFinding(a))","(exists a (exists b (Found(b, a)))) -> (exists a (exists c (IsPopular(c) and IsRelatedToFinding(a))))"
0,false causality,Jimmy isn't at school today. He must be on a family trip., Jimmy isn't at school today., Jimmy is on a family trip.,"IsNotAtSchool(a,c)",IsOnFamilyTrip(a),"[('IsNotAtSchool(a,c)', 'IsOnFamilyTrip(a)'), ('IsOnFamilyTrip(a)', 'IsNotAtSchool(a,c)')]","[(' Jimmy', ' Jimmy')]","[(' today', ' family trip')]","IsNotAtSchool(a,c)",IsOnFamilyTrip(a),"(IsNotAtSchool(a,c) & (forall a (forall c (IsNotAtSchool(a,c) -> IsOnFamilyTrip(a)))) & (forall a (forall c (IsOnFamilyTrip(a) -> IsNotAtSchool(a,c))))) -> (IsOnFamilyTrip(a))","(exists a (exists c (IsNotAtSchool(a,c))) & (forall f (forall e (IsNotAtSchool(e,f) -> IsOnFamilyTrip(e)))) & (forall g (forall h (IsOnFamilyTrip(g) -> IsNotAtSchool(g,h))))) -> (exists a (IsOnFamilyTrip(a)))"
0,circular reasoning,"I am athletic because I run, and I run because I'm athletic."," ""I am athletic because I run""  "," ""I am athletic""","IsAthletic(a),  Runs(a)",IsAthletic(a),"[('  Runs(a)', 'IsAthletic(a)'), ('IsAthletic(a)', '  Runs(a)')]","[(' I', ' I')]",[],Runs(a) and IsAthletic(a),IsAthletic(a),(Runs(a) and IsAthletic(a) & (forall a (  Runs(a) -> IsAthletic(a))) & (forall a (IsAthletic(a) ->   Runs(a)))) -> (IsAthletic(a)),(exists a (Runs(a) and IsAthletic(a)) & (forall b (  Runs(b) -> IsAthletic(b))) & (forall c (IsAthletic(c) ->   Runs(c)))) -> (exists a (IsAthletic(a)))
0,false causality,You know Jane Fonda’s exercise videos must be worth the money. Look at the great shape she’s in., Jane Fonda is in great shape.  , Jane Fonda's exercise videos are worth the money.,IsInGreatShape(a),IsWorthTheMoney(c),"[('IsInGreatShape(a)', 'IsWorthTheMoney(c)'), ('IsWorthTheMoney(c)', 'IsInGreatShape(a)')]",[],"[("" Jane Fonda's exercise videos"", ' Jane Fonda'), (' the money', ' great shape')]",IsInGreatShape(a),IsWorthTheMoney(c),(forall a (IsInGreatShape(a)) & (forall a (forall c (IsInGreatShape(a) -> IsWorthTheMoney(c)))) & (forall a (forall c (IsWorthTheMoney(c) -> IsInGreatShape(a))))) -> (exists c (IsWorthTheMoney(c))),(exists a (IsInGreatShape(a)) & (forall f (forall e (IsInGreatShape(e) -> IsWorthTheMoney(f)))) & (forall g (forall h (IsWorthTheMoney(g) -> IsInGreatShape(h))))) -> (exists c (IsWorthTheMoney(c)))
0,fallacy of credibility,Albert Einstein was extremely impressed with this theory.," ""Albert Einstein was extremely impressed with this theory.""  "," ""The theory is impressive.""","IsImpressedWith(a, b)",IsImpressive(c),"[('IsImpressedWith(a, b)', 'IsImpressive(c)'), ('IsImpressive(c)', 'IsImpressedWith(a, b)')]",[],"[(' this theory', ' The theory')]","IsImpressedWith(a, b)",IsImpressive(c),"(exists b (IsImpressedWith(a, b)) & (forall a (forall b (forall c (IsImpressedWith(a, b) -> IsImpressive(c))))) & (forall a (forall b (forall c (IsImpressive(c) -> IsImpressedWith(a, b)))))) -> (forall c (IsImpressive(c)))","(exists a (exists b (IsImpressedWith(a, b))) & (forall f (forall d (forall e (IsImpressedWith(d,e) -> IsImpressive(f))))) & (forall g (forall i (forall h (IsImpressive(g) -> IsImpressedWith(h,i)))))) -> (exists c (IsImpressive(c)))"
0,false causality,“I sneezed exactly at the same time the power went off. My sneeze must’ve done something to make the power go off. “," ""I sneezed exactly at the same time the power went off.""  "," ""My sneeze made the power go off.""","Sneezed(b),  WentOff(a)","MadeGoOff(c, a)","[('  WentOff(a)', 'MadeGoOff(c, a)')]","[(' the power', ' the power')]","[(' I', ' the power')]",Sneezed(b) and WentOff(a),"MadeGoOff(c, a)","(exists b (Sneezed(b) and WentOff(a)) & (forall a (forall c (  WentOff(a) -> MadeGoOff(c, a))))) -> (forall a (MadeGoOff(c, a)))","(exists a (exists b (Sneezed(b) and WentOff(a))) & (forall f (forall d (forall e (  WentOff(d) -> MadeGoOff(e,f)))))) -> (exists a (exists c (MadeGoOff(c, a))))"
0,faulty generalization,"It’s getting late, and we still have to decide on the school budget. What do you say we just leave it as is and we can call it a night?"," It's getting late, and we still have to decide on the school budget.  ", We should leave the school budget as it is.,IsDecided(a),IsLeftAsIs(c),"[('IsLeftAsIs(c)', 'IsDecided(a)')]",[],[],~IsDecided(a),IsLeftAsIs(c),(~IsDecided(a) & (forall a (forall c (IsLeftAsIs(c) -> IsDecided(a))))) -> (IsLeftAsIs(c)),(exists a (~IsDecided(a)) & (forall d (forall e (IsLeftAsIs(d) -> IsDecided(e))))) -> (exists c (IsLeftAsIs(c)))
0,ad hominem,"Speaker 1 (Democrat): “Donald Trump is a known adulterer. It reflects badly on his character, and suggests he might not be trustworthy.”
Speaker 2 (Republican): “What about Bill Clinton? You didn’t seem to care when he cheated.”"," ""Donald Trump is a known adulterer."""," ""Donald Trump might not be trustworthy.""",IsAdulterer(a),IsUntrustworthy(a),"[('IsAdulterer(a)', 'IsUntrustworthy(a)')]","[(' Donald Trump', ' Donald Trump')]",[],IsAdulterer(a),~IsUntrustworthy(a),(IsAdulterer(a) & (forall a (IsAdulterer(a) -> IsUntrustworthy(a)))) -> (~IsUntrustworthy(a)),(exists a (IsAdulterer(a)) & (forall c (IsAdulterer(c) -> IsUntrustworthy(c)))) -> (exists a (~IsUntrustworthy(a)))
0,ad hominem,"I hope I presented my argument clearly.  Now, my opponent will attempt to refute my argument by his own fallacious, incoherent, illogical version of history."," My opponent's version of history is fallacious, incoherent, and illogical.  ", My opponent's rebuttal is invalid.,"IsFallacious(a),  IsIncoherent(a),  IsIllogical(a)",IsInvalid(b),"[('IsFallacious(a)', 'IsInvalid(b)'), ('IsInvalid(b)', 'IsFallacious(a)'), ('  IsIncoherent(a)', 'IsInvalid(b)'), ('IsInvalid(b)', '  IsIncoherent(a)'), ('  IsIllogical(a)', 'IsInvalid(b)'), ('IsInvalid(b)', '  IsIllogical(a)')]",[],[],IsFallacious(a) and IsIncoherent(a) and IsIllogical(a),IsInvalid(b),(IsFallacious(a) and IsIncoherent(a) and IsIllogical(a) & (forall a (forall b (IsFallacious(a) -> IsInvalid(b)))) & (forall a (forall b (IsInvalid(b) -> IsFallacious(a)))) & (forall a (forall b (  IsIncoherent(a) -> IsInvalid(b)))) & (forall a (forall b (IsInvalid(b) ->   IsIncoherent(a)))) & (forall a (forall b (  IsIllogical(a) -> IsInvalid(b)))) & (forall a (forall b (IsInvalid(b) ->   IsIllogical(a))))) -> (IsInvalid(b)),(exists a (IsFallacious(a) and IsIncoherent(a) and IsIllogical(a)) & (forall d (forall c (IsFallacious(c) -> IsInvalid(d)))) & (forall f (forall e (IsInvalid(e) -> IsFallacious(f)))) & (forall g (forall h (  IsIncoherent(g) -> IsInvalid(h)))) & (forall i (forall j (IsInvalid(i) ->   IsIncoherent(j)))) & (forall l (forall k (  IsIllogical(k) -> IsInvalid(l)))) & (forall n (forall m (IsInvalid(m) ->   IsIllogical(n))))) -> (exists b (IsInvalid(b)))
0,false causality,"Every time we sacrifice virgins, it rains. Therefore, sacrificing virgins causes it to rain."," ""Every time we sacrifice virgins, it rains.""  "," ""Sacrificing virgins causes it to rain.""",IsSacrificed(a),"IsSacrificed(a),  CausesRain(b)",[],"[(' Virgins', ' Virgins')]",[],IsSacrificed(a),IsSacrificed(a) and CausesRain(b),(IsSacrificed(a)) -> (IsSacrificed(a) and CausesRain(b)),(exists a (IsSacrificed(a))) -> (exists a (exists b (IsSacrificed(a) and CausesRain(b))))
0,ad hominem,"Salesman: This car gets better than average gas mileage and is one of the most reliable cars according to Consumer Reports.
Will: I doubt it—you obviously just want to sell me that car.
", The car gets better than average gas mileage and is one of the most reliable cars according to Consumer Reports., The salesman wants to sell Will that car.,"GetsBetterThanAverageGasMileage(a),  IsReliableAccordingToConsumerReports(a, c)","WantsToSell(d, e, f)","[('WantsToSell(d, e, f)', 'GetsBetterThanAverageGasMileage(a)')]",[],"[(' that car', ' The car'), (' average gas mileage', ' Will'), (' average gas mileage', ' that car')]","GetsBetterThanAverageGasMileage(a) and IsReliableAccordingToConsumerReports(a, c)","WantsToSell(d, e, f)","(forall a (GetsBetterThanAverageGasMileage(a) and IsReliableAccordingToConsumerReports(a, c)) & (forall f (forall a (forall d (forall e (WantsToSell(d, e, f) -> GetsBetterThanAverageGasMileage(a))))))) -> (exists f (WantsToSell(d, e, f)))","(exists a (exists c (GetsBetterThanAverageGasMileage(a) and IsReliableAccordingToConsumerReports(a, c))) & (forall g (forall i (forall j (forall h (WantsToSell(g,h,i) -> GetsBetterThanAverageGasMileage(j))))))) -> (exists f (exists d (exists e (WantsToSell(d, e, f)))))"
0,fallacy of relevance,Labor unions in America are just as bad as Russia under Stalin!, Labor unions in America are as bad as Russia under Stalin.  , Labor unions in America are oppressive.,"IsBad(a),  IsIn(b)","IsOppressive(a),  IsIn(a)","[('IsBad(a)', 'IsOppressive(a)'), ('IsBad(a)', '  IsIn(a)')]","[(' Labor unions', ' Labor unions'), (' America', ' America')]","[(' Labor unions', ' America'), (' Labor unions', ' America')]",IsBad(a) and IsIn(b) and (IsBad(c) and IsUnder(d)),"IsIn(a, b) and IsOppressive(a)","(exists a (IsBad(a) and IsIn(b) and (IsBad(c) and IsUnder(d))) & (forall a (IsBad(a) -> IsOppressive(a))) & (forall a (IsBad(a) ->   IsIn(a)))) -> (exists a (forall b (IsIn(a, b) and IsOppressive(a))))","(exists a (exists d (exists b (exists c (IsBad(a) and IsIn(b) and (IsBad(c) and IsUnder(d)))))) & (forall e (IsBad(e) -> IsOppressive(e))) & (forall f (IsBad(f) ->   IsIn(f)))) -> (exists a (exists b (IsIn(a, b) and IsOppressive(a))))"
0,ad populum,"""Everyone was driving over the speed limit, so I shouldn't have gotten a ticket for it!"" is an example of which logical fallacy?", Everyone was driving over the speed limit., I should not have gotten a ticket for driving over the speed limit.,"IsDriving(a),  IsOverSpeedLimit(a)","IsDriving(c),  IsOverSpeedLimit(c),  GotTicket(c)",[],[],[],IsDriving(a) and IsOverSpeedLimit(a),IsDriving(c) and IsOverSpeedLimit(c) and GotTicket(c),(IsDriving(a) and IsOverSpeedLimit(a)) -> (IsDriving(c) and IsOverSpeedLimit(c) and GotTicket(c)),(exists a (IsDriving(a) and IsOverSpeedLimit(a))) -> (exists c (IsDriving(c) and IsOverSpeedLimit(c) and GotTicket(c)))
0,ad hominem,Why would you trust Paris Hilton to sell health food? She drinks and parties and has multiple partners.," ""Paris Hilton drinks, parties, and has multiple partners.""  "," ""Paris Hilton cannot be trusted to sell health food.""","Drinks(a),  Parties(a),  HasMultiplePartners(a)","CannotBeTrusted(a),  Sell(a, b)","[('Drinks(a)', 'CannotBeTrusted(a)'), ('CannotBeTrusted(a)', 'Drinks(a)'), ('Drinks(a)', '  Sell(a, b)'), ('  Parties(a)', 'CannotBeTrusted(a)'), ('  Parties(a)', '  Sell(a, b)'), ('  HasMultiplePartners(a)', 'CannotBeTrusted(a)'), ('  HasMultiplePartners(a)', '  Sell(a, b)')]","[(' Paris Hilton', ' Paris Hilton')]",[],Drinks(a) and Parties(a) and HasMultiplePartners(a),"CannotBeTrusted(a) and ~Sell(a, b)","(Drinks(a) and Parties(a) and HasMultiplePartners(a) & (forall a (Drinks(a) -> CannotBeTrusted(a))) & (forall a (CannotBeTrusted(a) -> Drinks(a))) & (forall a (forall b (Drinks(a) ->   Sell(a, b)))) & (forall a (  Parties(a) -> CannotBeTrusted(a))) & (forall a (forall b (  Parties(a) ->   Sell(a, b)))) & (forall a (  HasMultiplePartners(a) -> CannotBeTrusted(a))) & (forall a (forall b (  HasMultiplePartners(a) ->   Sell(a, b))))) -> (CannotBeTrusted(a) and ~Sell(a, b))","(exists a (Drinks(a) and Parties(a) and HasMultiplePartners(a)) & (forall c (Drinks(c) -> CannotBeTrusted(c))) & (forall d (CannotBeTrusted(d) -> Drinks(d))) & (forall f (forall e (Drinks(e) ->   Sell(e,f)))) & (forall g (  Parties(g) -> CannotBeTrusted(g))) & (forall i (forall h (  Parties(h) ->   Sell(h,i)))) & (forall j (  HasMultiplePartners(j) -> CannotBeTrusted(j))) & (forall l (forall k (  HasMultiplePartners(k) ->   Sell(k,l))))) -> (exists a (exists b (CannotBeTrusted(a) and ~Sell(a, b))))"
0,false causality,"“Yesterday, I walked under a ladder with an open umbrella indoors while spilling salt in front of a black cat. And I forgot to knock on wood with my lucky dice. That must be why I’m having such a bad day today. It’s bad luck.”"," ""I walked under a ladder, had an open umbrella indoors, spilled salt in front of a black cat, and forgot to knock on wood with lucky dice.""  "," ""These actions cause a bad day""","WalkedUnder(a, b),  HadOpenUmbrellaIndoors(a, c),  SpilledSaltInFrontOf(a, e),  ForgotToKnockOnWood(a, f),  HasLuckyDice(a, g)","CauseBadDay(h, i)","[('WalkedUnder(a, b)', 'CauseBadDay(h, i)'), ('CauseBadDay(h, i)', 'WalkedUnder(a, b)'), ('CauseBadDay(h, i)', '  HadOpenUmbrellaIndoors(a, c)'), ('CauseBadDay(h, i)', '  SpilledSaltInFrontOf(a, e)'), ('CauseBadDay(h, i)', '  HasLuckyDice(a, g)')]",[],"[(' I', ' a bad day'), (' an open umbrella', ' These actions'), (' lucky dice', ' These actions')]","WalkedUnder(a, b) and HadOpenUmbrellaIndoors(a, c) and SpilledSaltInFrontOf(a, e) and ForgotToKnockOnWood(a, f) and HasLuckyDice(a, g)","CauseBadDay(h, i)","(exists g (exists c (exists a (WalkedUnder(a, b) and HadOpenUmbrellaIndoors(a, c) and SpilledSaltInFrontOf(a, e) and ForgotToKnockOnWood(a, f) and HasLuckyDice(a, g)))) & (forall i (forall a (forall b (forall h (WalkedUnder(a, b) -> CauseBadDay(h, i)))))) & (forall i (forall a (forall b (forall h (CauseBadDay(h, i) -> WalkedUnder(a, b)))))) & (forall i (forall a (forall c (forall h (CauseBadDay(h, i) ->   HadOpenUmbrellaIndoors(a, c)))))) & (forall i (forall a (forall e (forall h (CauseBadDay(h, i) ->   SpilledSaltInFrontOf(a, e)))))) & (forall g (forall i (forall a (forall h (CauseBadDay(h, i) ->   HasLuckyDice(a, g))))))) -> (forall h (forall i (CauseBadDay(h, i))))","(exists g (exists b (exists c (exists a (exists f (exists e (WalkedUnder(a, b) and HadOpenUmbrellaIndoors(a, c) and SpilledSaltInFrontOf(a, e) and ForgotToKnockOnWood(a, f) and HasLuckyDice(a, g))))))) & (forall j (forall l (forall k (forall m (WalkedUnder(j,k) -> CauseBadDay(l,m)))))) & (forall n (forall o (forall p (forall q (CauseBadDay(n,o) -> WalkedUnder(p,q)))))) & (forall s (forall u (forall r (forall t (CauseBadDay(r,s) ->   HadOpenUmbrellaIndoors(t,u)))))) & (forall x (forall y (forall w (forall v (CauseBadDay(v,w) ->   SpilledSaltInFrontOf(x,y)))))) & (forall z (CauseBadDay(z,{) ->   HasLuckyDice(|,})))) -> (exists i (exists h (CauseBadDay(h, i))))"
0,faulty generalization,"A car makes less pollution than a bus. Therefore, cars are less of a pollution problem than buses"," ""A car makes less pollution than a bus.""  "," ""Cars are less of a pollution problem than buses.""","MakesLessPollutionThan(a, b)","LessOfPollutionProblemThan(c, e)",[],[],"[(' A car', ' Cars'), (' buses', ' a bus')]","MakesLessPollutionThan(a, b)","LessOfPollutionProblemThan(c, e)","(forall b (exists a (MakesLessPollutionThan(a, b)))) -> (exists e (forall c (LessOfPollutionProblemThan(c, e))))","(exists a (exists b (MakesLessPollutionThan(a, b)))) -> (exists e (exists c (LessOfPollutionProblemThan(c, e))))"
0,appeal to emotion,"Preys on people’s emotions and sensitivities, can turn into a slippery slope"," ""It preys on people's emotions and sensitivities.""  "," ""It can turn into a slippery slope.""","PreysOn(a),  PreysOn(b)","TurnsInto(c, a)",[],"[("" People's emotions"", ' a slippery slope')]","[(' sensitivities', ' It'), (' a slippery slope', ' sensitivities')]",PreysOn(a) and PreysOn(b),"TurnsInto(c, a)","(forall b (exists b (PreysOn(a) and PreysOn(b)))) -> (exists a (forall c (TurnsInto(c, a))))","(exists a (exists b (PreysOn(a) and PreysOn(b)))) -> (exists a (exists c (TurnsInto(c, a))))"
0,fallacy of logic,"Bats are mammals. Bats can fly. Pigs are also mammals, therefore pigs can fly."," ""Bats are mammals and bats can fly.""  "," ""Pigs can fly.""","IsMammal(a),  CanFly(c)",CanFly(d),"[('IsMammal(a)', 'CanFly(d)')]",[],[],IsMammal(a) and CanFly(c),CanFly(d),(IsMammal(a) and CanFly(c) & (forall a (forall d (IsMammal(a) -> CanFly(d))))) -> (CanFly(d)),(exists a (exists c (IsMammal(a) and CanFly(c))) & (forall f (forall e (IsMammal(e) -> CanFly(f))))) -> (exists d (CanFly(d)))
0,intentional,The Geo Metro is a superior car because it averages 43 miles per gallon.," ""The Geo Metro averages 43 miles per gallon.""  "," ""The Geo Metro is a superior car""",Averages43MPG(a),IsSuperiorCar(a),"[('Averages43MPG(a)', 'IsSuperiorCar(a)')]","[(' The Geo Metro', ' The Geo Metro')]","[(' The Geo Metro', ' superior car')]",Averages43MPG(a),IsSuperiorCar(a),(Averages43MPG(a) & (forall a (Averages43MPG(a) -> IsSuperiorCar(a)))) -> (IsSuperiorCar(a)),(exists a (Averages43MPG(a)) & (forall c (Averages43MPG(c) -> IsSuperiorCar(c)))) -> (exists a (IsSuperiorCar(a)))
0,fallacy of relevance,"“While you may have concerns about my votes about the environment, I can assure you that I am an open minded individual. What we should really discuss is my record on votes that expanded educational opportunities for all children."""," ""The speaker is an open-minded individual and has a record of voting to expand educational opportunities for all children."""," ""Concerns about the speaker's votes on the environment are not important.""","IsOpenMinded(a),  HasRecordOfVoting(a),  ExpandsEducationalOpportunities(d),  ForAllChildren(d)","ConcernsVotesOn(f, g)","[('IsOpenMinded(a)', 'ConcernsVotesOn(f, g)'), ('  HasRecordOfVoting(a)', 'ConcernsVotesOn(f, g)')]",[],"[(' The speaker', ' the environment'), (' the environment', ' an open-minded individual'), ("" The speaker's votes"", ' a record'), (' the environment', ' a record')]",IsOpenMinded(a) and HasRecordOfVoting(a) and ExpandsEducationalOpportunities(d) and ForAllChildren(d),"ConcernsVotesOn(f, g) and ~Important(f)","(exists a (IsOpenMinded(a) and HasRecordOfVoting(a) and ExpandsEducationalOpportunities(d) and ForAllChildren(d)) & (forall f (forall g (forall a (IsOpenMinded(a) -> ConcernsVotesOn(f, g))))) & (forall f (forall g (forall a (  HasRecordOfVoting(a) -> ConcernsVotesOn(f, g)))))) -> (forall g (ConcernsVotesOn(f, g) and ~Important(f)))","(exists a (exists d (IsOpenMinded(a) and HasRecordOfVoting(a) and ExpandsEducationalOpportunities(d) and ForAllChildren(d))) & (forall i (forall j (forall h (IsOpenMinded(h) -> ConcernsVotesOn(i,j))))) & (forall l (forall k (forall m (  HasRecordOfVoting(k) -> ConcernsVotesOn(l,m)))))) -> (exists f (exists g (ConcernsVotesOn(f, g) and ~Important(f))))"
0,intentional,"Fish are the easiest pets to keep; they are inexpensive and require no maintenance at all. Plus, they are really pretty and soothing to watch.", Fish are inexpensive and require no maintenance., Fish are the easiest pets to keep.,"IsInexpensive(a),  RequiresNoMaintenance(a)","AreEasiestPets(a),  ArePetsToKeep(a)","[('IsInexpensive(a)', 'AreEasiestPets(a)'), ('AreEasiestPets(a)', 'IsInexpensive(a)'), ('IsInexpensive(a)', '  ArePetsToKeep(a)'), ('  ArePetsToKeep(a)', 'IsInexpensive(a)'), ('  RequiresNoMaintenance(a)', 'AreEasiestPets(a)'), ('AreEasiestPets(a)', '  RequiresNoMaintenance(a)'), ('  RequiresNoMaintenance(a)', '  ArePetsToKeep(a)'), ('  ArePetsToKeep(a)', '  RequiresNoMaintenance(a)')]","[(' Fish', ' Fish')]",[],IsInexpensive(a) and RequiresNoMaintenance(a),AreEasiestPets(a) and ArePetsToKeep(a),(IsInexpensive(a) and RequiresNoMaintenance(a) & (forall a (IsInexpensive(a) -> AreEasiestPets(a))) & (forall a (AreEasiestPets(a) -> IsInexpensive(a))) & (forall a (IsInexpensive(a) ->   ArePetsToKeep(a))) & (forall a (  ArePetsToKeep(a) -> IsInexpensive(a))) & (forall a (  RequiresNoMaintenance(a) -> AreEasiestPets(a))) & (forall a (AreEasiestPets(a) ->   RequiresNoMaintenance(a))) & (forall a (  RequiresNoMaintenance(a) ->   ArePetsToKeep(a))) & (forall a (  ArePetsToKeep(a) ->   RequiresNoMaintenance(a)))) -> (AreEasiestPets(a) and ArePetsToKeep(a)),(exists a (IsInexpensive(a) and RequiresNoMaintenance(a)) & (forall c (IsInexpensive(c) -> AreEasiestPets(c))) & (forall d (AreEasiestPets(d) -> IsInexpensive(d))) & (forall e (IsInexpensive(e) ->   ArePetsToKeep(e))) & (forall f (  ArePetsToKeep(f) -> IsInexpensive(f))) & (forall g (  RequiresNoMaintenance(g) -> AreEasiestPets(g))) & (forall h (AreEasiestPets(h) ->   RequiresNoMaintenance(h))) & (forall i (  RequiresNoMaintenance(i) ->   ArePetsToKeep(i))) & (forall j (  ArePetsToKeep(j) ->   RequiresNoMaintenance(j)))) -> (exists a (AreEasiestPets(a) and ArePetsToKeep(a)))
0,intentional,I am only slightly obese.  That is perfectly normal here in America.," ""I am only slightly obese.""  "," ""Being slightly obese is normal in America.""",IsSlightlyObese(a),"IsSlightlyObese(x),  IsNormalIn(x, b)",[],[],"[(' I', ' America')]",IsSlightlyObese(a),"IsSlightlyObese(x) and IsNormalIn(x, b)","(exists a (IsSlightlyObese(a))) -> (forall b (IsSlightlyObese(x) and IsNormalIn(x, b)))","(exists a (IsSlightlyObese(a))) -> (exists x (exists b (IsSlightlyObese(x) and IsNormalIn(x, b))))"
0,ad populum,"Most people think the world is flat, therefore it is flat.", Most people think the world is flat.  , The world is flat.,ThinkWorldIsFlat(b),IsFlat(a),[],"[(' the world', ' The world')]",[],ThinkWorldIsFlat(b),IsFlat(a),(ThinkWorldIsFlat(b)) -> (IsFlat(a)),(exists b (ThinkWorldIsFlat(b))) -> (exists a (IsFlat(a)))
0,appeal to emotion,You have to give me a passing grade. I spent 150 hours on that project and missed every party this quarter.," ""I spent 150 hours on that project and missed every party this quarter.""  "," ""You have to give me a passing grade.""","SpentTimeOn(b, c, a),  MissedEvent(b, d, e)","Give(a, f, g)",[],"[(' that project', ' You')]","[(' I', ' me'), (' I', ' passing grade'), (' 150 hours', ' You'), (' 150 hours', ' passing grade'), (' passing grade', ' that project'), (' this quarter', ' You'), (' this quarter', ' me'), (' passing grade', ' this quarter')]","SpentTimeOn(b, c, a) and MissedEvent(b, d, e)","Give(a, f, g)","(forall e (exists e (forall a (exists c (exists b (SpentTimeOn(b, c, a) and MissedEvent(b, d, e))))))) -> (forall a (forall g (forall f (Give(a, f, g)))))","(exists b (exists c (exists a (exists d (exists e (SpentTimeOn(b, c, a) and MissedEvent(b, d, e))))))) -> (exists f (exists g (exists a (Give(a, f, g)))))"
0,ad populum,"I guess I should buy my 12 year old daughter an iPhone. Everyone at her school has one, and I want her to fit in with the other kids.", Everyone at her school has an iPhone.  , You should buy your 12 year old daughter an iPhone.,"IsAtHerSchool(a),  HasAnIPhone(a)","Is12YearsOld(d),  IsDaughter(d),  ShouldBuyIPhone(d)","[('Is12YearsOld(d)', 'IsAtHerSchool(a)'), ('  ShouldBuyIPhone(d)', 'IsAtHerSchool(a)'), ('  ShouldBuyIPhone(d)', '  HasAnIPhone(a)')]",[],"[(' Your 12 year old daughter', ' her school'), (' an iPhone', ' iPhone')]",IsAtHerSchool(a) and HasAnIPhone(a),Is12YearsOld(d) and IsDaughter(d) and ShouldBuyIPhone(d),(IsAtHerSchool(a) and HasAnIPhone(a) & (forall a (forall d (Is12YearsOld(d) -> IsAtHerSchool(a)))) & (forall a (forall d (  ShouldBuyIPhone(d) -> IsAtHerSchool(a)))) & (forall a (forall d (  ShouldBuyIPhone(d) ->   HasAnIPhone(a))))) -> (Is12YearsOld(d) and IsDaughter(d) and ShouldBuyIPhone(d)),(exists a (IsAtHerSchool(a) and HasAnIPhone(a)) & (forall f (forall g (Is12YearsOld(f) -> IsAtHerSchool(g)))) & (forall i (forall h (  ShouldBuyIPhone(h) -> IsAtHerSchool(i)))) & (forall j (forall k (  ShouldBuyIPhone(j) ->   HasAnIPhone(k))))) -> (exists d (Is12YearsOld(d) and IsDaughter(d) and ShouldBuyIPhone(d)))
0,intentional,Kerry’s plan will raise taxes by at least $900 billion his first hundred days.," ""Kerry’s plan will raise taxes by at least $900 billion in his first hundred days.""  "," ""Taxes will increase significantly with Kerry's plan.""","WillRaiseTaxes(a),  IsAtLeast(c),  InFirstHundredDays(d)",WillIncreaseSignificantly(b),"[('WillRaiseTaxes(a)', 'WillIncreaseSignificantly(b)'), ('WillIncreaseSignificantly(b)', 'WillRaiseTaxes(a)'), ('WillIncreaseSignificantly(b)', '  IsAtLeast(c)'), ('WillIncreaseSignificantly(b)', '  InFirstHundredDays(d)')]","[("" Kerry's plan"", "" Kerry's plan""), (' taxes', ' Taxes')]",[],WillRaiseTaxes(a) and IsAtLeast(c) and InFirstHundredDays(d),WillIncreaseSignificantly(b),(WillRaiseTaxes(a) and IsAtLeast(c) and InFirstHundredDays(d) & (forall a (forall b (WillRaiseTaxes(a) -> WillIncreaseSignificantly(b)))) & (forall a (forall b (WillIncreaseSignificantly(b) -> WillRaiseTaxes(a)))) & (forall b (forall c (WillIncreaseSignificantly(b) ->   IsAtLeast(c)))) & (forall d (forall b (WillIncreaseSignificantly(b) ->   InFirstHundredDays(d))))) -> (WillIncreaseSignificantly(b)),(exists a (exists d (exists c (WillRaiseTaxes(a) and IsAtLeast(c) and InFirstHundredDays(d)))) & (forall f (forall g (WillRaiseTaxes(f) -> WillIncreaseSignificantly(g)))) & (forall i (forall h (WillIncreaseSignificantly(h) -> WillRaiseTaxes(i)))) & (forall j (forall k (WillIncreaseSignificantly(j) ->   IsAtLeast(k)))) & (forall l (forall m (WillIncreaseSignificantly(l) ->   InFirstHundredDays(m))))) -> (exists b (WillIncreaseSignificantly(b)))
0,fallacy of extension,"If you told a person, ""I think we should all stay inside to bend the curve of COVID-19"" and they replied, ""so I guess you want people to lose their jobs then,"" what logical fallacy are they using?"," ""We should all stay inside to bend the curve of COVID-19""  "," ""You want people to lose their jobs""","StayInside(a),  IsCurveOf(b,c)","WantToLoseJobs(d,e)",[],[],"[(' We', ' people'), (' curve', ' You'), (' COVID-19', ' You'), (' COVID-19', ' their jobs')]","StayInside(a) and BendCurve(b) and IsCurveOf(b,c)","WantToLoseJobs(d,e)","(exists c (exists b (exists a (StayInside(a) and BendCurve(b) and IsCurveOf(b,c))))) -> (forall d (forall e (WantToLoseJobs(d,e))))","(exists a (exists b (exists c (StayInside(a) and BendCurve(b) and IsCurveOf(b,c))))) -> (exists d (exists e (WantToLoseJobs(d,e))))"
0,appeal to emotion,"Power lines cause cancer. I met a little boy with cancer who lived just 20 miles from a power line who looked into my eyes and said, in his weak voice, “Please do whatever you can so that other kids won’t have to go through what I am going through.” I urge you to vote for this bill to tear down all power lines and replace them with monkeys on treadmills."," ""Power lines cause cancer."""," ""Vote for the bill to tear down all power lines and replace them with monkeys on treadmills.""",CauseCancer(a),"VoteFor(c),  TearDown(a),  ReplaceWith(a, d),  On(d, e)","[('CauseCancer(a)', '  ReplaceWith(a, d)')]","[(' Power lines', ' power lines')]",[],CauseCancer(a),"VoteFor(c) and (TearDown(a) and ReplaceWith(a, d) and On(d, e))","(CauseCancer(a) & (forall a (forall d (CauseCancer(a) ->   ReplaceWith(a, d))))) -> (VoteFor(c) and (TearDown(a) and ReplaceWith(a, d) and On(d, e)))","(exists a (CauseCancer(a)) & (forall g (forall h (CauseCancer(g) ->   ReplaceWith(g,h))))) -> (exists e (exists a (exists d (exists c (VoteFor(c) and (TearDown(a) and ReplaceWith(a, d) and On(d, e)))))))"
0,ad hominem,"Student: Hey, Professor Moore, we shouldn't have to read this book by Freud. Everyone knows he used cocaine.", Freud used cocaine.  , We should not have to read the book by Freud.,"Used(a, b)","ShouldNotHaveToRead(c, d)","[('Used(a, b)', 'ShouldNotHaveToRead(c, d)')]",[],"[(' Freud', ' the book by Freud')]","Used(a, b)","~ShouldNotHaveToRead(c, d)","(exists a (Used(a, b)) & (forall a (forall d (forall b (forall c (Used(a, b) -> ShouldNotHaveToRead(c, d))))))) -> (forall d (~ShouldNotHaveToRead(c, d)))","(exists a (exists b (Used(a, b))) & (forall f (forall g (forall e (forall h (Used(e,f) -> ShouldNotHaveToRead(g,h))))))) -> (exists d (exists c (~ShouldNotHaveToRead(c, d))))"
0,false causality,"Our house was burglarized right after that new family moved in next door. Therefore, that new family must have been involved."," ""Our house was burglarized after the new family moved in next door.""  "," ""The new family was involved in the burglary.""","Burglarized(a),  MovedIn(b)",InvolvedInBurglary(d),"[('Burglarized(a)', 'InvolvedInBurglary(d)')]",[],"[(' Our house', ' The new family'), (' new family', ' The new family'), (' next door', ' The new family')]",MovedIn(b) and Burglarized(a),InvolvedInBurglary(d),(exists b (exists a (MovedIn(b) and Burglarized(a))) & (forall a (forall d (Burglarized(a) -> InvolvedInBurglary(d))))) -> (forall d (InvolvedInBurglary(d))),(exists a (exists b (MovedIn(b) and Burglarized(a))) & (forall f (forall g (Burglarized(f) -> InvolvedInBurglary(g))))) -> (exists d (InvolvedInBurglary(d)))
0,circular reasoning,"Witchcraft remains our most urgent spiritual problem because it threatens
our very souls."," ""Witchcraft threatens our very souls.""  "," ""Witchcraft is the most urgent spiritual problem.""","Threatens(a, b)",IsUrgent(c),"[('Threatens(a, b)', 'IsUrgent(c)'), ('IsUrgent(c)', 'Threatens(a, b)')]","[(' Witchcraft', ' Witchcraft')]",[],"Threatens(a, b)",IsUrgent(c),"(Threatens(a, b) & (forall a (forall b (forall c (Threatens(a, b) -> IsUrgent(c))))) & (forall a (forall b (forall c (IsUrgent(c) -> Threatens(a, b)))))) -> (IsUrgent(c))","(exists a (exists b (Threatens(a, b))) & (forall f (forall d (forall e (Threatens(d,e) -> IsUrgent(f))))) & (forall g (forall i (forall h (IsUrgent(g) -> Threatens(h,i)))))) -> (exists c (IsUrgent(c)))"
0,false dilemma,"Senator Jill: ""We'll have to cut education funding this year.""
Senator Bill: ""Why?""
Senator Jill: ""Well, either we cut the social programs or we live with a huge deficit and we can't live with the deficit."""," ""We must cut either social programs or education funding to avoid a huge deficit.""  "," ""We will cut education funding this year.""","IsCut(b),  IsCut(a),  IsAvoided(c)","IsCut(a),  IsDuring(e)","[('  IsCut(a)', '  IsDuring(e)'), ('  IsAvoided(c)', 'IsCut(a)'), ('IsCut(a)', '  IsAvoided(c)'), ('  IsAvoided(c)', '  IsDuring(e)')]","[(' education funding', ' education funding')]","[(' We', ' Social programs'), (' this year', ' Social programs'), (' education funding', ' huge deficit'), (' huge deficit', ' this year')]",(IsCut(b) or IsCut(a)) and IsAvoided(c),IsCut(a) and IsDuring(e),(forall c (forall b ((IsCut(b) or IsCut(a)) and IsAvoided(c))) & (forall a (forall e (  IsCut(a) ->   IsDuring(e)))) & (forall a (forall c (  IsAvoided(c) -> IsCut(a)))) & (forall a (forall c (IsCut(a) ->   IsAvoided(c)))) & (forall e (forall c (  IsAvoided(c) ->   IsDuring(e))))) -> (forall e (exists a (exists e (IsCut(a) and IsDuring(e))))),(exists a (exists b (exists c ((IsCut(b) or IsCut(a)) and IsAvoided(c)))) & (forall f (forall g (  IsCut(f) ->   IsDuring(g)))) & (forall i (forall h (  IsAvoided(h) -> IsCut(i)))) & (forall j (forall k (IsCut(j) ->   IsAvoided(k)))) & (forall l (forall m (  IsAvoided(l) ->   IsDuring(m))))) -> (exists a (exists e (IsCut(a) and IsDuring(e))))
0,appeal to emotion,"""You'll make the right decision because you have something that not many people do: you have heart.""?"," ""You have heart.""  "," ""You will make the right decision.""",HasHeart(a),WillMakeDecision(a),"[('HasHeart(a)', 'WillMakeDecision(a)'), ('WillMakeDecision(a)', 'HasHeart(a)')]","[(' You', ' You'), (' heart', ' the right decision')]","[(' the right decision', ' You'), (' heart', ' You')]",HasHeart(a),WillMakeDecision(a),(HasHeart(a) & (forall a (HasHeart(a) -> WillMakeDecision(a))) & (forall a (WillMakeDecision(a) -> HasHeart(a)))) -> (WillMakeDecision(a)),(exists a (HasHeart(a)) & (forall d (HasHeart(d) -> WillMakeDecision(d))) & (forall e (WillMakeDecision(e) -> HasHeart(e)))) -> (exists a (WillMakeDecision(a)))
0,faulty generalization,Christine has a terrible experience with a boyfriend. She decides that all boys are mean. This is an example of which logical fallacy?, Christine had a terrible experience with a boyfriend.  , All boys are mean.,"HadTerribleExperience(a),  WithBoyfriend(a)",IsMean(d),[],[],[],HadTerribleExperience(a) and WithBoyfriend(a),IsBoy(d) and IsMean(d),(HadTerribleExperience(a) and WithBoyfriend(a)) -> (IsBoy(d) and IsMean(d)),(exists a (HadTerribleExperience(a) and WithBoyfriend(a))) -> (exists d (IsBoy(d) and IsMean(d)))
0,circular reasoning,Smoking pot is against the law because it's wrong; I know it's wrong because it is against the law., Smoking pot is against the law and smoking pot is wrong.  , Smoking pot is wrong.,"IsAgainstTheLaw(a),  IsWrong(a)",IsWrong(c),"[('IsWrong(c)', 'IsAgainstTheLaw(a)')]",[],"[(' Smoking pot', ' the law')]",IsAgainstTheLaw(a) and IsWrong(a),IsWrong(c),(IsAgainstTheLaw(a) and IsWrong(a) & (forall a (forall c (IsWrong(c) -> IsAgainstTheLaw(a))))) -> (IsWrong(c)),(exists a (IsAgainstTheLaw(a) and IsWrong(a)) & (forall d (forall e (IsWrong(d) -> IsAgainstTheLaw(e))))) -> (exists c (IsWrong(c)))
0,circular reasoning,"""You can't give me a D because I'm an A student!"""," ""I am an A student.""  "," ""You cannot give me a D.""",IsAStudent(a),"CannotGive(c, d, e)","[('IsAStudent(a)', 'CannotGive(c, d, e)')]",[],"[(' I', ' me')]",IsAStudent(a),"CannotGive(c, d, e)","(exists a (IsAStudent(a)) & (forall e (forall a (forall d (forall c (IsAStudent(a) -> CannotGive(c, d, e))))))) -> (forall d (CannotGive(c, d, e)))","(exists a (IsAStudent(a)) & (forall f (forall g (forall i (forall h (IsAStudent(f) -> CannotGive(g,h,i))))))) -> (exists e (exists d (exists c (CannotGive(c, d, e)))))"
0,fallacy of logic,People who buy stocks are no different from people who bet on horse racing. They both risk their money with little chance of making a big profit., People who buy stocks risk their money with little chance of making a big profit., People who bet on horse racing have little chance of making a big profit.,"BuysStocks(a),  RisksMoney(a, b),  HasLittleChanceOfBigProfit(c)","BetsOnHorseRacing(d),  HasLittleChanceOfBigProfit(e)","[('BetsOnHorseRacing(d)', 'BuysStocks(a)'), ('  RisksMoney(a, b)', 'BetsOnHorseRacing(d)'), ('BetsOnHorseRacing(d)', '  RisksMoney(a, b)'), ('  RisksMoney(a, b)', '  HasLittleChanceOfBigProfit(e)')]",[],"[(' People who bet on horse racing', ' their money'), (' big profit', ' their money'), (' People who bet on horse racing', ' a big profit'), (' a big profit', ' big profit')]","BuysStocks(a) and (RisksMoney(a, b) and HasLittleChanceOfBigProfit(c))",BetsOnHorseRacing(d) and HasLittleChanceOfBigProfit(e),"(forall c (forall b (BuysStocks(a) and (RisksMoney(a, b) and HasLittleChanceOfBigProfit(c)))) & (forall a (forall d (BetsOnHorseRacing(d) -> BuysStocks(a)))) & (forall a (forall d (forall b (  RisksMoney(a, b) -> BetsOnHorseRacing(d))))) & (forall a (forall d (forall b (BetsOnHorseRacing(d) ->   RisksMoney(a, b))))) & (forall a (forall e (forall b (  RisksMoney(a, b) ->   HasLittleChanceOfBigProfit(e)))))) -> (forall e (exists e (exists d (BetsOnHorseRacing(d) and HasLittleChanceOfBigProfit(e)))))","(exists a (exists b (exists c (BuysStocks(a) and (RisksMoney(a, b) and HasLittleChanceOfBigProfit(c))))) & (forall f (forall g (BetsOnHorseRacing(f) -> BuysStocks(g)))) & (forall i (forall j (forall h (  RisksMoney(h,i) -> BetsOnHorseRacing(j))))) & (forall l (forall k (forall m (BetsOnHorseRacing(k) ->   RisksMoney(l,m))))) & (forall n (forall o (forall p (  RisksMoney(n,o) ->   HasLittleChanceOfBigProfit(p)))))) -> (exists d (exists e (BetsOnHorseRacing(d) and HasLittleChanceOfBigProfit(e))))"
0,appeal to emotion,"I cannot get a job because the public education system failed me;  I have to steal to  survive.  It is society's fault, not mine."," ""The public education system failed me.""  "," ""Society is at fault for my need to steal to survive.""","Failed(b, a)","IsAtFaultFor(c, d)","[('IsAtFaultFor(c, d)', 'Failed(b, a)')]",[],"[(' my need to steal to survive', ' me')]","Failed(b, a)","IsAtFaultFor(c, d)","(forall b (Failed(b, a)) & (forall a (forall d (forall b (forall c (IsAtFaultFor(c, d) -> Failed(b, a))))))) -> (exists d (IsAtFaultFor(c, d)))","(exists a (exists b (Failed(b, a))) & (forall f (forall g (forall e (forall h (IsAtFaultFor(e,f) -> Failed(g,h))))))) -> (exists d (exists c (IsAtFaultFor(c, d))))"
0,faulty generalization,"Trump presents a dark image of America if Clinton is elected, with “Syrian refugees flooding in, illegal immigrants convicted of crimes staying.”", Clinton's election will lead to Syrian refugees flooding in and illegal immigrants convicted of crimes staying.  , America will have a dark future if Clinton is elected.,"LeadsToFloodingIn(b),  LeadsToStaying(c)","WillHaveDarkFuture(d),  IsElected(f)","[('WillHaveDarkFuture(d)', 'LeadsToFloodingIn(b)'), ('WillHaveDarkFuture(d)', '  LeadsToStaying(c)')]",[],"[(' Clinton', "" Clinton's election""), (' Syrian refugees', ' dark future'), (' illegal immigrants convicted of crimes', ' dark future')]",LeadsToFloodingIn(b) and LeadsToStaying(c),IsElected(f) and WillHaveDarkFuture(d),(LeadsToFloodingIn(b) and LeadsToStaying(c) & (forall d (forall b (WillHaveDarkFuture(d) -> LeadsToFloodingIn(b)))) & (forall d (forall c (WillHaveDarkFuture(d) ->   LeadsToStaying(c))))) -> (IsElected(f) and WillHaveDarkFuture(d)),(exists b (exists c (LeadsToFloodingIn(b) and LeadsToStaying(c))) & (forall g (forall h (WillHaveDarkFuture(g) -> LeadsToFloodingIn(h)))) & (forall i (forall j (WillHaveDarkFuture(i) ->   LeadsToStaying(j))))) -> (exists f (exists d (IsElected(f) and WillHaveDarkFuture(d))))
0,ad hominem,"Charlie: Fast food is filled with salt, fat, and added sugars. We need better regulation of the industry.
Bob: That my be, but you're such a hypocrite! I saw you devour a Triple-Baconator, super-sized fries, and 64oz of soda yesterday!"," ""Charlie ate a Triple-Baconator, super-sized fries, and 64oz of soda yesterday.""  "," ""The fast food industry needs better regulation.""","Ate(a, b),  Ate(a, c),  Ate(a, d),  IsYesterday(e)",NeedsBetterRegulation(f),"[('NeedsBetterRegulation(f)', 'Ate(a, b)'), ('  Ate(a, c)', 'NeedsBetterRegulation(f)'), ('NeedsBetterRegulation(f)', '  Ate(a, c)'), ('  Ate(a, d)', 'NeedsBetterRegulation(f)'), ('NeedsBetterRegulation(f)', '  Ate(a, d)'), ('NeedsBetterRegulation(f)', '  IsYesterday(e)')]",[],"[(' super-sized fries', ' The fast food industry')]","Ate(a, b) and Ate(a, c) and Ate(a, d) and IsYesterday(e)",NeedsBetterRegulation(f),"(exists c (Ate(a, b) and Ate(a, c) and Ate(a, d) and IsYesterday(e)) & (forall f (forall a (forall b (NeedsBetterRegulation(f) -> Ate(a, b))))) & (forall f (forall a (forall c (  Ate(a, c) -> NeedsBetterRegulation(f))))) & (forall f (forall a (forall c (NeedsBetterRegulation(f) ->   Ate(a, c))))) & (forall f (forall a (forall d (  Ate(a, d) -> NeedsBetterRegulation(f))))) & (forall f (forall a (forall d (NeedsBetterRegulation(f) ->   Ate(a, d))))) & (forall f (forall e (NeedsBetterRegulation(f) ->   IsYesterday(e))))) -> (forall f (NeedsBetterRegulation(f)))","(exists b (exists c (exists a (exists d (exists e (Ate(a, b) and Ate(a, c) and Ate(a, d) and IsYesterday(e)))))) & (forall g (forall i (forall h (NeedsBetterRegulation(g) -> Ate(h,i))))) & (forall j (forall l (forall k (  Ate(j,k) -> NeedsBetterRegulation(l))))) & (forall n (forall o (forall m (NeedsBetterRegulation(m) ->   Ate(n,o))))) & (forall q (forall r (forall p (  Ate(p,q) -> NeedsBetterRegulation(r))))) & (forall s (forall u (forall t (NeedsBetterRegulation(s) ->   Ate(t,u))))) & (forall w (forall v (NeedsBetterRegulation(v) ->   IsYesterday(w))))) -> (exists f (NeedsBetterRegulation(f)))"
0,faulty generalization,Christine has a terrible experience with a boyfriend. She decides that all boys are mean.," ""Christine had a terrible experience with a boyfriend.""  "," ""All boys are mean.""","HadTerribleExperience(a, b),  WithBoyfriend(b, c)",IsMean(d),"[('HadTerribleExperience(a, b)', 'IsMean(d)')]",[],"[(' boyfriend', ' Boys')]","HadTerribleExperience(a, b) and WithBoyfriend(b, c)",Boys(d) and IsMean(d),"(exists c (HadTerribleExperience(a, b) and WithBoyfriend(b, c)) & (forall a (forall d (forall b (HadTerribleExperience(a, b) -> IsMean(d)))))) -> (forall d (Boys(d) and IsMean(d)))","(exists a (exists b (exists c (HadTerribleExperience(a, b) and WithBoyfriend(b, c)))) & (forall f (forall g (forall e (HadTerribleExperience(e,f) -> IsMean(g)))))) -> (exists d (Boys(d) and IsMean(d)))"
0,intentional,"Barbara believes the marketing agency's office is haunted. The cleaning crew once said they heard a other-worldly noise late at night. Since no one could prove that it wasn't a ghost, the office must be haunted.", The marketing agency's office is haunted., The office is haunted.,IsHaunted(a),IsHaunted(b),[],[],"[('', "" The marketing agency's office"")]",IsHaunted(a),IsHaunted(b),(forall a (IsHaunted(a))) -> (exists b (IsHaunted(b))),(exists a (IsHaunted(a))) -> (exists b (IsHaunted(b)))
0,ad populum,"I am voting for Pepitone for President because the rest of my family is voting for her, and I don't want to be the only one not doing so."," ""The rest of my family is voting for Pepitone for President.""  "," ""You should vote for Pepitone for President.""","IsVotingFor(c, a),  IsCandidateFor(a, b)","IsVotingFor(d, a),  IsCandidateFor(a, b)",[],"[(' Pepitone', ' Pepitone'), (' President', ' President')]",[],"IsVotingFor(c, a) and IsCandidateFor(a, b)","IsVotingFor(d, a) and IsCandidateFor(a, b)","(IsVotingFor(c, a) and IsCandidateFor(a, b)) -> (IsVotingFor(d, a) and IsCandidateFor(a, b))","(exists a (exists b (exists c (IsVotingFor(c, a) and IsCandidateFor(a, b))))) -> (exists a (exists d (exists b (IsVotingFor(d, a) and IsCandidateFor(a, b)))))"
0,fallacy of credibility,"“I admire the president for being a good role model.” REPLY: “But the New York Times says he’s a lousy role model, so you’re wrong.”"," ""The New York Times says the president is a lousy role model.""  "," ""The president is not a good role model.""",IsLousyRoleModel(a),IsNotGoodRoleModel(a),[],"[(' the president', ' The president'), (' role model', ' role model')]",[],IsLousyRoleModel(a),IsNotGoodRoleModel(a),(IsLousyRoleModel(a)) -> (IsNotGoodRoleModel(a)),(exists a (IsLousyRoleModel(a))) -> (exists a (IsNotGoodRoleModel(a)))
0,faulty generalization,The numbers on gun violence speak for themselves. We should ban guns in the country!," ""The numbers on gun violence are significant.""  "," ""The country should ban guns.""","RelatedToGunViolence(a),  AreSignificant(a)","Ban(c, d)","[('  AreSignificant(a)', 'Ban(c, d)')]",[],"[(' The numbers', ' The country'), (' gun violence', ' The country'), (' gun violence', ' guns')]",RelatedToGunViolence(a) and AreSignificant(a),"Ban(c, d)","(exists a (RelatedToGunViolence(a) and AreSignificant(a)) & (forall a (forall d (forall c (  AreSignificant(a) -> Ban(c, d)))))) -> (forall c (Ban(c, d)))","(exists a (RelatedToGunViolence(a) and AreSignificant(a)) & (forall f (forall g (forall e (  AreSignificant(e) -> Ban(f,g)))))) -> (exists d (exists c (Ban(c, d))))"
0,false causality,"“The temperature has dropped this morning, and I also have a headache. Therefore, the cold weather must be causing my headache. “", The temperature has dropped this morning and I have a headache.  , The cold weather is causing my headache.,"HasDropped(b),  IsThisMorning(a),  HaveHeadache(c)","IsColdWeather(a),  CausesHeadache(a, e)","[('HasDropped(b)', '  CausesHeadache(a, e)'), ('  HaveHeadache(c)', 'IsColdWeather(a)')]","[(' this morning', ' The cold weather')]","[(' this morning', ' my headache'), (' I', ' my headache'), (' a headache.', ' my headache')]",HasDropped(b) and IsThisMorning(a) and HaveHeadache(c),"IsColdWeather(a) and CausesHeadache(a, e)","(exists c (exists a (HasDropped(b) and IsThisMorning(a) and HaveHeadache(c))) & (forall a (forall e (forall b (HasDropped(b) ->   CausesHeadache(a, e))))) & (forall a (forall c (  HaveHeadache(c) -> IsColdWeather(a))))) -> (forall e (IsColdWeather(a) and CausesHeadache(a, e)))","(exists a (exists b (exists c (HasDropped(b) and IsThisMorning(a) and HaveHeadache(c)))) & (forall g (forall i (forall h (HasDropped(g) ->   CausesHeadache(h,i))))) & (forall j (forall k (  HaveHeadache(j) -> IsColdWeather(k))))) -> (exists a (exists e (IsColdWeather(a) and CausesHeadache(a, e))))"
0,ad hominem,"My teacher says the Earth is flat, so it definitely is flat."," ""The teacher says the Earth is flat.""  "," ""The Earth is flat.""",SaysEarthIsFlat(a),IsFlat(b),"[('SaysEarthIsFlat(a)', 'IsFlat(b)')]",[],"[('', ' The Earth')]",SaysEarthIsFlat(a),IsFlat(b),(exists a (SaysEarthIsFlat(a)) & (forall a (forall b (SaysEarthIsFlat(a) -> IsFlat(b))))) -> (forall b (IsFlat(b))),(exists a (SaysEarthIsFlat(a)) & (forall d (forall c (SaysEarthIsFlat(c) -> IsFlat(d))))) -> (exists b (IsFlat(b)))
0,equivocation,"The fallacy of equivocation occurs when a key term or phrase in an argument is used in an ambiguous way, with one meaning in one portion of the argument and then another meaning in another portion of the argument.", A key term or phrase in an argument is used ambiguously.  , Arguments using equivocation are flawed.,"IsUsedAmbiguously(a),  IsIn(b)","UsesEquivocation(c),  IsFlawed(c)","[('IsUsedAmbiguously(a)', 'UsesEquivocation(c)'), ('UsesEquivocation(c)', 'IsUsedAmbiguously(a)'), ('IsUsedAmbiguously(a)', '  IsFlawed(c)'), ('  IsFlawed(c)', 'IsUsedAmbiguously(a)'), ('UsesEquivocation(c)', '  IsIn(b)')]",[],"[(' Key term or phrase', ' Arguments'), (' equivocation', ' Key term or phrase'), (' argument', ' Arguments'), (' equivocation', ' argument')]",IsUsedAmbiguously(a) and IsIn(b),UsesEquivocation(c) and IsFlawed(c),(exists b (exists a (IsUsedAmbiguously(a) and IsIn(b))) & (forall a (forall c (IsUsedAmbiguously(a) -> UsesEquivocation(c)))) & (forall a (forall c (UsesEquivocation(c) -> IsUsedAmbiguously(a)))) & (forall a (forall c (IsUsedAmbiguously(a) ->   IsFlawed(c)))) & (forall a (forall c (  IsFlawed(c) -> IsUsedAmbiguously(a)))) & (forall b (forall c (UsesEquivocation(c) ->   IsIn(b))))) -> (forall c (UsesEquivocation(c) and IsFlawed(c))),(exists a (exists b (IsUsedAmbiguously(a) and IsIn(b))) & (forall f (forall e (IsUsedAmbiguously(e) -> UsesEquivocation(f)))) & (forall g (forall h (UsesEquivocation(g) -> IsUsedAmbiguously(h)))) & (forall i (forall j (IsUsedAmbiguously(i) ->   IsFlawed(j)))) & (forall l (forall k (  IsFlawed(k) -> IsUsedAmbiguously(l)))) & (forall n (forall m (UsesEquivocation(m) ->   IsIn(n))))) -> (exists c (UsesEquivocation(c) and IsFlawed(c)))
0,faulty generalization,When you have too little or unrepresentative data to make claim., There is too little or unrepresentative data., You cannot make a claim.,"IsTooLittle(a),  IsUnrepresentative(a)","MakeClaim(b, c)",[],[],"[(' Data', ' You'), (' Data', ' a claim')]",IsTooLittle(a) or IsUnrepresentative(a),"~MakeClaim(b, c)","(exists a (IsTooLittle(a) or IsUnrepresentative(a))) -> (forall c (forall b (~MakeClaim(b, c))))","(exists a (IsTooLittle(a) or IsUnrepresentative(a))) -> (exists b (exists c (~MakeClaim(b, c))))"
0,ad populum,"The majority of people believe advertisers should spend more money on billboards, so billboards are objectively the best form of advertisement.", The majority of people believe advertisers should spend more money on billboards.  , Billboards are the best form of advertisement.,"BelievesMajorityOfPeople(b),  ShouldSpendMore(c),  OnBillboards(a)",IsBestFormOfAdvertisement(a),[],"[(' billboards', ' Billboards')]","[(' Billboards', ' advertisers')]",BelievesMajorityOfPeople(b) and (ShouldSpendMore(c) and OnBillboards(a)),IsBestFormOfAdvertisement(a),(forall c (BelievesMajorityOfPeople(b) and (ShouldSpendMore(c) and OnBillboards(a)))) -> (exists a (IsBestFormOfAdvertisement(a))),(exists a (exists b (exists c (BelievesMajorityOfPeople(b) and (ShouldSpendMore(c) and OnBillboards(a)))))) -> (exists a (IsBestFormOfAdvertisement(a)))
0,faulty generalization,"If we ban Hummers because they are bad for the environment, eventually the government will ban all cars, so we should not ban Hummers."," ""Hummers are bad for the environment.""  "," ""We should not ban Hummers.""","IsBadFor(a, b)","ShouldNotBan(c, a)",[],"[(' Hummers', ' Hummers')]","[(' We', ' the environment')]","IsBadFor(a, b)","ShouldNotBan(c, a)","(forall b (IsBadFor(a, b))) -> (exists c (ShouldNotBan(c, a)))","(exists a (exists b (IsBadFor(a, b)))) -> (exists a (exists c (ShouldNotBan(c, a))))"
0,ad hominem,"My opponent raised a good point, but can we trust him? I mean he just moved to town only 5 months ago, how much could he really know?"," ""My opponent just moved to town 5 months ago."""," ""My opponent cannot be trusted.""",JustMovedToTown(a),CannotBeTrusted(a),"[('JustMovedToTown(a)', 'CannotBeTrusted(a)')]","[(' My opponent', ' My opponent')]","[(' town', ' My opponent')]",JustMovedToTown(a),CannotBeTrusted(a),(JustMovedToTown(a) & (forall a (JustMovedToTown(a) -> CannotBeTrusted(a)))) -> (CannotBeTrusted(a)),(exists a (JustMovedToTown(a)) & (forall c (JustMovedToTown(c) -> CannotBeTrusted(c)))) -> (exists a (CannotBeTrusted(a)))
0,false dilemma,"Either you can save your money to buy a new car for yourself, or you can just take an Uber around for the rest of your life.", You can save money to buy a new car or take an Uber for the rest of your life.  , You will take an Uber for the rest of your life if you do not save money for a new car.,"IsSaved(a),  IsUsedToBuy(a, b),  TakesUber(d)","TakesUber(d),  IsNotSaved(a, b)","[('  IsUsedToBuy(a, b)', 'TakesUber(d)'), ('  IsUsedToBuy(a, b)', '  IsNotSaved(a, b)')]","[(' Money', ' money'), (' new car', ' new car'), (' Uber', ' Uber'), (' your life', ' your life')]","[(' new car', ' You'), (' You', ' your life')]","(IsSaved(a) and IsUsedToBuy(a, b)) or TakesUber(d)","IsNotSaved(a, b) and TakesUber(d)","((IsSaved(a) and IsUsedToBuy(a, b)) or TakesUber(d) & (forall a (forall d (forall b (  IsUsedToBuy(a, b) -> TakesUber(d))))) & (forall a (forall b (  IsUsedToBuy(a, b) ->   IsNotSaved(a, b))))) -> (IsNotSaved(a, b) and TakesUber(d))","(exists a (exists d (exists b ((IsSaved(a) and IsUsedToBuy(a, b)) or TakesUber(d)))) & (forall g (forall i (forall h (  IsUsedToBuy(g,h) -> TakesUber(i))))) & (forall j (forall k (  IsUsedToBuy(j,k) ->   IsNotSaved(j,k))))) -> (exists a (exists d (exists b (IsNotSaved(a, b) and TakesUber(d)))))"
0,false causality,"Matthieu was the only player on the team who didn't grow a playoff beard, and thus he ended up getting injured.", Matthieu didn't grow a playoff beard., Matthieu got injured because Matthieu didn't grow a playoff beard.,GrewPlayoffBeard(a),"GrewPlayoffBeard(a),  IsInjured(a)","[('  IsInjured(a)', 'GrewPlayoffBeard(a)')]","[(' Matthieu', ' Matthieu'), (' playoff beard', ' playoff beard')]",[],~GrewPlayoffBeard(a),~GrewPlayoffBeard(a) and IsInjured(a),(~GrewPlayoffBeard(a) & (forall a (  IsInjured(a) -> GrewPlayoffBeard(a)))) -> (~GrewPlayoffBeard(a) and IsInjured(a)),(exists a (~GrewPlayoffBeard(a)) & (forall c (  IsInjured(c) -> GrewPlayoffBeard(c)))) -> (exists a (~GrewPlayoffBeard(a) and IsInjured(a)))
0,intentional,"John: Members of the UbaTuba White Men's Club are upstanding citizens of the community.
Marvin: Then why are there so many of these members in jail?
John: They were never true UbaTuba White Men's Club members.
Marvin: What’s a true UbaTuba White Men's Club member?
John: Those who don't go to jail.
", Many members of the UbaTuba White Men's Club are in jail.  , True UbaTuba White Men's Club members are upstanding citizens.,"IsMemberOf(a, b),  IsInJail(a)","IsMemberOf(d, UbaTubaWhiteMensClub),  IsTrueMember(d),  IsUpstandingCitizen(d)",[],[],"[(' upstanding citizens', ' Many members'), ("" UbaTuba White Men's Club"", ' upstanding citizens')]","IsMemberOf(a, b) and IsInJail(a)","IsMemberOf(d, UbaTubaWhiteMensClub) and IsTrueMember(d) and IsUpstandingCitizen(d)","(IsMemberOf(a, b) and IsInJail(a)) -> (IsMemberOf(d, UbaTubaWhiteMensClub) and IsTrueMember(d) and IsUpstandingCitizen(d))","(exists a (exists b (IsMemberOf(a, b) and IsInJail(a)))) -> (exists d (IsMemberOf(d, UbaTubaWhiteMensClub) and IsTrueMember(d) and IsUpstandingCitizen(d)))"
0,faulty generalization,"""Animal experimentation reduces our respect for life. If we don't respect life, we are likely to be more and more tolerant of violent acts like war and murder. Soon our society will become a battlefield in which everyone constantly fears for their lives. It will be the end of civilization. To prevent this terrible consequence, we should make animal experimentation illegal right now."""," ""Animal experimentation reduces our respect for life.""  "," ""Society will become a battlefield with constant fear for life.""","Reduces(a, b)","WillBecome(c, d),  HasConstantFearFor(e)","[('WillBecome(c, d)', 'Reduces(a, b)')]",[],"[(' our respect for life', ' Society'), (' our respect for life', ' life')]","Reduces(a, b)","WillBecome(c, d) and HasConstantFearFor(e)","(exists b (Reduces(a, b)) & (forall a (forall d (forall b (forall c (WillBecome(c, d) -> Reduces(a, b))))))) -> (forall e (forall c (WillBecome(c, d) and HasConstantFearFor(e))))","(exists a (exists b (Reduces(a, b))) & (forall f (forall g (forall i (forall h (WillBecome(f,g) -> Reduces(h,i))))))) -> (exists e (exists d (exists c (WillBecome(c, d) and HasConstantFearFor(e)))))"
0,false causality,You know Jane Fonda's exercise videos must be worth the money. Look at the great shape she's in., Jane Fonda is in great shape.  , Jane Fonda's exercise videos are worth the money.,IsInGreatShape(a),IsWorthTheMoney(c),"[('IsInGreatShape(a)', 'IsWorthTheMoney(c)')]",[],"[("" Jane Fonda's exercise videos"", ' Jane Fonda')]",IsInGreatShape(a),IsWorthTheMoney(c),(forall a (IsInGreatShape(a)) & (forall a (forall c (IsInGreatShape(a) -> IsWorthTheMoney(c))))) -> (exists c (IsWorthTheMoney(c))),(exists a (IsInGreatShape(a)) & (forall f (forall e (IsInGreatShape(e) -> IsWorthTheMoney(f))))) -> (exists c (IsWorthTheMoney(c)))
0,faulty generalization,"Asians make lousy athletes, but do well at the Math Olympiad."," ""Asians make lousy athletes and do well at the Math Olympiad.""  "," ""Asians are not good at sports but excel in mathematics competitions.""","MakeLousyAthletes(a),  DoWellAtMathOlympiad(a)","NotGoodAtSports(a),  ExcelInMathCompetitions(a)",[],"[(' Asians', ' Asians')]","[(' athletes', ' sports'), (' Math Olympiad', ' mathematics competitions')]",MakeLousyAthletes(a) and DoWellAtMathOlympiad(a),NotGoodAtSports(a) and ExcelInMathCompetitions(a),(MakeLousyAthletes(a) and DoWellAtMathOlympiad(a)) -> (NotGoodAtSports(a) and ExcelInMathCompetitions(a)),(exists a (MakeLousyAthletes(a) and DoWellAtMathOlympiad(a))) -> (exists a (NotGoodAtSports(a) and ExcelInMathCompetitions(a)))
0,false dilemma,"“Caldwell Hall is in bad shape. Either we tear it down and put up a new building, or we continue to risk students’ safety. Obviously we shouldn’t risk anyone’s safety, so we must tear the building down.”"," ""Caldwell Hall is in bad shape.""  "," ""Tear Caldwell Hall down""",IsInBadShape(a),IsTornDown(a),"[('IsInBadShape(a)', 'IsTornDown(a)'), ('IsTornDown(a)', 'IsInBadShape(a)')]","[(' Caldwell Hall', ' Caldwell Hall')]",[],IsInBadShape(a),IsTornDown(a),(IsInBadShape(a) & (forall a (IsInBadShape(a) -> IsTornDown(a))) & (forall a (IsTornDown(a) -> IsInBadShape(a)))) -> (IsTornDown(a)),(exists a (IsInBadShape(a)) & (forall b (IsInBadShape(b) -> IsTornDown(b))) & (forall c (IsTornDown(c) -> IsInBadShape(c)))) -> (exists a (IsTornDown(a)))
0,faulty generalization,Did you really vote for Donald as class treasurer? Didn't you hear that his uncle was imprisoned for embezzling $1.5 million?," ""Donald's uncle was imprisoned for embezzling $1.5 million.""  "," ""You should not have voted for Donald as class treasurer.""","WasImprisoned(a),  Embezzled(a, b)","VotedFor(c, d)","[('WasImprisoned(a)', 'VotedFor(c, d)')]",[],"[(' $1.5 million', ' You')]","WasImprisoned(a) and Embezzled(a, b)","VotedFor(c, d) and ~IsClassTreasurer(e)","(exists b (WasImprisoned(a) and Embezzled(a, b)) & (forall a (forall d (forall c (WasImprisoned(a) -> VotedFor(c, d)))))) -> (forall c (VotedFor(c, d) and ~IsClassTreasurer(e)))","(exists a (exists b (WasImprisoned(a) and Embezzled(a, b))) & (forall f (forall g (forall h (WasImprisoned(f) -> VotedFor(g,h)))))) -> (exists e (exists d (exists c (VotedFor(c, d) and ~IsClassTreasurer(e)))))"
0,fallacy of logic,"If the ozone layer is destroyed, many people will get cancer and suffer from other illnesses.  The ozone layer is being protected, not destroyed.  So, many people will be spared the pain of cancer and other illnesses.", The ozone layer is being protected.  , Many people will be spared the pain of cancer and other illnesses.,IsProtected(a),"WillBeSpared(b, c),  IsPainful(c),  IsCancer(d),  IsIllness(e)","[('IsProtected(a)', 'WillBeSpared(b, c)'), ('IsProtected(a)', '  IsPainful(c)'), ('IsProtected(a)', '  IsCancer(d)'), ('IsProtected(a)', '  IsIllness(e)')]",[],[],IsProtected(a),"WillBeSpared(b, c) and (IsCancer(d) or IsIllness(e))","(IsProtected(a) & (forall a (forall b (forall c (IsProtected(a) -> WillBeSpared(b, c))))) & (forall a (forall c (IsProtected(a) ->   IsPainful(c)))) & (forall a (forall d (IsProtected(a) ->   IsCancer(d)))) & (forall a (forall e (IsProtected(a) ->   IsIllness(e))))) -> (WillBeSpared(b, c) and (IsCancer(d) or IsIllness(e)))","(exists a (IsProtected(a)) & (forall f (forall g (forall h (IsProtected(f) -> WillBeSpared(g,h))))) & (forall i (forall j (IsProtected(i) ->   IsPainful(j)))) & (forall l (forall k (IsProtected(k) ->   IsCancer(l)))) & (forall n (forall m (IsProtected(m) ->   IsIllness(n))))) -> (exists e (exists d (exists b (exists c (WillBeSpared(b, c) and (IsCancer(d) or IsIllness(e)))))))"
0,faulty generalization,"Broccoli has significantly less fat than the leading candy bar! Plus, it's nowhere near as hot as Hot Cheetos!", Broccoli has significantly less fat than the leading candy bar and broccoli is not as hot as Hot Cheetos.  , Broccoli is a healthier choice than the leading candy bar and Hot Cheetos.,"HasSignificantlyLessFatThan(a, b),  IsNotAsHotAs(a, c)","IsHealthierChoiceThan(a, b),  IsHealthierChoiceThan(a, c)","[('HasSignificantlyLessFatThan(a, b)', 'IsHealthierChoiceThan(a, b)'), ('IsHealthierChoiceThan(a, b)', 'HasSignificantlyLessFatThan(a, b)'), ('HasSignificantlyLessFatThan(a, b)', '  IsHealthierChoiceThan(a, c)'), ('  IsHealthierChoiceThan(a, c)', 'HasSignificantlyLessFatThan(a, b)'), ('  IsNotAsHotAs(a, c)', 'IsHealthierChoiceThan(a, b)'), ('IsHealthierChoiceThan(a, b)', '  IsNotAsHotAs(a, c)'), ('  IsHealthierChoiceThan(a, c)', '  IsNotAsHotAs(a, c)')]","[(' Broccoli', ' Broccoli'), (' leading candy bar', ' leading candy bar'), (' Hot Cheetos', ' Hot Cheetos')]","[(' Hot Cheetos', ' leading candy bar'), (' Hot Cheetos', ' leading candy bar')]","HasSignificantlyLessFatThan(a, b) and IsNotAsHotAs(a, c)","IsHealthierChoiceThan(a, b) and IsHealthierChoiceThan(a, c)","(exists c (HasSignificantlyLessFatThan(a, b) and IsNotAsHotAs(a, c)) & (forall a (forall b (HasSignificantlyLessFatThan(a, b) -> IsHealthierChoiceThan(a, b)))) & (forall a (forall b (IsHealthierChoiceThan(a, b) -> HasSignificantlyLessFatThan(a, b)))) & (forall a (forall b (forall c (HasSignificantlyLessFatThan(a, b) ->   IsHealthierChoiceThan(a, c))))) & (forall a (forall b (forall c (  IsHealthierChoiceThan(a, c) -> HasSignificantlyLessFatThan(a, b))))) & (forall a (forall b (forall c (  IsNotAsHotAs(a, c) -> IsHealthierChoiceThan(a, b))))) & (forall a (forall b (forall c (IsHealthierChoiceThan(a, b) ->   IsNotAsHotAs(a, c))))) & (forall a (forall c (  IsHealthierChoiceThan(a, c) ->   IsNotAsHotAs(a, c))))) -> (exists c (forall b (IsHealthierChoiceThan(a, b) and IsHealthierChoiceThan(a, c))))","(exists a (exists b (exists c (HasSignificantlyLessFatThan(a, b) and IsNotAsHotAs(a, c)))) & (forall d (forall e (HasSignificantlyLessFatThan(d,e) -> IsHealthierChoiceThan(d,e)))) & (forall f (forall g (IsHealthierChoiceThan(f,g) -> HasSignificantlyLessFatThan(f,g)))) & (forall i (forall j (forall h (HasSignificantlyLessFatThan(h,i) ->   IsHealthierChoiceThan(h,j))))) & (forall l (forall k (forall m (  IsHealthierChoiceThan(k,l) -> HasSignificantlyLessFatThan(k,m))))) & (forall n (forall o (forall p (  IsNotAsHotAs(n,o) -> IsHealthierChoiceThan(n,p))))) & (forall q (forall s (forall r (IsHealthierChoiceThan(q,r) ->   IsNotAsHotAs(q,s))))) & (forall u (forall t (  IsHealthierChoiceThan(t,u) ->   IsNotAsHotAs(t,u))))) -> (exists a (exists b (exists c (IsHealthierChoiceThan(a, b) and IsHealthierChoiceThan(a, c)))))"
0,fallacy of relevance,You're complaining because you have to walk to school? I used to have to give my parents my entire paycheck.," ""I used to have to give my parents my entire paycheck.""  "," ""You should not complain about having to walk to school.""","UsedToGive(a, c, b)","ComplainAboutWalking(d, e)",[],[],"[(' I', ' school')]","UsedToGive(a, c, b)","~ComplainAboutWalking(d, e)","(exists a (UsedToGive(a, c, b))) -> (forall e (~ComplainAboutWalking(d, e)))","(exists a (exists b (exists c (UsedToGive(a, c, b))))) -> (exists d (exists e (~ComplainAboutWalking(d, e))))"
0,fallacy of extension,Robot 2 (Blue) has been refuting all of Robot 1's (Orange) arguments. Robot 1 launches the above counterargument. What is this fallacy?, Robot 2 (Blue) has been refuting all of Robot 1's (Orange) arguments., Robot 1's counterargument is a fallacy.,"IsBlue(a),  HasArgumentsRefuted(b)",IsFallacy(c),[],[],[],IsBlue(a) and HasArgumentsRefuted(b),IsFallacy(c),(IsBlue(a) and HasArgumentsRefuted(b)) -> (IsFallacy(c)),(exists a (exists b (IsBlue(a) and HasArgumentsRefuted(b)))) -> (exists c (IsFallacy(c)))
0,ad hominem,Personally attacking someone to shift attention away from your views is," ""Personally attacking someone shifts attention away from views""  "," ""Personally attacking someone is effective""","IsPersonallyAttacked(a),  ShiftsAttentionAwayFrom(a)","IsPersonallyAttacked(a),  IsEffective(a)",[],"[(' Someone', ' Someone'), (' views', ' Someone')]",[],IsPersonallyAttacked(a) and ShiftsAttentionAwayFrom(a),IsPersonallyAttacked(a) and IsEffective(a),(IsPersonallyAttacked(a) and ShiftsAttentionAwayFrom(a)) -> (IsPersonallyAttacked(a) and IsEffective(a)),(exists a (IsPersonallyAttacked(a) and ShiftsAttentionAwayFrom(a))) -> (exists a (IsPersonallyAttacked(a) and IsEffective(a)))
0,ad hominem,"""She's such a mean teacher and person – that's why she wouldn't raise my grade ONE percent!"""," ""She is a mean teacher and person.""  "," ""She wouldn't raise my grade one percent.""","IsMean(a),  IsTeacher(a),  IsPerson(a)","WouldNotRaise(a, d)","[('IsMean(a)', 'WouldNotRaise(a, d)'), ('WouldNotRaise(a, d)', 'IsMean(a)'), ('  IsTeacher(a)', 'WouldNotRaise(a, d)'), ('WouldNotRaise(a, d)', '  IsTeacher(a)'), ('  IsPerson(a)', 'WouldNotRaise(a, d)'), ('WouldNotRaise(a, d)', '  IsPerson(a)')]","[(' She', ' She')]","[(' She', ' teacher'), (' teacher', ' my grade'), (' person', ' my grade')]",IsMean(a) and IsTeacher(a) and IsPerson(a),"WouldNotRaise(a, d)","(IsMean(a) and IsTeacher(a) and IsPerson(a) & (forall a (forall d (IsMean(a) -> WouldNotRaise(a, d)))) & (forall a (forall d (WouldNotRaise(a, d) -> IsMean(a)))) & (forall a (forall d (  IsTeacher(a) -> WouldNotRaise(a, d)))) & (forall a (forall d (WouldNotRaise(a, d) ->   IsTeacher(a)))) & (forall a (forall d (  IsPerson(a) -> WouldNotRaise(a, d)))) & (forall a (forall d (WouldNotRaise(a, d) ->   IsPerson(a))))) -> (WouldNotRaise(a, d))","(exists a (IsMean(a) and IsTeacher(a) and IsPerson(a)) & (forall f (forall e (IsMean(e) -> WouldNotRaise(e,f)))) & (forall g (forall h (WouldNotRaise(g,h) -> IsMean(g)))) & (forall i (forall j (  IsTeacher(i) -> WouldNotRaise(i,j)))) & (forall l (forall k (WouldNotRaise(k,l) ->   IsTeacher(k)))) & (forall n (forall m (  IsPerson(m) -> WouldNotRaise(m,n)))) & (forall o (forall p (WouldNotRaise(o,p) ->   IsPerson(o))))) -> (exists a (exists d (WouldNotRaise(a, d))))"
0,appeal to emotion,"If you don't buy the black pencils, you will get made fun of. You will not be chosen for group projects.", Not buying black pencils leads to getting made fun of and not being chosen for group projects.  , You must buy black pencils.,"IsNotBought(a),  IsNotChosenFor(b)","MustBuy(c, a)","[('  IsNotChosenFor(b)', 'MustBuy(c, a)')]","[(' Black pencils', ' black pencils')]","[(' You', ' group projects')]",IsNotBought(a) and (IsMadeFunOf or IsNotChosenFor(b)),"MustBuy(c, a)","(forall b (IsNotBought(a) and (IsMadeFunOf or IsNotChosenFor(b))) & (forall a (forall b (forall c (  IsNotChosenFor(b) -> MustBuy(c, a)))))) -> (exists c (MustBuy(c, a)))","(exists a (exists b (IsNotBought(a) and (IsMadeFunOf or IsNotChosenFor(b)))) & (forall f (forall g (forall e (  IsNotChosenFor(e) -> MustBuy(f,g)))))) -> (exists a (exists c (MustBuy(c, a))))"
0,faulty generalization,"Jeff's mom is concerned when she finds out that he skipped class one day. She tells him that she is concerned that since he skipped one class, he will start skipping more frequently. Then he will drop out altogether, never graduate or get into college, and end up unemployed and living at home for the rest of his life. What type of fallacy has Jeff's mom committed?", Jeff skipped a class one day., Jeff will live at home unemployed for the rest of his life.,"Skipped(a, b),  OccurredOn(c)","WillLiveAt(a, d),  IsUnemployed(a),  IsForTheRestOfHisLife(e)",[],"[(' Jeff', ' Jeff')]","[(' home', ' a class'), (' home', ' one day')]","Skipped(a, b) and OccurredOn(c)","WillLiveAt(a, d) and IsUnemployed(a) and IsForTheRestOfHisLife(e)","(forall c (forall b (Skipped(a, b) and OccurredOn(c)))) -> (exists d (WillLiveAt(a, d) and IsUnemployed(a) and IsForTheRestOfHisLife(e)))","(exists a (exists b (exists c (Skipped(a, b) and OccurredOn(c))))) -> (exists a (exists d (exists e (WillLiveAt(a, d) and IsUnemployed(a) and IsForTheRestOfHisLife(e)))))"
0,ad hominem,"How can you tell me I should exercise to lose weight? All you do is sit behind a desk all day. I've never seen you do a lick of exercise.

Identify the logical fallacy commited in this argument."," ""You sit behind a desk all day and do not exercise."""," ""You should not tell me to exercise to lose weight.""","SitBehindDesk(a),  DoesNotExercise(a)","TellToExercise(a, c),  LoseWeight(d)",[],"[(' You', ' You')]","[(' weight', ' You'), (' desk', ' You')]",SitBehindDesk(a) and DoesNotExercise(a),"TellToExercise(a, c) and ~LoseWeight(d)","(forall a (SitBehindDesk(a) and DoesNotExercise(a))) -> (exists d (TellToExercise(a, c) and ~LoseWeight(d)))","(exists a (SitBehindDesk(a) and DoesNotExercise(a))) -> (exists a (exists d (exists c (TellToExercise(a, c) and ~LoseWeight(d)))))"
0,fallacy of logic,"""We both like music, so we should get married."""," ""We both like music.""  "," ""We should get married.""",LikesMusic(a),ShouldGetMarried(a),"[('LikesMusic(a)', 'ShouldGetMarried(a)')]","[(' We', ' We')]","[(' We', ' music')]",LikesMusic(a),ShouldGetMarried(a),(LikesMusic(a) & (forall a (LikesMusic(a) -> ShouldGetMarried(a)))) -> (ShouldGetMarried(a)),(exists a (LikesMusic(a)) & (forall c (LikesMusic(c) -> ShouldGetMarried(c)))) -> (exists a (ShouldGetMarried(a)))
0,ad hominem,"Brandon: We should have tastier lunches!
Jaylen: Don't listen to him! He's a terrible person! I saw him trip another student and steal his lunch money!"," ""Brandon tripped another student and stole lunch money.""  "," ""Brandon is a terrible person.""","Tripped(a, b),  Stole(a, c)",IsTerriblePerson(a),"[('IsTerriblePerson(a)', 'Tripped(a, b)'), ('  Stole(a, c)', 'IsTerriblePerson(a)'), ('IsTerriblePerson(a)', '  Stole(a, c)')]","[(' Brandon', ' Brandon')]","[(' Brandon', ' terrible person'), (' Brandon', ' another student'), (' terrible person', ' another student')]","Tripped(a, b) and Stole(a, c)",IsTerriblePerson(a),"(forall b (Tripped(a, b) and Stole(a, c)) & (forall a (forall b (IsTerriblePerson(a) -> Tripped(a, b)))) & (forall a (forall c (  Stole(a, c) -> IsTerriblePerson(a)))) & (forall a (forall c (IsTerriblePerson(a) ->   Stole(a, c))))) -> (exists a (IsTerriblePerson(a)))","(exists a (exists b (exists c (Tripped(a, b) and Stole(a, c)))) & (forall f (forall e (IsTerriblePerson(e) -> Tripped(e,f)))) & (forall g (forall h (  Stole(g,h) -> IsTerriblePerson(g)))) & (forall i (forall j (IsTerriblePerson(i) ->   Stole(i,j))))) -> (exists a (IsTerriblePerson(a)))"
0,ad hominem,Of course Marx' theories about the ideal society are bunk. The guy spent all his time in the library.," ""Marx spent all his time in the library.""  "," ""Marx's theories about the ideal society are bunk.""","IsSpentInLibrary(a, b)","AreAbout(d, e)",[],[],"[(' Marx', "" Marx's theories""), ("" Marx's theories"", ' his time')]","IsSpentInLibrary(a, b)","AreAbout(d, e)","(forall b (exists a (IsSpentInLibrary(a, b)))) -> (forall d (AreAbout(d, e)))","(exists a (exists b (IsSpentInLibrary(a, b)))) -> (exists d (exists e (AreAbout(d, e))))"
0,fallacy of relevance,"I'm tailgating her, because she cut me off!"," ""She cut me off.""  "," ""I am tailgating her.""","CutOff(a, b)","Tailgating(c, d)","[('CutOff(a, b)', 'Tailgating(c, d)')]",[],"[(' her', ' She'), (' I', ' me')]","CutOff(a, b)","Tailgating(c, d)","(forall b (forall a (CutOff(a, b))) & (forall a (forall d (forall b (forall c (CutOff(a, b) -> Tailgating(c, d))))))) -> (exists c (exists d (Tailgating(c, d))))","(exists a (exists b (CutOff(a, b))) & (forall f (forall g (forall e (forall h (CutOff(e,f) -> Tailgating(g,h))))))) -> (exists d (exists c (Tailgating(c, d))))"
0,faulty generalization,President Petutti ordered a military strike that killed many civilians. He is no different than any other mass murder and he belongs in prison!," ""President Petutti ordered a military strike that killed many civilians."""," ""President Petutti is a mass murderer and belongs in prison.""","Ordered(a, b),  Killed(b, c)","IsMassMurderer(a),  BelongsInPrison(a)","[('Ordered(a, b)', 'IsMassMurderer(a)'), ('IsMassMurderer(a)', 'Ordered(a, b)'), ('Ordered(a, b)', '  BelongsInPrison(a)'), ('  BelongsInPrison(a)', 'Ordered(a, b)'), ('  Killed(b, c)', 'IsMassMurderer(a)'), ('IsMassMurderer(a)', '  Killed(b, c)'), ('  Killed(b, c)', '  BelongsInPrison(a)'), ('  BelongsInPrison(a)', '  Killed(b, c)')]","[(' President Petutti', ' President Petutti')]",[],"Ordered(a, b) and Killed(b, c)",IsMassMurderer(a) and BelongsInPrison(a),"(Ordered(a, b) and Killed(b, c) & (forall a (forall b (Ordered(a, b) -> IsMassMurderer(a)))) & (forall a (forall b (IsMassMurderer(a) -> Ordered(a, b)))) & (forall a (forall b (Ordered(a, b) ->   BelongsInPrison(a)))) & (forall a (forall b (  BelongsInPrison(a) -> Ordered(a, b)))) & (forall a (forall b (forall c (  Killed(b, c) -> IsMassMurderer(a))))) & (forall a (forall b (forall c (IsMassMurderer(a) ->   Killed(b, c))))) & (forall a (forall b (forall c (  Killed(b, c) ->   BelongsInPrison(a))))) & (forall a (forall b (forall c (  BelongsInPrison(a) ->   Killed(b, c)))))) -> (IsMassMurderer(a) and BelongsInPrison(a))","(exists a (exists b (exists c (Ordered(a, b) and Killed(b, c)))) & (forall f (forall e (Ordered(e,f) -> IsMassMurderer(e)))) & (forall g (forall h (IsMassMurderer(g) -> Ordered(g,h)))) & (forall i (forall j (Ordered(i,j) ->   BelongsInPrison(i)))) & (forall l (forall k (  BelongsInPrison(k) -> Ordered(k,l)))) & (forall n (forall o (forall m (  Killed(m,n) -> IsMassMurderer(o))))) & (forall q (forall r (forall p (IsMassMurderer(p) ->   Killed(q,r))))) & (forall s (forall u (forall t (  Killed(s,t) ->   BelongsInPrison(u))))) & (forall x (forall w (forall v (  BelongsInPrison(v) ->   Killed(w,x)))))) -> (exists a (IsMassMurderer(a) and BelongsInPrison(a)))"
1,,"Coach talks with football player, other players and crowd in background. Thus, a football coach talks with his player in front of the team and the crowd.", A football coach talks with a football player in front of the team and the crowd.  , A football coach talks with a football player in front of the team and the crowd.,"TalksWith(a, b),  InFrontOfTeam(a, b),  InFrontOfCrowd(a, b)","TalksWith(a, b),  InFrontOfTeam(a, b),  InFrontOfCrowd(a, b)","[('TalksWith(a, b)', '  InFrontOfTeam(a, b)'), ('  InFrontOfTeam(a, b)', 'TalksWith(a, b)'), ('TalksWith(a, b)', '  InFrontOfCrowd(a, b)'), ('  InFrontOfTeam(a, b)', 'TalksWith(a, b)'), ('  InFrontOfCrowd(a, b)', '  InFrontOfTeam(a, b)'), ('  InFrontOfCrowd(a, b)', 'TalksWith(a, b)'), ('TalksWith(a, b)', '  InFrontOfCrowd(a, b)'), ('  InFrontOfCrowd(a, b)', '  InFrontOfTeam(a, b)'), ('  InFrontOfTeam(a, b)', '  InFrontOfCrowd(a, b)')]","[(' Football coach', ' Football coach'), (' football player', ' football player'), (' team', ' team'), (' crowd', ' crowd')]","[(' football player', ' team'), (' football player', ' team')]","TalksWith(a, b) and InFrontOfTeam(a, b) and InFrontOfCrowd(a, b)","TalksWith(a, b) and InFrontOfTeam(a, b) and InFrontOfCrowd(a, b)","(TalksWith(a, b) and InFrontOfTeam(a, b) and InFrontOfCrowd(a, b) & (forall a (forall b (TalksWith(a, b) ->   InFrontOfTeam(a, b)))) & (forall a (forall b (  InFrontOfTeam(a, b) -> TalksWith(a, b)))) & (forall a (forall b (TalksWith(a, b) ->   InFrontOfCrowd(a, b)))) & (forall a (forall b (  InFrontOfTeam(a, b) -> TalksWith(a, b)))) & (forall a (forall b (  InFrontOfCrowd(a, b) ->   InFrontOfTeam(a, b)))) & (forall a (forall b (  InFrontOfCrowd(a, b) -> TalksWith(a, b)))) & (forall a (forall b (TalksWith(a, b) ->   InFrontOfCrowd(a, b)))) & (forall a (forall b (  InFrontOfCrowd(a, b) ->   InFrontOfTeam(a, b)))) & (forall a (forall b (  InFrontOfTeam(a, b) ->   InFrontOfCrowd(a, b))))) -> (TalksWith(a, b) and InFrontOfTeam(a, b) and InFrontOfCrowd(a, b))","(exists a (exists b (TalksWith(a, b) and InFrontOfTeam(a, b) and InFrontOfCrowd(a, b))) & (forall f (forall e (TalksWith(e,f) ->   InFrontOfTeam(e,f)))) & (forall g (forall h (  InFrontOfTeam(g,h) -> TalksWith(g,h)))) & (forall i (forall j (TalksWith(i,j) ->   InFrontOfCrowd(i,j)))) & (forall l (forall k (  InFrontOfTeam(k,l) -> TalksWith(k,l)))) & (forall n (forall m (  InFrontOfCrowd(m,n) ->   InFrontOfTeam(m,n)))) & (forall o (forall p (  InFrontOfCrowd(o,p) -> TalksWith(o,p)))) & (forall q (forall r (TalksWith(q,r) ->   InFrontOfCrowd(q,r)))) & (forall s (forall t (  InFrontOfCrowd(s,t) ->   InFrontOfTeam(s,t)))) & (forall u (forall v (  InFrontOfTeam(u,v) ->   InFrontOfCrowd(u,v))))) -> (exists a (exists b (TalksWith(a, b) and InFrontOfTeam(a, b) and InFrontOfCrowd(a, b))))"
1,,"Two men watching one man make a golf putt on the set of Sports Center. As a consequence, people watching sports.", Two men are watching one man make a golf putt on the set of Sports Center.  , People watch sports.,"IsWatching(b, c),  IsMaking(c, d),  IsOn(d, a),  IsSet(a, e)","IsWatching(a, a)","[('IsWatching(a, a)', '  IsOn(d, a)')]","[(' set', ' People'), (' set', ' sports')]","[(' golf putt', ' sports'), (' Sports Center', ' sports')]","IsWatching(b, c) and IsMaking(c, d) and IsOn(d, a) and IsSet(a, e)","IsWatching(a, a)","(exists e (exists d (IsWatching(b, c) and IsMaking(c, d) and IsOn(d, a) and IsSet(a, e))) & (forall a (forall d (IsWatching(a, a) ->   IsOn(d, a))))) -> (forall a (IsWatching(a, a)))","(exists b (exists c (exists a (exists d (exists e (IsWatching(b, c) and IsMaking(c, d) and IsOn(d, a) and IsSet(a, e)))))) & (forall i (forall j (forall h (IsWatching(h,i) ->   IsOn(j,i)))))) -> (exists a (IsWatching(a, a)))"
1,,"Six women wait to use a port-o-john in a field. Thus, women are outside.", Six women wait to use a port-o-john in a field.  , Women are outside.,"IsWaiting(a),  IsToUse(b),  IsInField(b)",IsOutside(d),"[('IsWaiting(a)', 'IsOutside(d)'), ('IsOutside(d)', 'IsWaiting(a)'), ('IsOutside(d)', '  IsToUse(b)'), ('IsOutside(d)', '  IsInField(b)')]",[],"[(' Six women', ' Women')]",IsWaiting(a) and IsToUse(b) and IsInField(b),IsOutside(d),(exists a (IsWaiting(a) and IsToUse(b) and IsInField(b)) & (forall a (forall d (IsWaiting(a) -> IsOutside(d)))) & (forall a (forall d (IsOutside(d) -> IsWaiting(a)))) & (forall d (forall b (IsOutside(d) ->   IsToUse(b)))) & (forall d (forall b (IsOutside(d) ->   IsInField(b))))) -> (forall d (IsOutside(d))),(exists a (exists b (IsWaiting(a) and IsToUse(b) and IsInField(b))) & (forall f (forall e (IsWaiting(e) -> IsOutside(f)))) & (forall g (forall h (IsOutside(g) -> IsWaiting(h)))) & (forall i (forall j (IsOutside(i) ->   IsToUse(j)))) & (forall l (forall k (IsOutside(k) ->   IsInField(l))))) -> (exists d (IsOutside(d)))
1,,Women wearing a black top and glasses speaking into a blue tipped microphone with another woman beside her writing. It follows that one woman speaking into a microphone while a second woman writes beside her.," A woman is wearing a black top and glasses, speaking into a blue-tipped microphone, with another woman beside her writing.", One woman speaks into a microphone while a second woman writes beside her.,"IsWearing(a, b),  IsWearing(a, c),  IsSpeakingInto(a, d),  IsBeside(a, e),  IsWriting(e)","IsSpeakingInto(f, g),  IsBeside(h, f),  IsWriting(h)","[('IsSpeakingInto(f, g)', 'IsWearing(a, b)'), ('IsSpeakingInto(f, g)', '  IsWearing(a, c)'), ('  IsWriting(h)', '  IsWearing(a, c)'), ('  IsSpeakingInto(a, d)', '  IsBeside(h, f)'), ('  IsSpeakingInto(a, d)', '  IsWriting(h)'), ('  IsWriting(h)', '  IsSpeakingInto(a, d)'), ('  IsBeside(a, e)', '  IsWriting(h)'), ('  IsWriting(h)', '  IsBeside(a, e)'), ('  IsWriting(e)', 'IsSpeakingInto(f, g)'), ('IsSpeakingInto(f, g)', '  IsWriting(e)'), ('  IsWriting(e)', '  IsBeside(h, f)')]",[],"[(' One woman', ' A woman'), (' second woman', ' A woman'), (' One woman', ' another woman'), (' second woman', ' another woman')]","IsWearing(a, b) and IsWearing(a, c) and IsSpeakingInto(a, d) and IsBeside(a, e) and IsWriting(e)","IsSpeakingInto(f, g) and IsBeside(h, f) and IsWriting(h)","(forall e (forall a (IsWearing(a, b) and IsWearing(a, c) and IsSpeakingInto(a, d) and IsBeside(a, e) and IsWriting(e))) & (forall f (forall g (forall a (forall b (IsSpeakingInto(f, g) -> IsWearing(a, b)))))) & (forall f (forall g (forall a (forall c (IsSpeakingInto(f, g) ->   IsWearing(a, c)))))) & (forall a (forall c (forall h (  IsWriting(h) ->   IsWearing(a, c))))) & (forall f (forall a (forall d (forall h (  IsSpeakingInto(a, d) ->   IsBeside(h, f)))))) & (forall a (forall d (forall h (  IsSpeakingInto(a, d) ->   IsWriting(h))))) & (forall a (forall d (forall h (  IsWriting(h) ->   IsSpeakingInto(a, d))))) & (forall a (forall e (forall h (  IsBeside(a, e) ->   IsWriting(h))))) & (forall a (forall e (forall h (  IsWriting(h) ->   IsBeside(a, e))))) & (forall f (forall g (forall e (  IsWriting(e) -> IsSpeakingInto(f, g))))) & (forall f (forall g (forall e (IsSpeakingInto(f, g) ->   IsWriting(e))))) & (forall f (forall e (forall h (  IsWriting(e) ->   IsBeside(h, f)))))) -> (exists h (exists f (IsSpeakingInto(f, g) and IsBeside(h, f) and IsWriting(h))))","(exists b (exists c (exists a (exists d (exists e (IsWearing(a, b) and IsWearing(a, c) and IsSpeakingInto(a, d) and IsBeside(a, e) and IsWriting(e)))))) & (forall i (forall l (forall j (forall k (IsSpeakingInto(i,j) -> IsWearing(k,l)))))) & (forall n (forall o (forall p (forall m (IsSpeakingInto(m,n) ->   IsWearing(o,p)))))) & (forall q (forall s (forall r (  IsWriting(q) ->   IsWearing(r,s))))) & (forall u (forall v (forall w (forall t (  IsSpeakingInto(t,u) ->   IsBeside(v,w)))))) & (forall z (forall x (forall y (  IsSpeakingInto(x,y) ->   IsWriting(z))))) & (  IsWriting({) ->   IsSpeakingInto(|,})) & (  IsBeside(~,) ->   IsWriting()) & (  IsWriting() ->   IsBeside(,)) & (  IsWriting() -> IsSpeakingInto(,)) & (IsSpeakingInto(,) ->   IsWriting()) & (  IsWriting() ->   IsBeside(,))) -> (exists f (exists g (exists h (IsSpeakingInto(f, g) and IsBeside(h, f) and IsWriting(h)))))"
1,,"One tan girl with a wool hat is running and leaning over an object, while another person in a wool hat is sitting on the ground. Therefore, a tan girl runs leans over an object."," ""A tan girl with a wool hat is running and leaning over an object.""  "," ""A tan girl runs leans over an object.""","IsTan(b),  IsWearingWoolHat(b),  IsRunning(b),  IsLeaningOver(b, a)","IsTan(c),  Runs(c),  LeansOver(c, a)","[('  Runs(c)', 'IsTan(b)'), ('IsTan(b)', '  LeansOver(c, a)'), ('  LeansOver(c, a)', 'IsTan(b)'), ('  IsWearingWoolHat(b)', 'IsTan(c)'), ('  IsWearingWoolHat(b)', '  Runs(c)'), ('  Runs(c)', '  IsWearingWoolHat(b)'), ('  IsWearingWoolHat(b)', '  LeansOver(c, a)'), ('  LeansOver(c, a)', '  IsWearingWoolHat(b)'), ('  IsRunning(b)', 'IsTan(c)'), ('  IsRunning(b)', '  Runs(c)'), ('  IsRunning(b)', '  LeansOver(c, a)'), ('  LeansOver(c, a)', '  IsRunning(b)'), ('  IsLeaningOver(b, a)', 'IsTan(c)'), ('IsTan(c)', '  IsLeaningOver(b, a)'), ('  IsLeaningOver(b, a)', '  Runs(c)'), ('  Runs(c)', '  IsLeaningOver(b, a)'), ('  IsLeaningOver(b, a)', '  LeansOver(c, a)'), ('  LeansOver(c, a)', '  IsLeaningOver(b, a)')]","[(' an object', ' an object')]","[(' A tan girl with a wool hat', ' A tan girl')]","IsTan(b) and IsWearingWoolHat(b) and IsRunning(b) and IsLeaningOver(b, a)","IsTan(c) and Runs(c) and LeansOver(c, a)","(exists b (IsTan(b) and IsWearingWoolHat(b) and IsRunning(b) and IsLeaningOver(b, a)) & (forall b (forall c (  Runs(c) -> IsTan(b)))) & (forall a (forall b (forall c (IsTan(b) ->   LeansOver(c, a))))) & (forall a (forall b (forall c (  LeansOver(c, a) -> IsTan(b))))) & (forall b (forall c (  IsWearingWoolHat(b) -> IsTan(c)))) & (forall b (forall c (  IsWearingWoolHat(b) ->   Runs(c)))) & (forall b (forall c (  Runs(c) ->   IsWearingWoolHat(b)))) & (forall a (forall b (forall c (  IsWearingWoolHat(b) ->   LeansOver(c, a))))) & (forall a (forall b (forall c (  LeansOver(c, a) ->   IsWearingWoolHat(b))))) & (forall b (forall c (  IsRunning(b) -> IsTan(c)))) & (forall b (forall c (  IsRunning(b) ->   Runs(c)))) & (forall a (forall b (forall c (  IsRunning(b) ->   LeansOver(c, a))))) & (forall a (forall b (forall c (  LeansOver(c, a) ->   IsRunning(b))))) & (forall a (forall b (forall c (  IsLeaningOver(b, a) -> IsTan(c))))) & (forall a (forall b (forall c (IsTan(c) ->   IsLeaningOver(b, a))))) & (forall a (forall b (forall c (  IsLeaningOver(b, a) ->   Runs(c))))) & (forall a (forall b (forall c (  Runs(c) ->   IsLeaningOver(b, a))))) & (forall a (forall b (forall c (  IsLeaningOver(b, a) ->   LeansOver(c, a))))) & (forall a (forall b (forall c (  LeansOver(c, a) ->   IsLeaningOver(b, a)))))) -> (forall c (IsTan(c) and Runs(c) and LeansOver(c, a)))","(exists a (exists b (IsTan(b) and IsWearingWoolHat(b) and IsRunning(b) and IsLeaningOver(b, a))) & (forall d (forall e (  Runs(d) -> IsTan(e)))) & (forall f (forall g (forall h (IsTan(f) ->   LeansOver(g,h))))) & (forall i (forall j (forall k (  LeansOver(i,j) -> IsTan(k))))) & (forall l (forall m (  IsWearingWoolHat(l) -> IsTan(m)))) & (forall n (forall o (  IsWearingWoolHat(n) ->   Runs(o)))) & (forall q (forall p (  Runs(p) ->   IsWearingWoolHat(q)))) & (forall s (forall r (forall t (  IsWearingWoolHat(r) ->   LeansOver(s,t))))) & (forall u (forall w (forall v (  LeansOver(u,v) ->   IsWearingWoolHat(w))))) & (forall x (forall y (  IsRunning(x) -> IsTan(y)))) & (forall z (  IsRunning(z) ->   Runs({))) & (  IsRunning(|) ->   LeansOver(},~)) & (  LeansOver(,) ->   IsRunning()) & (  IsLeaningOver(,) -> IsTan()) & (IsTan() ->   IsLeaningOver(,)) & (  IsLeaningOver(,) ->   Runs()) & (  Runs() ->   IsLeaningOver(,)) & (  IsLeaningOver(,) ->   LeansOver(,)) & (  LeansOver(,) ->   IsLeaningOver(,))) -> (exists a (exists c (IsTan(c) and Runs(c) and LeansOver(c, a))))"
1,,A scientist studies a slide in order to work on her new creation. It follows that a scientist studies a slide that is related to her invention.," ""A scientist studies a slide related to her invention.""  "," ""A scientist works on her new creation.""","Studies(a, b),  IsRelatedTo(b, c)","WorksOn(a, d)","[('Studies(a, b)', 'WorksOn(a, d)'), ('WorksOn(a, d)', 'Studies(a, b)'), ('  IsRelatedTo(b, c)', 'WorksOn(a, d)'), ('WorksOn(a, d)', '  IsRelatedTo(b, c)')]","[(' A scientist', ' A scientist')]","[(' slide', ' her new creation'), (' her invention', ' her new creation')]","Studies(a, b) and IsRelatedTo(b, c)","WorksOn(a, d)","(exists c (exists b (Studies(a, b) and IsRelatedTo(b, c))) & (forall a (forall d (forall b (Studies(a, b) -> WorksOn(a, d))))) & (forall a (forall d (forall b (WorksOn(a, d) -> Studies(a, b))))) & (forall a (forall d (forall b (forall c (  IsRelatedTo(b, c) -> WorksOn(a, d)))))) & (forall a (forall d (forall b (forall c (WorksOn(a, d) ->   IsRelatedTo(b, c))))))) -> (forall d (WorksOn(a, d)))","(exists a (exists b (exists c (Studies(a, b) and IsRelatedTo(b, c)))) & (forall f (forall g (forall e (Studies(e,f) -> WorksOn(e,g))))) & (forall i (forall j (forall h (WorksOn(h,i) -> Studies(h,j))))) & (forall n (forall l (forall k (forall m (  IsRelatedTo(k,l) -> WorksOn(m,n)))))) & (forall q (forall o (forall r (forall p (WorksOn(o,p) ->   IsRelatedTo(q,r))))))) -> (exists a (exists d (WorksOn(a, d))))"
1,,"A red dog jumps and catches a tennis ball in its mouth. Consequently, a dog catching a ball."," ""A red dog jumps and catches a tennis ball in its mouth.""  "," ""A dog catches a ball.""","IsRed(a),  Jumps(a),  Catches(a, b),  IsInMouth(b, c)","Catches(d, e)","[('Catches(d, e)', 'IsRed(a)'), ('  Jumps(a)', 'Catches(d, e)'), ('Catches(d, e)', '  Jumps(a)'), ('  IsInMouth(b, c)', 'Catches(d, e)'), ('Catches(d, e)', '  IsInMouth(b, c)')]",[],[],"IsRed(a) and Jumps(a) and Catches(a, b) and IsInMouth(b, c)","Catches(d, e)","(IsRed(a) and Jumps(a) and Catches(a, b) and IsInMouth(b, c) & (forall a (forall d (forall e (Catches(d, e) -> IsRed(a))))) & (forall a (forall d (forall e (  Jumps(a) -> Catches(d, e))))) & (forall a (forall d (forall e (Catches(d, e) ->   Jumps(a))))) & (forall e (forall d (forall b (forall c (  IsInMouth(b, c) -> Catches(d, e)))))) & (forall c (forall d (forall b (forall e (Catches(d, e) ->   IsInMouth(b, c))))))) -> (Catches(d, e))","(exists a (exists b (exists c (IsRed(a) and Jumps(a) and Catches(a, b) and IsInMouth(b, c)))) & (forall f (forall g (forall h (Catches(f,g) -> IsRed(h))))) & (forall i (forall j (forall k (  Jumps(i) -> Catches(j,k))))) & (forall n (forall l (forall m (Catches(l,m) ->   Jumps(n))))) & (forall q (forall o (forall r (forall p (  IsInMouth(o,p) -> Catches(q,r)))))) & (forall s (forall u (forall v (forall t (Catches(s,t) ->   IsInMouth(u,v))))))) -> (exists d (exists e (Catches(d, e))))"
1,,"A group of dogs stand in the snow. Thus, there are animals outdoors.", A group of dogs stand in the snow.  , There are animals outdoors.,IsInSnow(a),IsOutdoors(c),"[('IsInSnow(a)', 'IsOutdoors(c)'), ('IsOutdoors(c)', 'IsInSnow(a)')]",[],"[(' the snow', ' outdoors')]",IsInSnow(a),IsOutdoors(c),(IsInSnow(a) & (forall a (forall c (IsInSnow(a) -> IsOutdoors(c)))) & (forall a (forall c (IsOutdoors(c) -> IsInSnow(a))))) -> (IsOutdoors(c)),(exists a (IsInSnow(a)) & (forall f (forall e (IsInSnow(e) -> IsOutdoors(f)))) & (forall g (forall h (IsOutdoors(g) -> IsInSnow(h))))) -> (exists c (IsOutdoors(c)))
1,,This person looks to be snowboarding on a very small pile of snow on a sunny cold day. This implies that young snowboarder sizing up their next jump.," ""A person is snowboarding on a very small pile of snow on a sunny cold day.""  "," ""A young snowboarder is sizing up their next jump.""","IsSnowboarding(a),  IsOnSmallPileOfSnow(a),  IsSunnyDay(c),  IsColdDay(c)","IsYoung(d),  IsSizingUpNextJump(d)","[('IsSnowboarding(a)', 'IsYoung(d)'), ('IsYoung(d)', 'IsSnowboarding(a)'), ('IsSnowboarding(a)', '  IsSizingUpNextJump(d)'), ('  IsSizingUpNextJump(d)', 'IsSnowboarding(a)'), ('IsYoung(d)', '  IsOnSmallPileOfSnow(a)'), ('  IsSizingUpNextJump(d)', '  IsOnSmallPileOfSnow(a)'), ('  IsSunnyDay(c)', 'IsYoung(d)'), ('IsYoung(d)', '  IsSunnyDay(c)'), ('  IsSunnyDay(c)', '  IsSizingUpNextJump(d)'), ('  IsSizingUpNextJump(d)', '  IsSunnyDay(c)'), ('  IsColdDay(c)', 'IsYoung(d)'), ('IsYoung(d)', '  IsColdDay(c)'), ('  IsColdDay(c)', '  IsSizingUpNextJump(d)'), ('  IsSizingUpNextJump(d)', '  IsColdDay(c)')]",[],[],IsSnowboarding(a) and IsOnSmallPileOfSnow(a) and IsSunnyDay(c) and IsColdDay(c),IsYoung(d) and IsSizingUpNextJump(d),(IsSnowboarding(a) and IsOnSmallPileOfSnow(a) and IsSunnyDay(c) and IsColdDay(c) & (forall a (forall d (IsSnowboarding(a) -> IsYoung(d)))) & (forall a (forall d (IsYoung(d) -> IsSnowboarding(a)))) & (forall a (forall d (IsSnowboarding(a) ->   IsSizingUpNextJump(d)))) & (forall a (forall d (  IsSizingUpNextJump(d) -> IsSnowboarding(a)))) & (forall a (forall d (IsYoung(d) ->   IsOnSmallPileOfSnow(a)))) & (forall a (forall d (  IsSizingUpNextJump(d) ->   IsOnSmallPileOfSnow(a)))) & (forall d (forall c (  IsSunnyDay(c) -> IsYoung(d)))) & (forall d (forall c (IsYoung(d) ->   IsSunnyDay(c)))) & (forall d (forall c (  IsSunnyDay(c) ->   IsSizingUpNextJump(d)))) & (forall d (forall c (  IsSizingUpNextJump(d) ->   IsSunnyDay(c)))) & (forall d (forall c (  IsColdDay(c) -> IsYoung(d)))) & (forall d (forall c (IsYoung(d) ->   IsColdDay(c)))) & (forall d (forall c (  IsColdDay(c) ->   IsSizingUpNextJump(d)))) & (forall d (forall c (  IsSizingUpNextJump(d) ->   IsColdDay(c))))) -> (IsYoung(d) and IsSizingUpNextJump(d)),(exists a (exists c (IsSnowboarding(a) and IsOnSmallPileOfSnow(a) and IsSunnyDay(c) and IsColdDay(c))) & (forall f (forall g (IsSnowboarding(f) -> IsYoung(g)))) & (forall i (forall h (IsYoung(h) -> IsSnowboarding(i)))) & (forall j (forall k (IsSnowboarding(j) ->   IsSizingUpNextJump(k)))) & (forall l (forall m (  IsSizingUpNextJump(l) -> IsSnowboarding(m)))) & (forall n (forall o (IsYoung(n) ->   IsOnSmallPileOfSnow(o)))) & (forall q (forall p (  IsSizingUpNextJump(p) ->   IsOnSmallPileOfSnow(q)))) & (forall s (forall r (  IsSunnyDay(r) -> IsYoung(s)))) & (forall u (forall t (IsYoung(t) ->   IsSunnyDay(u)))) & (forall w (forall v (  IsSunnyDay(v) ->   IsSizingUpNextJump(w)))) & (forall x (forall y (  IsSizingUpNextJump(x) ->   IsSunnyDay(y)))) & (forall z (  IsColdDay(z) -> IsYoung({))) & (IsYoung(|) ->   IsColdDay(})) & (  IsColdDay(~) ->   IsSizingUpNextJump()) & (  IsSizingUpNextJump() ->   IsColdDay())) -> (exists d (IsYoung(d) and IsSizingUpNextJump(d)))
1,,"A large number of people are watching men dressed in kilts, one of whom has thrown a long pole. As a consequence, people watch men in kilts."," ""A man dressed in a kilt has thrown a long pole.""  "," ""People watch men in kilts.""","IsDressedInKilt(a),  HasThrownPole(a)","Watches(c, d),  IsInKilts(d)","[('IsDressedInKilt(a)', 'Watches(c, d)'), ('Watches(c, d)', 'IsDressedInKilt(a)'), ('  IsInKilts(d)', 'IsDressedInKilt(a)'), ('  HasThrownPole(a)', 'Watches(c, d)'), ('Watches(c, d)', '  HasThrownPole(a)'), ('  HasThrownPole(a)', '  IsInKilts(d)'), ('  IsInKilts(d)', '  HasThrownPole(a)')]",[],"[(' A man dressed in a kilt', ' men'), (' kilts', ' A man dressed in a kilt')]",IsDressedInKilt(a) and HasThrownPole(a),"Watches(c, d) and IsInKilts(d)","(exists a (IsDressedInKilt(a) and HasThrownPole(a)) & (forall a (forall d (forall c (IsDressedInKilt(a) -> Watches(c, d))))) & (forall a (forall d (forall c (Watches(c, d) -> IsDressedInKilt(a))))) & (forall a (forall d (  IsInKilts(d) -> IsDressedInKilt(a)))) & (forall a (forall d (forall c (  HasThrownPole(a) -> Watches(c, d))))) & (forall a (forall d (forall c (Watches(c, d) ->   HasThrownPole(a))))) & (forall a (forall d (  HasThrownPole(a) ->   IsInKilts(d)))) & (forall a (forall d (  IsInKilts(d) ->   HasThrownPole(a))))) -> (forall d (Watches(c, d) and IsInKilts(d)))","(exists a (IsDressedInKilt(a) and HasThrownPole(a)) & (forall f (forall g (forall h (IsDressedInKilt(f) -> Watches(g,h))))) & (forall i (forall j (forall k (Watches(i,j) -> IsDressedInKilt(k))))) & (forall l (forall m (  IsInKilts(l) -> IsDressedInKilt(m)))) & (forall n (forall o (forall p (  HasThrownPole(n) -> Watches(o,p))))) & (forall q (forall s (forall r (Watches(q,r) ->   HasThrownPole(s))))) & (forall u (forall t (  HasThrownPole(t) ->   IsInKilts(u)))) & (forall w (forall v (  IsInKilts(v) ->   HasThrownPole(w))))) -> (exists d (exists c (Watches(c, d) and IsInKilts(d))))"
1,,"A boy is riding down the road between two cows. Consequently, a boy, a road and two cows."," ""A boy is riding down the road between two cows.""  "," ""There is a boy, a road, and two cows.""","IsRidingDownRoad(a),  IsBetweenTwoCows(a)","Exists(a),  Exists(d),  Exists(b)","[('IsRidingDownRoad(a)', 'Exists(a)'), ('Exists(a)', 'IsRidingDownRoad(a)'), ('IsRidingDownRoad(a)', '  Exists(d)'), ('  Exists(d)', 'IsRidingDownRoad(a)'), ('IsRidingDownRoad(a)', '  Exists(b)'), ('  Exists(b)', 'IsRidingDownRoad(a)'), ('  IsBetweenTwoCows(a)', 'Exists(a)'), ('Exists(a)', '  IsBetweenTwoCows(a)'), ('  IsBetweenTwoCows(a)', '  Exists(d)'), ('  Exists(d)', '  IsBetweenTwoCows(a)'), ('  IsBetweenTwoCows(a)', '  Exists(b)'), ('  Exists(b)', '  IsBetweenTwoCows(a)')]","[(' A boy', ' A boy'), (' two cows', ' two cows')]","[(' the road', ' a road')]",IsRidingDownRoad(a) and IsBetweenTwoCows(a),Exists(a) and Exists(d) and Exists(b),(IsRidingDownRoad(a) and IsBetweenTwoCows(a) & (forall a (IsRidingDownRoad(a) -> Exists(a))) & (forall a (Exists(a) -> IsRidingDownRoad(a))) & (forall a (forall d (IsRidingDownRoad(a) ->   Exists(d)))) & (forall a (forall d (  Exists(d) -> IsRidingDownRoad(a)))) & (forall a (forall b (IsRidingDownRoad(a) ->   Exists(b)))) & (forall a (forall b (  Exists(b) -> IsRidingDownRoad(a)))) & (forall a (  IsBetweenTwoCows(a) -> Exists(a))) & (forall a (Exists(a) ->   IsBetweenTwoCows(a))) & (forall a (forall d (  IsBetweenTwoCows(a) ->   Exists(d)))) & (forall a (forall d (  Exists(d) ->   IsBetweenTwoCows(a)))) & (forall a (forall b (  IsBetweenTwoCows(a) ->   Exists(b)))) & (forall a (forall b (  Exists(b) ->   IsBetweenTwoCows(a))))) -> (Exists(a) and Exists(d) and Exists(b)),(exists a (IsRidingDownRoad(a) and IsBetweenTwoCows(a)) & (forall e (IsRidingDownRoad(e) -> Exists(e))) & (forall f (Exists(f) -> IsRidingDownRoad(f))) & (forall g (forall h (IsRidingDownRoad(g) ->   Exists(h)))) & (forall i (forall j (  Exists(i) -> IsRidingDownRoad(j)))) & (forall l (forall k (IsRidingDownRoad(k) ->   Exists(l)))) & (forall n (forall m (  Exists(m) -> IsRidingDownRoad(n)))) & (forall o (  IsBetweenTwoCows(o) -> Exists(o))) & (forall p (Exists(p) ->   IsBetweenTwoCows(p))) & (forall q (forall r (  IsBetweenTwoCows(q) ->   Exists(r)))) & (forall s (forall t (  Exists(s) ->   IsBetweenTwoCows(t)))) & (forall u (forall v (  IsBetweenTwoCows(u) ->   Exists(v)))) & (forall x (forall w (  Exists(w) ->   IsBetweenTwoCows(x))))) -> (exists a (exists d (exists b (Exists(a) and Exists(d) and Exists(b)))))
1,,A bald man is getting out of a small blue car. It follows that the man is bald.," ""A bald man is getting out of a small blue car.""  "," ""The man is bald.""","IsBald(a),  IsGettingOutOfCar(a),  IsSmall(b),  IsBlue(b)",IsBald(c),"[('  IsGettingOutOfCar(a)', 'IsBald(c)'), ('IsBald(c)', '  IsGettingOutOfCar(a)'), ('IsBald(c)', '  IsSmall(b)'), ('  IsBlue(b)', 'IsBald(c)'), ('IsBald(c)', '  IsBlue(b)')]",[],[],IsBald(a) and IsGettingOutOfCar(a) and IsSmall(b) and IsBlue(b),IsBald(c),(IsBald(a) and IsGettingOutOfCar(a) and IsSmall(b) and IsBlue(b) & (forall a (forall c (  IsGettingOutOfCar(a) -> IsBald(c)))) & (forall a (forall c (IsBald(c) ->   IsGettingOutOfCar(a)))) & (forall b (forall c (IsBald(c) ->   IsSmall(b)))) & (forall b (forall c (  IsBlue(b) -> IsBald(c)))) & (forall b (forall c (IsBald(c) ->   IsBlue(b))))) -> (IsBald(c)),(exists a (exists b (IsBald(a) and IsGettingOutOfCar(a) and IsSmall(b) and IsBlue(b))) & (forall d (forall e (  IsGettingOutOfCar(d) -> IsBald(e)))) & (forall f (forall g (IsBald(f) ->   IsGettingOutOfCar(g)))) & (forall i (forall h (IsBald(h) ->   IsSmall(i)))) & (forall j (forall k (  IsBlue(j) -> IsBald(k)))) & (forall l (forall m (IsBald(l) ->   IsBlue(m))))) -> (exists c (IsBald(c)))
1,,"Young boys in green and blue jerseys kick around a soccer ball while other soccer games take place in the background. Thus, young boys kicking around a soccer ball.", Young boys in green and blue jerseys kick around a soccer ball., Young boys are involved in soccer games.,"IsYoung(a),  WearsGreenAndBlueJerseys(a),  KicksSoccerBall(a)","IsYoung(a),  InvolvedInSoccerGames(a)","[('  InvolvedInSoccerGames(a)', 'IsYoung(a)'), ('  InvolvedInSoccerGames(a)', '  WearsGreenAndBlueJerseys(a)'), ('  KicksSoccerBall(a)', 'IsYoung(a)'), ('  KicksSoccerBall(a)', '  InvolvedInSoccerGames(a)'), ('  InvolvedInSoccerGames(a)', '  KicksSoccerBall(a)')]","[(' Young boys', ' Young boys')]","[(' green and blue jerseys', ' soccer games'), (' soccer ball', ' soccer games')]",IsYoung(a) and WearsGreenAndBlueJerseys(a) and KicksSoccerBall(a),IsYoung(a) and InvolvedInSoccerGames(a),(IsYoung(a) and WearsGreenAndBlueJerseys(a) and KicksSoccerBall(a) & (forall a (  InvolvedInSoccerGames(a) -> IsYoung(a))) & (forall a (  InvolvedInSoccerGames(a) ->   WearsGreenAndBlueJerseys(a))) & (forall a (  KicksSoccerBall(a) -> IsYoung(a))) & (forall a (  KicksSoccerBall(a) ->   InvolvedInSoccerGames(a))) & (forall a (  InvolvedInSoccerGames(a) ->   KicksSoccerBall(a)))) -> (IsYoung(a) and InvolvedInSoccerGames(a)),(exists a (IsYoung(a) and WearsGreenAndBlueJerseys(a) and KicksSoccerBall(a)) & (forall e (  InvolvedInSoccerGames(e) -> IsYoung(e))) & (forall f (  InvolvedInSoccerGames(f) ->   WearsGreenAndBlueJerseys(f))) & (forall g (  KicksSoccerBall(g) -> IsYoung(g))) & (forall h (  KicksSoccerBall(h) ->   InvolvedInSoccerGames(h))) & (forall i (  InvolvedInSoccerGames(i) ->   KicksSoccerBall(i)))) -> (exists a (IsYoung(a) and InvolvedInSoccerGames(a)))
1,,"A girl playing a violin along with a group of people. Consequently, a girl is playing an instrument."," ""A girl is playing a violin.""  "," ""A girl is playing an instrument.""","IsPlaying(a, b)","IsPlaying(a, c)",[],"[(' A girl', ' A girl')]",[],"IsPlaying(a, b)","IsPlaying(a, c)","(IsPlaying(a, b)) -> (IsPlaying(a, c))","(exists a (exists b (IsPlaying(a, b)))) -> (exists a (exists c (IsPlaying(a, c))))"
1,,Two small boys in blue soccer uniforms use a wooden set of steps to wash their hands in an adult-sized bathroom. It follows that two boys washing their hands.," ""Two small boys in blue soccer uniforms are using a wooden set of steps to wash their hands in an adult-sized bathroom."""," ""Two boys are washing their hands.""","IsSmall(b),  IsInBlueSoccerUniforms(b),  IsUsing(d, a),  IsInAdultSizedBathroom(a)","IsWashing(f, a)","[('IsSmall(b)', 'IsWashing(f, a)'), ('IsWashing(f, a)', 'IsSmall(b)'), ('  IsInBlueSoccerUniforms(b)', 'IsWashing(f, a)'), ('IsWashing(f, a)', '  IsInBlueSoccerUniforms(b)'), ('IsWashing(f, a)', '  IsInAdultSizedBathroom(a)')]","[(' their hands', ' their hands')]","[(' Two small boys', ' Two boys')]","IsSmall(b) and IsInBlueSoccerUniforms(b) and IsUsing(d, a) and IsInAdultSizedBathroom(a)","IsWashing(f, a)","(exists b (IsSmall(b) and IsInBlueSoccerUniforms(b) and IsUsing(d, a) and IsInAdultSizedBathroom(a)) & (forall f (forall a (forall b (IsSmall(b) -> IsWashing(f, a))))) & (forall f (forall a (forall b (IsWashing(f, a) -> IsSmall(b))))) & (forall f (forall a (forall b (  IsInBlueSoccerUniforms(b) -> IsWashing(f, a))))) & (forall f (forall a (forall b (IsWashing(f, a) ->   IsInBlueSoccerUniforms(b))))) & (forall f (forall a (IsWashing(f, a) ->   IsInAdultSizedBathroom(a))))) -> (forall f (IsWashing(f, a)))","(exists a (exists d (exists b (IsSmall(b) and IsInBlueSoccerUniforms(b) and IsUsing(d, a) and IsInAdultSizedBathroom(a)))) & (forall g (forall i (forall h (IsSmall(g) -> IsWashing(h,i))))) & (forall j (forall l (forall k (IsWashing(j,k) -> IsSmall(l))))) & (forall n (forall o (forall m (  IsInBlueSoccerUniforms(m) -> IsWashing(n,o))))) & (forall q (forall r (forall p (IsWashing(p,q) ->   IsInBlueSoccerUniforms(r))))) & (forall s (forall u (forall t (IsWashing(s,t) ->   IsInAdultSizedBathroom(u)))))) -> (exists f (exists a (IsWashing(f, a))))"
1,,A soccer player in white kicks a ball as another soccer player lunges towards the ball and a third soccer player in red follows close by. This implies that there are three soccer players., A soccer player in white kicks a ball as another soccer player lunges towards the ball and a third soccer player in red follows close by.  , There are three soccer players.,"IsInWhite(a),  Kicks(a, b),  LungesTowards(c, d),  IsInRed(e),  FollowsCloseBy(e)",IsSoccerPlayer(f),"[('IsSoccerPlayer(f)', 'IsInWhite(a)'), ('  Kicks(a, b)', 'IsSoccerPlayer(f)'), ('IsSoccerPlayer(f)', '  Kicks(a, b)'), ('IsSoccerPlayer(f)', '  LungesTowards(c, d)'), ('  IsInRed(e)', 'IsSoccerPlayer(f)'), ('IsSoccerPlayer(f)', '  IsInRed(e)'), ('  FollowsCloseBy(e)', 'IsSoccerPlayer(f)'), ('IsSoccerPlayer(f)', '  FollowsCloseBy(e)')]",[],"[(' Three soccer players', ' another soccer player'), (' a third soccer player in red', ' Three soccer players')]","IsInWhite(a) and Kicks(a, b) and LungesTowards(c, d) and IsInRed(e) and FollowsCloseBy(e)",IsSoccerPlayer(f),"(exists e (forall c (IsInWhite(a) and Kicks(a, b) and LungesTowards(c, d) and IsInRed(e) and FollowsCloseBy(e))) & (forall f (forall a (IsSoccerPlayer(f) -> IsInWhite(a)))) & (forall f (forall a (forall b (  Kicks(a, b) -> IsSoccerPlayer(f))))) & (forall f (forall a (forall b (IsSoccerPlayer(f) ->   Kicks(a, b))))) & (forall f (forall d (forall c (IsSoccerPlayer(f) ->   LungesTowards(c, d))))) & (forall f (forall e (  IsInRed(e) -> IsSoccerPlayer(f)))) & (forall f (forall e (IsSoccerPlayer(f) ->   IsInRed(e)))) & (forall f (forall e (  FollowsCloseBy(e) -> IsSoccerPlayer(f)))) & (forall f (forall e (IsSoccerPlayer(f) ->   FollowsCloseBy(e))))) -> (forall f (exists f (IsSoccerPlayer(f))))","(exists b (exists c (exists a (exists d (exists e (IsInWhite(a) and Kicks(a, b) and LungesTowards(c, d) and IsInRed(e) and FollowsCloseBy(e)))))) & (forall g (forall h (IsSoccerPlayer(g) -> IsInWhite(h)))) & (forall i (forall j (forall k (  Kicks(i,j) -> IsSoccerPlayer(k))))) & (forall n (forall l (forall m (IsSoccerPlayer(l) ->   Kicks(m,n))))) & (forall q (forall o (forall p (IsSoccerPlayer(o) ->   LungesTowards(p,q))))) & (forall s (forall r (  IsInRed(r) -> IsSoccerPlayer(s)))) & (forall u (forall t (IsSoccerPlayer(t) ->   IsInRed(u)))) & (forall w (forall v (  FollowsCloseBy(v) -> IsSoccerPlayer(w)))) & (forall x (forall y (IsSoccerPlayer(x) ->   FollowsCloseBy(y))))) -> (exists f (IsSoccerPlayer(f)))"
1,,"Children playing a video game together. Thus, the kids are indoors playing a video game."," ""Children are playing a video game together indoors.""  "," ""The kids are indoors.""","IsPlaying(a, b),  IsIndoors(a)",IsIndoors(c),"[('IsPlaying(a, b)', 'IsIndoors(c)'), ('IsIndoors(c)', 'IsPlaying(a, b)')]",[],"[(' Children', ' The kids')]","IsPlaying(a, b) and IsIndoors(a)",IsIndoors(c),"(exists a (IsPlaying(a, b) and IsIndoors(a)) & (forall a (forall b (forall c (IsPlaying(a, b) -> IsIndoors(c))))) & (forall a (forall b (forall c (IsIndoors(c) -> IsPlaying(a, b)))))) -> (forall c (IsIndoors(c)))","(exists a (exists b (IsPlaying(a, b) and IsIndoors(a))) & (forall f (forall d (forall e (IsPlaying(d,e) -> IsIndoors(f))))) & (forall g (forall i (forall h (IsIndoors(g) -> IsPlaying(h,i)))))) -> (exists c (IsIndoors(c)))"
1,,Two people in coats kiss on the side of a road. This implies that people show their appreciation for another.," ""Two people in coats kiss on the side of a road.""  "," ""People show appreciation for another.""","IsInCoats(a),  KissOnSideOfRoad(a)","ShowAppreciationFor(c, d)","[('  KissOnSideOfRoad(a)', 'ShowAppreciationFor(c, d)'), ('ShowAppreciationFor(c, d)', '  KissOnSideOfRoad(a)')]",[],"[(' Two people in coats', ' another'), (' side of a road', ' another')]",IsInCoats(a) and KissOnSideOfRoad(a),"ShowAppreciationFor(c, d)","(exists a (IsInCoats(a) and KissOnSideOfRoad(a)) & (forall a (forall d (forall c (  KissOnSideOfRoad(a) -> ShowAppreciationFor(c, d))))) & (forall a (forall d (forall c (ShowAppreciationFor(c, d) ->   KissOnSideOfRoad(a)))))) -> (forall d (ShowAppreciationFor(c, d)))","(exists a (IsInCoats(a) and KissOnSideOfRoad(a)) & (forall f (forall g (forall e (  KissOnSideOfRoad(e) -> ShowAppreciationFor(f,g))))) & (forall i (forall j (forall h (ShowAppreciationFor(h,i) ->   KissOnSideOfRoad(j)))))) -> (exists d (exists c (ShowAppreciationFor(c, d))))"
1,,Woman reading a book with a grocery tote. It follows that a woman is reading.," ""A woman is reading a book with a grocery tote.""  "," ""A woman is reading.""","IsReading(a),  HasGroceryTote(a)",IsReading(a),"[('IsReading(a)', '  HasGroceryTote(a)')]","[(' A woman', ' A woman')]",[],IsReading(a) and HasGroceryTote(a),IsReading(a),(IsReading(a) and HasGroceryTote(a) & (forall a (IsReading(a) ->   HasGroceryTote(a)))) -> (IsReading(a)),(exists a (IsReading(a) and HasGroceryTote(a)) & (forall d (IsReading(d) ->   HasGroceryTote(d)))) -> (exists a (IsReading(a)))
1,,"A man wearing a brown hoodie is shopping for snacks. As a consequence, the man is wearing brown."," ""A man wearing a brown hoodie is shopping for snacks.""  "," ""The man is wearing brown.""","IsWearingBrownHoodie(a),  IsShoppingForSnacks(a)",IsWearingBrown(c),"[('IsWearingBrownHoodie(a)', 'IsWearingBrown(c)'), ('IsWearingBrown(c)', 'IsWearingBrownHoodie(a)'), ('  IsShoppingForSnacks(a)', 'IsWearingBrown(c)'), ('IsWearingBrown(c)', '  IsShoppingForSnacks(a)')]",[],[],IsWearingBrownHoodie(a) and IsShoppingForSnacks(a),IsWearingBrown(c),(IsWearingBrownHoodie(a) and IsShoppingForSnacks(a) & (forall a (forall c (IsWearingBrownHoodie(a) -> IsWearingBrown(c)))) & (forall a (forall c (IsWearingBrown(c) -> IsWearingBrownHoodie(a)))) & (forall a (forall c (  IsShoppingForSnacks(a) -> IsWearingBrown(c)))) & (forall a (forall c (IsWearingBrown(c) ->   IsShoppingForSnacks(a))))) -> (IsWearingBrown(c)),(exists a (IsWearingBrownHoodie(a) and IsShoppingForSnacks(a)) & (forall d (forall e (IsWearingBrownHoodie(d) -> IsWearingBrown(e)))) & (forall f (forall g (IsWearingBrown(f) -> IsWearingBrownHoodie(g)))) & (forall i (forall h (  IsShoppingForSnacks(h) -> IsWearingBrown(i)))) & (forall j (forall k (IsWearingBrown(j) ->   IsShoppingForSnacks(k))))) -> (exists c (IsWearingBrown(c)))
1,,"A young man in a blue T-shirt and sweatpants stands over a stove and looks at the camera while another young man stands behind him. As a consequence, a man is in front of a camera.", A young man in a blue T-shirt and sweatpants stands over a stove and looks at the camera.  , A man is in front of a camera.,"IsWearing(a, b),  IsWearing(a, c),  StandsOver(a, d),  LooksAt(a, e)","IsInFrontOf(f, g)","[('  IsWearing(a, c)', 'IsInFrontOf(f, g)'), ('IsInFrontOf(f, g)', '  StandsOver(a, d)'), ('IsInFrontOf(f, g)', '  LooksAt(a, e)')]",[],[],"IsWearing(a, b) and IsWearing(a, c) and StandsOver(a, d) and LooksAt(a, e)","IsInFrontOf(f, g)","(IsWearing(a, b) and IsWearing(a, c) and StandsOver(a, d) and LooksAt(a, e) & (forall f (forall g (forall a (forall c (  IsWearing(a, c) -> IsInFrontOf(f, g)))))) & (forall f (forall g (forall a (forall d (IsInFrontOf(f, g) ->   StandsOver(a, d)))))) & (forall f (forall g (forall a (forall e (IsInFrontOf(f, g) ->   LooksAt(a, e))))))) -> (IsInFrontOf(f, g))","(exists b (exists c (exists a (exists d (exists e (IsWearing(a, b) and IsWearing(a, c) and StandsOver(a, d) and LooksAt(a, e)))))) & (forall i (forall j (forall k (forall h (  IsWearing(h,i) -> IsInFrontOf(j,k)))))) & (forall n (forall l (forall o (forall m (IsInFrontOf(l,m) ->   StandsOver(n,o)))))) & (forall q (forall s (forall r (forall p (IsInFrontOf(p,q) ->   LooksAt(r,s))))))) -> (exists f (exists g (IsInFrontOf(f, g))))"
1,,"This church choir sings to the masses as they sing joyous songs from the book at a church. Therefore, the church is filled with song."," ""The church choir sings joyous songs from the book at a church."""," ""The church is filled with song.""","SingsJoyousSongs(a),  AreFromBook(b),  AtChurch(a)",IsFilledWithSong(e),"[('SingsJoyousSongs(a)', 'IsFilledWithSong(e)'), ('IsFilledWithSong(e)', 'SingsJoyousSongs(a)'), ('IsFilledWithSong(e)', '  AreFromBook(b)'), ('  AtChurch(a)', 'IsFilledWithSong(e)'), ('IsFilledWithSong(e)', '  AtChurch(a)')]",[],"[(' The church choir', ' The church'), (' song', ' The church choir'), (' joyous songs', ' The church'), (' joyous songs', ' song'), (' a church', ' The church')]",SingsJoyousSongs(a) and AreFromBook(b) and AtChurch(a),IsFilledWithSong(e),(exists b (exists a (SingsJoyousSongs(a) and AreFromBook(b) and AtChurch(a))) & (forall a (forall e (SingsJoyousSongs(a) -> IsFilledWithSong(e)))) & (forall a (forall e (IsFilledWithSong(e) -> SingsJoyousSongs(a)))) & (forall e (forall b (IsFilledWithSong(e) ->   AreFromBook(b)))) & (forall a (forall e (  AtChurch(a) -> IsFilledWithSong(e)))) & (forall a (forall e (IsFilledWithSong(e) ->   AtChurch(a))))) -> (forall e (IsFilledWithSong(e))),(exists a (exists b (SingsJoyousSongs(a) and AreFromBook(b) and AtChurch(a))) & (forall g (forall h (SingsJoyousSongs(g) -> IsFilledWithSong(h)))) & (forall i (forall j (IsFilledWithSong(i) -> SingsJoyousSongs(j)))) & (forall l (forall k (IsFilledWithSong(k) ->   AreFromBook(l)))) & (forall n (forall m (  AtChurch(m) -> IsFilledWithSong(n)))) & (forall o (forall p (IsFilledWithSong(o) ->   AtChurch(p))))) -> (exists e (IsFilledWithSong(e)))
1,,"A man and a woman are standing at the side of an inflatable climbing structure. As a consequence, a man and a woman are standing."," ""A man and a woman are standing at the side of an inflatable climbing structure."""," ""A man and a woman are standing.""","IsStandingAt(a, c),  IsStandingAt(b, c),  IsAtSide(c, d)","IsStanding(a),  IsStanding(b)","[('IsStanding(a)', 'IsStandingAt(a, c)'), ('IsStandingAt(a, c)', '  IsStanding(b)'), ('  IsStanding(b)', 'IsStandingAt(a, c)'), ('  IsStandingAt(b, c)', 'IsStanding(a)'), ('IsStanding(a)', '  IsStandingAt(b, c)'), ('  IsStandingAt(b, c)', '  IsStanding(b)'), ('  IsStanding(b)', '  IsStandingAt(b, c)'), ('IsStanding(a)', '  IsAtSide(c, d)'), ('  IsStanding(b)', '  IsAtSide(c, d)')]","[(' A man', ' A man'), (' a woman', ' a woman')]","[(' side', ' a woman')]","IsStandingAt(a, c) and IsStandingAt(b, c) and IsAtSide(c, d)",IsStanding(a) and IsStanding(b),"(exists c (IsStandingAt(a, c) and IsStandingAt(b, c) and IsAtSide(c, d)) & (forall a (forall c (IsStanding(a) -> IsStandingAt(a, c)))) & (forall a (forall b (forall c (IsStandingAt(a, c) ->   IsStanding(b))))) & (forall a (forall b (forall c (  IsStanding(b) -> IsStandingAt(a, c))))) & (forall a (forall b (forall c (  IsStandingAt(b, c) -> IsStanding(a))))) & (forall a (forall b (forall c (IsStanding(a) ->   IsStandingAt(b, c))))) & (forall b (forall c (  IsStandingAt(b, c) ->   IsStanding(b)))) & (forall b (forall c (  IsStanding(b) ->   IsStandingAt(b, c)))) & (forall a (forall d (forall c (IsStanding(a) ->   IsAtSide(c, d))))) & (forall d (forall b (forall c (  IsStanding(b) ->   IsAtSide(c, d)))))) -> (forall b (IsStanding(a) and IsStanding(b)))","(exists a (exists d (exists b (exists c (IsStandingAt(a, c) and IsStandingAt(b, c) and IsAtSide(c, d))))) & (forall f (forall e (IsStanding(e) -> IsStandingAt(e,f)))) & (forall g (forall i (forall h (IsStandingAt(g,h) ->   IsStanding(i))))) & (forall j (forall l (forall k (  IsStanding(j) -> IsStandingAt(k,l))))) & (forall n (forall o (forall m (  IsStandingAt(m,n) -> IsStanding(o))))) & (forall q (forall r (forall p (IsStanding(p) ->   IsStandingAt(q,r))))) & (forall s (forall t (  IsStandingAt(s,t) ->   IsStanding(s)))) & (forall u (forall v (  IsStanding(u) ->   IsStandingAt(u,v)))) & (forall x (forall y (forall w (IsStanding(w) ->   IsAtSide(x,y))))) & (forall z (  IsStanding(z) ->   IsAtSide({,|)))) -> (exists a (exists b (IsStanding(a) and IsStanding(b))))"
1,,An asian teenager wearing a white shirt with black stripes is sitting on the steps with his face resting on his hand. This implies that the teenager is seated.," ""An Asian teenager is wearing a white shirt with black stripes and is sitting on the steps with his face resting on his hand.""  "," ""The teenager is seated.""","IsAsian(a),  IsWearing(a, b),  IsSittingOn(a, c),  IsResting(d, e)",IsSeated(f),"[('IsSeated(f)', 'IsAsian(a)'), ('IsSeated(f)', '  IsWearing(a, b)'), ('  IsSittingOn(a, c)', 'IsSeated(f)'), ('IsSeated(f)', '  IsSittingOn(a, c)'), ('IsSeated(f)', '  IsResting(d, e)')]",[],"[(' The teenager', ' Asian teenager'), (' white shirt with black stripes', ' The teenager')]","IsAsian(a) and IsWearing(a, b) and IsSittingOn(a, c) and IsResting(d, e)",IsSeated(f),"(exists b (forall a (IsAsian(a) and IsWearing(a, b) and IsSittingOn(a, c) and IsResting(d, e))) & (forall f (forall a (IsSeated(f) -> IsAsian(a)))) & (forall f (forall a (forall b (IsSeated(f) ->   IsWearing(a, b))))) & (forall f (forall a (forall c (  IsSittingOn(a, c) -> IsSeated(f))))) & (forall f (forall a (forall c (IsSeated(f) ->   IsSittingOn(a, c))))) & (forall f (forall d (forall e (IsSeated(f) ->   IsResting(d, e)))))) -> (forall f (exists f (IsSeated(f))))","(exists b (exists c (exists a (exists d (exists e (IsAsian(a) and IsWearing(a, b) and IsSittingOn(a, c) and IsResting(d, e)))))) & (forall g (forall h (IsSeated(g) -> IsAsian(h)))) & (forall i (forall j (forall k (IsSeated(i) ->   IsWearing(j,k))))) & (forall n (forall l (forall m (  IsSittingOn(l,m) -> IsSeated(n))))) & (forall q (forall o (forall p (IsSeated(o) ->   IsSittingOn(p,q))))) & (forall s (forall r (forall t (IsSeated(r) ->   IsResting(s,t)))))) -> (exists f (IsSeated(f)))"
1,,"Boy in red and black shirt walks through grass. Therefore, the boy is walking."," ""The boy in the red and black shirt walks through grass.""  "," ""The boy is walking.""","IsInRedAndBlackShirt(a),  WalksThroughGrass(a)",IsWalking(c),"[('IsWalking(c)', 'IsInRedAndBlackShirt(a)'), ('IsWalking(c)', '  WalksThroughGrass(a)')]",[],[],IsInRedAndBlackShirt(a) and WalksThroughGrass(a),IsWalking(c),(IsInRedAndBlackShirt(a) and WalksThroughGrass(a) & (forall a (forall c (IsWalking(c) -> IsInRedAndBlackShirt(a)))) & (forall a (forall c (IsWalking(c) ->   WalksThroughGrass(a))))) -> (IsWalking(c)),(exists a (IsInRedAndBlackShirt(a) and WalksThroughGrass(a)) & (forall d (forall e (IsWalking(d) -> IsInRedAndBlackShirt(e)))) & (forall f (forall g (IsWalking(f) ->   WalksThroughGrass(g))))) -> (exists c (IsWalking(c)))
1,,"These girls are having a great time looking for seashells. As a consequence, the girls are happy."," ""The girls are having a great time looking for seashells.""  "," ""The girls are happy.""","AreHavingGreatTime(a),  AreLookingFor(a, b)",IsHappy(a),"[('AreHavingGreatTime(a)', 'IsHappy(a)'), ('IsHappy(a)', 'AreHavingGreatTime(a)'), ('  AreLookingFor(a, b)', 'IsHappy(a)'), ('IsHappy(a)', '  AreLookingFor(a, b)')]","[(' The girls', ' The girls')]",[],"AreHavingGreatTime(a) and AreLookingFor(a, b)",IsHappy(a),"(AreHavingGreatTime(a) and AreLookingFor(a, b) & (forall a (AreHavingGreatTime(a) -> IsHappy(a))) & (forall a (IsHappy(a) -> AreHavingGreatTime(a))) & (forall a (forall b (  AreLookingFor(a, b) -> IsHappy(a)))) & (forall a (forall b (IsHappy(a) ->   AreLookingFor(a, b))))) -> (IsHappy(a))","(exists a (exists b (AreHavingGreatTime(a) and AreLookingFor(a, b))) & (forall c (AreHavingGreatTime(c) -> IsHappy(c))) & (forall d (IsHappy(d) -> AreHavingGreatTime(d))) & (forall f (forall e (  AreLookingFor(e,f) -> IsHappy(e)))) & (forall g (forall h (IsHappy(g) ->   AreLookingFor(g,h))))) -> (exists a (IsHappy(a)))"
1,,"Small girl in a pink dress is playing electronic drum pads with sticks. Consequently, a girl is playing electronic drums."," ""A small girl in a pink dress is playing electronic drum pads with sticks.""  "," ""A girl is playing electronic drums.""","IsSmall(a),  IsInPinkDress(a),  IsPlaying(c),  IsPlayedWith(c, d)","IsPlaying(e),  IsPlayingWith(e, f)","[('IsPlaying(e)', 'IsSmall(a)'), ('IsSmall(a)', '  IsPlayingWith(e, f)'), ('  IsPlayingWith(e, f)', 'IsSmall(a)'), ('  IsInPinkDress(a)', 'IsPlaying(e)'), ('IsPlaying(e)', '  IsInPinkDress(a)'), ('  IsInPinkDress(a)', '  IsPlayingWith(e, f)'), ('  IsPlayingWith(e, f)', '  IsPlaying(c)'), ('IsPlaying(e)', '  IsPlayedWith(c, d)'), ('  IsPlayingWith(e, f)', '  IsPlayedWith(c, d)')]",[],"[(' A small girl', ' A girl'), (' pink dress', ' A girl')]","IsSmall(a) and IsInPinkDress(a) and IsPlaying(c) and IsPlayedWith(c, d)","IsPlaying(e) and IsPlayingWith(e, f)","(exists a (IsSmall(a) and IsInPinkDress(a) and IsPlaying(c) and IsPlayedWith(c, d)) & (forall a (forall e (IsPlaying(e) -> IsSmall(a)))) & (forall f (forall a (forall e (IsSmall(a) ->   IsPlayingWith(e, f))))) & (forall f (forall a (forall e (  IsPlayingWith(e, f) -> IsSmall(a))))) & (forall a (forall e (  IsInPinkDress(a) -> IsPlaying(e)))) & (forall a (forall e (IsPlaying(e) ->   IsInPinkDress(a)))) & (forall f (forall a (forall e (  IsInPinkDress(a) ->   IsPlayingWith(e, f))))) & (forall f (forall e (forall c (  IsPlayingWith(e, f) ->   IsPlaying(c))))) & (forall d (forall e (forall c (IsPlaying(e) ->   IsPlayedWith(c, d))))) & (forall f (forall d (forall e (forall c (  IsPlayingWith(e, f) ->   IsPlayedWith(c, d))))))) -> (forall e (IsPlaying(e) and IsPlayingWith(e, f)))","(exists a (exists d (exists c (IsSmall(a) and IsInPinkDress(a) and IsPlaying(c) and IsPlayedWith(c, d)))) & (forall g (forall h (IsPlaying(g) -> IsSmall(h)))) & (forall i (forall j (forall k (IsSmall(i) ->   IsPlayingWith(j,k))))) & (forall n (forall l (forall m (  IsPlayingWith(l,m) -> IsSmall(n))))) & (forall o (forall p (  IsInPinkDress(o) -> IsPlaying(p)))) & (forall q (forall r (IsPlaying(q) ->   IsInPinkDress(r)))) & (forall s (forall u (forall t (  IsInPinkDress(s) ->   IsPlayingWith(t,u))))) & (forall x (forall w (forall v (  IsPlayingWith(v,w) ->   IsPlaying(x))))) & (forall z (forall y (IsPlaying(y) ->   IsPlayedWith(z,{)))) & (  IsPlayingWith(|,}) ->   IsPlayedWith(~,))) -> (exists f (exists e (IsPlaying(e) and IsPlayingWith(e, f))))"
1,,"A blond woman with a tattoo of on an angel on her arm walking down the street, a concrete wall in the background. As a consequence, a person with a tattoo."," ""A blond woman has a tattoo of an angel on her arm."""," ""A person has a tattoo.""","IsBlond(a),  HasTattoo(a),  IsOfAngel(b),  IsOnArm(b)",HasTattoo(e),"[('HasTattoo(e)', 'IsBlond(a)'), ('HasTattoo(e)', '  IsOfAngel(b)'), ('  IsOnArm(b)', 'HasTattoo(e)'), ('HasTattoo(e)', '  IsOnArm(b)')]",[],"[(' her arm', ' a tattoo')]",IsBlond(a) and HasTattoo(a) and IsOfAngel(b) and IsOnArm(b),HasTattoo(e),(IsBlond(a) and HasTattoo(a) and IsOfAngel(b) and IsOnArm(b) & (forall a (forall e (HasTattoo(e) -> IsBlond(a)))) & (forall e (forall b (HasTattoo(e) ->   IsOfAngel(b)))) & (forall e (forall b (  IsOnArm(b) -> HasTattoo(e)))) & (forall e (forall b (HasTattoo(e) ->   IsOnArm(b))))) -> (HasTattoo(e)),(exists a (exists b (IsBlond(a) and HasTattoo(a) and IsOfAngel(b) and IsOnArm(b))) & (forall g (forall h (HasTattoo(g) -> IsBlond(h)))) & (forall i (forall j (HasTattoo(i) ->   IsOfAngel(j)))) & (forall l (forall k (  IsOnArm(k) -> HasTattoo(l)))) & (forall n (forall m (HasTattoo(m) ->   IsOnArm(n))))) -> (exists e (HasTattoo(e)))
1,,"A tan dog chases a black and white soccer ball. Therefore, a dog is chasing a ball."," ""A tan dog chases a black and white soccer ball.""  "," ""A dog is chasing a ball.""","IsTan(a),  Chases(a, b),  IsBlackAndWhite(b)","IsChasing(c, d)","[('IsChasing(c, d)', 'IsTan(a)'), ('  Chases(a, b)', 'IsChasing(c, d)'), ('IsChasing(c, d)', '  Chases(a, b)')]",[],"[(' A tan dog', ' A dog'), (' black and white soccer ball.', ' a ball')]","IsTan(a) and Chases(a, b) and IsBlackAndWhite(b)","IsChasing(c, d)","(exists b (exists a (IsTan(a) and Chases(a, b) and IsBlackAndWhite(b))) & (forall a (forall d (forall c (IsChasing(c, d) -> IsTan(a))))) & (forall a (forall d (forall b (forall c (  Chases(a, b) -> IsChasing(c, d)))))) & (forall a (forall d (forall b (forall c (IsChasing(c, d) ->   Chases(a, b))))))) -> (forall d (forall c (IsChasing(c, d))))","(exists a (exists b (IsTan(a) and Chases(a, b) and IsBlackAndWhite(b))) & (forall f (forall g (forall e (IsChasing(e,f) -> IsTan(g))))) & (forall i (forall j (forall k (forall h (  Chases(h,i) -> IsChasing(j,k)))))) & (forall n (forall l (forall o (forall m (IsChasing(l,m) ->   Chases(n,o))))))) -> (exists d (exists c (IsChasing(c, d))))"
1,,"A dusty boy runs along a dirt path through the grass. As a consequence, a boy is outside running."," ""A dusty boy runs along a dirt path through the grass.""  "," ""A boy is outside running.""","IsDusty(a),  Runs(a),  IsDirtPath(b),  IsGrass(c)","IsOutside(d),  IsRunning(d)","[('IsDusty(a)', 'IsOutside(d)'), ('IsOutside(d)', 'IsDusty(a)'), ('IsDusty(a)', '  IsRunning(d)'), ('  IsRunning(d)', 'IsDusty(a)'), ('  Runs(a)', 'IsOutside(d)'), ('IsOutside(d)', '  Runs(a)'), ('  Runs(a)', '  IsRunning(d)'), ('  IsRunning(d)', '  Runs(a)'), ('IsOutside(d)', '  IsDirtPath(b)'), ('  IsRunning(d)', '  IsDirtPath(b)'), ('IsOutside(d)', '  IsGrass(c)'), ('  IsRunning(d)', '  IsGrass(c)')]",[],[],IsDusty(a) and Runs(a) and IsDirtPath(b) and IsGrass(c),IsOutside(d) and IsRunning(d),(IsDusty(a) and Runs(a) and IsDirtPath(b) and IsGrass(c) & (forall a (forall d (IsDusty(a) -> IsOutside(d)))) & (forall a (forall d (IsOutside(d) -> IsDusty(a)))) & (forall a (forall d (IsDusty(a) ->   IsRunning(d)))) & (forall a (forall d (  IsRunning(d) -> IsDusty(a)))) & (forall a (forall d (  Runs(a) -> IsOutside(d)))) & (forall a (forall d (IsOutside(d) ->   Runs(a)))) & (forall a (forall d (  Runs(a) ->   IsRunning(d)))) & (forall a (forall d (  IsRunning(d) ->   Runs(a)))) & (forall d (forall b (IsOutside(d) ->   IsDirtPath(b)))) & (forall d (forall b (  IsRunning(d) ->   IsDirtPath(b)))) & (forall d (forall c (IsOutside(d) ->   IsGrass(c)))) & (forall d (forall c (  IsRunning(d) ->   IsGrass(c))))) -> (IsOutside(d) and IsRunning(d)),(exists a (exists b (exists c (IsDusty(a) and Runs(a) and IsDirtPath(b) and IsGrass(c)))) & (forall f (forall e (IsDusty(e) -> IsOutside(f)))) & (forall g (forall h (IsOutside(g) -> IsDusty(h)))) & (forall i (forall j (IsDusty(i) ->   IsRunning(j)))) & (forall l (forall k (  IsRunning(k) -> IsDusty(l)))) & (forall n (forall m (  Runs(m) -> IsOutside(n)))) & (forall o (forall p (IsOutside(o) ->   Runs(p)))) & (forall q (forall r (  Runs(q) ->   IsRunning(r)))) & (forall s (forall t (  IsRunning(s) ->   Runs(t)))) & (forall u (forall v (IsOutside(u) ->   IsDirtPath(v)))) & (forall x (forall w (  IsRunning(w) ->   IsDirtPath(x)))) & (forall z (forall y (IsOutside(y) ->   IsGrass(z)))) & (  IsRunning({) ->   IsGrass(|))) -> (exists d (IsOutside(d) and IsRunning(d)))
1,,"A guy with a football, a crowd watching him. Consequently, there is a guy holding a football."," ""There is a guy holding a football.""  "," ""A crowd watches a guy with a football.""","IsHolding(a, b)","IsWatching(c, d),  HasFootball(d)","[('IsHolding(a, b)', 'IsWatching(c, d)'), ('IsHolding(a, b)', '  HasFootball(d)'), ('  HasFootball(d)', 'IsHolding(a, b)')]",[],"[(' Guy', ' A crowd'), (' Guy', ' a guy'), (' football', ' a football')]","IsHolding(a, b)","IsWatching(c, d) and HasFootball(d)","(exists a (IsHolding(a, b)) & (forall a (forall d (forall b (forall c (IsHolding(a, b) -> IsWatching(c, d)))))) & (forall a (forall d (forall b (IsHolding(a, b) ->   HasFootball(d))))) & (forall a (forall d (forall b (  HasFootball(d) -> IsHolding(a, b)))))) -> (forall d (forall c (IsWatching(c, d) and HasFootball(d))))","(exists a (exists b (IsHolding(a, b))) & (forall f (forall g (forall i (forall h (IsHolding(f,g) -> IsWatching(h,i)))))) & (forall j (forall l (forall k (IsHolding(j,k) ->   HasFootball(l))))) & (forall n (forall o (forall m (  HasFootball(m) -> IsHolding(n,o)))))) -> (exists d (exists c (IsWatching(c, d) and HasFootball(d))))"
1,,Two women are tending to their herd of animals including cows and goats near a building made primarily of stone. It follows that the two women are taking care of a herd of animals.," ""Two women are tending to their herd of animals including cows and goats near a building made primarily of stone.""  "," ""The two women are taking care of a herd of animals.""","AreTendingTo(a, b),  IncludesCows(b),  IncludesGoats(b),  IsNearBuilding(b, e),  IsMadeOfStone(e)","AreTakingCareOf(f, g)","[('AreTendingTo(a, b)', 'AreTakingCareOf(f, g)'), ('AreTakingCareOf(f, g)', 'AreTendingTo(a, b)'), ('  IncludesCows(b)', 'AreTakingCareOf(f, g)'), ('AreTakingCareOf(f, g)', '  IncludesCows(b)'), ('  IncludesGoats(b)', 'AreTakingCareOf(f, g)'), ('AreTakingCareOf(f, g)', '  IncludesGoats(b)'), ('AreTakingCareOf(f, g)', '  IsNearBuilding(b, e)'), ('AreTakingCareOf(f, g)', '  IsMadeOfStone(e)')]",[],"[(' The two women', ' Two women'), (' their herd of animals', ' a herd of animals'), (' cows', ' a herd of animals'), (' goats', ' a herd of animals'), (' The two women', ' building')]","AreTendingTo(a, b) and IncludesCows(b) and IncludesGoats(b) and IsNearBuilding(b, e) and IsMadeOfStone(e)","AreTakingCareOf(f, g)","(forall e (exists b (forall a (AreTendingTo(a, b) and IncludesCows(b) and IncludesGoats(b) and IsNearBuilding(b, e) and IsMadeOfStone(e)))) & (forall f (forall g (forall a (forall b (AreTendingTo(a, b) -> AreTakingCareOf(f, g)))))) & (forall f (forall g (forall a (forall b (AreTakingCareOf(f, g) -> AreTendingTo(a, b)))))) & (forall f (forall g (forall b (  IncludesCows(b) -> AreTakingCareOf(f, g))))) & (forall f (forall g (forall b (AreTakingCareOf(f, g) ->   IncludesCows(b))))) & (forall f (forall g (forall b (  IncludesGoats(b) -> AreTakingCareOf(f, g))))) & (forall f (forall g (forall b (AreTakingCareOf(f, g) ->   IncludesGoats(b))))) & (forall f (forall g (forall e (forall b (AreTakingCareOf(f, g) ->   IsNearBuilding(b, e)))))) & (forall f (forall g (forall e (AreTakingCareOf(f, g) ->   IsMadeOfStone(e)))))) -> (forall g (exists f (AreTakingCareOf(f, g))))","(exists a (exists e (exists b (AreTendingTo(a, b) and IncludesCows(b) and IncludesGoats(b) and IsNearBuilding(b, e) and IsMadeOfStone(e)))) & (forall i (forall j (forall k (forall h (AreTendingTo(h,i) -> AreTakingCareOf(j,k)))))) & (forall n (forall l (forall o (forall m (AreTakingCareOf(l,m) -> AreTendingTo(n,o)))))) & (forall q (forall r (forall p (  IncludesCows(p) -> AreTakingCareOf(q,r))))) & (forall s (forall u (forall t (AreTakingCareOf(s,t) ->   IncludesCows(u))))) & (forall x (forall w (forall v (  IncludesGoats(v) -> AreTakingCareOf(w,x))))) & (forall z (forall y (AreTakingCareOf(y,z) ->   IncludesGoats({)))) & (AreTakingCareOf(|,}) ->   IsNearBuilding(~,)) & (AreTakingCareOf(,) ->   IsMadeOfStone())) -> (exists f (exists g (AreTakingCareOf(f, g))))"
1,,"A boy and girl play together on a pile or rocks in a residential area. Thus, the boy and girl are outside.", A boy and girl play together on a pile of rocks in a residential area.  , The boy and girl are outside.,"PlaysTogether(a, b),  IsOnPileOfRocks(a),  IsOnPileOfRocks(b),  IsInResidentialArea(c)","IsOutside(e),  IsOutside(a)","[('IsOutside(e)', 'PlaysTogether(a, b)'), ('  IsOutside(a)', 'PlaysTogether(a, b)'), ('IsOutside(e)', '  IsOnPileOfRocks(a)'), ('  IsOutside(a)', '  IsOnPileOfRocks(a)'), ('IsOutside(e)', '  IsOnPileOfRocks(b)'), ('  IsOutside(a)', '  IsOnPileOfRocks(b)'), ('  IsInResidentialArea(c)', 'IsOutside(e)'), ('IsOutside(e)', '  IsInResidentialArea(c)'), ('  IsOutside(a)', '  IsInResidentialArea(c)')]","[(' girl', ' girl')]","[(' Boy', ' The boy'), (' The boy', ' residential area'), (' residential area', ' girl')]","PlaysTogether(a, b) and IsOnPileOfRocks(a) and IsOnPileOfRocks(b) and IsInResidentialArea(c)",IsOutside(e) and IsOutside(a),"(exists b (PlaysTogether(a, b) and IsOnPileOfRocks(a) and IsOnPileOfRocks(b) and IsInResidentialArea(c)) & (forall a (forall e (forall b (IsOutside(e) -> PlaysTogether(a, b))))) & (forall a (forall b (  IsOutside(a) -> PlaysTogether(a, b)))) & (forall a (forall e (IsOutside(e) ->   IsOnPileOfRocks(a)))) & (forall a (  IsOutside(a) ->   IsOnPileOfRocks(a))) & (forall e (forall b (IsOutside(e) ->   IsOnPileOfRocks(b)))) & (forall a (forall b (  IsOutside(a) ->   IsOnPileOfRocks(b)))) & (forall e (forall c (  IsInResidentialArea(c) -> IsOutside(e)))) & (forall e (forall c (IsOutside(e) ->   IsInResidentialArea(c)))) & (forall a (forall c (  IsOutside(a) ->   IsInResidentialArea(c))))) -> (forall e (IsOutside(e) and IsOutside(a)))","(exists a (exists b (exists c (PlaysTogether(a, b) and IsOnPileOfRocks(a) and IsOnPileOfRocks(b) and IsInResidentialArea(c)))) & (forall f (forall g (forall h (IsOutside(f) -> PlaysTogether(g,h))))) & (forall i (forall j (  IsOutside(i) -> PlaysTogether(i,j)))) & (forall l (forall k (IsOutside(k) ->   IsOnPileOfRocks(l)))) & (forall m (  IsOutside(m) ->   IsOnPileOfRocks(m))) & (forall n (forall o (IsOutside(n) ->   IsOnPileOfRocks(o)))) & (forall q (forall p (  IsOutside(p) ->   IsOnPileOfRocks(q)))) & (forall s (forall r (  IsInResidentialArea(r) -> IsOutside(s)))) & (forall u (forall t (IsOutside(t) ->   IsInResidentialArea(u)))) & (forall w (forall v (  IsOutside(v) ->   IsInResidentialArea(w))))) -> (exists a (exists e (IsOutside(e) and IsOutside(a))))"
1,,"A boy stands in the middle of a crowd of teenagers. Thus, a person stands in the middle of a crowd of teenagers."," ""A boy stands in the middle of a crowd of teenagers.""  "," ""A person stands in the middle of a crowd of teenagers.""","IsStandingInMiddle(a, b),  IsPartOfCrowd(d, c)","IsStandingInMiddle(e, f),  IsPartOfCrowd(g, g)","[('IsStandingInMiddle(e, f)', '  IsPartOfCrowd(d, c)')]",[],"[(' middle', ' A person'), (' the middle', ' middle'), (' the middle', ' crowd'), (' a crowd of teenagers', ' crowd'), (' teenagers', ' a crowd of teenagers')]","IsStandingInMiddle(a, b) and IsPartOfCrowd(d, c)","IsStandingInMiddle(e, f) and IsPartOfCrowd(g, g)","(exists d (forall c (forall b (exists b (IsStandingInMiddle(a, b) and IsPartOfCrowd(d, c))))) & (forall f (forall d (forall e (forall c (IsStandingInMiddle(e, f) ->   IsPartOfCrowd(d, c))))))) -> (forall g (exists g (exists f (forall e (IsStandingInMiddle(e, f) and IsPartOfCrowd(g, g))))))","(exists a (exists d (exists b (exists c (IsStandingInMiddle(a, b) and IsPartOfCrowd(d, c))))) & (forall i (forall j (forall k (forall h (IsStandingInMiddle(h,i) ->   IsPartOfCrowd(j,k))))))) -> (exists f (exists g (exists e (IsStandingInMiddle(e, f) and IsPartOfCrowd(g, g)))))"
1,,"Two men are standing in a boat. Thus, some people are in a boat."," ""Two men are standing in a boat.""  "," ""Some people are in a boat.""","IsStandingIn(a, b)","IsIn(c, d)","[('IsStandingIn(a, b)', 'IsIn(c, d)'), ('IsIn(c, d)', 'IsStandingIn(a, b)')]",[],"[(' Some people', ' boat'), (' boat', ' a boat')]","IsStandingIn(a, b)","IsIn(c, d)","(forall b (IsStandingIn(a, b)) & (forall a (forall d (forall b (forall c (IsStandingIn(a, b) -> IsIn(c, d)))))) & (forall a (forall d (forall b (forall c (IsIn(c, d) -> IsStandingIn(a, b))))))) -> (forall d (exists c (IsIn(c, d))))","(exists a (exists b (IsStandingIn(a, b))) & (forall f (forall g (forall e (forall h (IsStandingIn(e,f) -> IsIn(g,h)))))) & (forall i (forall l (forall j (forall k (IsIn(i,j) -> IsStandingIn(k,l))))))) -> (exists d (exists c (IsIn(c, d))))"
1,,An Asian woman dressed in a colorful outfit laughing. It follows that a woman is wearing colorful clothing.," ""An Asian woman is dressed in a colorful outfit and laughing.""  "," ""A woman is wearing colorful clothing.""","IsAsian(a),  IsDressedInColorfulOutfit(a),  IsLaughing(a)",IsWearingColorfulClothing(c),"[('IsWearingColorfulClothing(c)', 'IsAsian(a)'), ('  IsDressedInColorfulOutfit(a)', 'IsWearingColorfulClothing(c)'), ('IsWearingColorfulClothing(c)', '  IsDressedInColorfulOutfit(a)'), ('  IsLaughing(a)', 'IsWearingColorfulClothing(c)'), ('IsWearingColorfulClothing(c)', '  IsLaughing(a)')]",[],"[(' Asian woman', ' A woman'), (' colorful clothing', ' Asian woman'), (' colorful outfit', ' A woman'), (' colorful outfit', ' colorful clothing')]",IsAsian(a) and IsDressedInColorfulOutfit(a) and IsLaughing(a),IsWearingColorfulClothing(c),(exists a (IsAsian(a) and IsDressedInColorfulOutfit(a) and IsLaughing(a)) & (forall a (forall c (IsWearingColorfulClothing(c) -> IsAsian(a)))) & (forall a (forall c (  IsDressedInColorfulOutfit(a) -> IsWearingColorfulClothing(c)))) & (forall a (forall c (IsWearingColorfulClothing(c) ->   IsDressedInColorfulOutfit(a)))) & (forall a (forall c (  IsLaughing(a) -> IsWearingColorfulClothing(c)))) & (forall a (forall c (IsWearingColorfulClothing(c) ->   IsLaughing(a))))) -> (forall c (IsWearingColorfulClothing(c))),(exists a (IsAsian(a) and IsDressedInColorfulOutfit(a) and IsLaughing(a)) & (forall f (forall e (IsWearingColorfulClothing(e) -> IsAsian(f)))) & (forall g (forall h (  IsDressedInColorfulOutfit(g) -> IsWearingColorfulClothing(h)))) & (forall i (forall j (IsWearingColorfulClothing(i) ->   IsDressedInColorfulOutfit(j)))) & (forall l (forall k (  IsLaughing(k) -> IsWearingColorfulClothing(l)))) & (forall n (forall m (IsWearingColorfulClothing(m) ->   IsLaughing(n))))) -> (exists c (IsWearingColorfulClothing(c)))
1,,"A woman in black reviews a message as she walks to work. Hence, the woman in black has a job."," ""A woman in black reviews a message while walking to work.""  "," ""The woman in black has a job.""","IsInBlack(a),  ReviewsMessage(a),  WalksToWork(a)","IsInBlack(d),  HasJob(d)","[('IsInBlack(a)', '  HasJob(d)'), ('  HasJob(d)', 'IsInBlack(a)'), ('IsInBlack(d)', '  ReviewsMessage(a)'), ('  HasJob(d)', '  ReviewsMessage(a)'), ('  WalksToWork(a)', 'IsInBlack(d)'), ('  WalksToWork(a)', '  HasJob(d)'), ('  HasJob(d)', '  WalksToWork(a)')]",[],"[(' The woman in black', ' A woman in black'), (' The woman in black', ' a message'), (' work', ' a job')]",IsInBlack(a) and ReviewsMessage(a) and WalksToWork(a),IsInBlack(d) and HasJob(d),(forall a (IsInBlack(a) and ReviewsMessage(a) and WalksToWork(a)) & (forall a (forall d (IsInBlack(a) ->   HasJob(d)))) & (forall a (forall d (  HasJob(d) -> IsInBlack(a)))) & (forall a (forall d (IsInBlack(d) ->   ReviewsMessage(a)))) & (forall a (forall d (  HasJob(d) ->   ReviewsMessage(a)))) & (forall a (forall d (  WalksToWork(a) -> IsInBlack(d)))) & (forall a (forall d (  WalksToWork(a) ->   HasJob(d)))) & (forall a (forall d (  HasJob(d) ->   WalksToWork(a))))) -> (exists d (IsInBlack(d) and HasJob(d))),(exists a (IsInBlack(a) and ReviewsMessage(a) and WalksToWork(a)) & (forall f (forall g (IsInBlack(f) ->   HasJob(g)))) & (forall i (forall h (  HasJob(h) -> IsInBlack(i)))) & (forall j (forall k (IsInBlack(j) ->   ReviewsMessage(k)))) & (forall l (forall m (  HasJob(l) ->   ReviewsMessage(m)))) & (forall n (forall o (  WalksToWork(n) -> IsInBlack(o)))) & (forall q (forall p (  WalksToWork(p) ->   HasJob(q)))) & (forall s (forall r (  HasJob(r) ->   WalksToWork(s))))) -> (exists d (IsInBlack(d) and HasJob(d)))
1,,"A shirtless man rock climbs. As a consequence, a man is outside."," ""A shirtless man rock climbs.""  "," ""A man is outside.""","IsShirtless(a),  RockClimbs(a)",IsOutside(b),"[('IsShirtless(a)', 'IsOutside(b)'), ('IsOutside(b)', 'IsShirtless(a)'), ('  RockClimbs(a)', 'IsOutside(b)'), ('IsOutside(b)', '  RockClimbs(a)')]",[],[],IsShirtless(a) and RockClimbs(a),IsOutside(b),(IsShirtless(a) and RockClimbs(a) & (forall a (forall b (IsShirtless(a) -> IsOutside(b)))) & (forall a (forall b (IsOutside(b) -> IsShirtless(a)))) & (forall a (forall b (  RockClimbs(a) -> IsOutside(b)))) & (forall a (forall b (IsOutside(b) ->   RockClimbs(a))))) -> (IsOutside(b)),(exists a (IsShirtless(a) and RockClimbs(a)) & (forall d (forall c (IsShirtless(c) -> IsOutside(d)))) & (forall f (forall e (IsOutside(e) -> IsShirtless(f)))) & (forall g (forall h (  RockClimbs(g) -> IsOutside(h)))) & (forall i (forall j (IsOutside(i) ->   RockClimbs(j))))) -> (exists b (IsOutside(b)))
1,,"A man wearing a kilt has thrown a large pole. Therefore, a man is wearing a skirt.", A man wearing a kilt has thrown a large pole.  , A man is wearing a skirt.,"IsWearingKilt(a),  HasThrownLargePole(a)",IsWearingSkirt(c),"[('IsWearingSkirt(c)', 'IsWearingKilt(a)'), ('  HasThrownLargePole(a)', 'IsWearingSkirt(c)'), ('IsWearingSkirt(c)', '  HasThrownLargePole(a)')]",[],[],IsWearingKilt(a) and HasThrownLargePole(a),IsWearingSkirt(c),(IsWearingKilt(a) and HasThrownLargePole(a) & (forall a (forall c (IsWearingSkirt(c) -> IsWearingKilt(a)))) & (forall a (forall c (  HasThrownLargePole(a) -> IsWearingSkirt(c)))) & (forall a (forall c (IsWearingSkirt(c) ->   HasThrownLargePole(a))))) -> (IsWearingSkirt(c)),(exists a (IsWearingKilt(a) and HasThrownLargePole(a)) & (forall f (forall e (IsWearingSkirt(e) -> IsWearingKilt(f)))) & (forall g (forall h (  HasThrownLargePole(g) -> IsWearingSkirt(h)))) & (forall i (forall j (IsWearingSkirt(i) ->   HasThrownLargePole(j))))) -> (exists c (IsWearingSkirt(c)))
1,,"A man in a blue t-shirt is taking a picture while a woman with an umbrella walks behind him. Consequently, a man is taking a picture outdoors while a woman walks behind him.", A man in a blue t-shirt is taking a picture. , A man is taking a picture outdoors while a woman walks behind him.,"IsInBlueTShirt(a),  IsTakingPicture(a)","IsTakingPicture(c),  IsOutdoors(c),  WalksBehind(e, f)","[('IsInBlueTShirt(a)', 'IsTakingPicture(c)'), ('IsTakingPicture(c)', 'IsInBlueTShirt(a)'), ('  IsOutdoors(c)', 'IsInBlueTShirt(a)'), ('IsInBlueTShirt(a)', '  WalksBehind(e, f)'), ('  IsOutdoors(c)', '  IsTakingPicture(a)'), ('  IsTakingPicture(a)', '  WalksBehind(e, f)')]",[],"[(' A man in a blue t-shirt', ' a picture'), (' picture', ' A man'), (' a picture', ' picture'), (' picture', ' a woman'), (' picture', ' him')]",IsInBlueTShirt(a) and IsTakingPicture(a),"IsTakingPicture(c) and IsOutdoors(c) and WalksBehind(e, f)","(IsInBlueTShirt(a) and IsTakingPicture(a) & (forall a (forall c (IsInBlueTShirt(a) -> IsTakingPicture(c)))) & (forall a (forall c (IsTakingPicture(c) -> IsInBlueTShirt(a)))) & (forall a (forall c (  IsOutdoors(c) -> IsInBlueTShirt(a)))) & (forall f (forall a (forall e (IsInBlueTShirt(a) ->   WalksBehind(e, f))))) & (forall a (forall c (  IsOutdoors(c) ->   IsTakingPicture(a)))) & (forall f (forall a (forall e (  IsTakingPicture(a) ->   WalksBehind(e, f)))))) -> (IsTakingPicture(c) and IsOutdoors(c) and WalksBehind(e, f))","(exists a (IsInBlueTShirt(a) and IsTakingPicture(a)) & (forall g (forall h (IsInBlueTShirt(g) -> IsTakingPicture(h)))) & (forall i (forall j (IsTakingPicture(i) -> IsInBlueTShirt(j)))) & (forall l (forall k (  IsOutdoors(k) -> IsInBlueTShirt(l)))) & (forall n (forall o (forall m (IsInBlueTShirt(m) ->   WalksBehind(n,o))))) & (forall q (forall p (  IsOutdoors(p) ->   IsTakingPicture(q)))) & (forall s (forall r (forall t (  IsTakingPicture(r) ->   WalksBehind(s,t)))))) -> (exists f (exists e (exists c (IsTakingPicture(c) and IsOutdoors(c) and WalksBehind(e, f)))))"
1,,"A child and a parent or older sibling going for a hike. Consequently, two people are going for a hike."," ""A child and a parent or older sibling are going for a hike.""  "," ""Two people are going for a hike.""","IsGoingForAHike(b),  IsGoingForAHike(c)",IsGoingForAHike(d),[],"[(' a hike', ' a hike')]",[],IsGoingForAHike(b) and IsGoingForAHike(c),IsGoingForAHike(d),(IsGoingForAHike(b) and IsGoingForAHike(c)) -> (IsGoingForAHike(d)),(exists b (exists c (IsGoingForAHike(b) and IsGoingForAHike(c)))) -> (exists d (IsGoingForAHike(d)))
1,,"Two kids in black trunks bouncing on a wet trampoline. Consequently, children play on trampolines outdoors."," ""Two kids in black trunks are bouncing on a wet trampoline.""  "," ""Children play on trampolines outdoors.""","IsInBlackTrunks(a),  IsBouncing(a),  IsWet(c)","Play(d),  IsOn(d, e),  IsOutdoors(e)","[('Play(d)', 'IsInBlackTrunks(a)'), ('IsInBlackTrunks(a)', '  IsOutdoors(e)'), ('  IsOutdoors(e)', 'IsInBlackTrunks(a)'), ('Play(d)', '  IsBouncing(a)'), ('  IsBouncing(a)', '  IsOn(d, e)'), ('  IsBouncing(a)', '  IsOutdoors(e)'), ('  IsOutdoors(e)', '  IsBouncing(a)'), ('  IsWet(c)', 'Play(d)'), ('Play(d)', '  IsWet(c)'), ('  IsWet(c)', '  IsOn(d, e)'), ('  IsWet(c)', '  IsOutdoors(e)'), ('  IsOutdoors(e)', '  IsWet(c)')]",[],"[(' Children', ' Two kids'), (' wet trampoline', ' trampolines')]",IsInBlackTrunks(a) and IsBouncing(a) and IsWet(c),"Play(d) and IsOn(d, e) and IsOutdoors(e)","(exists c (forall a (IsInBlackTrunks(a) and IsBouncing(a) and IsWet(c))) & (forall a (forall d (Play(d) -> IsInBlackTrunks(a)))) & (forall a (forall e (IsInBlackTrunks(a) ->   IsOutdoors(e)))) & (forall a (forall e (  IsOutdoors(e) -> IsInBlackTrunks(a)))) & (forall a (forall d (Play(d) ->   IsBouncing(a)))) & (forall a (forall d (forall e (  IsBouncing(a) ->   IsOn(d, e))))) & (forall a (forall e (  IsBouncing(a) ->   IsOutdoors(e)))) & (forall a (forall e (  IsOutdoors(e) ->   IsBouncing(a)))) & (forall d (forall c (  IsWet(c) -> Play(d)))) & (forall d (forall c (Play(d) ->   IsWet(c)))) & (forall e (forall d (forall c (  IsWet(c) ->   IsOn(d, e))))) & (forall e (forall c (  IsWet(c) ->   IsOutdoors(e)))) & (forall e (forall c (  IsOutdoors(e) ->   IsWet(c))))) -> (forall e (exists d (Play(d) and IsOn(d, e) and IsOutdoors(e))))","(exists a (exists c (IsInBlackTrunks(a) and IsBouncing(a) and IsWet(c))) & (forall f (forall g (Play(f) -> IsInBlackTrunks(g)))) & (forall i (forall h (IsInBlackTrunks(h) ->   IsOutdoors(i)))) & (forall j (forall k (  IsOutdoors(j) -> IsInBlackTrunks(k)))) & (forall l (forall m (Play(l) ->   IsBouncing(m)))) & (forall n (forall o (forall p (  IsBouncing(n) ->   IsOn(o,p))))) & (forall q (forall r (  IsBouncing(q) ->   IsOutdoors(r)))) & (forall s (forall t (  IsOutdoors(s) ->   IsBouncing(t)))) & (forall u (forall v (  IsWet(u) -> Play(v)))) & (forall x (forall w (Play(w) ->   IsWet(x)))) & (forall z (forall y (  IsWet(y) ->   IsOn(z,{)))) & (  IsWet(|) ->   IsOutdoors(})) & (  IsOutdoors(~) ->   IsWet())) -> (exists d (exists e (Play(d) and IsOn(d, e) and IsOutdoors(e))))"
1,,"2 people with backpacks are at a table with a woman with a beige blazer sitting behind it. Thus, 2 people are at a table."," ""2 people with backpacks are at a table with a woman with a beige blazer sitting behind it.""  "," ""2 people are at a table.""","HasBackpacks(b),  AreAtTable(b, a),  IsWoman(d),  IsInBeigeBlazer(d),  IsSittingBehind(d, a)","AreAtTable(f, a)","[('AreAtTable(f, a)', 'HasBackpacks(b)'), ('AreAtTable(f, a)', '  IsInBeigeBlazer(d)'), ('AreAtTable(f, a)', '  IsSittingBehind(d, a)')]","[(' table', ' table')]","[(' 2 people', ' People'), (' 2 people', ' table'), (' table', ' People')]","HasBackpacks(b) and AreAtTable(b, a) and IsWoman(d) and IsInBeigeBlazer(d) and IsSittingBehind(d, a)","AreAtTable(f, a)","(exists a (exists b (HasBackpacks(b) and AreAtTable(b, a) and IsWoman(d) and IsInBeigeBlazer(d) and IsSittingBehind(d, a))) & (forall f (forall a (forall b (AreAtTable(f, a) -> HasBackpacks(b))))) & (forall f (forall a (forall d (AreAtTable(f, a) ->   IsInBeigeBlazer(d))))) & (forall f (forall a (forall d (AreAtTable(f, a) ->   IsSittingBehind(d, a)))))) -> (forall a (forall f (AreAtTable(f, a))))","(exists a (exists d (exists b (HasBackpacks(b) and AreAtTable(b, a) and IsWoman(d) and IsInBeigeBlazer(d) and IsSittingBehind(d, a)))) & (forall g (forall i (forall h (AreAtTable(g,h) -> HasBackpacks(i))))) & (forall j (forall l (forall k (AreAtTable(j,k) ->   IsInBeigeBlazer(l))))) & (forall n (forall o (forall m (AreAtTable(m,n) ->   IsSittingBehind(o,n)))))) -> (exists f (exists a (AreAtTable(f, a))))"
1,,"A group stands and watches two men, apparently dressed in some sort of costume, wrestle on the ground. It follows that there are people wrestling.", Two men are wrestling on the ground.  , There are people wrestling.,"IsWrestling(a),  IsOnGround(a)",IsWrestling(c),"[('  IsOnGround(a)', 'IsWrestling(c)'), ('IsWrestling(c)', '  IsOnGround(a)')]",[],"[(' the ground', ' People')]",IsWrestling(a) and IsOnGround(a),IsWrestling(c),(IsWrestling(a) and IsOnGround(a) & (forall a (forall c (  IsOnGround(a) -> IsWrestling(c)))) & (forall a (forall c (IsWrestling(c) ->   IsOnGround(a))))) -> (IsWrestling(c)),(exists a (IsWrestling(a) and IsOnGround(a)) & (forall d (forall e (  IsOnGround(d) -> IsWrestling(e)))) & (forall f (forall g (IsWrestling(f) ->   IsOnGround(g))))) -> (exists c (IsWrestling(c)))
1,,"two girls looking out the window at ""Hair at Hart."" Hence, two people look out a window."," ""Two girls are looking out the window at 'Hair at Hart.'""  "," ""Two people look out a window.""","AreLookingOutTheWindow(a),  AreLookingAt(c)",AreLookingOutTheWindow(d),"[('AreLookingOutTheWindow(d)', '  AreLookingAt(c)')]",[],"[(' the window', ' Two people'), (' the window', ' window')]",AreLookingOutTheWindow(a) and AreLookingAt(c),AreLookingOutTheWindow(d),(AreLookingOutTheWindow(a) and AreLookingAt(c) & (forall d (forall c (AreLookingOutTheWindow(d) ->   AreLookingAt(c))))) -> (AreLookingOutTheWindow(d)),(exists a (exists c (AreLookingOutTheWindow(a) and AreLookingAt(c))) & (forall f (forall g (AreLookingOutTheWindow(f) ->   AreLookingAt(g))))) -> (exists d (AreLookingOutTheWindow(d)))
1,,"A man visiting a friend in the hospital. Therefore, a man in a hospital receives a visiting friend.", A man is visiting a friend in the hospital.  , A man in a hospital receives a visiting friend.,"IsVisiting(a, b),  IsInHospital(b)","IsInHospital(a),  IsVisitor(e),  Receives(a, e)","[('IsVisiting(a, b)', 'IsInHospital(a)'), ('IsInHospital(a)', 'IsVisiting(a, b)'), ('  IsVisitor(e)', 'IsVisiting(a, b)'), ('IsVisiting(a, b)', '  Receives(a, e)'), ('  IsVisitor(e)', '  IsInHospital(b)')]","[(' A man', ' A man')]","[(' a friend', ' visiting friend')]","IsVisiting(a, b) and IsInHospital(b)","IsInHospital(a) and IsVisitor(e) and Receives(a, e)","(exists b (IsVisiting(a, b) and IsInHospital(b)) & (forall a (forall b (IsVisiting(a, b) -> IsInHospital(a)))) & (forall a (forall b (IsInHospital(a) -> IsVisiting(a, b)))) & (forall a (forall e (forall b (  IsVisitor(e) -> IsVisiting(a, b))))) & (forall a (forall e (forall b (IsVisiting(a, b) ->   Receives(a, e))))) & (forall e (forall b (  IsVisitor(e) ->   IsInHospital(b))))) -> (forall e (IsInHospital(a) and IsVisitor(e) and Receives(a, e)))","(exists a (exists b (IsVisiting(a, b) and IsInHospital(b))) & (forall f (forall g (IsVisiting(f,g) -> IsInHospital(f)))) & (forall i (forall h (IsInHospital(h) -> IsVisiting(h,i)))) & (forall j (forall l (forall k (  IsVisitor(j) -> IsVisiting(k,l))))) & (forall n (forall o (forall m (IsVisiting(m,n) ->   Receives(m,o))))) & (forall q (forall p (  IsVisitor(p) ->   IsInHospital(q))))) -> (exists a (exists e (IsInHospital(a) and IsVisitor(e) and Receives(a, e))))"
1,,"A schoolgirl is jumping over a low hurdle. Consequently, a girl is jumping over a hurdle."," ""A schoolgirl is jumping over a low hurdle.""  "," ""A girl is jumping over a hurdle.""","IsJumpingOver(a, b)","IsJumpingOver(c, d)",[],[],"[(' A schoolgirl', ' A girl'), (' a low hurdle', ' a hurdle')]","IsJumpingOver(a, b)","IsJumpingOver(c, d)","(exists b (exists a (IsJumpingOver(a, b)))) -> (forall d (forall c (IsJumpingOver(c, d))))","(exists a (exists b (IsJumpingOver(a, b)))) -> (exists d (exists c (IsJumpingOver(c, d))))"
1,,"Young Asian girl is sitting on the ground in rubble. Hence, the young Asian girl is outside in the rubble."," ""The young Asian girl is sitting on the ground in rubble.""  "," ""The young Asian girl is outside in the rubble.""","IsYoung(a),  IsAsian(a),  IsSittingOnGround(a),  IsInRubble(a)","IsYoung(a),  IsAsian(a),  IsOutside(a),  IsInRubble(a)","[('  IsAsian(a)', 'IsYoung(a)'), ('  IsOutside(a)', 'IsYoung(a)'), ('IsYoung(a)', '  IsInRubble(a)'), ('  IsInRubble(a)', 'IsYoung(a)'), ('  IsAsian(a)', 'IsYoung(a)'), ('  IsAsian(a)', '  IsOutside(a)'), ('  IsOutside(a)', '  IsAsian(a)'), ('  IsAsian(a)', '  IsInRubble(a)'), ('  IsInRubble(a)', '  IsAsian(a)'), ('  IsSittingOnGround(a)', 'IsYoung(a)'), ('IsYoung(a)', '  IsSittingOnGround(a)'), ('  IsSittingOnGround(a)', '  IsAsian(a)'), ('  IsAsian(a)', '  IsSittingOnGround(a)'), ('  IsSittingOnGround(a)', '  IsOutside(a)'), ('  IsOutside(a)', '  IsSittingOnGround(a)'), ('  IsSittingOnGround(a)', '  IsInRubble(a)'), ('  IsInRubble(a)', '  IsSittingOnGround(a)'), ('  IsInRubble(a)', 'IsYoung(a)'), ('IsYoung(a)', '  IsInRubble(a)'), ('  IsInRubble(a)', '  IsAsian(a)'), ('  IsAsian(a)', '  IsInRubble(a)'), ('  IsInRubble(a)', '  IsOutside(a)'), ('  IsOutside(a)', '  IsInRubble(a)')]","[(' The young Asian girl', ' The young Asian girl'), (' rubble', ' rubble')]",[],IsYoung(a) and IsAsian(a) and IsSittingOnGround(a) and IsInRubble(a),IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a),(IsYoung(a) and IsAsian(a) and IsSittingOnGround(a) and IsInRubble(a) & (forall a (  IsAsian(a) -> IsYoung(a))) & (forall a (  IsOutside(a) -> IsYoung(a))) & (forall a (IsYoung(a) ->   IsInRubble(a))) & (forall a (  IsInRubble(a) -> IsYoung(a))) & (forall a (  IsAsian(a) -> IsYoung(a))) & (forall a (  IsAsian(a) ->   IsOutside(a))) & (forall a (  IsOutside(a) ->   IsAsian(a))) & (forall a (  IsAsian(a) ->   IsInRubble(a))) & (forall a (  IsInRubble(a) ->   IsAsian(a))) & (forall a (  IsSittingOnGround(a) -> IsYoung(a))) & (forall a (IsYoung(a) ->   IsSittingOnGround(a))) & (forall a (  IsSittingOnGround(a) ->   IsAsian(a))) & (forall a (  IsAsian(a) ->   IsSittingOnGround(a))) & (forall a (  IsSittingOnGround(a) ->   IsOutside(a))) & (forall a (  IsOutside(a) ->   IsSittingOnGround(a))) & (forall a (  IsSittingOnGround(a) ->   IsInRubble(a))) & (forall a (  IsInRubble(a) ->   IsSittingOnGround(a))) & (forall a (  IsInRubble(a) -> IsYoung(a))) & (forall a (IsYoung(a) ->   IsInRubble(a))) & (forall a (  IsInRubble(a) ->   IsAsian(a))) & (forall a (  IsAsian(a) ->   IsInRubble(a))) & (forall a (  IsInRubble(a) ->   IsOutside(a))) & (forall a (  IsOutside(a) ->   IsInRubble(a)))) -> (IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a)),(exists a (IsYoung(a) and IsAsian(a) and IsSittingOnGround(a) and IsInRubble(a)) & (forall d (  IsAsian(d) -> IsYoung(d))) & (forall e (  IsOutside(e) -> IsYoung(e))) & (forall f (IsYoung(f) ->   IsInRubble(f))) & (forall g (  IsInRubble(g) -> IsYoung(g))) & (forall h (  IsAsian(h) -> IsYoung(h))) & (forall i (  IsAsian(i) ->   IsOutside(i))) & (forall j (  IsOutside(j) ->   IsAsian(j))) & (forall k (  IsAsian(k) ->   IsInRubble(k))) & (forall l (  IsInRubble(l) ->   IsAsian(l))) & (forall m (  IsSittingOnGround(m) -> IsYoung(m))) & (forall n (IsYoung(n) ->   IsSittingOnGround(n))) & (forall o (  IsSittingOnGround(o) ->   IsAsian(o))) & (forall p (  IsAsian(p) ->   IsSittingOnGround(p))) & (forall q (  IsSittingOnGround(q) ->   IsOutside(q))) & (forall r (  IsOutside(r) ->   IsSittingOnGround(r))) & (forall s (  IsSittingOnGround(s) ->   IsInRubble(s))) & (forall t (  IsInRubble(t) ->   IsSittingOnGround(t))) & (forall u (  IsInRubble(u) -> IsYoung(u))) & (forall v (IsYoung(v) ->   IsInRubble(v))) & (forall w (  IsInRubble(w) ->   IsAsian(w))) & (forall x (  IsAsian(x) ->   IsInRubble(x))) & (forall y (  IsInRubble(y) ->   IsOutside(y))) & (forall z (  IsOutside(z) ->   IsInRubble(z)))) -> (exists a (IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a)))
1,,"A group of women sing together while wearing matching black dresses. Thus, there are women singing.", A group of women sing together while wearing matching black dresses.  , There are women singing.,"SingTogether(a),  WearingMatchingBlackDresses(a)","AreWomen(c),  AreSinging(c)","[('SingTogether(a)', 'AreWomen(c)'), ('AreWomen(c)', 'SingTogether(a)'), ('SingTogether(a)', '  AreSinging(c)'), ('  AreSinging(c)', 'SingTogether(a)'), ('  WearingMatchingBlackDresses(a)', 'AreWomen(c)'), ('AreWomen(c)', '  WearingMatchingBlackDresses(a)'), ('  WearingMatchingBlackDresses(a)', '  AreSinging(c)'), ('  AreSinging(c)', '  WearingMatchingBlackDresses(a)')]",[],"[(' Women', ' A group of women'), (' matching black dresses', ' Women')]",SingTogether(a) and WearingMatchingBlackDresses(a),AreWomen(c) and AreSinging(c),(forall a (SingTogether(a) and WearingMatchingBlackDresses(a)) & (forall a (forall c (SingTogether(a) -> AreWomen(c)))) & (forall a (forall c (AreWomen(c) -> SingTogether(a)))) & (forall a (forall c (SingTogether(a) ->   AreSinging(c)))) & (forall a (forall c (  AreSinging(c) -> SingTogether(a)))) & (forall a (forall c (  WearingMatchingBlackDresses(a) -> AreWomen(c)))) & (forall a (forall c (AreWomen(c) ->   WearingMatchingBlackDresses(a)))) & (forall a (forall c (  WearingMatchingBlackDresses(a) ->   AreSinging(c)))) & (forall a (forall c (  AreSinging(c) ->   WearingMatchingBlackDresses(a))))) -> (exists c (AreWomen(c) and AreSinging(c))),(exists a (SingTogether(a) and WearingMatchingBlackDresses(a)) & (forall d (forall e (SingTogether(d) -> AreWomen(e)))) & (forall f (forall g (AreWomen(f) -> SingTogether(g)))) & (forall i (forall h (SingTogether(h) ->   AreSinging(i)))) & (forall j (forall k (  AreSinging(j) -> SingTogether(k)))) & (forall l (forall m (  WearingMatchingBlackDresses(l) -> AreWomen(m)))) & (forall n (forall o (AreWomen(n) ->   WearingMatchingBlackDresses(o)))) & (forall q (forall p (  WearingMatchingBlackDresses(p) ->   AreSinging(q)))) & (forall s (forall r (  AreSinging(r) ->   WearingMatchingBlackDresses(s))))) -> (exists c (AreWomen(c) and AreSinging(c)))
1,,Two boys in running clothes stretching. This implies that the boys are stretching.," ""Two boys are in running clothes and stretching.""  "," ""The boys are stretching.""","IsInRunningClothes(a),  IsStretching(a)",IsStretching(c),"[('IsInRunningClothes(a)', 'IsStretching(c)'), ('IsStretching(c)', 'IsInRunningClothes(a)')]",[],"[(' Two boys', ' The boys')]",IsInRunningClothes(a) and IsStretching(a),IsStretching(c),(exists a (IsInRunningClothes(a) and IsStretching(a)) & (forall a (forall c (IsInRunningClothes(a) -> IsStretching(c)))) & (forall a (forall c (IsStretching(c) -> IsInRunningClothes(a))))) -> (forall c (IsStretching(c))),(exists a (IsInRunningClothes(a) and IsStretching(a)) & (forall d (forall e (IsInRunningClothes(d) -> IsStretching(e)))) & (forall f (forall g (IsStretching(f) -> IsInRunningClothes(g))))) -> (exists c (IsStretching(c)))
1,,A group of young men in a gym take turns scoring in basketball. This implies that guys are indoors.," ""A group of young men in a gym take turns scoring in basketball.""  "," ""Guys are indoors.""","IsInGym(a),  ScoresInBasketball(a)",IsIndoors(d),"[('IsInGym(a)', 'IsIndoors(d)'), ('IsIndoors(d)', 'IsInGym(a)'), ('  ScoresInBasketball(a)', 'IsIndoors(d)'), ('IsIndoors(d)', '  ScoresInBasketball(a)')]",[],"[(' Guys', ' Group of young men')]",IsInGym(a) and ScoresInBasketball(a),IsIndoors(d),(forall a (IsInGym(a) and ScoresInBasketball(a)) & (forall a (forall d (IsInGym(a) -> IsIndoors(d)))) & (forall a (forall d (IsIndoors(d) -> IsInGym(a)))) & (forall a (forall d (  ScoresInBasketball(a) -> IsIndoors(d)))) & (forall a (forall d (IsIndoors(d) ->   ScoresInBasketball(a))))) -> (exists d (IsIndoors(d))),(exists a (IsInGym(a) and ScoresInBasketball(a)) & (forall f (forall g (IsInGym(f) -> IsIndoors(g)))) & (forall i (forall h (IsIndoors(h) -> IsInGym(i)))) & (forall j (forall k (  ScoresInBasketball(j) -> IsIndoors(k)))) & (forall l (forall m (IsIndoors(l) ->   ScoresInBasketball(m))))) -> (exists d (IsIndoors(d)))
1,,"An Eastern vendor sits by his stall with a rooster nearby. Consequently, a rooster near a vendor."," ""A rooster is near an Eastern vendor's stall.""  "," ""A rooster is near a vendor.""","IsNear(a, b)","IsNear(c, d)",[],[],"[(' Rooster', ' A rooster')]","IsNear(a, b)","IsNear(c, d)","(exists a (IsNear(a, b))) -> (forall c (IsNear(c, d)))","(exists a (exists b (IsNear(a, b)))) -> (exists d (exists c (IsNear(c, d))))"
1,,"A bird is perched on a tree branch. Thus, a bird is perching in a tree.", A bird is perched on a tree branch.  , A bird is perching in a tree.,"IsPerchedOn(a, b)","IsPerchingIn(a, c)","[('IsPerchedOn(a, b)', 'IsPerchingIn(a, c)'), ('IsPerchingIn(a, c)', 'IsPerchedOn(a, b)')]","[(' A bird', ' A bird')]","[(' a tree branch', ' a tree')]","IsPerchedOn(a, b)","IsPerchingIn(a, c)","(exists b (IsPerchedOn(a, b)) & (forall a (forall b (forall c (IsPerchedOn(a, b) -> IsPerchingIn(a, c))))) & (forall a (forall b (forall c (IsPerchingIn(a, c) -> IsPerchedOn(a, b)))))) -> (forall c (IsPerchingIn(a, c)))","(exists a (exists b (IsPerchedOn(a, b))) & (forall f (forall d (forall e (IsPerchedOn(d,e) -> IsPerchingIn(d,f))))) & (forall g (forall i (forall h (IsPerchingIn(g,h) -> IsPerchedOn(g,i)))))) -> (exists a (exists c (IsPerchingIn(a, c))))"
1,,"A man in an overcoat putting on his gloves at a subway station. Therefore, a person is in the subway station."," ""A man in an overcoat is putting on his gloves at a subway station."""," ""A person is in the subway station.""","IsInOvercoat(a),  IsPuttingOnGloves(a),  IsAtSubwayStation(a)",IsInSubwayStation(d),"[('IsInSubwayStation(d)', 'IsInOvercoat(a)'), ('  IsPuttingOnGloves(a)', 'IsInSubwayStation(d)'), ('IsInSubwayStation(d)', '  IsPuttingOnGloves(a)'), ('  IsAtSubwayStation(a)', 'IsInSubwayStation(d)'), ('IsInSubwayStation(d)', '  IsAtSubwayStation(a)')]",[],"[(' subway station', ' a subway station')]",IsInOvercoat(a) and IsPuttingOnGloves(a) and IsAtSubwayStation(a),IsInSubwayStation(d),(IsInOvercoat(a) and IsPuttingOnGloves(a) and IsAtSubwayStation(a) & (forall a (forall d (IsInSubwayStation(d) -> IsInOvercoat(a)))) & (forall a (forall d (  IsPuttingOnGloves(a) -> IsInSubwayStation(d)))) & (forall a (forall d (IsInSubwayStation(d) ->   IsPuttingOnGloves(a)))) & (forall a (forall d (  IsAtSubwayStation(a) -> IsInSubwayStation(d)))) & (forall a (forall d (IsInSubwayStation(d) ->   IsAtSubwayStation(a))))) -> (IsInSubwayStation(d)),(exists a (IsInOvercoat(a) and IsPuttingOnGloves(a) and IsAtSubwayStation(a)) & (forall f (forall g (IsInSubwayStation(f) -> IsInOvercoat(g)))) & (forall i (forall h (  IsPuttingOnGloves(h) -> IsInSubwayStation(i)))) & (forall j (forall k (IsInSubwayStation(j) ->   IsPuttingOnGloves(k)))) & (forall l (forall m (  IsAtSubwayStation(l) -> IsInSubwayStation(m)))) & (forall n (forall o (IsInSubwayStation(n) ->   IsAtSubwayStation(o))))) -> (exists d (IsInSubwayStation(d)))
1,,"Person with umbrella observes flooded streets with cars in the water. Consequently, a person is outside."," ""A person with an umbrella observes flooded streets with cars in the water.""  "," ""The streets are flooded.""","IsWithUmbrella(a),  ObservesFloodedStreets(a),  IsInWater(c)",IsFlooded(e),"[('IsFlooded(e)', 'IsWithUmbrella(a)'), ('  ObservesFloodedStreets(a)', 'IsFlooded(e)'), ('IsFlooded(e)', '  ObservesFloodedStreets(a)'), ('  IsInWater(c)', 'IsFlooded(e)'), ('IsFlooded(e)', '  IsInWater(c)')]",[],"[(' flooded streets', ' The streets')]",IsWithUmbrella(a) and ObservesFloodedStreets(a) and IsInWater(c),IsFlooded(e),(IsWithUmbrella(a) and ObservesFloodedStreets(a) and IsInWater(c) & (forall a (forall e (IsFlooded(e) -> IsWithUmbrella(a)))) & (forall a (forall e (  ObservesFloodedStreets(a) -> IsFlooded(e)))) & (forall a (forall e (IsFlooded(e) ->   ObservesFloodedStreets(a)))) & (forall e (forall c (  IsInWater(c) -> IsFlooded(e)))) & (forall e (forall c (IsFlooded(e) ->   IsInWater(c))))) -> (IsFlooded(e)),(exists a (exists c (IsWithUmbrella(a) and ObservesFloodedStreets(a) and IsInWater(c))) & (forall f (forall g (IsFlooded(f) -> IsWithUmbrella(g)))) & (forall i (forall h (  ObservesFloodedStreets(h) -> IsFlooded(i)))) & (forall j (forall k (IsFlooded(j) ->   ObservesFloodedStreets(k)))) & (forall l (forall m (  IsInWater(l) -> IsFlooded(m)))) & (forall n (forall o (IsFlooded(n) ->   IsInWater(o))))) -> (exists e (IsFlooded(e)))
1,,A group of people are camping out on some rocks. This implies that people are outdoors., A group of people are camping on rocks.  , People are outdoors.,"IsCampingOn(a, b)",IsOutdoors(c),"[('IsOutdoors(c)', 'IsCampingOn(a, b)')]",[],"[(' People', ' A group of people')]","IsCampingOn(a, b)",IsOutdoors(c),"(forall a (IsCampingOn(a, b)) & (forall a (forall b (forall c (IsOutdoors(c) -> IsCampingOn(a, b)))))) -> (exists c (IsOutdoors(c)))","(exists a (exists b (IsCampingOn(a, b))) & (forall f (forall d (forall e (IsOutdoors(d) -> IsCampingOn(e,f)))))) -> (exists c (IsOutdoors(c)))"
1,,A choir made up of varying ages of people are performing. This implies that the choir is singing., The choir is made up of varying ages of people.  , The choir is singing.,"IsMadeUpOf(a, b)",IsSinging(a),"[('IsSinging(a)', 'IsMadeUpOf(a, b)')]","[(' The choir', ' The choir')]","[(' The choir', ' varying ages of people')]","IsMadeUpOf(a, b)",IsSinging(a),"(forall b (IsMadeUpOf(a, b)) & (forall a (forall b (IsSinging(a) -> IsMadeUpOf(a, b))))) -> (exists a (IsSinging(a)))","(exists a (exists b (IsMadeUpOf(a, b))) & (forall d (forall c (IsSinging(c) -> IsMadeUpOf(c,d))))) -> (exists a (IsSinging(a)))"
1,,A man scales a rock climbing wall. It follows that a man rock climbing.," ""A man scales a rock climbing wall.""  "," ""A man rock climbing.""","Scales(a, b)",IsRockClimbing(a),"[('Scales(a, b)', 'IsRockClimbing(a)'), ('IsRockClimbing(a)', 'Scales(a, b)')]","[(' A man', ' A man')]",[],"Scales(a, b)",IsRockClimbing(a),"(Scales(a, b) & (forall a (forall b (Scales(a, b) -> IsRockClimbing(a)))) & (forall a (forall b (IsRockClimbing(a) -> Scales(a, b))))) -> (IsRockClimbing(a))","(exists a (exists b (Scales(a, b))) & (forall d (forall c (Scales(c,d) -> IsRockClimbing(c)))) & (forall f (forall e (IsRockClimbing(e) -> Scales(e,f))))) -> (exists a (IsRockClimbing(a)))"
1,,"A little white dog runs outside, their ears blown back in the wind. It follows that there is an animal outside."," ""A little white dog runs outside.""  "," ""There is an animal outside.""","IsLittle(a),  IsWhite(a),  RunsOutside(a)",IsOutside(b),"[('IsOutside(b)', 'IsLittle(a)'), ('IsOutside(b)', '  IsWhite(a)'), ('  RunsOutside(a)', 'IsOutside(b)'), ('IsOutside(b)', '  RunsOutside(a)')]",[],"[(' A little white dog', ' An animal')]",IsLittle(a) and IsWhite(a) and RunsOutside(a),IsOutside(b),(exists a (IsLittle(a) and IsWhite(a) and RunsOutside(a)) & (forall a (forall b (IsOutside(b) -> IsLittle(a)))) & (forall a (forall b (IsOutside(b) ->   IsWhite(a)))) & (forall a (forall b (  RunsOutside(a) -> IsOutside(b)))) & (forall a (forall b (IsOutside(b) ->   RunsOutside(a))))) -> (forall b (IsOutside(b))),(exists a (IsLittle(a) and IsWhite(a) and RunsOutside(a)) & (forall d (forall c (IsOutside(c) -> IsLittle(d)))) & (forall f (forall e (IsOutside(e) ->   IsWhite(f)))) & (forall g (forall h (  RunsOutside(g) -> IsOutside(h)))) & (forall i (forall j (IsOutside(i) ->   RunsOutside(j))))) -> (exists b (IsOutside(b)))
1,,"A bearded man sits near a white van. As a consequence, a man sitting outside near a van."," ""A bearded man sits near a white van.""  "," ""A man sits outside near a van.""","IsBearded(a),  SitsNearVan(a)","SitsOutside(c),  SitsNearVan(c)","[('SitsOutside(c)', 'IsBearded(a)'), ('  SitsNearVan(c)', 'IsBearded(a)'), ('  SitsNearVan(a)', 'SitsOutside(c)'), ('SitsOutside(c)', '  SitsNearVan(a)')]",[],"[(' white van', ' a van')]",IsBearded(a) and SitsNearVan(a),SitsOutside(c) and SitsNearVan(c),(IsBearded(a) and SitsNearVan(a) & (forall a (forall c (SitsOutside(c) -> IsBearded(a)))) & (forall a (forall c (  SitsNearVan(c) -> IsBearded(a)))) & (forall a (forall c (  SitsNearVan(a) -> SitsOutside(c)))) & (forall a (forall c (SitsOutside(c) ->   SitsNearVan(a))))) -> (SitsOutside(c) and SitsNearVan(c)),(exists a (IsBearded(a) and SitsNearVan(a)) & (forall f (forall e (SitsOutside(e) -> IsBearded(f)))) & (forall g (forall h (  SitsNearVan(g) -> IsBearded(h)))) & (forall i (forall j (  SitsNearVan(i) -> SitsOutside(j)))) & (forall l (forall k (SitsOutside(k) ->   SitsNearVan(l))))) -> (exists c (SitsOutside(c) and SitsNearVan(c)))
1,,"Two children wearing hooded tops laughing with each other. Thus, children laugh."," ""Two children wearing hooded tops are laughing with each other.""  "," ""Children laugh.""","WearingHoodedTops(a),  LaughingWithEachOther(a)",Laugh(c),"[('Laugh(c)', 'WearingHoodedTops(a)'), ('  LaughingWithEachOther(a)', 'Laugh(c)'), ('Laugh(c)', '  LaughingWithEachOther(a)')]",[],"[(' Two children', ' Children')]",WearingHoodedTops(a) and LaughingWithEachOther(a),Laugh(c),(exists a (WearingHoodedTops(a) and LaughingWithEachOther(a)) & (forall a (forall c (Laugh(c) -> WearingHoodedTops(a)))) & (forall a (forall c (  LaughingWithEachOther(a) -> Laugh(c)))) & (forall a (forall c (Laugh(c) ->   LaughingWithEachOther(a))))) -> (forall c (Laugh(c))),(exists a (WearingHoodedTops(a) and LaughingWithEachOther(a)) & (forall d (forall e (Laugh(d) -> WearingHoodedTops(e)))) & (forall f (forall g (  LaughingWithEachOther(f) -> Laugh(g)))) & (forall i (forall h (Laugh(h) ->   LaughingWithEachOther(i))))) -> (exists c (Laugh(c)))
1,,"A man in glasses in a basement. Thus, the basement has a man in it."," ""A man is in the basement wearing glasses.""  "," ""The basement has a man in it.""","IsInBasement(a),  IsWearingGlasses(a)",IsInBasement(a),"[('IsInBasement(a)', '  IsWearingGlasses(a)')]","[(' A man', ' a man'), (' the basement', ' The basement')]",[],IsInBasement(a) and IsWearingGlasses(a),IsInBasement(a),(IsInBasement(a) and IsWearingGlasses(a) & (forall a (IsInBasement(a) ->   IsWearingGlasses(a)))) -> (IsInBasement(a)),(exists a (IsInBasement(a) and IsWearingGlasses(a)) & (forall f (IsInBasement(f) ->   IsWearingGlasses(f)))) -> (exists a (IsInBasement(a)))
1,,A man in a white shirt speaks into a microphone as other men gather behind him at a public event. This implies that a man in a white shirt is making a speech in front of a crowd., A man in a white shirt is speaking into a microphone., A man in a white shirt is making a speech in front of a crowd.,"IsInWhiteShirt(a),  IsSpeakingIntoMicrophone(a)","IsInWhiteShirt(a),  IsMakingSpeech(a),  IsInFrontOfCrowd(a)","[('IsInWhiteShirt(a)', '  IsMakingSpeech(a)'), ('  IsMakingSpeech(a)', 'IsInWhiteShirt(a)'), ('IsInWhiteShirt(a)', '  IsInFrontOfCrowd(a)'), ('  IsInFrontOfCrowd(a)', 'IsInWhiteShirt(a)'), ('  IsSpeakingIntoMicrophone(a)', 'IsInWhiteShirt(a)'), ('IsInWhiteShirt(a)', '  IsSpeakingIntoMicrophone(a)'), ('  IsSpeakingIntoMicrophone(a)', '  IsMakingSpeech(a)'), ('  IsMakingSpeech(a)', '  IsSpeakingIntoMicrophone(a)'), ('  IsSpeakingIntoMicrophone(a)', '  IsInFrontOfCrowd(a)'), ('  IsInFrontOfCrowd(a)', '  IsSpeakingIntoMicrophone(a)')]","[(' A man in a white shirt', ' A man in a white shirt')]","[(' microphone', ' a speech')]",IsInWhiteShirt(a) and IsSpeakingIntoMicrophone(a),IsInWhiteShirt(a) and IsMakingSpeech(a) and IsInFrontOfCrowd(a),(IsInWhiteShirt(a) and IsSpeakingIntoMicrophone(a) & (forall a (IsInWhiteShirt(a) ->   IsMakingSpeech(a))) & (forall a (  IsMakingSpeech(a) -> IsInWhiteShirt(a))) & (forall a (IsInWhiteShirt(a) ->   IsInFrontOfCrowd(a))) & (forall a (  IsInFrontOfCrowd(a) -> IsInWhiteShirt(a))) & (forall a (  IsSpeakingIntoMicrophone(a) -> IsInWhiteShirt(a))) & (forall a (IsInWhiteShirt(a) ->   IsSpeakingIntoMicrophone(a))) & (forall a (  IsSpeakingIntoMicrophone(a) ->   IsMakingSpeech(a))) & (forall a (  IsMakingSpeech(a) ->   IsSpeakingIntoMicrophone(a))) & (forall a (  IsSpeakingIntoMicrophone(a) ->   IsInFrontOfCrowd(a))) & (forall a (  IsInFrontOfCrowd(a) ->   IsSpeakingIntoMicrophone(a)))) -> (IsInWhiteShirt(a) and IsMakingSpeech(a) and IsInFrontOfCrowd(a)),(exists a (IsInWhiteShirt(a) and IsSpeakingIntoMicrophone(a)) & (forall e (IsInWhiteShirt(e) ->   IsMakingSpeech(e))) & (forall f (  IsMakingSpeech(f) -> IsInWhiteShirt(f))) & (forall g (IsInWhiteShirt(g) ->   IsInFrontOfCrowd(g))) & (forall h (  IsInFrontOfCrowd(h) -> IsInWhiteShirt(h))) & (forall i (  IsSpeakingIntoMicrophone(i) -> IsInWhiteShirt(i))) & (forall j (IsInWhiteShirt(j) ->   IsSpeakingIntoMicrophone(j))) & (forall k (  IsSpeakingIntoMicrophone(k) ->   IsMakingSpeech(k))) & (forall l (  IsMakingSpeech(l) ->   IsSpeakingIntoMicrophone(l))) & (forall m (  IsSpeakingIntoMicrophone(m) ->   IsInFrontOfCrowd(m))) & (forall n (  IsInFrontOfCrowd(n) ->   IsSpeakingIntoMicrophone(n)))) -> (exists a (IsInWhiteShirt(a) and IsMakingSpeech(a) and IsInFrontOfCrowd(a)))
1,,A brown and white dog is chained up near a red chair. It follows that the dog is chained to a chair., A brown and white dog is chained up near a red chair.  , The dog is chained to a chair.,"IsBrownAndWhite(a),  IsChainedUp(a),  IsNear(a, b)","IsChainedTo(c, d)","[('IsBrownAndWhite(a)', 'IsChainedTo(c, d)'), ('  IsChainedUp(a)', 'IsChainedTo(c, d)')]",[],"[(' Brown and white dog', ' The dog'), (' red chair', ' a chair')]","IsBrownAndWhite(a) and IsChainedUp(a) and IsNear(a, b)","IsChainedTo(c, d)","(exists b (exists a (IsBrownAndWhite(a) and IsChainedUp(a) and IsNear(a, b))) & (forall a (forall d (forall c (IsBrownAndWhite(a) -> IsChainedTo(c, d))))) & (forall a (forall d (forall c (  IsChainedUp(a) -> IsChainedTo(c, d)))))) -> (forall d (forall c (IsChainedTo(c, d))))","(exists a (exists b (IsBrownAndWhite(a) and IsChainedUp(a) and IsNear(a, b))) & (forall f (forall g (forall e (IsBrownAndWhite(e) -> IsChainedTo(f,g))))) & (forall i (forall j (forall h (  IsChainedUp(h) -> IsChainedTo(i,j)))))) -> (exists d (exists c (IsChainedTo(c, d))))"
1,,"This is when daddy taught her how to ride her scooter. Consequently, daddy taught her."," ""Daddy taught her how to ride her scooter.""  "," ""Daddy taught her.""","Taught(a, b),  RidesScooter(b, c)","Taught(a, b)","[('  RidesScooter(b, c)', 'Taught(a, b)'), ('Taught(a, b)', '  RidesScooter(b, c)')]","[(' Daddy', ' Daddy'), (' her', ' her')]",[],"Taught(a, b) and RidesScooter(b, c)","Taught(a, b)","(Taught(a, b) and RidesScooter(b, c) & (forall a (forall b (forall c (  RidesScooter(b, c) -> Taught(a, b))))) & (forall a (forall b (forall c (Taught(a, b) ->   RidesScooter(b, c)))))) -> (Taught(a, b))","(exists a (exists b (exists c (Taught(a, b) and RidesScooter(b, c)))) & (forall f (forall g (forall d (forall e (  RidesScooter(d,e) -> Taught(f,g)))))) & (forall i (forall j (forall k (forall h (Taught(h,i) ->   RidesScooter(j,k))))))) -> (exists a (exists b (Taught(a, b))))"
1,,"A small girl with short brown hair is pushing a pink scooter over grass with brown leaves with threes in the background. Therefore, the girl is outside.", A small girl with short brown hair is pushing a pink scooter over grass with brown leaves with trees in the background.  , The girl is outside.,"IsSmall(a),  HasShortBrownHair(a),  IsPushing(a, c),  IsPink(c),  IsOver(c, d),  HasBrownLeaves(d),  HasTreesInBackground(g, f)",IsOutside(h),"[('IsSmall(a)', 'IsOutside(h)'), ('IsOutside(h)', 'IsSmall(a)'), ('IsOutside(h)', '  HasShortBrownHair(a)'), ('  IsPushing(a, c)', 'IsOutside(h)'), ('IsOutside(h)', '  IsPushing(a, c)'), ('  IsPink(c)', 'IsOutside(h)'), ('IsOutside(h)', '  IsPink(c)'), ('IsOutside(h)', '  IsOver(c, d)'), ('IsOutside(h)', '  HasBrownLeaves(d)'), ('  HasTreesInBackground(g, f)', 'IsOutside(h)'), ('IsOutside(h)', '  HasTreesInBackground(g, f)')]",[],"[(' A small girl', ' The girl'), (' short brown hair', ' The girl'), (' The girl', ' background')]","IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, c) and IsPink(c) and IsOver(c, d) and HasBrownLeaves(d) and HasTreesInBackground(g, f)",IsOutside(h),"(forall g (exists a (IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, c) and IsPink(c) and IsOver(c, d) and HasBrownLeaves(d) and HasTreesInBackground(g, f))) & (forall a (forall h (IsSmall(a) -> IsOutside(h)))) & (forall a (forall h (IsOutside(h) -> IsSmall(a)))) & (forall a (forall h (IsOutside(h) ->   HasShortBrownHair(a)))) & (forall a (forall h (forall c (  IsPushing(a, c) -> IsOutside(h))))) & (forall a (forall c (forall h (IsOutside(h) ->   IsPushing(a, c))))) & (forall h (forall c (  IsPink(c) -> IsOutside(h)))) & (forall c (forall h (IsOutside(h) ->   IsPink(c)))) & (forall d (forall c (forall h (IsOutside(h) ->   IsOver(c, d))))) & (forall d (forall h (IsOutside(h) ->   HasBrownLeaves(d)))) & (forall f (forall g (forall h (  HasTreesInBackground(g, f) -> IsOutside(h))))) & (forall f (forall g (forall h (IsOutside(h) ->   HasTreesInBackground(g, f)))))) -> (forall h (IsOutside(h)))","(exists g (exists c (exists a (exists d (exists f (IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, c) and IsPink(c) and IsOver(c, d) and HasBrownLeaves(d) and HasTreesInBackground(g, f)))))) & (forall i (forall j (IsSmall(i) -> IsOutside(j)))) & (forall l (forall k (IsOutside(k) -> IsSmall(l)))) & (forall n (forall m (IsOutside(m) ->   HasShortBrownHair(n)))) & (forall q (forall o (forall p (  IsPushing(o,p) -> IsOutside(q))))) & (forall s (forall r (forall t (IsOutside(r) ->   IsPushing(s,t))))) & (forall u (forall v (  IsPink(u) -> IsOutside(v)))) & (forall x (forall w (IsOutside(w) ->   IsPink(x)))) & (forall z (forall y (IsOutside(y) ->   IsOver(z,{)))) & (IsOutside(|) ->   HasBrownLeaves(})) & (  HasTreesInBackground(~,) -> IsOutside()) & (IsOutside() ->   HasTreesInBackground(,))) -> (exists h (IsOutside(h)))"
1,,"A man wearing a black cap is suspended in the air on a swing, as children are swinging on a swing set. Hence, a man in a black hat is swinging with some children.", A man wearing a black cap is suspended in the air on a swing.  , A man in a black hat is swinging with children.,"IsWearingBlackCap(a),  IsSuspendedInAir(a),  IsOnSwing(a)","IsInBlackHat(e),  IsSwinging(e),  IsSwingingWith(e, f)","[('IsWearingBlackCap(a)', 'IsInBlackHat(e)'), ('IsInBlackHat(e)', 'IsWearingBlackCap(a)'), ('IsWearingBlackCap(a)', '  IsSwinging(e)'), ('  IsSwinging(e)', 'IsWearingBlackCap(a)'), ('IsWearingBlackCap(a)', '  IsSwingingWith(e, f)'), ('  IsSuspendedInAir(a)', 'IsInBlackHat(e)'), ('IsInBlackHat(e)', '  IsSuspendedInAir(a)'), ('  IsSwinging(e)', '  IsSuspendedInAir(a)'), ('  IsSuspendedInAir(a)', '  IsSwingingWith(e, f)'), ('  IsSwingingWith(e, f)', '  IsSuspendedInAir(a)'), ('  IsOnSwing(a)', 'IsInBlackHat(e)'), ('IsInBlackHat(e)', '  IsOnSwing(a)'), ('  IsOnSwing(a)', '  IsSwinging(e)'), ('  IsSwinging(e)', '  IsOnSwing(a)'), ('  IsOnSwing(a)', '  IsSwingingWith(e, f)'), ('  IsSwingingWith(e, f)', '  IsOnSwing(a)')]",[],"[(' black cap', ' A man in a black hat')]",IsWearingBlackCap(a) and IsSuspendedInAir(a) and IsOnSwing(a),"IsInBlackHat(e) and IsSwinging(e) and IsSwingingWith(e, f)","(IsWearingBlackCap(a) and IsSuspendedInAir(a) and IsOnSwing(a) & (forall a (forall e (IsWearingBlackCap(a) -> IsInBlackHat(e)))) & (forall a (forall e (IsInBlackHat(e) -> IsWearingBlackCap(a)))) & (forall a (forall e (IsWearingBlackCap(a) ->   IsSwinging(e)))) & (forall a (forall e (  IsSwinging(e) -> IsWearingBlackCap(a)))) & (forall f (forall a (forall e (IsWearingBlackCap(a) ->   IsSwingingWith(e, f))))) & (forall a (forall e (  IsSuspendedInAir(a) -> IsInBlackHat(e)))) & (forall a (forall e (IsInBlackHat(e) ->   IsSuspendedInAir(a)))) & (forall a (forall e (  IsSwinging(e) ->   IsSuspendedInAir(a)))) & (forall f (forall a (forall e (  IsSuspendedInAir(a) ->   IsSwingingWith(e, f))))) & (forall f (forall a (forall e (  IsSwingingWith(e, f) ->   IsSuspendedInAir(a))))) & (forall a (forall e (  IsOnSwing(a) -> IsInBlackHat(e)))) & (forall a (forall e (IsInBlackHat(e) ->   IsOnSwing(a)))) & (forall a (forall e (  IsOnSwing(a) ->   IsSwinging(e)))) & (forall a (forall e (  IsSwinging(e) ->   IsOnSwing(a)))) & (forall f (forall a (forall e (  IsOnSwing(a) ->   IsSwingingWith(e, f))))) & (forall f (forall a (forall e (  IsSwingingWith(e, f) ->   IsOnSwing(a)))))) -> (IsInBlackHat(e) and IsSwinging(e) and IsSwingingWith(e, f))","(exists a (IsWearingBlackCap(a) and IsSuspendedInAir(a) and IsOnSwing(a)) & (forall g (forall h (IsWearingBlackCap(g) -> IsInBlackHat(h)))) & (forall i (forall j (IsInBlackHat(i) -> IsWearingBlackCap(j)))) & (forall l (forall k (IsWearingBlackCap(k) ->   IsSwinging(l)))) & (forall n (forall m (  IsSwinging(m) -> IsWearingBlackCap(n)))) & (forall q (forall o (forall p (IsWearingBlackCap(o) ->   IsSwingingWith(p,q))))) & (forall s (forall r (  IsSuspendedInAir(r) -> IsInBlackHat(s)))) & (forall u (forall t (IsInBlackHat(t) ->   IsSuspendedInAir(u)))) & (forall w (forall v (  IsSwinging(v) ->   IsSuspendedInAir(w)))) & (forall z (forall x (forall y (  IsSuspendedInAir(x) ->   IsSwingingWith(y,z))))) & (  IsSwingingWith({,|) ->   IsSuspendedInAir(})) & (  IsOnSwing(~) -> IsInBlackHat()) & (IsInBlackHat() ->   IsOnSwing()) & (  IsOnSwing() ->   IsSwinging()) & (  IsSwinging() ->   IsOnSwing()) & (  IsOnSwing() ->   IsSwingingWith(,)) & (  IsSwingingWith(,) ->   IsOnSwing())) -> (exists f (exists e (IsInBlackHat(e) and IsSwinging(e) and IsSwingingWith(e, f))))"
1,,"A man with a blue, collared shirt sits in front of another man. This implies that a man sits in front of another man."," ""A man with a blue, collared shirt sits in front of another man.""  "," ""A man sits in front of another man.""","SitsInFrontOf(b, a),  HasCollaredShirt(b)","SitsInFrontOf(d, a)","[('SitsInFrontOf(d, a)', '  HasCollaredShirt(b)')]","[(' another man', ' another man')]","[(' collared shirt', ' A man'), (' collared shirt', ' another man')]","SitsInFrontOf(b, a) and HasCollaredShirt(b)","SitsInFrontOf(d, a)","(SitsInFrontOf(b, a) and HasCollaredShirt(b) & (forall a (forall d (forall b (SitsInFrontOf(d, a) ->   HasCollaredShirt(b)))))) -> (SitsInFrontOf(d, a))","(exists a (exists b (SitsInFrontOf(b, a) and HasCollaredShirt(b))) & (forall f (forall g (forall e (SitsInFrontOf(e,f) ->   HasCollaredShirt(g)))))) -> (exists a (exists d (SitsInFrontOf(d, a))))"
1,,"A young man in an orange shirt, maneuvers a skateboard at the top of a ramp. Therefore, a person rides a skateboard."," ""A young man in an orange shirt maneuvers a skateboard at the top of a ramp.""  "," ""A person rides a skateboard.""","IsYoung(b),  IsInOrangeShirt(b),  ManeuversSkateboard(b),  IsAtTopOfRamp(b)",RidesSkateboard(a),"[('RidesSkateboard(a)', 'IsYoung(b)'), ('RidesSkateboard(a)', '  IsInOrangeShirt(b)'), ('  ManeuversSkateboard(b)', 'RidesSkateboard(a)'), ('RidesSkateboard(a)', '  ManeuversSkateboard(b)'), ('RidesSkateboard(a)', '  IsAtTopOfRamp(b)')]","[(' the top', ' A person')]","[(' a skateboard', ' skateboard')]",IsYoung(b) and IsInOrangeShirt(b) and ManeuversSkateboard(b) and IsAtTopOfRamp(b),RidesSkateboard(a),(IsYoung(b) and IsInOrangeShirt(b) and ManeuversSkateboard(b) and IsAtTopOfRamp(b) & (forall a (forall b (RidesSkateboard(a) -> IsYoung(b)))) & (forall a (forall b (RidesSkateboard(a) ->   IsInOrangeShirt(b)))) & (forall a (forall b (  ManeuversSkateboard(b) -> RidesSkateboard(a)))) & (forall a (forall b (RidesSkateboard(a) ->   ManeuversSkateboard(b)))) & (forall a (forall b (RidesSkateboard(a) ->   IsAtTopOfRamp(b))))) -> (RidesSkateboard(a)),(exists b (IsYoung(b) and IsInOrangeShirt(b) and ManeuversSkateboard(b) and IsAtTopOfRamp(b)) & (forall i (forall h (RidesSkateboard(h) -> IsYoung(i)))) & (forall j (forall k (RidesSkateboard(j) ->   IsInOrangeShirt(k)))) & (forall l (forall m (  ManeuversSkateboard(l) -> RidesSkateboard(m)))) & (forall n (forall o (RidesSkateboard(n) ->   ManeuversSkateboard(o)))) & (forall q (forall p (RidesSkateboard(p) ->   IsAtTopOfRamp(q))))) -> (exists a (RidesSkateboard(a)))
1,,"A large group of people walking in a busy city at night. Consequently, people are walking a city."," ""A large group of people are walking in a busy city at night.""  "," ""People are walking in a city.""","IsLargeGroup(a),  IsWalkingIn(a, b),  IsBusyCity(b)","IsWalkingIn(c, d)","[('IsLargeGroup(a)', 'IsWalkingIn(c, d)'), ('IsWalkingIn(c, d)', '  IsBusyCity(b)')]",[],"[(' A large group of people', ' People'), (' city', ' A large group of people'), (' People', ' a busy city'), (' city', ' a busy city')]","IsLargeGroup(a) and IsBusyCity(b) and IsWalkingIn(a, b)","IsWalkingIn(c, d)","(forall b (forall a (exists a (IsLargeGroup(a) and IsBusyCity(b) and IsWalkingIn(a, b)))) & (forall a (forall d (forall c (IsLargeGroup(a) -> IsWalkingIn(c, d))))) & (forall d (forall b (forall c (IsWalkingIn(c, d) ->   IsBusyCity(b)))))) -> (exists d (forall c (IsWalkingIn(c, d))))","(exists a (exists b (IsLargeGroup(a) and IsBusyCity(b) and IsWalkingIn(a, b))) & (forall f (forall g (forall e (IsLargeGroup(e) -> IsWalkingIn(f,g))))) & (forall i (forall j (forall h (IsWalkingIn(h,i) ->   IsBusyCity(j)))))) -> (exists d (exists c (IsWalkingIn(c, d))))"
1,,"A group of people are walking by a van. Therefore, some people outdoors."," ""A group of people are walking by a van.""  "," ""Some people are outdoors.""",IsWalking(a),IsOutdoors(c),"[('IsWalking(a)', 'IsOutdoors(c)'), ('IsOutdoors(c)', 'IsWalking(a)')]",[],"[(' Some people', ' Group of people'), (' outdoors', ' Group of people')]",IsWalking(a),IsOutdoors(c),(forall a (IsWalking(a)) & (forall a (forall c (IsWalking(a) -> IsOutdoors(c)))) & (forall a (forall c (IsOutdoors(c) -> IsWalking(a))))) -> (exists c (IsOutdoors(c))),(exists a (IsWalking(a)) & (forall f (forall e (IsWalking(e) -> IsOutdoors(f)))) & (forall g (forall h (IsOutdoors(g) -> IsWalking(h))))) -> (exists c (IsOutdoors(c)))
1,,"A white and a black dog fighting in a fenced in room. As a consequence, the dogs are fighting."," ""A white and a black dog are fighting in a fenced-in room.""  "," ""The dogs are fighting.""","IsWhite(a),  IsBlack(b),  IsFighting(a, b),  IsFighting(b, a),  IsInFencedRoom(a),  IsInFencedRoom(b)",IsFighting(d),"[('IsFighting(d)', 'IsWhite(a)'), ('IsFighting(d)', '  IsBlack(b)'), ('  IsInFencedRoom(a)', 'IsFighting(d)'), ('IsFighting(d)', '  IsInFencedRoom(a)'), ('  IsInFencedRoom(b)', 'IsFighting(d)'), ('IsFighting(d)', '  IsInFencedRoom(b)')]",[],"[(' A white dog', ' The dogs'), (' a black dog', ' The dogs')]","IsWhite(a) and IsBlack(b) and IsFighting(a, b) and IsFighting(b, a) and IsInFencedRoom(a) and IsInFencedRoom(b)",IsFighting(d),"(exists b (exists a (IsWhite(a) and IsBlack(b) and IsFighting(a, b) and IsFighting(b, a) and IsInFencedRoom(a) and IsInFencedRoom(b))) & (forall a (forall d (IsFighting(d) -> IsWhite(a)))) & (forall d (forall b (IsFighting(d) ->   IsBlack(b)))) & (forall a (forall d (  IsInFencedRoom(a) -> IsFighting(d)))) & (forall a (forall d (IsFighting(d) ->   IsInFencedRoom(a)))) & (forall d (forall b (  IsInFencedRoom(b) -> IsFighting(d)))) & (forall d (forall b (IsFighting(d) ->   IsInFencedRoom(b))))) -> (forall d (IsFighting(d)))","(exists a (exists b (IsWhite(a) and IsBlack(b) and IsFighting(a, b) and IsFighting(b, a) and IsInFencedRoom(a) and IsInFencedRoom(b))) & (forall f (forall e (IsFighting(e) -> IsWhite(f)))) & (forall g (forall h (IsFighting(g) ->   IsBlack(h)))) & (forall i (forall j (  IsInFencedRoom(i) -> IsFighting(j)))) & (forall l (forall k (IsFighting(k) ->   IsInFencedRoom(l)))) & (forall n (forall m (  IsInFencedRoom(m) -> IsFighting(n)))) & (forall o (forall p (IsFighting(o) ->   IsInFencedRoom(p))))) -> (exists d (IsFighting(d)))"
1,,"A white greyhound dog wearing a muzzle runs around a track. Hence, the dog is racing other dogs.", A white greyhound dog wearing a muzzle is running around a track.  , The dog is racing other dogs.,"IsWhite(a),  IsGreyhound(a),  IsWearingMuzzle(a),  IsRunningAroundTrack(a)","IsRacing(d, e)","[('IsWhite(a)', 'IsRacing(d, e)'), ('IsRacing(d, e)', 'IsWhite(a)'), ('  IsGreyhound(a)', 'IsRacing(d, e)'), ('IsRacing(d, e)', '  IsGreyhound(a)'), ('  IsWearingMuzzle(a)', 'IsRacing(d, e)'), ('IsRacing(d, e)', '  IsWearingMuzzle(a)'), ('  IsRunningAroundTrack(a)', 'IsRacing(d, e)'), ('IsRacing(d, e)', '  IsRunningAroundTrack(a)')]",[],"[(' White greyhound dog', ' The dog'), (' White greyhound dog', ' other dogs'), (' muzzle', ' other dogs')]",IsWhite(a) and IsGreyhound(a) and IsWearingMuzzle(a) and IsRunningAroundTrack(a),"IsRacing(d, e)","(exists a (IsWhite(a) and IsGreyhound(a) and IsWearingMuzzle(a) and IsRunningAroundTrack(a)) & (forall a (forall d (forall e (IsWhite(a) -> IsRacing(d, e))))) & (forall a (forall d (forall e (IsRacing(d, e) -> IsWhite(a))))) & (forall a (forall d (forall e (  IsGreyhound(a) -> IsRacing(d, e))))) & (forall a (forall d (forall e (IsRacing(d, e) ->   IsGreyhound(a))))) & (forall a (forall d (forall e (  IsWearingMuzzle(a) -> IsRacing(d, e))))) & (forall a (forall d (forall e (IsRacing(d, e) ->   IsWearingMuzzle(a))))) & (forall a (forall d (forall e (  IsRunningAroundTrack(a) -> IsRacing(d, e))))) & (forall a (forall d (forall e (IsRacing(d, e) ->   IsRunningAroundTrack(a)))))) -> (forall e (forall d (IsRacing(d, e))))","(exists a (IsWhite(a) and IsGreyhound(a) and IsWearingMuzzle(a) and IsRunningAroundTrack(a)) & (forall f (forall g (forall h (IsWhite(f) -> IsRacing(g,h))))) & (forall i (forall j (forall k (IsRacing(i,j) -> IsWhite(k))))) & (forall n (forall l (forall m (  IsGreyhound(l) -> IsRacing(m,n))))) & (forall q (forall o (forall p (IsRacing(o,p) ->   IsGreyhound(q))))) & (forall s (forall r (forall t (  IsWearingMuzzle(r) -> IsRacing(s,t))))) & (forall u (forall w (forall v (IsRacing(u,v) ->   IsWearingMuzzle(w))))) & (forall z (forall x (forall y (  IsRunningAroundTrack(x) -> IsRacing(y,z))))) & (IsRacing({,|) ->   IsRunningAroundTrack(}))) -> (exists d (exists e (IsRacing(d, e))))"
1,,The pitcher is pitching the ball in a game of baseball. It follows that the pitcher throws the ball.," ""The pitcher is pitching the ball in a game of baseball.""  "," ""The pitcher throws the ball.""","IsPitching(a, b),  IsInGame(c)","Throws(a, b)","[('IsPitching(a, b)', 'Throws(a, b)'), ('Throws(a, b)', 'IsPitching(a, b)'), ('Throws(a, b)', '  IsInGame(c)')]","[(' The pitcher', ' The pitcher'), (' the ball', ' the ball')]","[(' The pitcher', ' a game of baseball'), (' the ball', ' a game of baseball')]","IsPitching(a, b) and IsInGame(c)","Throws(a, b)","(forall c (IsPitching(a, b) and IsInGame(c)) & (forall a (forall b (IsPitching(a, b) -> Throws(a, b)))) & (forall a (forall b (Throws(a, b) -> IsPitching(a, b)))) & (forall a (forall b (forall c (Throws(a, b) ->   IsInGame(c)))))) -> (exists b (exists a (Throws(a, b))))","(exists a (exists b (exists c (IsPitching(a, b) and IsInGame(c)))) & (forall d (forall e (IsPitching(d,e) -> Throws(d,e)))) & (forall f (forall g (Throws(f,g) -> IsPitching(f,g)))) & (forall i (forall j (forall h (Throws(h,i) ->   IsInGame(j)))))) -> (exists a (exists b (Throws(a, b))))"
1,,"Girl in a red coat, blue head wrap and jeans is making a snow angel. As a consequence, a girl outside plays in the snow."," ""A girl in a red coat, blue head wrap, and jeans is making a snow angel."""," ""A girl outside plays in the snow.""","IsInRedCoat(a),  IsInBlueHeadWrap(a),  IsInJeans(a),  IsMakingSnowAngel(a)","IsOutside(a),  IsPlayingInSnow(a)","[('IsInRedCoat(a)', 'IsOutside(a)'), ('IsOutside(a)', 'IsInRedCoat(a)'), ('IsInRedCoat(a)', '  IsPlayingInSnow(a)'), ('  IsPlayingInSnow(a)', 'IsInRedCoat(a)'), ('  IsInBlueHeadWrap(a)', 'IsOutside(a)'), ('IsOutside(a)', '  IsInBlueHeadWrap(a)'), ('  IsInBlueHeadWrap(a)', '  IsPlayingInSnow(a)'), ('  IsPlayingInSnow(a)', '  IsInBlueHeadWrap(a)'), ('  IsInJeans(a)', 'IsOutside(a)'), ('IsOutside(a)', '  IsInJeans(a)'), ('  IsInJeans(a)', '  IsPlayingInSnow(a)'), ('  IsPlayingInSnow(a)', '  IsInJeans(a)'), ('  IsMakingSnowAngel(a)', 'IsOutside(a)'), ('IsOutside(a)', '  IsMakingSnowAngel(a)'), ('  IsMakingSnowAngel(a)', '  IsPlayingInSnow(a)'), ('  IsPlayingInSnow(a)', '  IsMakingSnowAngel(a)')]","[(' A girl', ' A girl')]","[(' snow angel', ' the snow')]",IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a),IsOutside(a) and IsPlayingInSnow(a),(IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a) & (forall a (IsInRedCoat(a) -> IsOutside(a))) & (forall a (IsOutside(a) -> IsInRedCoat(a))) & (forall a (IsInRedCoat(a) ->   IsPlayingInSnow(a))) & (forall a (  IsPlayingInSnow(a) -> IsInRedCoat(a))) & (forall a (  IsInBlueHeadWrap(a) -> IsOutside(a))) & (forall a (IsOutside(a) ->   IsInBlueHeadWrap(a))) & (forall a (  IsInBlueHeadWrap(a) ->   IsPlayingInSnow(a))) & (forall a (  IsPlayingInSnow(a) ->   IsInBlueHeadWrap(a))) & (forall a (  IsInJeans(a) -> IsOutside(a))) & (forall a (IsOutside(a) ->   IsInJeans(a))) & (forall a (  IsInJeans(a) ->   IsPlayingInSnow(a))) & (forall a (  IsPlayingInSnow(a) ->   IsInJeans(a))) & (forall a (  IsMakingSnowAngel(a) -> IsOutside(a))) & (forall a (IsOutside(a) ->   IsMakingSnowAngel(a))) & (forall a (  IsMakingSnowAngel(a) ->   IsPlayingInSnow(a))) & (forall a (  IsPlayingInSnow(a) ->   IsMakingSnowAngel(a)))) -> (IsOutside(a) and IsPlayingInSnow(a)),(exists a (IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a)) & (forall g (IsInRedCoat(g) -> IsOutside(g))) & (forall h (IsOutside(h) -> IsInRedCoat(h))) & (forall i (IsInRedCoat(i) ->   IsPlayingInSnow(i))) & (forall j (  IsPlayingInSnow(j) -> IsInRedCoat(j))) & (forall k (  IsInBlueHeadWrap(k) -> IsOutside(k))) & (forall l (IsOutside(l) ->   IsInBlueHeadWrap(l))) & (forall m (  IsInBlueHeadWrap(m) ->   IsPlayingInSnow(m))) & (forall n (  IsPlayingInSnow(n) ->   IsInBlueHeadWrap(n))) & (forall o (  IsInJeans(o) -> IsOutside(o))) & (forall p (IsOutside(p) ->   IsInJeans(p))) & (forall q (  IsInJeans(q) ->   IsPlayingInSnow(q))) & (forall r (  IsPlayingInSnow(r) ->   IsInJeans(r))) & (forall s (  IsMakingSnowAngel(s) -> IsOutside(s))) & (forall t (IsOutside(t) ->   IsMakingSnowAngel(t))) & (forall u (  IsMakingSnowAngel(u) ->   IsPlayingInSnow(u))) & (forall v (  IsPlayingInSnow(v) ->   IsMakingSnowAngel(v)))) -> (exists a (IsOutside(a) and IsPlayingInSnow(a)))
1,,"Men in an office with computers and a projector screen. Consequently, there are computers and a projector screen in the room."," ""There are men in an office with computers and a projector screen.""  "," ""There are computers and a projector screen in the room.""","IsInOffice(c, d),  HasComputers(d, a),  HasProjectorScreen(d, b)","IsInRoom(a, e),  IsInRoom(b, e)","[('IsInRoom(a, e)', 'IsInOffice(c, d)'), ('  IsInRoom(b, e)', 'IsInOffice(c, d)'), ('  HasComputers(d, a)', 'IsInRoom(a, e)'), ('IsInRoom(a, e)', '  HasComputers(d, a)'), ('  HasComputers(d, a)', '  IsInRoom(b, e)'), ('  IsInRoom(b, e)', '  HasComputers(d, a)'), ('  HasProjectorScreen(d, b)', 'IsInRoom(a, e)'), ('IsInRoom(a, e)', '  HasProjectorScreen(d, b)'), ('  HasProjectorScreen(d, b)', '  IsInRoom(b, e)'), ('  IsInRoom(b, e)', '  HasProjectorScreen(d, b)')]","[(' computers', ' Computers'), (' projector screen', ' projector screen')]",[],"IsInOffice(c, d) and HasComputers(d, a) and HasProjectorScreen(d, b)","IsInRoom(a, e) and IsInRoom(b, e)","(IsInOffice(c, d) and HasComputers(d, a) and HasProjectorScreen(d, b) & (forall d (forall a (forall e (forall c (IsInRoom(a, e) -> IsInOffice(c, d)))))) & (forall d (forall e (forall b (forall c (  IsInRoom(b, e) -> IsInOffice(c, d)))))) & (forall a (forall d (forall e (  HasComputers(d, a) -> IsInRoom(a, e))))) & (forall d (forall a (forall e (IsInRoom(a, e) ->   HasComputers(d, a))))) & (forall a (forall d (forall b (forall e (  HasComputers(d, a) ->   IsInRoom(b, e)))))) & (forall d (forall a (forall e (forall b (  IsInRoom(b, e) ->   HasComputers(d, a)))))) & (forall a (forall d (forall b (forall e (  HasProjectorScreen(d, b) -> IsInRoom(a, e)))))) & (forall d (forall a (forall e (forall b (IsInRoom(a, e) ->   HasProjectorScreen(d, b)))))) & (forall d (forall b (forall e (  HasProjectorScreen(d, b) ->   IsInRoom(b, e))))) & (forall d (forall e (forall b (  IsInRoom(b, e) ->   HasProjectorScreen(d, b)))))) -> (IsInRoom(a, e) and IsInRoom(b, e))","(exists a (exists d (exists b (exists c (IsInOffice(c, d) and HasComputers(d, a) and HasProjectorScreen(d, b))))) & (forall g (forall i (forall j (forall h (IsInRoom(g,h) -> IsInOffice(i,j)))))) & (forall n (forall l (forall k (forall m (  IsInRoom(k,l) -> IsInOffice(m,n)))))) & (forall q (forall o (forall r (forall p (  HasComputers(o,p) -> IsInRoom(q,r)))))) & (forall s (forall u (forall v (forall t (IsInRoom(s,t) ->   HasComputers(u,v)))))) & (forall z (forall x (forall y (forall w (  HasComputers(w,x) ->   IsInRoom(y,z)))))) & (  IsInRoom({,|) ->   HasComputers(},~)) & (  HasProjectorScreen(,) -> IsInRoom(,)) & (IsInRoom(,) ->   HasProjectorScreen(,)) & (  HasProjectorScreen(,) ->   IsInRoom(,)) & (  IsInRoom(,) ->   HasProjectorScreen(,))) -> (exists a (exists e (exists b (IsInRoom(a, e) and IsInRoom(b, e)))))"
1,,"A small child in a red jacket is sitting on a man's shoulders and holding his head. Therefore, the child's hands are on the man's head.", A small child in a red jacket is sitting on a man's shoulders and holding the man's head., The child's hands are on the man's head.,"IsSmall(b),  IsInRedJacket(b),  IsSittingOn(b, d),  IsHolding(b, a)","IsOn(e, a)","[('IsSmall(b)', 'IsOn(e, a)'), ('IsOn(e, a)', 'IsSmall(b)'), ('  IsInRedJacket(b)', 'IsOn(e, a)')]","[("" the man's head"", "" the man's head"")]","[("" The child's hands"", ' A small child')]","IsSmall(b) and IsInRedJacket(b) and IsSittingOn(b, d) and IsHolding(b, a)","IsOn(e, a)","(forall b (IsSmall(b) and IsInRedJacket(b) and IsSittingOn(b, d) and IsHolding(b, a)) & (forall a (forall e (forall b (IsSmall(b) -> IsOn(e, a))))) & (forall a (forall e (forall b (IsOn(e, a) -> IsSmall(b))))) & (forall a (forall e (forall b (  IsInRedJacket(b) -> IsOn(e, a)))))) -> (exists e (IsOn(e, a)))","(exists a (exists d (exists b (IsSmall(b) and IsInRedJacket(b) and IsSittingOn(b, d) and IsHolding(b, a)))) & (forall f (forall g (forall h (IsSmall(f) -> IsOn(g,h))))) & (forall i (forall j (forall k (IsOn(i,j) -> IsSmall(k))))) & (forall n (forall l (forall m (  IsInRedJacket(l) -> IsOn(m,n)))))) -> (exists a (exists e (IsOn(e, a))))"
1,,Three girls are standing and talking to each other. It follows that three girls are talking.," ""Three girls are standing and talking to each other.""  "," ""Three girls are talking.""","IsStanding(a),  IsTalkingToEachOther(a)",IsTalking(a),"[('IsStanding(a)', 'IsTalking(a)'), ('IsTalking(a)', 'IsStanding(a)'), ('  IsTalkingToEachOther(a)', 'IsTalking(a)'), ('IsTalking(a)', '  IsTalkingToEachOther(a)')]","[(' Three girls', ' Three girls')]",[],IsStanding(a) and IsTalkingToEachOther(a),IsTalking(a),(IsStanding(a) and IsTalkingToEachOther(a) & (forall a (IsStanding(a) -> IsTalking(a))) & (forall a (IsTalking(a) -> IsStanding(a))) & (forall a (  IsTalkingToEachOther(a) -> IsTalking(a))) & (forall a (IsTalking(a) ->   IsTalkingToEachOther(a)))) -> (IsTalking(a)),(exists a (IsStanding(a) and IsTalkingToEachOther(a)) & (forall b (IsStanding(b) -> IsTalking(b))) & (forall c (IsTalking(c) -> IsStanding(c))) & (forall d (  IsTalkingToEachOther(d) -> IsTalking(d))) & (forall e (IsTalking(e) ->   IsTalkingToEachOther(e)))) -> (exists a (IsTalking(a)))
1,,"a man with a cap and not wearing shirt is laying a wooden bench. Consequently, a man relaxes on a bench.", A man with a cap and not wearing a shirt is laying on a wooden bench.  , A man relaxes on a bench.,"IsWearingCap(a),  IsNotWearingShirt(a),  IsLayingOnBench(a)","Relaxes(d),  IsOnBench(d)","[('IsWearingCap(a)', 'Relaxes(d)'), ('Relaxes(d)', 'IsWearingCap(a)'), ('IsWearingCap(a)', '  IsOnBench(d)'), ('  IsOnBench(d)', 'IsWearingCap(a)'), ('  IsNotWearingShirt(a)', 'Relaxes(d)'), ('Relaxes(d)', '  IsNotWearingShirt(a)'), ('  IsNotWearingShirt(a)', '  IsOnBench(d)'), ('  IsOnBench(d)', '  IsNotWearingShirt(a)'), ('  IsLayingOnBench(a)', 'Relaxes(d)'), ('Relaxes(d)', '  IsLayingOnBench(a)'), ('  IsLayingOnBench(a)', '  IsOnBench(d)'), ('  IsOnBench(d)', '  IsLayingOnBench(a)')]",[],"[(' wooden bench', ' a bench')]",IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOnBench(a),Relaxes(d) and IsOnBench(d),(IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOnBench(a) & (forall a (forall d (IsWearingCap(a) -> Relaxes(d)))) & (forall a (forall d (Relaxes(d) -> IsWearingCap(a)))) & (forall a (forall d (IsWearingCap(a) ->   IsOnBench(d)))) & (forall a (forall d (  IsOnBench(d) -> IsWearingCap(a)))) & (forall a (forall d (  IsNotWearingShirt(a) -> Relaxes(d)))) & (forall a (forall d (Relaxes(d) ->   IsNotWearingShirt(a)))) & (forall a (forall d (  IsNotWearingShirt(a) ->   IsOnBench(d)))) & (forall a (forall d (  IsOnBench(d) ->   IsNotWearingShirt(a)))) & (forall a (forall d (  IsLayingOnBench(a) -> Relaxes(d)))) & (forall a (forall d (Relaxes(d) ->   IsLayingOnBench(a)))) & (forall a (forall d (  IsLayingOnBench(a) ->   IsOnBench(d)))) & (forall a (forall d (  IsOnBench(d) ->   IsLayingOnBench(a))))) -> (Relaxes(d) and IsOnBench(d)),(exists a (IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOnBench(a)) & (forall f (forall g (IsWearingCap(f) -> Relaxes(g)))) & (forall i (forall h (Relaxes(h) -> IsWearingCap(i)))) & (forall j (forall k (IsWearingCap(j) ->   IsOnBench(k)))) & (forall l (forall m (  IsOnBench(l) -> IsWearingCap(m)))) & (forall n (forall o (  IsNotWearingShirt(n) -> Relaxes(o)))) & (forall q (forall p (Relaxes(p) ->   IsNotWearingShirt(q)))) & (forall s (forall r (  IsNotWearingShirt(r) ->   IsOnBench(s)))) & (forall u (forall t (  IsOnBench(t) ->   IsNotWearingShirt(u)))) & (forall w (forall v (  IsLayingOnBench(v) -> Relaxes(w)))) & (forall x (forall y (Relaxes(x) ->   IsLayingOnBench(y)))) & (forall z (  IsLayingOnBench(z) ->   IsOnBench({))) & (  IsOnBench(|) ->   IsLayingOnBench(}))) -> (exists d (Relaxes(d) and IsOnBench(d)))
1,,"A man in a red shirt is being filmed by another man on a sports field with a huge audience of people watching and cheering. Therefore, the man is being filmed by another man."," ""A man in a red shirt is being filmed by another man on a sports field with a huge audience of people watching and cheering."""," ""The man is being filmed by another man.""","IsInRedShirt(b),  IsFilming(a),  IsOnSportsField(c),  IsWatching(d),  IsCheering(d)","IsBeingFilmed(e),  IsFilming(a)","[('IsBeingFilmed(e)', 'IsInRedShirt(b)'), ('  IsFilming(a)', 'IsInRedShirt(b)'), ('IsBeingFilmed(e)', '  IsFilming(a)'), ('IsBeingFilmed(e)', '  IsOnSportsField(c)'), ('  IsWatching(d)', 'IsBeingFilmed(e)'), ('IsBeingFilmed(e)', '  IsWatching(d)'), ('  IsFilming(a)', '  IsWatching(d)'), ('  IsCheering(d)', 'IsBeingFilmed(e)'), ('IsBeingFilmed(e)', '  IsCheering(d)')]","[(' another man', ' another man')]","[(' A man in a red shirt', ' another man'), (' The man', ' another man')]",IsInRedShirt(b) and IsFilming(a) and IsOnSportsField(c) and IsWatching(d) and IsCheering(d),IsFilming(a) and IsBeingFilmed(e),(forall a (exists b (IsInRedShirt(b) and IsFilming(a) and IsOnSportsField(c) and IsWatching(d) and IsCheering(d))) & (forall e (forall b (IsBeingFilmed(e) -> IsInRedShirt(b)))) & (forall a (forall b (  IsFilming(a) -> IsInRedShirt(b)))) & (forall a (forall e (IsBeingFilmed(e) ->   IsFilming(a)))) & (forall e (forall c (IsBeingFilmed(e) ->   IsOnSportsField(c)))) & (forall d (forall e (  IsWatching(d) -> IsBeingFilmed(e)))) & (forall d (forall e (IsBeingFilmed(e) ->   IsWatching(d)))) & (forall a (forall d (  IsFilming(a) ->   IsWatching(d)))) & (forall d (forall e (  IsCheering(d) -> IsBeingFilmed(e)))) & (forall d (forall e (IsBeingFilmed(e) ->   IsCheering(d))))) -> (exists e (forall a (IsFilming(a) and IsBeingFilmed(e)))),(exists a (exists d (exists b (exists c (IsInRedShirt(b) and IsFilming(a) and IsOnSportsField(c) and IsWatching(d) and IsCheering(d))))) & (forall f (forall g (IsBeingFilmed(f) -> IsInRedShirt(g)))) & (forall i (forall h (  IsFilming(h) -> IsInRedShirt(i)))) & (forall j (forall k (IsBeingFilmed(j) ->   IsFilming(k)))) & (forall l (forall m (IsBeingFilmed(l) ->   IsOnSportsField(m)))) & (forall n (forall o (  IsWatching(n) -> IsBeingFilmed(o)))) & (forall q (forall p (IsBeingFilmed(p) ->   IsWatching(q)))) & (forall s (forall r (  IsFilming(r) ->   IsWatching(s)))) & (forall u (forall t (  IsCheering(t) -> IsBeingFilmed(u)))) & (forall w (forall v (IsBeingFilmed(v) ->   IsCheering(w))))) -> (exists a (exists e (IsFilming(a) and IsBeingFilmed(e))))
1,,"A man in a suit cheering in a library in front of children. Thus, a guy is cheering near some children.", A man in a suit is cheering in a library in front of children.  , A guy is cheering near some children.,"IsInSuit(b),  IsCheering(b),  IsInLibrary(b),  IsInFrontOfChildren(b)","IsCheering(d),  IsNearChildren(d)","[('IsInSuit(b)', 'IsCheering(d)'), ('  IsNearChildren(d)', 'IsInSuit(b)'), ('  IsCheering(b)', '  IsNearChildren(d)'), ('  IsNearChildren(d)', '  IsCheering(b)'), ('  IsInLibrary(b)', 'IsCheering(d)'), ('IsCheering(d)', '  IsInLibrary(b)'), ('  IsInLibrary(b)', '  IsNearChildren(d)'), ('  IsNearChildren(d)', '  IsInLibrary(b)'), ('  IsInFrontOfChildren(b)', 'IsCheering(d)'), ('IsCheering(d)', '  IsInFrontOfChildren(b)'), ('  IsInFrontOfChildren(b)', '  IsNearChildren(d)'), ('  IsNearChildren(d)', '  IsInFrontOfChildren(b)')]","[(' children', ' children')]","[(' Guy', ' A man in a suit')]",IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b),IsCheering(d) and IsNearChildren(d),(forall b (IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b)) & (forall d (forall b (IsInSuit(b) -> IsCheering(d)))) & (forall d (forall b (  IsNearChildren(d) -> IsInSuit(b)))) & (forall d (forall b (  IsCheering(b) ->   IsNearChildren(d)))) & (forall d (forall b (  IsNearChildren(d) ->   IsCheering(b)))) & (forall d (forall b (  IsInLibrary(b) -> IsCheering(d)))) & (forall d (forall b (IsCheering(d) ->   IsInLibrary(b)))) & (forall d (forall b (  IsInLibrary(b) ->   IsNearChildren(d)))) & (forall d (forall b (  IsNearChildren(d) ->   IsInLibrary(b)))) & (forall d (forall b (  IsInFrontOfChildren(b) -> IsCheering(d)))) & (forall d (forall b (IsCheering(d) ->   IsInFrontOfChildren(b)))) & (forall d (forall b (  IsInFrontOfChildren(b) ->   IsNearChildren(d)))) & (forall d (forall b (  IsNearChildren(d) ->   IsInFrontOfChildren(b))))) -> (exists d (IsCheering(d) and IsNearChildren(d))),(exists b (IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b)) & (forall f (forall e (IsInSuit(e) -> IsCheering(f)))) & (forall g (forall h (  IsNearChildren(g) -> IsInSuit(h)))) & (forall i (forall j (  IsCheering(i) ->   IsNearChildren(j)))) & (forall l (forall k (  IsNearChildren(k) ->   IsCheering(l)))) & (forall n (forall m (  IsInLibrary(m) -> IsCheering(n)))) & (forall o (forall p (IsCheering(o) ->   IsInLibrary(p)))) & (forall q (forall r (  IsInLibrary(q) ->   IsNearChildren(r)))) & (forall s (forall t (  IsNearChildren(s) ->   IsInLibrary(t)))) & (forall u (forall v (  IsInFrontOfChildren(u) -> IsCheering(v)))) & (forall x (forall w (IsCheering(w) ->   IsInFrontOfChildren(x)))) & (forall z (forall y (  IsInFrontOfChildren(y) ->   IsNearChildren(z)))) & (  IsNearChildren({) ->   IsInFrontOfChildren(|))) -> (exists d (IsCheering(d) and IsNearChildren(d)))
1,,A man in suit waiting for the green light. This implies that a man waits at a red light., A man in a suit waits for the green light.  , A man waits at a red light.,"IsInSuit(a),  WaitsForGreenLight(a)",WaitsAtRedLight(c),"[('IsInSuit(a)', 'WaitsAtRedLight(c)'), ('WaitsAtRedLight(c)', 'IsInSuit(a)'), ('  WaitsForGreenLight(a)', 'WaitsAtRedLight(c)'), ('WaitsAtRedLight(c)', '  WaitsForGreenLight(a)')]",[],"[(' A man in a suit', ' A man')]",IsInSuit(a) and WaitsForGreenLight(a),WaitsAtRedLight(c),(exists a (IsInSuit(a) and WaitsForGreenLight(a)) & (forall a (forall c (IsInSuit(a) -> WaitsAtRedLight(c)))) & (forall a (forall c (WaitsAtRedLight(c) -> IsInSuit(a)))) & (forall a (forall c (  WaitsForGreenLight(a) -> WaitsAtRedLight(c)))) & (forall a (forall c (WaitsAtRedLight(c) ->   WaitsForGreenLight(a))))) -> (forall c (WaitsAtRedLight(c))),(exists a (IsInSuit(a) and WaitsForGreenLight(a)) & (forall f (forall e (IsInSuit(e) -> WaitsAtRedLight(f)))) & (forall g (forall h (WaitsAtRedLight(g) -> IsInSuit(h)))) & (forall i (forall j (  WaitsForGreenLight(i) -> WaitsAtRedLight(j)))) & (forall l (forall k (WaitsAtRedLight(k) ->   WaitsForGreenLight(l))))) -> (exists c (WaitsAtRedLight(c)))
1,,"A man smokes while leaning against a pillar, which has a ""missing person"" flier posted on it. Thus, a guy smoking against a wall with a flier on it."," ""A man smokes while leaning against a pillar with a missing person flier posted on it.""  "," ""A guy is smoking against a wall with a flier on it.""","Smokes(a),  LeansAgainst(a, b),  HasFlierPosted(b, c)","Smoking(d),  Against(d, e),  HasFlierOn(e, f)","[('Smokes(a)', 'Smoking(d)'), ('Smoking(d)', 'Smokes(a)'), ('Smokes(a)', '  Against(d, e)'), ('Smokes(a)', '  HasFlierOn(e, f)'), ('  LeansAgainst(a, b)', 'Smoking(d)'), ('Smoking(d)', '  LeansAgainst(a, b)'), ('  LeansAgainst(a, b)', '  Against(d, e)'), ('  LeansAgainst(a, b)', '  HasFlierOn(e, f)'), ('  HasFlierOn(e, f)', '  LeansAgainst(a, b)'), ('  HasFlierPosted(b, c)', 'Smoking(d)'), ('Smoking(d)', '  HasFlierPosted(b, c)'), ('  HasFlierPosted(b, c)', '  Against(d, e)'), ('  HasFlierPosted(b, c)', '  HasFlierOn(e, f)'), ('  HasFlierOn(e, f)', '  HasFlierPosted(b, c)')]",[],"[(' A guy', ' A man')]","Smokes(a) and LeansAgainst(a, b) and HasFlierPosted(b, c)","Smoking(d) and Against(d, e) and HasFlierOn(e, f)","(forall a (Smokes(a) and LeansAgainst(a, b) and HasFlierPosted(b, c)) & (forall a (forall d (Smokes(a) -> Smoking(d)))) & (forall a (forall d (Smoking(d) -> Smokes(a)))) & (forall a (forall d (forall e (Smokes(a) ->   Against(d, e))))) & (forall f (forall a (forall e (Smokes(a) ->   HasFlierOn(e, f))))) & (forall a (forall d (forall b (  LeansAgainst(a, b) -> Smoking(d))))) & (forall a (forall d (forall b (Smoking(d) ->   LeansAgainst(a, b))))) & (forall a (forall d (forall b (forall e (  LeansAgainst(a, b) ->   Against(d, e)))))) & (forall f (forall a (forall e (forall b (  LeansAgainst(a, b) ->   HasFlierOn(e, f)))))) & (forall f (forall a (forall e (forall b (  HasFlierOn(e, f) ->   LeansAgainst(a, b)))))) & (forall d (forall b (forall c (  HasFlierPosted(b, c) -> Smoking(d))))) & (forall d (forall b (forall c (Smoking(d) ->   HasFlierPosted(b, c))))) & (forall e (forall d (forall b (forall c (  HasFlierPosted(b, c) ->   Against(d, e)))))) & (forall f (forall e (forall b (forall c (  HasFlierPosted(b, c) ->   HasFlierOn(e, f)))))) & (forall f (forall e (forall b (forall c (  HasFlierOn(e, f) ->   HasFlierPosted(b, c))))))) -> (exists d (Smoking(d) and Against(d, e) and HasFlierOn(e, f)))","(exists a (exists b (exists c (Smokes(a) and LeansAgainst(a, b) and HasFlierPosted(b, c)))) & (forall g (forall h (Smokes(g) -> Smoking(h)))) & (forall i (forall j (Smoking(i) -> Smokes(j)))) & (forall l (forall k (forall m (Smokes(k) ->   Against(l,m))))) & (forall n (forall o (forall p (Smokes(n) ->   HasFlierOn(o,p))))) & (forall q (forall s (forall r (  LeansAgainst(q,r) -> Smoking(s))))) & (forall u (forall v (forall t (Smoking(t) ->   LeansAgainst(u,v))))) & (forall z (forall x (forall y (forall w (  LeansAgainst(w,x) ->   Against(y,z)))))) & (  LeansAgainst({,|) ->   HasFlierOn(},~)) & (  HasFlierOn(,) ->   LeansAgainst(,)) & (  HasFlierPosted(,) -> Smoking()) & (Smoking() ->   HasFlierPosted(,)) & (  HasFlierPosted(,) ->   Against(,)) & (  HasFlierPosted(,) ->   HasFlierOn(,)) & (  HasFlierOn(,) ->   HasFlierPosted(,))) -> (exists f (exists d (exists e (Smoking(d) and Against(d, e) and HasFlierOn(e, f)))))"
1,,"A woman is standing at a podium. Thus, a person is at a podium."," ""A woman is standing at a podium.""  "," ""A person is at a podium.""","IsStandingAt(b, a)","IsAt(c, a)","[('IsAt(c, a)', 'IsStandingAt(b, a)')]","[(' podium', ' podium')]",[],"IsStandingAt(b, a)","IsAt(c, a)","(IsStandingAt(b, a) & (forall a (forall b (forall c (IsAt(c, a) -> IsStandingAt(b, a)))))) -> (IsAt(c, a))","(exists a (exists b (IsStandingAt(b, a))) & (forall f (forall d (forall e (IsAt(d,e) -> IsStandingAt(f,e)))))) -> (exists a (exists c (IsAt(c, a))))"
1,,Four boys are about to be hit by an approaching wave. It follows that a wave is about hit some boys.," ""Four boys are about to be hit by an approaching wave.""  "," ""A wave is about to hit some boys.""","IsHitByWave(a),  IsApproaching(b)","IsAboutToHit(c, d)","[('IsHitByWave(a)', 'IsAboutToHit(c, d)'), ('IsAboutToHit(c, d)', '  IsApproaching(b)')]",[],"[(' Four boys', ' some boys'), (' wave.', ' A wave'), (' wave.', ' some boys')]",IsApproaching(b) and IsHitByWave(a),"IsAboutToHit(c, d)","(exists b (exists a (IsApproaching(b) and IsHitByWave(a))) & (forall a (forall d (forall c (IsHitByWave(a) -> IsAboutToHit(c, d))))) & (forall d (forall b (forall c (IsAboutToHit(c, d) ->   IsApproaching(b)))))) -> (forall c (forall d (IsAboutToHit(c, d))))","(exists a (exists b (IsApproaching(b) and IsHitByWave(a))) & (forall f (forall g (forall e (IsHitByWave(e) -> IsAboutToHit(f,g))))) & (forall i (forall j (forall h (IsAboutToHit(h,i) ->   IsApproaching(j)))))) -> (exists d (exists c (IsAboutToHit(c, d))))"
1,,"people are sitting on a bench in front of buildings. Thus, some people are seated on a bench outside."," ""People are sitting on a bench in front of buildings."""," ""Some people are seated on a bench outside.""","IsSittingOn(a, b),  IsInFrontOf(a, c)","IsSeatedOn(d, e),  IsOutside(d)","[('IsSittingOn(a, b)', 'IsSeatedOn(d, e)'), ('IsSeatedOn(d, e)', 'IsSittingOn(a, b)'), ('IsSittingOn(a, b)', '  IsOutside(d)'), ('  IsOutside(d)', 'IsSittingOn(a, b)'), ('IsSeatedOn(d, e)', '  IsInFrontOf(a, c)'), ('  IsOutside(d)', '  IsInFrontOf(a, c)')]",[],"[(' People', ' Some people'), (' Some people', ' bench')]","IsSittingOn(a, b) and IsInFrontOf(a, c)","IsSeatedOn(d, e) and IsOutside(d)","(forall b (exists a (IsSittingOn(a, b) and IsInFrontOf(a, c))) & (forall a (forall d (forall b (forall e (IsSittingOn(a, b) -> IsSeatedOn(d, e)))))) & (forall a (forall d (forall b (forall e (IsSeatedOn(d, e) -> IsSittingOn(a, b)))))) & (forall a (forall d (forall b (IsSittingOn(a, b) ->   IsOutside(d))))) & (forall a (forall d (forall b (  IsOutside(d) -> IsSittingOn(a, b))))) & (forall a (forall d (forall c (forall e (IsSeatedOn(d, e) ->   IsInFrontOf(a, c)))))) & (forall a (forall d (forall c (  IsOutside(d) ->   IsInFrontOf(a, c)))))) -> (forall d (IsSeatedOn(d, e) and IsOutside(d)))","(exists a (exists b (exists c (IsSittingOn(a, b) and IsInFrontOf(a, c)))) & (forall f (forall g (forall i (forall h (IsSittingOn(f,g) -> IsSeatedOn(h,i)))))) & (forall j (forall l (forall k (forall m (IsSeatedOn(j,k) -> IsSittingOn(l,m)))))) & (forall n (forall o (forall p (IsSittingOn(n,o) ->   IsOutside(p))))) & (forall q (forall s (forall r (  IsOutside(q) -> IsSittingOn(r,s))))) & (forall u (forall v (forall w (forall t (IsSeatedOn(t,u) ->   IsInFrontOf(v,w)))))) & (forall z (forall x (forall y (  IsOutside(x) ->   IsInFrontOf(y,z)))))) -> (exists d (exists e (IsSeatedOn(d, e) and IsOutside(d))))"
1,,The skateboarder is jumping his board in the air while another skateboarder watches. This implies that a skateboarder is jumping.," ""A skateboarder is jumping his board in the air while another skateboarder watches.""  "," ""A skateboarder is jumping.""","IsJumping(a),  IsWatching(d, a)",IsJumping(e),"[('IsJumping(e)', '  IsWatching(d, a)')]",[],"[(' A skateboarder', ' Skateboarder'), (' A skateboarder', ' another skateboarder')]","IsJumping(a) and IsWatching(d, a)",IsJumping(e),"(forall d (forall a (IsJumping(a) and IsWatching(d, a))) & (forall d (forall a (forall e (IsJumping(e) ->   IsWatching(d, a)))))) -> (exists e (IsJumping(e)))","(exists a (exists d (IsJumping(a) and IsWatching(d, a))) & (forall f (forall g (forall h (IsJumping(f) ->   IsWatching(g,h)))))) -> (exists e (IsJumping(e)))"
1,,"A man wearing a black hat and coat makes a face with a crowd behind him. As a consequence, a guy is standing near a crowd of people.", A man wearing a black hat and coat makes a face with a crowd behind him., A guy is standing near a crowd of people.,"MakesFace(a),  IsInBlackHat(a),  IsInCoat(a),  HasCrowdBehind(a)","IsStandingNear(g, h)","[('  IsInCoat(a)', 'IsStandingNear(g, h)'), ('  HasCrowdBehind(a)', 'IsStandingNear(g, h)')]",[],"[(' A guy', ' A man'), (' black hat', ' a crowd of people'), (' coat', ' a crowd of people'), (' a face', ' a crowd of people'), (' a crowd', ' a crowd of people'), (' him', ' A guy'), (' him', ' a crowd of people')]",IsInBlackHat(a) and IsInCoat(a) and MakesFace(a) and HasCrowdBehind(a),"IsStandingNear(g, h)","(forall a (IsInBlackHat(a) and IsInCoat(a) and MakesFace(a) and HasCrowdBehind(a)) & (forall g (forall a (forall h (  IsInCoat(a) -> IsStandingNear(g, h))))) & (forall g (forall a (forall h (  HasCrowdBehind(a) -> IsStandingNear(g, h)))))) -> (exists g (IsStandingNear(g, h)))","(exists a (IsInBlackHat(a) and IsInCoat(a) and MakesFace(a) and HasCrowdBehind(a)) & (forall i (forall j (forall k (  IsInCoat(i) -> IsStandingNear(j,k))))) & (forall n (forall l (forall m (  HasCrowdBehind(l) -> IsStandingNear(m,n)))))) -> (exists g (exists h (IsStandingNear(g, h))))"
1,,"A group of soldiers march in a parade. Thus, a group of people march in a parade.", A group of soldiers march in a parade.  , A group of people march in a parade.,MarchesInParade(b),MarchesInParade(c),[],"[(' parade', ' parade')]","[(' parade', ' A group of people')]",MarchesInParade(b),MarchesInParade(c),(MarchesInParade(b)) -> (MarchesInParade(c)),(exists b (MarchesInParade(b))) -> (exists c (MarchesInParade(c)))
1,,The 3 dogs are cruising down the street. This implies that three dogs together.," ""The 3 dogs are cruising down the street.""  "," ""Three dogs are together.""","IsCruising(a),  IsOnStreet(a)",IsTogether(c),"[('IsCruising(a)', 'IsTogether(c)'), ('IsTogether(c)', 'IsCruising(a)'), ('  IsOnStreet(a)', 'IsTogether(c)'), ('IsTogether(c)', '  IsOnStreet(a)')]",[],"[(' Three dogs', ' The 3 dogs')]",IsCruising(a) and IsOnStreet(a),IsTogether(c),(forall a (IsCruising(a) and IsOnStreet(a)) & (forall a (forall c (IsCruising(a) -> IsTogether(c)))) & (forall a (forall c (IsTogether(c) -> IsCruising(a)))) & (forall a (forall c (  IsOnStreet(a) -> IsTogether(c)))) & (forall a (forall c (IsTogether(c) ->   IsOnStreet(a))))) -> (exists c (IsTogether(c))),(exists a (IsCruising(a) and IsOnStreet(a)) & (forall d (forall e (IsCruising(d) -> IsTogether(e)))) & (forall f (forall g (IsTogether(f) -> IsCruising(g)))) & (forall i (forall h (  IsOnStreet(h) -> IsTogether(i)))) & (forall j (forall k (IsTogether(j) ->   IsOnStreet(k))))) -> (exists c (IsTogether(c)))
1,,"The gentleman is speaking while the others are listening. As a consequence, the man is being given respect."," ""The man is speaking while the others are listening.""  "," ""The man is being given respect.""","IsSpeaking(a),  AreListening(b)",IsGivenRespect(a),"[('IsSpeaking(a)', 'IsGivenRespect(a)'), ('IsGivenRespect(a)', 'IsSpeaking(a)'), ('  AreListening(b)', 'IsGivenRespect(a)'), ('IsGivenRespect(a)', '  AreListening(b)')]","[(' The man', ' The man')]",[],IsSpeaking(a) and AreListening(b),IsGivenRespect(a),(IsSpeaking(a) and AreListening(b) & (forall a (IsSpeaking(a) -> IsGivenRespect(a))) & (forall a (IsGivenRespect(a) -> IsSpeaking(a))) & (forall a (forall b (  AreListening(b) -> IsGivenRespect(a)))) & (forall a (forall b (IsGivenRespect(a) ->   AreListening(b))))) -> (IsGivenRespect(a)),(exists a (exists b (IsSpeaking(a) and AreListening(b))) & (forall c (IsSpeaking(c) -> IsGivenRespect(c))) & (forall d (IsGivenRespect(d) -> IsSpeaking(d))) & (forall f (forall e (  AreListening(e) -> IsGivenRespect(f)))) & (forall g (forall h (IsGivenRespect(g) ->   AreListening(h))))) -> (exists a (IsGivenRespect(a)))
1,,"One child in black is walking down a hill covered in white snow while 2 children are on their knees. Thus, there are three children in this picture, and they are all outside.", Three children are outside in the picture.  , There are three children outside.,IsOutside(a),IsOutside(a),[],"[(' Three children', ' Three children')]","[(' Three children', ' outside'), (' Three children', ' the picture'), (' the picture', ' outside')]",IsOutside(a),IsOutside(a),(IsOutside(a)) -> (IsOutside(a)),(exists a (IsOutside(a))) -> (exists a (IsOutside(a)))
1,,A group of people are sight seeing and taking pictures. It follows that there are a group of people.," ""A group of people are sightseeing and taking pictures.""  "," ""There are a group of people.""","IsSightseeing(a),  IsTakingPictures(a)",IsGroupOfPeople(a),"[('IsSightseeing(a)', 'IsGroupOfPeople(a)'), ('IsGroupOfPeople(a)', 'IsSightseeing(a)'), ('  IsTakingPictures(a)', 'IsGroupOfPeople(a)'), ('IsGroupOfPeople(a)', '  IsTakingPictures(a)')]","[(' A group of people', ' A group of people')]",[],IsSightseeing(a) and IsTakingPictures(a),IsGroupOfPeople(a),(IsSightseeing(a) and IsTakingPictures(a) & (forall a (IsSightseeing(a) -> IsGroupOfPeople(a))) & (forall a (IsGroupOfPeople(a) -> IsSightseeing(a))) & (forall a (  IsTakingPictures(a) -> IsGroupOfPeople(a))) & (forall a (IsGroupOfPeople(a) ->   IsTakingPictures(a)))) -> (IsGroupOfPeople(a)),(exists a (IsSightseeing(a) and IsTakingPictures(a)) & (forall c (IsSightseeing(c) -> IsGroupOfPeople(c))) & (forall d (IsGroupOfPeople(d) -> IsSightseeing(d))) & (forall e (  IsTakingPictures(e) -> IsGroupOfPeople(e))) & (forall f (IsGroupOfPeople(f) ->   IsTakingPictures(f)))) -> (exists a (IsGroupOfPeople(a)))
1,,"Army men grilling a lot of meat while his troop looks on. Hence, some of the people here have been in the armed forces."," ""The troop is looking on while an army man is grilling a lot of meat.""  "," ""Some of the people here have been in the armed forces.""","LookingOn(a),  GrillingMeat(b)",HaveBeenInArmedForces(a),[],"[(' The troop', ' Some of the people here'), (' meat', ' Some of the people here')]","[(' The troop', ' armed forces'), (' army man', ' armed forces')]",LookingOn(a) and GrillingMeat(b),HaveBeenInArmedForces(a),(LookingOn(a) and GrillingMeat(b)) -> (HaveBeenInArmedForces(a)),(exists a (exists b (LookingOn(a) and GrillingMeat(b)))) -> (exists a (HaveBeenInArmedForces(a)))
1,,"The basketball player in red is challenging the player in white for the ball. Consequently, people are playing basketball.", The basketball player in red is challenging the player in white for the ball.  , People are playing basketball.,"IsInRed(a),  IsChallenging(a, b),  IsInWhite(b),  IsForTheBall(a, c)",IsPlayingBasketball(d),"[('IsPlayingBasketball(d)', 'IsInRed(a)'), ('  IsChallenging(a, b)', 'IsPlayingBasketball(d)'), ('IsPlayingBasketball(d)', '  IsChallenging(a, b)'), ('IsPlayingBasketball(d)', '  IsInWhite(b)'), ('IsPlayingBasketball(d)', '  IsForTheBall(a, c)')]",[],"[(' the ball', ' basketball')]","IsInRed(a) and IsChallenging(a, b) and IsInWhite(b) and IsForTheBall(a, c)",IsPlayingBasketball(d),"(IsInRed(a) and IsChallenging(a, b) and IsInWhite(b) and IsForTheBall(a, c) & (forall a (forall d (IsPlayingBasketball(d) -> IsInRed(a)))) & (forall a (forall d (forall b (  IsChallenging(a, b) -> IsPlayingBasketball(d))))) & (forall a (forall d (forall b (IsPlayingBasketball(d) ->   IsChallenging(a, b))))) & (forall d (forall b (IsPlayingBasketball(d) ->   IsInWhite(b)))) & (forall a (forall d (forall c (IsPlayingBasketball(d) ->   IsForTheBall(a, c)))))) -> (IsPlayingBasketball(d))","(exists a (exists b (exists c (IsInRed(a) and IsChallenging(a, b) and IsInWhite(b) and IsForTheBall(a, c)))) & (forall f (forall g (IsPlayingBasketball(f) -> IsInRed(g)))) & (forall i (forall j (forall h (  IsChallenging(h,i) -> IsPlayingBasketball(j))))) & (forall l (forall k (forall m (IsPlayingBasketball(k) ->   IsChallenging(l,m))))) & (forall n (forall o (IsPlayingBasketball(n) ->   IsInWhite(o)))) & (forall q (forall r (forall p (IsPlayingBasketball(p) ->   IsForTheBall(q,r)))))) -> (exists d (IsPlayingBasketball(d)))"
1,,"A older man with gray hair wearing a gray suit next to a green and yellow taxi. Thus, a older man with gray hair wearing a gray suit."," ""An older man with gray hair is wearing a gray suit next to a green and yellow taxi.""  "," ""An older man with gray hair is wearing a gray suit.""","IsOlder(b),  HasGrayHair(b),  IsWearingGraySuit(b),  IsNextToTaxi(b)","IsOlder(d),  HasGrayHair(d),  IsWearingGraySuit(d)","[('  HasGrayHair(d)', 'IsOlder(b)'), ('IsOlder(b)', '  IsWearingGraySuit(d)'), ('  IsWearingGraySuit(d)', 'IsOlder(b)'), ('  HasGrayHair(b)', 'IsOlder(d)'), ('IsOlder(d)', '  HasGrayHair(b)'), ('  HasGrayHair(b)', '  IsWearingGraySuit(d)'), ('  IsWearingGraySuit(d)', '  HasGrayHair(b)'), ('  IsWearingGraySuit(b)', 'IsOlder(d)'), ('IsOlder(d)', '  IsWearingGraySuit(b)'), ('  IsWearingGraySuit(b)', '  HasGrayHair(d)'), ('  HasGrayHair(d)', '  IsWearingGraySuit(b)'), ('  IsNextToTaxi(b)', '  HasGrayHair(d)'), ('  HasGrayHair(d)', '  IsNextToTaxi(b)'), ('  IsNextToTaxi(b)', '  IsWearingGraySuit(d)'), ('  IsWearingGraySuit(d)', '  IsNextToTaxi(b)')]","[(' gray suit', ' gray suit')]","[(' Older man with gray hair', ' Older man'), (' gray hair', ' Older man with gray hair'), (' gray suit', ' Older man with gray hair'), (' gray suit', ' Older man')]",IsOlder(b) and HasGrayHair(b) and IsWearingGraySuit(b) and IsNextToTaxi(b),IsOlder(d) and HasGrayHair(d) and IsWearingGraySuit(d),(exists b (IsOlder(b) and HasGrayHair(b) and IsWearingGraySuit(b) and IsNextToTaxi(b)) & (forall d (forall b (  HasGrayHair(d) -> IsOlder(b)))) & (forall d (forall b (IsOlder(b) ->   IsWearingGraySuit(d)))) & (forall d (forall b (  IsWearingGraySuit(d) -> IsOlder(b)))) & (forall d (forall b (  HasGrayHair(b) -> IsOlder(d)))) & (forall d (forall b (IsOlder(d) ->   HasGrayHair(b)))) & (forall d (forall b (  HasGrayHair(b) ->   IsWearingGraySuit(d)))) & (forall d (forall b (  IsWearingGraySuit(d) ->   HasGrayHair(b)))) & (forall d (forall b (  IsWearingGraySuit(b) -> IsOlder(d)))) & (forall d (forall b (IsOlder(d) ->   IsWearingGraySuit(b)))) & (forall d (forall b (  IsWearingGraySuit(b) ->   HasGrayHair(d)))) & (forall d (forall b (  HasGrayHair(d) ->   IsWearingGraySuit(b)))) & (forall d (forall b (  IsNextToTaxi(b) ->   HasGrayHair(d)))) & (forall d (forall b (  HasGrayHair(d) ->   IsNextToTaxi(b)))) & (forall d (forall b (  IsNextToTaxi(b) ->   IsWearingGraySuit(d)))) & (forall d (forall b (  IsWearingGraySuit(d) ->   IsNextToTaxi(b))))) -> (forall d (IsOlder(d) and HasGrayHair(d) and IsWearingGraySuit(d))),(exists b (IsOlder(b) and HasGrayHair(b) and IsWearingGraySuit(b) and IsNextToTaxi(b)) & (forall f (forall g (  HasGrayHair(f) -> IsOlder(g)))) & (forall i (forall h (IsOlder(h) ->   IsWearingGraySuit(i)))) & (forall j (forall k (  IsWearingGraySuit(j) -> IsOlder(k)))) & (forall l (forall m (  HasGrayHair(l) -> IsOlder(m)))) & (forall n (forall o (IsOlder(n) ->   HasGrayHair(o)))) & (forall q (forall p (  HasGrayHair(p) ->   IsWearingGraySuit(q)))) & (forall s (forall r (  IsWearingGraySuit(r) ->   HasGrayHair(s)))) & (forall u (forall t (  IsWearingGraySuit(t) -> IsOlder(u)))) & (forall w (forall v (IsOlder(v) ->   IsWearingGraySuit(w)))) & (forall x (forall y (  IsWearingGraySuit(x) ->   HasGrayHair(y)))) & (forall z (  HasGrayHair(z) ->   IsWearingGraySuit({))) & (  IsNextToTaxi(|) ->   HasGrayHair(})) & (  HasGrayHair(~) ->   IsNextToTaxi()) & (  IsNextToTaxi() ->   IsWearingGraySuit()) & (  IsWearingGraySuit() ->   IsNextToTaxi())) -> (exists d (IsOlder(d) and HasGrayHair(d) and IsWearingGraySuit(d)))
1,,"A man drops something, reaching for it while a woman in a beige blazer discusses an important topic. Hence, a woman is talking while a man is reaching for something."," ""A woman in a beige blazer discusses an important topic while a man reaches for something.""  "," ""A woman is talking while a man is reaching for something.""","IsInBeigeBlazer(b),  DiscussesTopic(b,c),  ReachesFor(a)","IsTalking(d),  ReachingFor(a)","[('IsTalking(d)', 'IsInBeigeBlazer(b)'), ('IsInBeigeBlazer(b)', '  ReachingFor(a)'), ('  ReachingFor(a)', 'IsInBeigeBlazer(b)'), ('  DiscussesTopic(b,c)', 'IsTalking(d)'), ('IsTalking(d)', '  DiscussesTopic(b,c)'), ('  DiscussesTopic(b,c)', '  ReachingFor(a)'), ('  ReachingFor(a)', '  DiscussesTopic(b,c)'), ('IsTalking(d)', '  ReachesFor(a)'), ('  ReachesFor(a)', '  ReachingFor(a)'), ('  ReachingFor(a)', '  ReachesFor(a)')]","[(' a man', ' A man'), (' a man', ' something'), (' something', ' something')]","[(' A woman in a beige blazer', ' A woman'), (' something', ' an important topic'), (' A woman', ' something')]","(IsInBeigeBlazer(b) and DiscussesTopic(b,c)) and ReachesFor(a)",IsTalking(d) and ReachingFor(a),"(forall a (forall c (exists b ((IsInBeigeBlazer(b) and DiscussesTopic(b,c)) and ReachesFor(a)))) & (forall d (forall b (IsTalking(d) -> IsInBeigeBlazer(b)))) & (forall a (forall b (IsInBeigeBlazer(b) ->   ReachingFor(a)))) & (forall a (forall b (  ReachingFor(a) -> IsInBeigeBlazer(b)))) & (forall d (forall b (forall c (  DiscussesTopic(b,c) -> IsTalking(d))))) & (forall d (forall b (forall c (IsTalking(d) ->   DiscussesTopic(b,c))))) & (forall a (forall b (forall c (  DiscussesTopic(b,c) ->   ReachingFor(a))))) & (forall a (forall b (forall c (  ReachingFor(a) ->   DiscussesTopic(b,c))))) & (forall a (forall d (IsTalking(d) ->   ReachesFor(a)))) & (forall a (  ReachesFor(a) ->   ReachingFor(a))) & (forall a (  ReachingFor(a) ->   ReachesFor(a)))) -> (exists a (forall d (IsTalking(d) and ReachingFor(a))))","(exists a (exists b (exists c ((IsInBeigeBlazer(b) and DiscussesTopic(b,c)) and ReachesFor(a)))) & (forall g (forall h (IsTalking(g) -> IsInBeigeBlazer(h)))) & (forall i (forall j (IsInBeigeBlazer(i) ->   ReachingFor(j)))) & (forall l (forall k (  ReachingFor(k) -> IsInBeigeBlazer(l)))) & (forall n (forall o (forall m (  DiscussesTopic(m,n) -> IsTalking(o))))) & (forall q (forall r (forall p (IsTalking(p) ->   DiscussesTopic(q,r))))) & (forall s (forall u (forall t (  DiscussesTopic(s,t) ->   ReachingFor(u))))) & (forall x (forall w (forall v (  ReachingFor(v) ->   DiscussesTopic(w,x))))) & (forall z (forall y (IsTalking(y) ->   ReachesFor(z)))) & (  ReachesFor({) ->   ReachingFor({)) & (  ReachingFor(|) ->   ReachesFor(|))) -> (exists a (exists d (IsTalking(d) and ReachingFor(a))))"
1,,A crowd watching a skateboarder. This implies that a person is skateboarding.," ""A person is skateboarding.""  "," ""A crowd is watching a skateboarder.""",IsSkateboarding(a),"IsWatching(b, c)","[('IsSkateboarding(a)', 'IsWatching(b, c)'), ('IsWatching(b, c)', 'IsSkateboarding(a)')]",[],[],IsSkateboarding(a),"IsWatching(b, c)","(IsSkateboarding(a) & (forall a (forall b (forall c (IsSkateboarding(a) -> IsWatching(b, c))))) & (forall a (forall b (forall c (IsWatching(b, c) -> IsSkateboarding(a)))))) -> (IsWatching(b, c))","(exists a (IsSkateboarding(a)) & (forall f (forall d (forall e (IsSkateboarding(d) -> IsWatching(e,f))))) & (forall g (forall i (forall h (IsWatching(g,h) -> IsSkateboarding(i)))))) -> (exists b (exists c (IsWatching(b, c))))"
1,,"A male guitar player is vigorously singing a not to a song in a poorly lit room. As a consequence, a man is singing indoors."," ""A male guitar player is singing a note to a song in a poorly lit room.""  "," ""A man is singing indoors.""","IsMale(a),  PlaysGuitar(a),  IsSinging(a),  IsNoteOf(b, c),  IsInRoom(c, d),  IsPoorlyLit(d)","IsMan(e),  IsSinging(e),  IsIndoors(e, f)","[('IsMale(a)', 'IsMan(e)'), ('IsMan(e)', 'IsMale(a)'), ('IsMale(a)', '  IsSinging(e)'), ('  IsSinging(e)', 'IsMale(a)'), ('IsMale(a)', '  IsIndoors(e, f)'), ('  IsIndoors(e, f)', 'IsMale(a)'), ('  PlaysGuitar(a)', 'IsMan(e)'), ('IsMan(e)', '  PlaysGuitar(a)'), ('  IsSinging(e)', '  PlaysGuitar(a)'), ('  IsSinging(a)', 'IsMan(e)'), ('IsMan(e)', '  IsSinging(a)'), ('  IsSinging(a)', '  IsIndoors(e, f)'), ('IsMan(e)', '  IsNoteOf(b, c)'), ('  IsSinging(e)', '  IsNoteOf(b, c)'), ('IsMan(e)', '  IsInRoom(c, d)'), ('  IsSinging(e)', '  IsInRoom(c, d)'), ('  IsIndoors(e, f)', '  IsInRoom(c, d)'), ('  IsPoorlyLit(d)', 'IsMan(e)'), ('IsMan(e)', '  IsPoorlyLit(d)'), ('  IsPoorlyLit(d)', '  IsSinging(e)'), ('  IsSinging(e)', '  IsPoorlyLit(d)'), ('  IsPoorlyLit(d)', '  IsIndoors(e, f)'), ('  IsIndoors(e, f)', '  IsPoorlyLit(d)')]",[],[],"IsMale(a) and PlaysGuitar(a) and IsSinging(a) and IsNoteOf(b, c) and IsInRoom(c, d) and IsPoorlyLit(d)","IsMan(e) and IsSinging(e) and IsIndoors(e, f)","(IsMale(a) and PlaysGuitar(a) and IsSinging(a) and IsNoteOf(b, c) and IsInRoom(c, d) and IsPoorlyLit(d) & (forall a (forall e (IsMale(a) -> IsMan(e)))) & (forall a (forall e (IsMan(e) -> IsMale(a)))) & (forall a (forall e (IsMale(a) ->   IsSinging(e)))) & (forall a (forall e (  IsSinging(e) -> IsMale(a)))) & (forall f (forall a (forall e (IsMale(a) ->   IsIndoors(e, f))))) & (forall f (forall a (forall e (  IsIndoors(e, f) -> IsMale(a))))) & (forall a (forall e (  PlaysGuitar(a) -> IsMan(e)))) & (forall a (forall e (IsMan(e) ->   PlaysGuitar(a)))) & (forall a (forall e (  IsSinging(e) ->   PlaysGuitar(a)))) & (forall a (forall e (  IsSinging(a) -> IsMan(e)))) & (forall a (forall e (IsMan(e) ->   IsSinging(a)))) & (forall f (forall a (forall e (  IsSinging(a) ->   IsIndoors(e, f))))) & (forall e (forall b (forall c (IsMan(e) ->   IsNoteOf(b, c))))) & (forall e (forall b (forall c (  IsSinging(e) ->   IsNoteOf(b, c))))) & (forall d (forall e (forall c (IsMan(e) ->   IsInRoom(c, d))))) & (forall d (forall e (forall c (  IsSinging(e) ->   IsInRoom(c, d))))) & (forall f (forall d (forall e (forall c (  IsIndoors(e, f) ->   IsInRoom(c, d)))))) & (forall d (forall e (  IsPoorlyLit(d) -> IsMan(e)))) & (forall d (forall e (IsMan(e) ->   IsPoorlyLit(d)))) & (forall d (forall e (  IsPoorlyLit(d) ->   IsSinging(e)))) & (forall d (forall e (  IsSinging(e) ->   IsPoorlyLit(d)))) & (forall f (forall d (forall e (  IsPoorlyLit(d) ->   IsIndoors(e, f))))) & (forall f (forall d (forall e (  IsIndoors(e, f) ->   IsPoorlyLit(d)))))) -> (IsMan(e) and IsSinging(e) and IsIndoors(e, f))","(exists a (exists d (exists b (exists c (IsMale(a) and PlaysGuitar(a) and IsSinging(a) and IsNoteOf(b, c) and IsInRoom(c, d) and IsPoorlyLit(d))))) & (forall g (forall h (IsMale(g) -> IsMan(h)))) & (forall i (forall j (IsMan(i) -> IsMale(j)))) & (forall l (forall k (IsMale(k) ->   IsSinging(l)))) & (forall n (forall m (  IsSinging(m) -> IsMale(n)))) & (forall q (forall o (forall p (IsMale(o) ->   IsIndoors(p,q))))) & (forall s (forall r (forall t (  IsIndoors(r,s) -> IsMale(t))))) & (forall u (forall v (  PlaysGuitar(u) -> IsMan(v)))) & (forall x (forall w (IsMan(w) ->   PlaysGuitar(x)))) & (forall z (forall y (  IsSinging(y) ->   PlaysGuitar(z)))) & (  IsSinging({) -> IsMan(|)) & (IsMan(}) ->   IsSinging(~)) & (  IsSinging() ->   IsIndoors(,)) & (IsMan() ->   IsNoteOf(,)) & (  IsSinging() ->   IsNoteOf(,)) & (IsMan() ->   IsInRoom(,)) & (  IsSinging() ->   IsInRoom(,)) & (  IsIndoors(,) ->   IsInRoom(,)) & (  IsPoorlyLit() -> IsMan()) & (IsMan() ->   IsPoorlyLit()) & (  IsPoorlyLit() ->   IsSinging()) & (  IsSinging() ->   IsPoorlyLit()) & (  IsPoorlyLit() ->   IsIndoors(,)) & (  IsIndoors(,) ->   IsPoorlyLit())) -> (exists f (exists e (IsMan(e) and IsSinging(e) and IsIndoors(e, f))))"
1,,"The sun breaks through the trees as a child rides a swing. Thus, a child rides a swing in the daytime."," ""The sun breaks through the trees as a child rides a swing.""  "," ""A child rides a swing in the daytime.""","BreaksThrough(c, d),  Rides(a, b)","Rides(a, b),  IsInDaytime(a)","[('BreaksThrough(c, d)', 'Rides(a, b)'), ('Rides(a, b)', 'BreaksThrough(c, d)'), ('BreaksThrough(c, d)', '  IsInDaytime(a)'), ('  IsInDaytime(a)', 'BreaksThrough(c, d)'), ('  Rides(a, b)', '  IsInDaytime(a)'), ('  IsInDaytime(a)', '  Rides(a, b)')]","[(' a child', ' A child'), (' a swing', ' a swing')]",[],"BreaksThrough(c, d) and Rides(a, b)","Rides(a, b) and IsInDaytime(a)","(BreaksThrough(c, d) and Rides(a, b) & (forall a (forall d (forall b (forall c (BreaksThrough(c, d) -> Rides(a, b)))))) & (forall a (forall d (forall b (forall c (Rides(a, b) -> BreaksThrough(c, d)))))) & (forall a (forall d (forall c (BreaksThrough(c, d) ->   IsInDaytime(a))))) & (forall a (forall d (forall c (  IsInDaytime(a) -> BreaksThrough(c, d))))) & (forall a (forall b (  Rides(a, b) ->   IsInDaytime(a)))) & (forall a (forall b (  IsInDaytime(a) ->   Rides(a, b))))) -> (Rides(a, b) and IsInDaytime(a))","(exists a (exists d (exists b (exists c (BreaksThrough(c, d) and Rides(a, b))))) & (forall g (forall i (forall j (forall h (BreaksThrough(g,h) -> Rides(i,j)))))) & (forall n (forall l (forall k (forall m (Rides(k,l) -> BreaksThrough(m,n)))))) & (forall q (forall o (forall p (BreaksThrough(o,p) ->   IsInDaytime(q))))) & (forall s (forall r (forall t (  IsInDaytime(r) -> BreaksThrough(s,t))))) & (forall u (forall v (  Rides(u,v) ->   IsInDaytime(u)))) & (forall x (forall w (  IsInDaytime(w) ->   Rides(w,x))))) -> (exists a (exists b (Rides(a, b) and IsInDaytime(a))))"
