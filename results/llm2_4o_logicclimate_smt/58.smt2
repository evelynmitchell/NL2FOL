(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IncreaseGradually (BoundSet) Bool)
(declare-fun Warms (BoundSet) Bool)
(declare-fun Creating (BoundSet BoundSet) Bool)
(declare-fun IsSafer (BoundSet) Bool)
(declare-fun IsMorePeaceful (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IncreaseGradually a) (and (IncreaseGradually b) (Warms c)))))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IncreaseGradually f) (Creating g h))))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IncreaseGradually i) (IsSafer j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IncreaseGradually k) (IsMorePeaceful l)))) (and (forall ((m BoundSet)) (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (IncreaseGradually m) (Creating n o))))) (and (forall ((p BoundSet)) (forall ((q BoundSet)) (=> (IncreaseGradually p) (IsSafer q)))) (and (forall ((r BoundSet)) (forall ((s BoundSet)) (=> (IncreaseGradually r) (IsMorePeaceful s)))) (and (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsMorePeaceful t) (IncreaseGradually u)))) (and (forall ((v BoundSet)) (forall ((w BoundSet)) (=> (Warms v) (IsSafer w)))) (forall ((y BoundSet)) (forall ((x BoundSet)) (=> (Warms x) (IsMorePeaceful y))))))))))))) (exists ((d BoundSet)) (exists ((e BoundSet)) (and (Creating d e) (and (IsSafer e) (IsMorePeaceful e))))))))
(check-sat)
(get-model)