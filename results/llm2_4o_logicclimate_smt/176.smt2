(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsSmall (BoundSet) Bool)
(declare-fun IsInRedJacket (BoundSet) Bool)
(declare-fun IsSittingOnShoulders (BoundSet BoundSet) Bool)
(declare-fun IsHoldingHead (BoundSet BoundSet) Bool)
(declare-fun AreOn (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((d BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsSmall b) (and (IsInRedJacket b) (and (IsSittingOnShoulders b d) (IsHoldingHead b a))))))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (AreOn f g) (IsSmall h))))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (AreOn i j) (IsInRedJacket k))))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (AreOn l m) (IsSittingOnShoulders n o)))))) (forall ((p BoundSet)) (forall ((s BoundSet)) (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (IsHoldingHead p q) (AreOn r s)))))))))) (exists ((e BoundSet)) (exists ((a BoundSet)) (AreOn e a))))))
(check-sat)
(get-model)