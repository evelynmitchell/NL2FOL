(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun { () BoundSet)
(declare-fun | () BoundSet)
(declare-fun IsWearingBlackTop (BoundSet) Bool)
(declare-fun IsWearingGlasses (BoundSet) Bool)
(declare-fun IsSpeakingIntoMicrophone (BoundSet) Bool)
(declare-fun IsBlueTipped (BoundSet) Bool)
(declare-fun IsWriting (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsWearingBlackTop a) (and (IsWearingGlasses a) (and (IsSpeakingIntoMicrophone a) (and (IsBlueTipped b) (IsWriting c)))))))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsWearingBlackTop g) (IsSpeakingIntoMicrophone h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsSpeakingIntoMicrophone i) (IsWearingBlackTop j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsWriting k) (IsWearingBlackTop l)))) (and (forall ((m BoundSet)) (forall ((n BoundSet)) (=> (IsSpeakingIntoMicrophone m) (IsWearingGlasses n)))) (and (forall ((p BoundSet)) (forall ((o BoundSet)) (=> (IsWriting o) (IsWearingGlasses p)))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (IsSpeakingIntoMicrophone q) (IsWriting r)))) (and (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (IsWriting s) (IsSpeakingIntoMicrophone t)))) (and (forall ((v BoundSet)) (forall ((u BoundSet)) (=> (IsSpeakingIntoMicrophone u) (IsBlueTipped v)))) (and (forall ((w BoundSet)) (forall ((x BoundSet)) (=> (IsWriting w) (IsBlueTipped x)))) (and (forall ((y BoundSet)) (forall ((z BoundSet)) (=> (IsWriting y) (IsSpeakingIntoMicrophone z)))) (=> (IsSpeakingIntoMicrophone {) (IsWriting |))))))))))))) (exists ((d BoundSet)) (exists ((f BoundSet)) (and (IsSpeakingIntoMicrophone d) (IsWriting f)))))))
(check-sat)
(get-model)