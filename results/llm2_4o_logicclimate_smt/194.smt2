(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInRed (BoundSet) Bool)
(declare-fun IsChallenging (BoundSet BoundSet) Bool)
(declare-fun IsInWhite (BoundSet) Bool)
(declare-fun IsForTheBall (BoundSet BoundSet) Bool)
(declare-fun IsPlayingBasketball (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsInRed a) (and (IsChallenging a b) (and (IsInWhite b) (IsForTheBall a c))))))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (=> (IsPlayingBasketball f) (IsInRed g)))) (and (forall ((h BoundSet)) (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsChallenging h i) (IsPlayingBasketball j))))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((k BoundSet)) (=> (IsPlayingBasketball k) (IsChallenging l m))))) (and (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (IsPlayingBasketball n) (IsInWhite o)))) (and (forall ((p BoundSet)) (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (IsForTheBall p q) (IsPlayingBasketball r))))) (forall ((u BoundSet)) (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (IsPlayingBasketball s) (IsForTheBall t u))))))))))) (exists ((d BoundSet)) (IsPlayingBasketball d)))))
(check-sat)
(get-model)