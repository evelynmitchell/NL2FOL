(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsInCoats (BoundSet) Bool)
(declare-fun IsKissing (BoundSet) Bool)
(declare-fun IsOnSideOfRoad (BoundSet) Bool)
(declare-fun ShowsAppreciationFor (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsInCoats a) (and (IsKissing a) (IsOnSideOfRoad a)))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (forall ((e BoundSet)) (=> (ShowsAppreciationFor e f) (IsInCoats g))))) (and (forall ((h BoundSet)) (forall ((i BoundSet)) (=> (IsKissing h) (IsInCoats i)))) (and (forall ((l BoundSet)) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (ShowsAppreciationFor j k) (IsKissing l))))) (and (forall ((m BoundSet)) (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (ShowsAppreciationFor m n) (IsOnSideOfRoad o))))) (forall ((p BoundSet)) (forall ((q BoundSet)) (=> (IsKissing p) (IsOnSideOfRoad q))))))))) (exists ((c BoundSet)) (exists ((d BoundSet)) (and (ShowsAppreciationFor c d) (IsKissing c)))))))
(check-sat)
(get-model)