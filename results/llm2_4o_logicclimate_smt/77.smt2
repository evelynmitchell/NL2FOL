(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsWorldsLargestExporterOfRedMeat (BoundSet) Bool)
(declare-fun Holds (BoundSet BoundSet) Bool)
(declare-fun SuspendedImportsOfBeefFrom (BoundSet BoundSet) Bool)
(declare-fun HasAbscesses (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (and (IsWorldsLargestExporterOfRedMeat a) (Holds a c)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (IsWorldsLargestExporterOfRedMeat i) (SuspendedImportsOfBeefFrom j k))))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((n BoundSet)) (=> (IsWorldsLargestExporterOfRedMeat l) (HasAbscesses m n))))) (forall ((p BoundSet)) (forall ((r BoundSet)) (forall ((q BoundSet)) (forall ((o BoundSet)) (=> (Holds o p) (SuspendedImportsOfBeefFrom q r))))))))) (exists ((d BoundSet)) (exists ((g BoundSet)) (exists ((h BoundSet)) (exists ((a BoundSet)) (and (SuspendedImportsOfBeefFrom d a) (HasAbscesses g h)))))))))
(check-sat)
(get-model)