(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsExtremePrecipitationEvent (BoundSet) Bool)
(declare-fun IsClimateChangeImpact (BoundSet) Bool)
(declare-fun IsImpactOfGlobalWarming (BoundSet) Bool)
(declare-fun IsAffectedByGlobalWarming (BoundSet) Bool)
(declare-fun IsInSouthCarolina (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((b BoundSet)) (and (IsExtremePrecipitationEvent b) (and (IsClimateChangeImpact c) (IsImpactOfGlobalWarming c))))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsAffectedByGlobalWarming g) (IsClimateChangeImpact h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsInSouthCarolina i) (IsClimateChangeImpact j)))) (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsAffectedByGlobalWarming k) (IsImpactOfGlobalWarming l))))))) (exists ((d BoundSet)) (and (IsAffectedByGlobalWarming d) (IsInSouthCarolina d))))))
(check-sat)
(get-model)