(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun BreaksThrough (BoundSet BoundSet) Bool)
(declare-fun Rides (BoundSet BoundSet) Bool)
(declare-fun IsInDaytime (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (BreaksThrough c d) (Rides a b)))))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (BreaksThrough g h) (Rides i j)))))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((k BoundSet)) (forall ((n BoundSet)) (=> (Rides k l) (BreaksThrough m n)))))) (and (forall ((p BoundSet)) (forall ((q BoundSet)) (forall ((o BoundSet)) (=> (BreaksThrough o p) (IsInDaytime q))))) (and (forall ((t BoundSet)) (forall ((r BoundSet)) (forall ((s BoundSet)) (=> (IsInDaytime r) (BreaksThrough s t))))) (and (forall ((v BoundSet)) (forall ((u BoundSet)) (=> (Rides u v) (IsInDaytime u)))) (forall ((w BoundSet)) (forall ((x BoundSet)) (=> (IsInDaytime w) (Rides w x)))))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (Rides a b) (IsInDaytime a)))))))
(check-sat)
(get-model)