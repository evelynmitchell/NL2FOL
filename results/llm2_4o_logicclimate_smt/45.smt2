(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun CausedBy (BoundSet BoundSet) Bool)
(declare-fun IsComplex (BoundSet) Bool)
(declare-fun IsNaturalPhenomenon (BoundSet) Bool)
(declare-fun EmittedBy (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (and (CausedBy a b) (and (IsComplex b) (IsNaturalPhenomenon b))))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (forall ((i BoundSet)) (=> (IsComplex g) (CausedBy h i))))) (and (forall ((l BoundSet)) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (IsComplex j) (EmittedBy k l))))) (and (forall ((m BoundSet)) (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (IsNaturalPhenomenon m) (CausedBy n o))))) (forall ((p BoundSet)) (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (IsNaturalPhenomenon p) (EmittedBy q r))))))))) (exists ((d BoundSet)) (exists ((f BoundSet)) (exists ((e BoundSet)) (and (EmittedBy d e) (not (CausedBy d f)))))))))
(check-sat)
(get-model)