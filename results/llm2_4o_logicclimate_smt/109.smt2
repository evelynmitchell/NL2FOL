(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsDressedInKilt (BoundSet) Bool)
(declare-fun HasThrownPole (BoundSet) Bool)
(declare-fun IsLongPole (BoundSet) Bool)
(declare-fun Watch (BoundSet BoundSet) Bool)
(declare-fun InKilts (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsDressedInKilt a) (and (HasThrownPole a) (IsLongPole b))))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsDressedInKilt f) (Watch g h))))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (Watch i j) (IsDressedInKilt k))))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (InKilts l) (IsDressedInKilt m)))) (and (forall ((p BoundSet)) (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (Watch n o) (HasThrownPole p))))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (HasThrownPole q) (InKilts r)))) (and (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (InKilts s) (HasThrownPole t)))) (and (forall ((v BoundSet)) (forall ((w BoundSet)) (forall ((u BoundSet)) (=> (Watch u v) (IsLongPole w))))) (forall ((y BoundSet)) (forall ((x BoundSet)) (=> (InKilts x) (IsLongPole y)))))))))))) (exists ((c BoundSet)) (exists ((d BoundSet)) (and (Watch c d) (InKilts d)))))))
(check-sat)
(get-model)