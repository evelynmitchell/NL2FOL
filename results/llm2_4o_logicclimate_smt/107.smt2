(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsGroupOfDogs (BoundSet) Bool)
(declare-fun StandsIn (BoundSet BoundSet) Bool)
(declare-fun IsAnimals (BoundSet) Bool)
(declare-fun IsOutdoors (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsGroupOfDogs a) (StandsIn a b)))) (and (forall ((f BoundSet)) (forall ((e BoundSet)) (=> (IsGroupOfDogs e) (IsAnimals f)))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsAnimals g) (IsGroupOfDogs h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsGroupOfDogs i) (IsOutdoors j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsOutdoors k) (IsGroupOfDogs l)))) (and (forall ((m BoundSet)) (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (StandsIn m n) (IsAnimals o))))) (and (forall ((p BoundSet)) (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (IsAnimals p) (StandsIn q r))))) (and (forall ((u BoundSet)) (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (StandsIn s t) (IsOutdoors u))))) (forall ((v BoundSet)) (forall ((w BoundSet)) (forall ((x BoundSet)) (=> (IsOutdoors v) (StandsIn w x))))))))))))) (exists ((c BoundSet)) (and (IsAnimals c) (IsOutdoors c))))))
(check-sat)
(get-model)