(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun ReleaseMoreCarbonDioxide (BoundSet BoundSet) Bool)
(declare-fun MeantToSave (BoundSet BoundSet BoundSet) Bool)
(declare-fun NeedSupportByCoalFiredGenerators (BoundSet BoundSet) Bool)
(declare-fun IncreaseCarbonDioxideEmissions (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (ReleaseMoreCarbonDioxide a b) (and (MeantToSave a b c) (NeedSupportByCoalFiredGenerators a d))))))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IncreaseCarbonDioxideEmissions g h) (ReleaseMoreCarbonDioxide i j)))))) (and (forall ((l BoundSet)) (forall ((n BoundSet)) (forall ((m BoundSet)) (forall ((o BoundSet)) (forall ((k BoundSet)) (=> (IncreaseCarbonDioxideEmissions k l) (MeantToSave m n o))))))) (forall ((p BoundSet)) (forall ((s BoundSet)) (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (NeedSupportByCoalFiredGenerators p q) (IncreaseCarbonDioxideEmissions r s))))))))) (exists ((f BoundSet)) (exists ((e BoundSet)) (IncreaseCarbonDioxideEmissions e f))))))
(check-sat)
(get-model)