(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsYoung (BoundSet) Bool)
(declare-fun IsAsian (BoundSet) Bool)
(declare-fun IsGirl (BoundSet) Bool)
(declare-fun IsSittingOnGround (BoundSet) Bool)
(declare-fun IsInRubble (BoundSet) Bool)
(declare-fun IsOutside (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsYoung a) (and (IsAsian a) (and (IsGirl a) (and (IsSittingOnGround a) (IsInRubble a)))))) (and (forall ((d BoundSet)) (=> (IsOutside d) (IsYoung d))) (and (forall ((e BoundSet)) (=> (IsInRubble e) (IsYoung e))) (and (forall ((f BoundSet)) (=> (IsAsian f) (IsGirl f))) (and (forall ((g BoundSet)) (=> (IsOutside g) (IsAsian g))) (and (forall ((h BoundSet)) (=> (IsInRubble h) (IsAsian h))) (and (forall ((i BoundSet)) (=> (IsOutside i) (IsGirl i))) (and (forall ((j BoundSet)) (=> (IsInRubble j) (IsGirl j))) (and (forall ((k BoundSet)) (=> (IsSittingOnGround k) (IsYoung k))) (and (forall ((l BoundSet)) (=> (IsSittingOnGround l) (IsAsian l))) (and (forall ((m BoundSet)) (=> (IsSittingOnGround m) (IsGirl m))) (and (forall ((n BoundSet)) (=> (IsGirl n) (IsSittingOnGround n))) (and (forall ((o BoundSet)) (=> (IsSittingOnGround o) (IsOutside o))) (and (forall ((p BoundSet)) (=> (IsOutside p) (IsSittingOnGround p))) (and (forall ((q BoundSet)) (=> (IsSittingOnGround q) (IsInRubble q))) (and (forall ((r BoundSet)) (=> (IsInRubble r) (IsSittingOnGround r))) (and (forall ((s BoundSet)) (=> (IsInRubble s) (IsYoung s))) (and (forall ((t BoundSet)) (=> (IsInRubble t) (IsAsian t))) (and (forall ((u BoundSet)) (=> (IsInRubble u) (IsGirl u))) (and (forall ((v BoundSet)) (=> (IsInRubble v) (IsOutside v))) (forall ((w BoundSet)) (=> (IsOutside w) (IsInRubble w))))))))))))))))))))))) (exists ((a BoundSet)) (and (IsYoung a) (and (IsAsian a) (and (IsGirl a) (and (IsOutside a) (IsInRubble a)))))))))
(check-sat)
(get-model)