(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun { () BoundSet)
(declare-fun | () BoundSet)
(declare-fun AreInPineIslandBay (BoundSet) Bool)
(declare-fun AreInAntarctica (BoundSet) Bool)
(declare-fun AreLargest (BoundSet) Bool)
(declare-fun AreFastestMelting (BoundSet) Bool)
(declare-fun IsOnPlanet (BoundSet) Bool)
(declare-fun IsCoastal (BoundSet) Bool)
(declare-fun WouldBeSubmerged (BoundSet) Bool)
(declare-fun ( (Bool) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (AreInPineIslandBay a) (and (AreInAntarctica a) (and (AreLargest a) (AreFastestMelting a))))) (and (forall ((f BoundSet)) (forall ((e BoundSet)) (=> (AreInPineIslandBay e) (IsOnPlanet f)))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (AreInAntarctica g) (IsCoastal h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (AreInAntarctica i) (IsOnPlanet j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (AreInAntarctica k) (WouldBeSubmerged l)))) (and (forall ((m BoundSet)) (forall ((n BoundSet)) (=> (WouldBeSubmerged m) (AreInAntarctica n)))) (and (forall ((p BoundSet)) (forall ((o BoundSet)) (=> (AreLargest o) (IsCoastal p)))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (AreLargest q) (IsOnPlanet r)))) (and (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (AreLargest s) (WouldBeSubmerged t)))) (and (forall ((v BoundSet)) (forall ((u BoundSet)) (=> (WouldBeSubmerged u) (AreLargest v)))) (and (forall ((w BoundSet)) (forall ((x BoundSet)) (=> (AreFastestMelting w) (IsCoastal x)))) (and (forall ((y BoundSet)) (forall ((z BoundSet)) (=> (AreFastestMelting y) (IsOnPlanet z)))) (=> (WouldBeSubmerged {) (AreFastestMelting |)))))))))))))) (and (exists ((c BoundSet)) (( (and (IsCoastal c) (IsOnPlanet c)))) (WouldBeSubmerged c)))))
(check-sat)
(get-model)