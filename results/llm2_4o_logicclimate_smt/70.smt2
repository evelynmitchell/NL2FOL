(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsExtreme (BoundSet) Bool)
(declare-fun IsClimateChange (BoundSet) Bool)
(declare-fun IsReleasedPressure (BoundSet) Bool)
(declare-fun ( (Bool) Bool)
(declare-fun IsRising (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (and (exists ((b BoundSet)) (( (and (IsExtreme a) (and (IsClimateChange b) (IsReleasedPressure c))))) (IsRising d))))) (and (forall ((h BoundSet)) (forall ((i BoundSet)) (=> (IsRising h) (IsExtreme i)))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (IsRising j) (IsClimateChange k)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (IsClimateChange l) (IsExtreme m)))) (and (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (IsRising n) (IsReleasedPressure o)))) (and (forall ((p BoundSet)) (forall ((q BoundSet)) (=> (IsReleasedPressure p) (IsExtreme q)))) (and (forall ((r BoundSet)) (forall ((s BoundSet)) (=> (IsRising r) (IsExtreme s)))) (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsRising t) (IsClimateChange u))))))))))) (exists ((f BoundSet)) (exists ((e BoundSet)) (exists ((a BoundSet)) (and (IsExtreme a) (and (IsClimateChange f) (IsRising e)))))))))
(check-sat)
(get-model)