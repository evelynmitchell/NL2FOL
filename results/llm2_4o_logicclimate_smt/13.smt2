(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun CanEvaporateAs (BoundSet BoundSet) Bool)
(declare-fun IsGreenhouseGas (BoundSet) Bool)
(declare-fun IsMorePowerful (BoundSet BoundSet BoundSet BoundSet) Bool)
(declare-fun IsMorePowerfulAtWarming (BoundSet BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((d BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((f BoundSet)) (exists ((e BoundSet)) (exists ((c BoundSet)) (and (CanEvaporateAs c a) (and (IsGreenhouseGas a) (and (IsMorePowerful d a b e) (IsMorePowerful d a b f)))))))))) (and (forall ((l BoundSet)) (forall ((i BoundSet)) (forall ((m BoundSet)) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (CanEvaporateAs i j) (IsMorePowerfulAtWarming k l m))))))) (and (forall ((n BoundSet)) (forall ((q BoundSet)) (forall ((p BoundSet)) (forall ((o BoundSet)) (forall ((r BoundSet)) (=> (IsMorePowerfulAtWarming n o p) (CanEvaporateAs q r))))))) (forall ((u BoundSet)) (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (IsGreenhouseGas s) (IsMorePowerfulAtWarming s t u)))))))) (exists ((g BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (IsMorePowerfulAtWarming a g b)))))))
(check-sat)
(get-model)