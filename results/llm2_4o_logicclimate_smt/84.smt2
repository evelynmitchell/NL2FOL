(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun ResponsibleForThirdOfDeathsIn (BoundSet BoundSet BoundSet) Bool)
(declare-fun IsIn (BoundSet BoundSet) Bool)
(declare-fun IsExtremelyPoor (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (ResponsibleForThirdOfDeathsIn b c a)))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (forall ((i BoundSet)) (forall ((h BoundSet)) (=> (ResponsibleForThirdOfDeathsIn f g h) (IsIn i h)))))) (and (forall ((l BoundSet)) (forall ((n BoundSet)) (forall ((m BoundSet)) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (ResponsibleForThirdOfDeathsIn j k l) (IsIn m n))))))) (forall ((p BoundSet)) (forall ((r BoundSet)) (forall ((q BoundSet)) (forall ((o BoundSet)) (=> (IsExtremelyPoor o) (ResponsibleForThirdOfDeathsIn p q r))))))))) (exists ((d BoundSet)) (exists ((e BoundSet)) (exists ((a BoundSet)) (and (IsIn d a) (and (IsIn d e) (IsExtremelyPoor d)))))))))
(check-sat)
(get-model)