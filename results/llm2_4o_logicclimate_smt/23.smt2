(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun Is136DegreesFahrenheit (BoundSet) Bool)
(declare-fun IsInLibya (BoundSet) Bool)
(declare-fun IsIn1922 (BoundSet) Bool)
(declare-fun Is134DegreesFahrenheit (BoundSet) Bool)
(declare-fun IsInUnitedStates (BoundSet) Bool)
(declare-fun IsIn1913 (BoundSet) Bool)
(declare-fun IsInDeathValley (BoundSet) Bool)
(declare-fun IsInCalifornia (BoundSet) Bool)
(declare-fun AreNegligibleIn1913 (BoundSet) Bool)
(declare-fun AreNegligibleIn1922 (BoundSet) Bool)
(declare-fun ( (Bool) Bool)
(declare-fun AreNegligible (BoundSet) Bool)
(declare-fun OccurredWithout (BoundSet) Bool)
(declare-fun AreNotSignificant (BoundSet) Bool)
(declare-fun AreHigh (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (and (exists ((b BoundSet)) (( (and (Is136DegreesFahrenheit c) (and (IsInLibya c) (and (IsIn1922 c) (and (Is134DegreesFahrenheit c) (and (IsInUnitedStates c) (and (IsIn1913 c) (and (IsInDeathValley c) (and (IsInCalifornia c) (and (AreNegligibleIn1913 b) (AreNegligibleIn1922 b)))))))))))) (not (AreNegligible b)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (Is136DegreesFahrenheit k) (OccurredWithout l)))) (and (forall ((m BoundSet)) (=> (AreNotSignificant m) (AreNegligible m))) (and (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (AreNegligibleIn1913 n) (AreHigh o)))) (and (forall ((p BoundSet)) (forall ((q BoundSet)) (=> (AreNegligibleIn1922 p) (AreHigh q)))) (and (forall ((r BoundSet)) (=> (AreNegligibleIn1922 r) (OccurredWithout r))) (forall ((s BoundSet)) (=> (AreNegligibleIn1922 s) (AreNotSignificant s))))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (AreHigh a) (and (OccurredWithout b) (AreNotSignificant b))))))))
(check-sat)
(get-model)