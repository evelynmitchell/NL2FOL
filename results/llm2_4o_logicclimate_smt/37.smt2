(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun ProducedBy (BoundSet BoundSet) Bool)
(declare-fun PresentsExplanation (BoundSet BoundSet) Bool)
(declare-fun IsExplanationOf (BoundSet BoundSet) Bool)
(declare-fun IsFluctuationOf (BoundSet) Bool)
(declare-fun BuryExplanationOf (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((d BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((e BoundSet)) (exists ((c BoundSet)) (and (ProducedBy c d) (and (ProducedBy c e) (and (PresentsExplanation c a) (and (IsExplanationOf a b) (IsFluctuationOf b)))))))))) (and (forall ((h BoundSet)) (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (ProducedBy h i) (IsFluctuationOf j))))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((k BoundSet)) (=> (ProducedBy k l) (IsFluctuationOf m))))) (and (forall ((p BoundSet)) (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (ProducedBy n o) (IsFluctuationOf p))))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (PresentsExplanation q r) (IsFluctuationOf r)))) (and (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (IsExplanationOf s t) (IsFluctuationOf s)))) (forall ((v BoundSet)) (forall ((u BoundSet)) (=> (IsExplanationOf u v) (IsFluctuationOf v)))))))))) (exists ((f BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (BuryExplanationOf f a) (and (IsFluctuationOf a) (IsFluctuationOf b)))))))))
(check-sat)
(get-model)