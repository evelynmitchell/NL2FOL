(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsWithCap (BoundSet) Bool)
(declare-fun IsNotWearingShirt (BoundSet) Bool)
(declare-fun IsLayingOnWoodenBench (BoundSet) Bool)
(declare-fun IsRelaxingOnBench (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsWithCap a) (and (IsNotWearingShirt a) (IsLayingOnWoodenBench a)))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (=> (IsRelaxingOnBench f) (IsWithCap g)))) (and (forall ((h BoundSet)) (forall ((i BoundSet)) (=> (IsRelaxingOnBench h) (IsNotWearingShirt i)))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (IsLayingOnWoodenBench j) (IsRelaxingOnBench k)))) (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (IsRelaxingOnBench l) (IsLayingOnWoodenBench m)))))))) (exists ((d BoundSet)) (IsRelaxingOnBench d)))))
(check-sat)
(get-model)