(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsLargeGroup (BoundSet) Bool)
(declare-fun IsInBusyCity (BoundSet) Bool)
(declare-fun IsWalking (BoundSet) Bool)
(declare-fun IsInCity (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsLargeGroup a) (and (IsInBusyCity a) (IsWalking a)))) (and (forall ((f BoundSet)) (forall ((e BoundSet)) (=> (IsWalking e) (IsLargeGroup f)))) (and (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsLargeGroup g) (IsInCity h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsInCity i) (IsLargeGroup j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsInBusyCity k) (IsWalking l)))) (and (forall ((m BoundSet)) (forall ((n BoundSet)) (=> (IsWalking m) (IsInBusyCity n)))) (and (forall ((p BoundSet)) (forall ((o BoundSet)) (=> (IsInBusyCity o) (IsInCity p)))) (and (forall ((q BoundSet)) (forall ((r BoundSet)) (=> (IsInCity q) (IsInBusyCity r)))) (and (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (IsWalking s) (IsInCity t)))) (forall ((v BoundSet)) (forall ((u BoundSet)) (=> (IsInCity u) (IsWalking v))))))))))))) (exists ((c BoundSet)) (and (IsWalking c) (IsInCity c))))))
(check-sat)
(get-model)