(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsMelting (BoundSet) Bool)
(declare-fun ContributesToRising (BoundSet BoundSet) Bool)
(declare-fun WillRiseBy (BoundSet BoundSet) Bool)
(declare-fun WillFlood (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsMelting a) (ContributesToRising a b)))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsMelting f) (WillRiseBy g h))))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (WillRiseBy i j) (IsMelting k))))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((n BoundSet)) (=> (IsMelting l) (WillFlood m n))))) (and (forall ((p BoundSet)) (forall ((r BoundSet)) (forall ((q BoundSet)) (forall ((o BoundSet)) (=> (ContributesToRising o p) (WillRiseBy q r)))))) (and (forall ((v BoundSet)) (forall ((u BoundSet)) (forall ((s BoundSet)) (forall ((t BoundSet)) (=> (WillRiseBy s t) (ContributesToRising u v)))))) (forall ((y BoundSet)) (forall ((w BoundSet)) (forall ((z BoundSet)) (forall ((x BoundSet)) (=> (ContributesToRising w x) (WillFlood y z)))))))))))) (exists ((c BoundSet)) (exists ((e BoundSet)) (exists ((d BoundSet)) (and (WillRiseBy c d) (WillFlood c e))))))))
(check-sat)
(get-model)