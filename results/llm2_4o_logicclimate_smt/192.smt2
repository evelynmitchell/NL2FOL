(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun { () BoundSet)
(declare-fun IsSightseeing (BoundSet) Bool)
(declare-fun IsTakingPictures (BoundSet) Bool)
(declare-fun Exists (BoundSet) Bool)
(declare-fun IsGroup (BoundSet) Bool)
(declare-fun IsPeople (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsSightseeing a) (IsTakingPictures a))) (and (forall ((d BoundSet)) (forall ((e BoundSet)) (=> (IsSightseeing d) (Exists e)))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (=> (Exists f) (IsSightseeing g)))) (and (forall ((h BoundSet)) (forall ((i BoundSet)) (=> (IsSightseeing h) (IsGroup i)))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (IsGroup j) (IsSightseeing k)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (=> (IsSightseeing l) (IsPeople m)))) (and (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (IsPeople n) (IsSightseeing o)))) (and (forall ((p BoundSet)) (forall ((q BoundSet)) (=> (IsTakingPictures p) (Exists q)))) (and (forall ((r BoundSet)) (forall ((s BoundSet)) (=> (Exists r) (IsTakingPictures s)))) (and (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsTakingPictures t) (IsGroup u)))) (and (forall ((v BoundSet)) (forall ((w BoundSet)) (=> (IsGroup v) (IsTakingPictures w)))) (and (forall ((y BoundSet)) (forall ((x BoundSet)) (=> (IsTakingPictures x) (IsPeople y)))) (forall ((z BoundSet)) (=> (IsPeople z) (IsTakingPictures {))))))))))))))) (exists ((c BoundSet)) (and (Exists c) (and (IsGroup c) (IsPeople c)))))))
(check-sat)
(get-model)