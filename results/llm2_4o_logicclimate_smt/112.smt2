(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsYoung (BoundSet) Bool)
(declare-fun WearJersey (BoundSet BoundSet) Bool)
(declare-fun KicksSoccerBall (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsYoung a) (and (WearJersey a c) (KicksSoccerBall a b)))))) (and (forall ((d BoundSet)) (forall ((e BoundSet)) (=> (IsYoung d) (KicksSoccerBall d e)))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (=> (KicksSoccerBall f g) (IsYoung f)))) (and (forall ((h BoundSet)) (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (KicksSoccerBall h i) (WearJersey h j))))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (KicksSoccerBall k l) (IsYoung k)))) (forall ((m BoundSet)) (forall ((n BoundSet)) (=> (IsYoung m) (KicksSoccerBall m n))))))))) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsYoung a) (KicksSoccerBall a b)))))))
(check-sat)
(get-model)