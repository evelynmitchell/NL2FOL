(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInRedShirt (BoundSet) Bool)
(declare-fun IsFilmedBy (BoundSet BoundSet) Bool)
(declare-fun IsOnSportsField (BoundSet) Bool)
(declare-fun IsWatching (BoundSet) Bool)
(declare-fun IsCheering (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (IsInRedShirt b) (and (IsFilmedBy b a) (and (IsOnSportsField c) (and (IsWatching d) (IsCheering d))))))))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (forall ((h BoundSet)) (=> (IsInRedShirt f) (IsFilmedBy g h))))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (IsFilmedBy i j) (IsInRedShirt k))))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((n BoundSet)) (=> (IsFilmedBy l m) (IsInRedShirt n))))) (and (forall ((p BoundSet)) (forall ((q BoundSet)) (forall ((o BoundSet)) (=> (IsFilmedBy o p) (IsOnSportsField q))))) (and (forall ((t BoundSet)) (forall ((r BoundSet)) (forall ((s BoundSet)) (=> (IsFilmedBy r s) (IsWatching t))))) (forall ((v BoundSet)) (forall ((w BoundSet)) (forall ((u BoundSet)) (=> (IsFilmedBy u v) (IsCheering w))))))))))) (exists ((e BoundSet)) (exists ((a BoundSet)) (and (IsInRedShirt e) (IsFilmedBy e a)))))))
(check-sat)
(get-model)