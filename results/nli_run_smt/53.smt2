(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInCostumes (BoundSet) Bool)
(declare-fun HasFakeCarrotNose (BoundSet) Bool)
(declare-fun ( (Bool) Bool)
(declare-fun HasTopHat (BoundSet) Bool)
(declare-fun HasSunglasses (BoundSet) Bool)
(declare-fun HasWhiteFurCoat (BoundSet) Bool)
(declare-fun HasWhiteElectricalLights (BoundSet) Bool)
(declare-fun IsInCostume (BoundSet) Bool)
(assert (not (=> (and (exists ((f BoundSet)) (exists ((e BoundSet)) (exists ((c BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (exists ((a BoundSet)) (( (and (IsInCostumes a) (HasFakeCarrotNose b)))) (and (and (HasTopHat c) (HasSunglasses d)) (and (HasWhiteFurCoat e) (HasWhiteElectricalLights f))))))))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsInCostumes i) (IsInCostume j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (HasTopHat k) (IsInCostume l)))) (forall ((m BoundSet)) (forall ((n BoundSet)) (=> (HasWhiteFurCoat m) (IsInCostume n))))))) (exists ((g BoundSet)) (not (IsInCostume g))))))
(check-sat)
(get-model)