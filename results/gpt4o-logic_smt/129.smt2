(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsDusty (BoundSet) Bool)
(declare-fun Runs (BoundSet) Bool)
(declare-fun IsAlongPath (BoundSet BoundSet) Bool)
(declare-fun IsThroughGrass (BoundSet BoundSet) Bool)
(declare-fun IsOutside (BoundSet) Bool)
(declare-fun IsRunning (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsDusty a) (and (Runs a) (and (IsAlongPath a b) (IsThroughGrass a c))))))) (and (forall ((f BoundSet)) (forall ((e BoundSet)) (=> (Runs e) (IsOutside f)))) (and (forall ((h BoundSet)) (forall ((g BoundSet)) (=> (IsOutside g) (Runs h)))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (Runs i) (IsRunning j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (IsRunning k) (Runs l)))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((m BoundSet)) (=> (IsAlongPath m n) (IsOutside o))))) (forall ((r BoundSet)) (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (IsAlongPath p q) (IsRunning r))))))))))) (exists ((d BoundSet)) (and (IsOutside d) (IsRunning d))))))
(check-sat)
(get-model)