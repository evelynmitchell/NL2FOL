(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsElected (BoundSet) Bool)
(declare-fun Presents (BoundSet BoundSet) Bool)
(declare-fun IsFloodingIn (BoundSet) Bool)
(declare-fun IsConvictedOfCrimes (BoundSet) Bool)
(declare-fun HasProblemsWith (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (exists ((c BoundSet)) (exists ((e BoundSet)) (and (IsElected a) (and (Presents d e) (and (IsFloodingIn b) (IsConvictedOfCrimes c))))))))) (and (forall ((h BoundSet)) (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsFloodingIn h) (HasProblemsWith i j))))) (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((k BoundSet)) (=> (IsConvictedOfCrimes k) (HasProblemsWith l m))))))) (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (exists ((g BoundSet)) (and (IsElected a) (and (HasProblemsWith g b) (HasProblemsWith g c))))))))))
(check-sat)
(get-model)