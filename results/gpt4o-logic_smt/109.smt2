(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsDressedInKilt (BoundSet) Bool)
(declare-fun HasThrown (BoundSet BoundSet) Bool)
(declare-fun Watches (BoundSet BoundSet) Bool)
(declare-fun IsInKilts (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsDressedInKilt a) (HasThrown a b)))) (and (forall ((f BoundSet)) (forall ((e BoundSet)) (forall ((g BoundSet)) (=> (IsDressedInKilt e) (Watches f g))))) (and (forall ((h BoundSet)) (forall ((i BoundSet)) (=> (IsDressedInKilt h) (IsInKilts i)))) (and (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (IsInKilts j) (IsDressedInKilt k)))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((m BoundSet)) (forall ((l BoundSet)) (=> (HasThrown l m) (Watches n o)))))) (forall ((r BoundSet)) (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (HasThrown p q) (IsInKilts r)))))))))) (exists ((c BoundSet)) (exists ((d BoundSet)) (and (Watches c d) (IsInKilts d)))))))
(check-sat)
(get-model)