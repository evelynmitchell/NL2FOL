(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsSmall (BoundSet) Bool)
(declare-fun IsInBlueSoccerUniforms (BoundSet) Bool)
(declare-fun IsWooden (BoundSet) Bool)
(declare-fun UseSteps (BoundSet BoundSet) Bool)
(declare-fun AreTheirHands (BoundSet) Bool)
(declare-fun IsInAdultSizedBathroom (BoundSet) Bool)
(declare-fun IsTwo (BoundSet) Bool)
(declare-fun WashHands (BoundSet BoundSet) Bool)
(assert (not (=> (exists ((a BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (IsSmall b) (and (IsInBlueSoccerUniforms b) (and (IsWooden d) (and (UseSteps b d) (and (AreTheirHands a) (IsInAdultSizedBathroom a))))))))) (exists ((f BoundSet)) (exists ((a BoundSet)) (and (IsTwo f) (and (WashHands f a) (AreTheirHands a))))))))
(check-sat)
(get-model)