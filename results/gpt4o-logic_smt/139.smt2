(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsInBlueTShirt (BoundSet) Bool)
(declare-fun IsTakingPicture (BoundSet BoundSet) Bool)
(declare-fun HasUmbrella (BoundSet) Bool)
(declare-fun WalksBehind (BoundSet BoundSet) Bool)
(declare-fun IsOutdoors (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((d BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsInBlueTShirt c) (and (IsTakingPicture c a) (and (HasUmbrella d) (WalksBehind d b)))))))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (forall ((k BoundSet)) (=> (IsTakingPicture i j) (IsOutdoors k))))) (and (forall ((n BoundSet)) (forall ((m BoundSet)) (forall ((l BoundSet)) (=> (IsOutdoors l) (IsTakingPicture m n))))) (forall ((r BoundSet)) (forall ((o BoundSet)) (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (IsTakingPicture o p) (WalksBehind q r))))))))) (exists ((f BoundSet)) (exists ((e BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsTakingPicture e a) (and (IsOutdoors e) (WalksBehind f b))))))))))
(check-sat)
(get-model)