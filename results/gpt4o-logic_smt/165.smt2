(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsSmall (BoundSet) Bool)
(declare-fun HasShortBrownHair (BoundSet) Bool)
(declare-fun IsPushing (BoundSet BoundSet) Bool)
(declare-fun IsPink (BoundSet) Bool)
(declare-fun IsOver (BoundSet BoundSet) Bool)
(declare-fun HasBrownLeaves (BoundSet) Bool)
(declare-fun HasTrees (BoundSet) Bool)
(declare-fun IsInBackground (BoundSet BoundSet) Bool)
(declare-fun IsOutside (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((f BoundSet)) (exists ((d BoundSet)) (exists ((c BoundSet)) (exists ((g BoundSet)) (exists ((e BoundSet)) (and (IsSmall a) (and (HasShortBrownHair a) (and (IsPushing a c) (and (IsPink c) (and (IsOver c d) (and (HasBrownLeaves e) (and (HasTrees f) (IsInBackground f g)))))))))))))) (and (forall ((i BoundSet)) (forall ((j BoundSet)) (=> (IsSmall i) (IsOutside j)))) (and (forall ((l BoundSet)) (forall ((m BoundSet)) (forall ((k BoundSet)) (=> (IsPushing k l) (IsOutside m))))) (and (forall ((n BoundSet)) (forall ((o BoundSet)) (forall ((p BoundSet)) (=> (IsOver n o) (IsOutside p))))) (and (forall ((r BoundSet)) (forall ((q BoundSet)) (=> (HasBrownLeaves q) (IsOutside r)))) (and (forall ((t BoundSet)) (forall ((s BoundSet)) (=> (HasTrees s) (IsOutside t)))) (forall ((u BoundSet)) (forall ((v BoundSet)) (forall ((w BoundSet)) (=> (IsInBackground u v) (IsOutside w))))))))))) (exists ((h BoundSet)) (IsOutside h)))))
(check-sat)
(get-model)