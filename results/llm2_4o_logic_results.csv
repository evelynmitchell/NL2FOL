,label,updated_label,articles,Claim,Implication,Referring Expressions - Claim,Referring Expressions - Implication,Property Implications,Equal Entities,Subset Entities,Claim Lfs,Implication Lfs,Logical Form,Logical Form 2,result
0,0,false causality,"Giving 10% of your income to the Church will free a child’s soul from Limbo into Heaven, so give your money!"," ""Giving 10% of your income to the Church will free a child’s soul from Limbo into Heaven.""  "," ""You should give your money to the Church""","IsGiven(b, a),  IsInLimbo(c),  IsInHeaven(c)","IsGiven(g, a)",[],"[(' the Church', ' the Church')]","[(' Your income', ' You'), (' your money', ' Your income'), (' Heaven.', ' the Church')]","(IsGiven(b, a) and IsInLimbo(c)) and IsInHeaven(c)","IsGiven(g, a)","(forall b ((IsGiven(b, a) and IsInLimbo(c)) and IsInHeaven(c))) -> (exists g (IsGiven(g, a)))","(exists c (exists a (exists b ((IsGiven(b, a) and IsInLimbo(c)) and IsInHeaven(c))))) -> (exists g (exists a (IsGiven(g, a))))",
1,0,appeal to emotion,"If everyone lived his or her life exactly like Jesus lived his life, the world would be a beautiful place!"," ""Jesus lived a beautiful life.""  "," ""If everyone lived like Jesus, the world would be a beautiful place.""","LivedLife(a, b)","LivedLike(c, a),  IsBeautifulPlace(d, e)","[('LivedLike(c, a)', 'LivedLife(a, b)')]","[(' Jesus', ' Jesus')]","[(' a beautiful life', ' the world')]","LivedLife(a, b)","LivedLike(c, a) and IsBeautifulPlace(d, e)","(exists b (LivedLife(a, b)) & (forall c (forall a (forall b (LivedLike(c, a) -> LivedLife(a, b)))))) -> (forall d (LivedLike(c, a) and IsBeautifulPlace(d, e)))","(exists a (exists b (LivedLife(a, b))) & (forall g (forall f (forall i (forall h (LivedLike(f,g) -> LivedLife(h,i))))))) -> (exists e (exists c (exists a (exists d (LivedLike(c, a) and IsBeautifulPlace(d, e))))))",LF
2,0,appeal to emotion,"I know you don’t like the kitty-cat sweater that Grandma knitted for you, but she worked so hard on it and it will make her happy to see you wear it in the family holiday photo.", Grandma worked hard on the kitty-cat sweater., You should wear the kitty-cat sweater in the family holiday photo.,"WorkedHardOn(b, a)","Wear(c, a),  IsInFamilyHolidayPhoto(a)","[('WorkedHardOn(b, a)', 'Wear(c, a)'), ('WorkedHardOn(b, a)', '  IsInFamilyHolidayPhoto(a)'), ('  IsInFamilyHolidayPhoto(a)', 'WorkedHardOn(b, a)')]","[(' kitty-cat sweater', ' kitty-cat sweater')]",[],"WorkedHardOn(b, a)","Wear(c, a) and IsInFamilyHolidayPhoto(a)","(WorkedHardOn(b, a) & (forall c (forall a (forall b (WorkedHardOn(b, a) -> Wear(c, a))))) & (forall a (forall b (WorkedHardOn(b, a) ->   IsInFamilyHolidayPhoto(a)))) & (forall a (forall b (  IsInFamilyHolidayPhoto(a) -> WorkedHardOn(b, a))))) -> (Wear(c, a) and IsInFamilyHolidayPhoto(a))","(exists a (exists b (WorkedHardOn(b, a))) & (forall e (forall g (forall f (WorkedHardOn(e,f) -> Wear(g,f))))) & (forall j (forall i (forall h (WorkedHardOn(h,i) ->   IsInFamilyHolidayPhoto(j))))) & (forall l (forall m (forall k (  IsInFamilyHolidayPhoto(k) -> WorkedHardOn(l,m)))))) -> (exists c (exists a (Wear(c, a) and IsInFamilyHolidayPhoto(a))))",Valid
3,0,ad populum,"Dave wants you to break into the spooky cabin with him. “Everyone does it,” he claims. What fallacy has he committed?", Everyone breaks into the spooky cabin.  , You should break into the spooky cabin.,"BreaksInto(a, b),  IsSpooky(b)","BreaksInto(c, d),  IsSpooky(d)",[],[],"[(' the spooky cabin', ' You'), (' the spooky cabin', ' spooky cabin')]","Everyone(a) and (BreaksInto(a, b) and IsSpooky(b))","IsSpooky(d) and BreaksInto(c, d)","(exists b (Everyone(a) and (BreaksInto(a, b) and IsSpooky(b)))) -> (forall d (forall c (IsSpooky(d) and BreaksInto(c, d))))","(exists a (exists b (Everyone(a) and (BreaksInto(a, b) and IsSpooky(b))))) -> (exists c (exists d (IsSpooky(d) and BreaksInto(c, d))))",Valid
4,0,fallacy of credibility,"Ms. Drayer, the smartest person in the universe, says the debate is the best class, therefore it is.", Ms. Drayer is the smartest person in the universe and says the debate is the best class.  , The debate is the best class.,"IsSmartestPersonInUniverse(b),  SaysBestClass(a)",IsBestClass(a),[],"[(' the debate', ' The debate'), (' the debate', ' the best class'), (' the best class', ' the best class')]","[(' the best class', ' The debate')]",IsSmartestPersonInUniverse(b) and SaysBestClass(a),IsBestClass(a),(exists a (IsSmartestPersonInUniverse(b) and SaysBestClass(a))) -> (forall a (IsBestClass(a))),(exists a (exists b (IsSmartestPersonInUniverse(b) and SaysBestClass(a)))) -> (exists a (IsBestClass(a))),LF
5,0,faulty generalization,Why did the blond cross the road?  Because she saw a shoe sale!," ""The blond crossed the road because she saw a shoe sale.""  "," ""Blonds cross the road for shoe sales.""","IsBlond(a),  CrossedRoad(a),  SawShoeSale(b)","IsBlond(d),  CrossesRoad(d),  ForShoeSales(d)","[('  CrossedRoad(a)', '  CrossesRoad(d)')]",[],"[(' Blonds', ' The blond'), (' she', ' Blonds'), (' shoe sale', ' shoe sales')]",IsBlond(a) and CrossedRoad(a) and SawShoeSale(b),IsBlond(d) and CrossesRoad(d) and ForShoeSales(d),(exists b (forall a (IsBlond(a) and CrossedRoad(a) and SawShoeSale(b))) & (forall a (forall d (  CrossedRoad(a) ->   CrossesRoad(d))))) -> (forall d (exists d (IsBlond(d) and CrossesRoad(d) and ForShoeSales(d)))),(exists a (exists b (IsBlond(a) and CrossedRoad(a) and SawShoeSale(b))) & (forall g (forall h (  CrossedRoad(g) ->   CrossesRoad(h))))) -> (exists d (IsBlond(d) and CrossesRoad(d) and ForShoeSales(d))),LF
6,0,appeal to emotion,"Timmy: Mom, what if I don’t believe in God?
Mom: Then you burn in Hell forever.  Why do you ask?
Timmy: No reason.
"," ""If Timmy doesn't believe in God, Timmy burns in Hell forever.""  "," ""Timmy should believe in God""","NotBelieveIn(a, b),  BurnsIn(a, c)","BelieveIn(a, b)",[],"[(' Timmy', ' Timmy'), (' God', ' God')]",[],"NotBelieveIn(a, b) and BurnsIn(a, c)","BelieveIn(a, b)","(NotBelieveIn(a, b) and BurnsIn(a, c)) -> (BelieveIn(a, b))","(exists c (exists a (exists b (NotBelieveIn(a, b) and BurnsIn(a, c))))) -> (exists a (exists b (BelieveIn(a, b))))",LF
7,0,false dilemma,"""If you never gave money to charity, then you must be a greedy millionaire."" What is this?"," ""You never gave money to charity.""  "," ""You are a greedy millionaire.""","IsNotGivenToCharity(b, a)","IsGreedy(a),  IsMillionaire(a)",[],"[(' You', ' You'), (' charity', ' You')]","[(' money', ' You')]","IsNotGivenToCharity(b, a)",IsGreedy(a) and IsMillionaire(a),"(exists b (IsNotGivenToCharity(b, a))) -> (forall a (IsGreedy(a) and IsMillionaire(a)))","(exists a (exists b (IsNotGivenToCharity(b, a)))) -> (exists a (IsGreedy(a) and IsMillionaire(a)))",LF
8,0,fallacy of extension,Caroline says that she is going to have lunch with the new girl. Jenna says that she can't believe that Caroline is ditching her old friends for the new girl.," ""Caroline is going to have lunch with the new girl."""," ""Caroline is ditching her old friends for the new girl.""","IsHavingLunchWith(a, b)","IsDitchingFor(a, b)","[('IsHavingLunchWith(a, b)', 'IsDitchingFor(a, b)')]","[(' Caroline', ' Caroline'), (' the new girl', ' the new girl')]","[(' Caroline', ' her old friends'), (' Caroline', ' the new girl'), (' lunch', ' her old friends'), (' Caroline', ' the new girl')]","IsHavingLunchWith(a, b)","IsDitchingFor(a, b)","(exists a (IsHavingLunchWith(a, b)) & (forall a (forall b (IsHavingLunchWith(a, b) -> IsDitchingFor(a, b))))) -> (exists a (forall b (IsDitchingFor(a, b))))","(exists a (exists b (IsHavingLunchWith(a, b))) & (forall e (forall f (IsHavingLunchWith(e,f) -> IsDitchingFor(e,f))))) -> (exists a (exists b (IsDitchingFor(a, b))))",Valid
9,0,faulty generalization,"""You can never give anyone a break. If you do, they'll walk all over you."""," ""If you give anyone a break, they will walk all over you.""  "," ""You should never give anyone a break.""","IsGivenBreak(a,b),  WillWalkOver(c,a)","IsGivenBreak(a,b)",[],"[(' You', ' You'), (' anyone', ' anyone'), (' you', ' You')]",[],"IsGivenBreak(a,b) and WillWalkOver(c,a)","~IsGivenBreak(a,b)","(IsGivenBreak(a,b) and WillWalkOver(c,a)) -> (~IsGivenBreak(a,b))","(exists c (exists a (exists b (IsGivenBreak(a,b) and WillWalkOver(c,a))))) -> (exists a (exists b (~IsGivenBreak(a,b))))",LF
10,0,false causality,"Believing that ""runs"" occur to statistically independent phenomena such as routine wheel spirits.", Runs occur in statistically independent phenomena such as routine wheel spins.  , Runs do not occur in statistically independent phenomena.,"IsInStatisticallyIndependentPhenomena(a),  IsRoutineWheelSpins(b)",IsNotInStatisticallyIndependentPhenomena(a),[],"[(' Runs', ' Runs'), (' statistically independent phenomena', ' statistically independent phenomena')]","[(' Runs', ' statistically independent phenomena'), (' Runs', ' statistically independent phenomena'), (' routine wheel spins', ' statistically independent phenomena')]",IsInStatisticallyIndependentPhenomena(a) and IsRoutineWheelSpins(b),IsNotInStatisticallyIndependentPhenomena(a),(forall b (IsInStatisticallyIndependentPhenomena(a) and IsRoutineWheelSpins(b))) -> (exists a (IsNotInStatisticallyIndependentPhenomena(a))),(exists a (exists b (IsInStatisticallyIndependentPhenomena(a) and IsRoutineWheelSpins(b)))) -> (exists a (IsNotInStatisticallyIndependentPhenomena(a))),LF
11,0,false causality,"I broke a mirror earlier in the day, and then I received an F on my history final. Therefore, I received the F because I broke the mirror."," ""I broke a mirror and received an F on the history final.""  "," ""Breaking the mirror caused receiving the F.""","IsBroken(a),  IsReceived(b)","IsBroken(d),  IsReceived(e)",[],[],"[(' The mirror', ' A mirror')]",IsBroken(a) and IsReceived(b),IsBroken(d) and IsReceived(e),(forall a (IsBroken(a) and IsReceived(b))) -> (exists d (IsBroken(d) and IsReceived(e))),(exists a (exists b (IsBroken(a) and IsReceived(b)))) -> (exists e (exists d (IsBroken(d) and IsReceived(e)))),Valid
12,0,fallacy of extension,"Charlie: I think we should put more money into schools. Quality public education is so important.
Bob: So you’re saying we should cut military spending and spend it instead on more spiral notebooks and crayons? I guess you want our country to be a weak, defenseless target for terrorists.
Charlie: Creo que deberíamos invertir más dinero en las escuelas. La educación pública de calidad es muy importante.

Bob: ¿Entonces estás diciendo que deberíamos recortar el gasto militar y gastarlo en más cuadernos de espiral y crayones? Supongo que quiere que nuestro país sea un objetivo débil e indefenso para los terroristas.", Quality public education is important.  , Investing more money in schools makes the country weak and defenseless.,IsImportant(a),"IsInvestedIn(b, c),  IsWeak(d),  IsDefenseless(d)","[('IsImportant(a)', '  IsDefenseless(d)')]",[],"[(' schools', ' Quality public education'), (' Quality public education', ' the country')]",IsImportant(a),"IsInvestedIn(b, c) and (IsWeak(d) and IsDefenseless(d))","(forall a (IsImportant(a)) & (forall a (forall d (IsImportant(a) ->   IsDefenseless(d))))) -> (forall d (exists c (IsInvestedIn(b, c) and (IsWeak(d) and IsDefenseless(d)))))","(exists a (IsImportant(a)) & (forall e (forall f (IsImportant(e) ->   IsDefenseless(f))))) -> (exists c (exists d (exists b (IsInvestedIn(b, c) and (IsWeak(d) and IsDefenseless(d))))))",LF
13,0,false causality,"Cellphones weren’t invented before I was born. Now, they are everywhere! Therefore, cellphones were created because I was born."," ""Cellphones weren't invented before I was born, and now they are everywhere.""  "," ""Cellphones were created because I was born.""","WasInvented(a),  IsEverywhere(a)","WereCreated(a),  WasBorn(b)",[],"[(' Cellphones', ' Cellphones'), (' I', ' I')]",[],~WasInvented(a) and IsEverywhere(a),WasBorn(b) and WereCreated(a),(~WasInvented(a) and IsEverywhere(a)) -> (WasBorn(b) and WereCreated(a)),(exists a (~WasInvented(a) and IsEverywhere(a))) -> (exists a (exists b (WasBorn(b) and WereCreated(a)))),LF
14,0,ad hominem,Ms. Baker assigned me a lot of homework because she’s a witch!, Ms. Baker is a witch.  , Ms. Baker assigned a lot of homework.,IsWitch(a),"AssignedHomework(a, c)","[('AssignedHomework(a, c)', 'IsWitch(a)')]","[(' Ms. Baker', ' Ms. Baker')]",[],IsWitch(a),"AssignedHomework(a, c)","(IsWitch(a) & (forall c (forall a (AssignedHomework(a, c) -> IsWitch(a))))) -> (AssignedHomework(a, c))","(exists a (IsWitch(a)) & (forall e (forall d (AssignedHomework(d,e) -> IsWitch(d))))) -> (exists c (exists a (AssignedHomework(a, c))))",LF
15,0,fallacy of credibility,"My dad went to school, so he knows everything about the education system."," ""Dad went to school.""  "," ""Dad knows everything about the education system.""",WentToSchool(a),"KnowsEverythingAbout(a, c)",[],"[(' Dad', ' Dad')]","[(' school', ' the education system')]",WentToSchool(a),"KnowsEverythingAbout(a, c)","(WentToSchool(a)) -> (KnowsEverythingAbout(a, c))","(exists a (WentToSchool(a))) -> (exists c (exists a (KnowsEverythingAbout(a, c))))",LF
16,0,ad populum,Everyone is doing the Low-Carb Diet., Everyone is doing the Low-Carb Diet.  , You should do the Low-Carb Diet.,"IsDoingDiet(a, b)","IsDoingDiet(c, d)",[],[],"[(' Low-Carb Diet', ' You')]","IsDoingDiet(a, b)","IsDoingDiet(c, d)","(exists b (IsDoingDiet(a, b))) -> (forall c (IsDoingDiet(c, d)))","(exists a (exists b (IsDoingDiet(a, b)))) -> (exists c (exists d (IsDoingDiet(c, d))))",Valid
17,0,fallacy of extension,"Parent: You need to clean out your backpack.
Child: You know I have ADD! Why can’t you just accept me as I am?", The child has ADD.  , The parent should accept the child as the child is.,HasADD(a),"ShouldAccept(c, a)","[('HasADD(a)', 'ShouldAccept(c, a)')]","[(' The child', ' the child'), (' The child', ' the child')]",[],HasADD(a),"ShouldAccept(c, a)","(HasADD(a) & (forall c (forall a (HasADD(a) -> ShouldAccept(c, a))))) -> (ShouldAccept(c, a))","(exists a (HasADD(a)) & (forall e (forall g (forall f (HasADD(e) -> ShouldAccept(f,g)))))) -> (exists c (exists a (ShouldAccept(c, a))))",Valid
18,0,fallacy of credibility,"X has been around for years now.
Y is new.
Therefore, Y is better than X."," ""X has been around for years. Y is new.""  "," ""Y is better than X.""","IsAroundForYears(a),  IsNew(b)","IsBetterThan(b, a)",[],"[(' X', ' X'), (' Y', ' Y')]",[],IsAroundForYears(a) and IsNew(b),"IsBetterThan(b, a)","(IsAroundForYears(a) and IsNew(b)) -> (IsBetterThan(b, a))","(exists a (exists b (IsAroundForYears(a) and IsNew(b)))) -> (exists a (exists b (IsBetterThan(b, a))))",LF
19,0,false causality,"""Right when I sneezed, the power went off. I must've caused the outage."" Bragged Zohaw."," ""Zohaw sneezed and the power went off."""," ""Zohaw caused the power outage.""","Sneezed(a),  WentOff(b)","Caused(a, c)",[],"[(' Zohaw', ' Zohaw')]","[(' Zohaw', ' the power')]",Sneezed(a) and WentOff(b),"Caused(a, c)","(forall b (Sneezed(a) and WentOff(b))) -> (exists a (Caused(a, c)))","(exists a (exists b (Sneezed(a) and WentOff(b)))) -> (exists c (exists a (Caused(a, c))))",LF
20,0,equivocation,"I like my steak rare. But I don’t care for aardvark steak, even though it’s the rarest steak in the world."," ""Aardvark steak is the rarest steak in the world.""  "," ""I do not like aardvark steak.""","IsAardvarkSteak(a),  IsRarestSteak(b),  IsInWorld(b)",LikesAardvarkSteak(d),[],"[(' Aardvark steak', ' aardvark steak')]","[(' the rarest steak', ' I')]",IsAardvarkSteak(a) and IsRarestSteak(b) and IsInWorld(b),~LikesAardvarkSteak(d),(exists b (IsAardvarkSteak(a) and IsRarestSteak(b) and IsInWorld(b))) -> (forall d (~LikesAardvarkSteak(d))),(exists a (exists b (IsAardvarkSteak(a) and IsRarestSteak(b) and IsInWorld(b)))) -> (exists d (~LikesAardvarkSteak(d))),LF
21,0,faulty generalization,"If you allow the students to redo this one test, they will always want to redo all future tests"," ""Allowing the students to redo this one test will make them always want to redo all future tests."""," ""Students will always want to redo all future tests.""","AllowRedo(a, c),  WantsRedo(a, d)","WantsRedo(a, e)",[],"[(' them', ' Students')]","[(' The students', ' Students'), (' this one test', ' Students'), (' them', ' future tests')]","(AllowRedo(a, c) and WantsRedo(a, d))","WantsRedo(a, e)","(exists a (exists c ((AllowRedo(a, c) and WantsRedo(a, d))))) -> (forall a (WantsRedo(a, e)))","(exists c (exists a (exists d ((AllowRedo(a, c) and WantsRedo(a, d)))))) -> (exists e (exists a (WantsRedo(a, e))))",
22,0,fallacy of relevance,"There is no need for additional taxes for education. Every year we throw more money into education, and all they do is hire more management and build more buildings. None of the money actually reaches the classroom or is really used for education.", Every year more money is spent on education for hiring management and building buildings., Additional taxes are not needed for education.,"IsSpentOnEducation(b),  IsForHiringManagement(b),  IsForBuildingBuildings(b)",IsNotNeededForEducation(e),"[('IsNotNeededForEducation(e)', 'IsSpentOnEducation(b)'), ('IsNotNeededForEducation(e)', '  IsForHiringManagement(b)'), ('IsNotNeededForEducation(e)', '  IsForBuildingBuildings(b)')]","[(' education', ' education')]",[],IsSpentOnEducation(b) and IsForHiringManagement(b) and IsForBuildingBuildings(b),IsNotNeededForEducation(e),(IsSpentOnEducation(b) and IsForHiringManagement(b) and IsForBuildingBuildings(b) & (forall e (forall b (IsNotNeededForEducation(e) -> IsSpentOnEducation(b)))) & (forall e (forall b (IsNotNeededForEducation(e) ->   IsForHiringManagement(b)))) & (forall e (forall b (IsNotNeededForEducation(e) ->   IsForBuildingBuildings(b))))) -> (IsNotNeededForEducation(e)),(exists b (IsSpentOnEducation(b) and IsForHiringManagement(b) and IsForBuildingBuildings(b)) & (forall g (forall f (IsNotNeededForEducation(f) -> IsSpentOnEducation(g)))) & (forall i (forall h (IsNotNeededForEducation(h) ->   IsForHiringManagement(i)))) & (forall k (forall j (IsNotNeededForEducation(j) ->   IsForBuildingBuildings(k))))) -> (exists e (IsNotNeededForEducation(e))),LF
23,0,false causality,Believing that the cause of the Reformation was simply Martin Luther posting his theses, Martin Luther posting his theses caused the Reformation.  , The only cause of the Reformation was Martin Luther posting his theses.,"PostedTheses(a, b),  CausedReformation(b, c)","CausedReformation(d, a),  PostedTheses(a, b)",[],"[(' Martin Luther', ' Martin Luther'), (' his theses', ' his theses')]","[(' Martin Luther', ' the Reformation')]","PostedTheses(a, b) and CausedReformation(b, c)","CausedReformation(d, a) and PostedTheses(a, b)","(forall c (PostedTheses(a, b) and CausedReformation(b, c))) -> (exists a (CausedReformation(d, a) and PostedTheses(a, b)))","(exists c (exists a (exists b (PostedTheses(a, b) and CausedReformation(b, c))))) -> (exists a (exists d (exists b (CausedReformation(d, a) and PostedTheses(a, b)))))",LF
24,0,false causality,The party was going great! Then Gerald showed up and little by little people started collecting their coats and heading home. Gerald ruined the party., Gerald ruined the party.  , People left the party because Gerald was there.,"RuinedParty(a, b)","LeftParty(c, b),  WasAtParty(a)","[('RuinedParty(a, b)', 'LeftParty(c, b)'), ('LeftParty(c, b)', 'RuinedParty(a, b)'), ('RuinedParty(a, b)', '  WasAtParty(a)'), ('  WasAtParty(a)', 'RuinedParty(a, b)')]","[(' Gerald', ' Gerald'), (' the party', ' the party')]",[],"RuinedParty(a, b)","WasAtParty(a) and LeftParty(c, b)","(RuinedParty(a, b) & (forall c (forall a (forall b (RuinedParty(a, b) -> LeftParty(c, b))))) & (forall c (forall a (forall b (LeftParty(c, b) -> RuinedParty(a, b))))) & (forall a (forall b (RuinedParty(a, b) ->   WasAtParty(a)))) & (forall a (forall b (  WasAtParty(a) -> RuinedParty(a, b))))) -> (WasAtParty(a) and LeftParty(c, b))","(exists a (exists b (RuinedParty(a, b))) & (forall e (forall f (forall d (RuinedParty(d,e) -> LeftParty(f,e))))) & (forall g (forall i (forall h (LeftParty(g,h) -> RuinedParty(i,h))))) & (forall k (forall j (RuinedParty(j,k) ->   WasAtParty(j)))) & (forall l (forall m (  WasAtParty(l) -> RuinedParty(l,m))))) -> (exists c (exists a (exists b (WasAtParty(a) and LeftParty(c, b)))))",Valid
25,0,fallacy of logic,"I can’t stop eating these chocolates.  I really love chocolate, or I seriously lack willpower.  I know I really love chocolate; therefore, I cannot lack willpower.", I really love chocolate.  , I cannot lack willpower.,LovesChocolate(a),LacksWillpower(a),"[('LovesChocolate(a)', 'LacksWillpower(a)')]","[(' I', ' I')]",[],LovesChocolate(a),~LacksWillpower(a),(LovesChocolate(a) & (forall a (LovesChocolate(a) -> LacksWillpower(a)))) -> (~LacksWillpower(a)),(exists a (LovesChocolate(a)) & (forall d (LovesChocolate(d) -> LacksWillpower(d)))) -> (exists a (~LacksWillpower(a))),LF
26,0,false causality,"Shortly after MySpace became popular, U.S. soldiers found Saddam Hussein.", U.S. soldiers found Saddam Hussein shortly after MySpace became popular.  , MySpace becoming popular helped find Saddam Hussein.,"Found(a, c),  BecamePopular(b)","BecamePopular(b),  HelpedFind(a)",[],"[(' Saddam Hussein', ' Saddam Hussein'), (' MySpace', ' MySpace')]",[],"Found(a, c) and BecamePopular(b)",BecamePopular(b) and HelpedFind(a),"(Found(a, c) and BecamePopular(b)) -> (BecamePopular(b) and HelpedFind(a))","(exists c (exists a (exists b (Found(a, c) and BecamePopular(b))))) -> (exists a (exists b (BecamePopular(b) and HelpedFind(a))))",LF
27,0,false causality,Jimmy isn't at school today. He must be on a family trip., Jimmy isn't at school today.  , Jimmy is on a family trip.,IsNotAtSchool(a),IsOnFamilyTrip(a),"[('IsOnFamilyTrip(a)', 'IsNotAtSchool(a)')]","[(' Jimmy', ' Jimmy')]",[],IsNotAtSchool(a),IsOnFamilyTrip(a),(IsNotAtSchool(a) & (forall a (IsOnFamilyTrip(a) -> IsNotAtSchool(a)))) -> (IsOnFamilyTrip(a)),(exists a (IsNotAtSchool(a)) & (forall d (IsOnFamilyTrip(d) -> IsNotAtSchool(d)))) -> (exists a (IsOnFamilyTrip(a))),LF
28,0,circular reasoning,"I am athletic because I run, and I run because I'm athletic."," ""I am athletic and I run.""  "," ""Being athletic means running.""","IsAthletic(a),  Runs(a)","IsAthletic(b),  MeansRunning(b)","[('IsAthletic(a)', '  MeansRunning(b)'), ('  Runs(a)', 'IsAthletic(b)'), ('  Runs(a)', '  MeansRunning(b)')]",[],[],IsAthletic(a) and Runs(a),IsAthletic(b) and MeansRunning(b),(IsAthletic(a) and Runs(a) & (forall a (forall b (IsAthletic(a) ->   MeansRunning(b)))) & (forall a (forall b (  Runs(a) -> IsAthletic(b)))) & (forall a (forall b (  Runs(a) ->   MeansRunning(b))))) -> (IsAthletic(b) and MeansRunning(b)),(exists a (IsAthletic(a) and Runs(a)) & (forall e (forall d (IsAthletic(d) ->   MeansRunning(e)))) & (forall g (forall f (  Runs(f) -> IsAthletic(g)))) & (forall i (forall h (  Runs(h) ->   MeansRunning(i))))) -> (exists b (IsAthletic(b) and MeansRunning(b))),Valid
29,0,false causality,You know Jane Fonda’s exercise videos must be worth the money. Look at the great shape she’s in., Jane Fonda is in great shape.  , Jane Fonda's exercise videos are worth the money.,IsInGreatShape(a),IsWorthTheMoney(c),"[('IsInGreatShape(a)', 'IsWorthTheMoney(c)'), ('IsWorthTheMoney(c)', 'IsInGreatShape(a)')]",[],"[("" Jane Fonda's exercise videos"", ' Jane Fonda'), (' the money', ' great shape')]",IsInGreatShape(a),IsWorthTheMoney(c),(forall a (IsInGreatShape(a)) & (forall c (forall a (IsInGreatShape(a) -> IsWorthTheMoney(c)))) & (forall c (forall a (IsWorthTheMoney(c) -> IsInGreatShape(a))))) -> (exists c (IsWorthTheMoney(c))),(exists a (IsInGreatShape(a)) & (forall e (forall f (IsInGreatShape(e) -> IsWorthTheMoney(f)))) & (forall g (forall h (IsWorthTheMoney(g) -> IsInGreatShape(h))))) -> (exists c (IsWorthTheMoney(c))),Valid
30,0,fallacy of credibility,Albert Einstein was extremely impressed with this theory., Albert Einstein was extremely impressed with this theory.  , The theory is impressive.,"IsImpressedWith(a, b)",IsImpressive(c),"[('IsImpressedWith(a, b)', 'IsImpressive(c)')]",[],"[(' this theory', ' The theory')]","IsImpressedWith(a, b)",IsImpressive(c),"(exists b (IsImpressedWith(a, b)) & (forall c (forall a (forall b (IsImpressedWith(a, b) -> IsImpressive(c)))))) -> (forall c (IsImpressive(c)))","(exists a (exists b (IsImpressedWith(a, b))) & (forall e (forall f (forall d (IsImpressedWith(d,e) -> IsImpressive(f)))))) -> (exists c (IsImpressive(c)))",Valid
31,0,false causality,“I sneezed exactly at the same time the power went off. My sneeze must’ve done something to make the power go off. “," ""I sneezed at the same time the power went off."""," ""My sneeze made the power go off.""","Sneezed(b),  WentOff(a)","MadeGoOff(c, a)",[],"[(' the power', ' the power')]","[(' I', ' the power')]",Sneezed(b) and WentOff(a),"MadeGoOff(c, a)","(exists b (Sneezed(b) and WentOff(a))) -> (forall a (MadeGoOff(c, a)))","(exists a (exists b (Sneezed(b) and WentOff(a)))) -> (exists c (exists a (MadeGoOff(c, a))))",LF
32,0,faulty generalization,"It’s getting late, and we still have to decide on the school budget. What do you say we just leave it as is and we can call it a night?", It is getting late., We should leave the school budget as it is.,IsGettingLate(a),LeaveAsIs(b),"[('IsGettingLate(a)', 'LeaveAsIs(b)'), ('LeaveAsIs(b)', 'IsGettingLate(a)')]","[(' It', ' We')]",[],IsGettingLate(a),LeaveAsIs(b),(IsGettingLate(a) & (forall a (forall b (IsGettingLate(a) -> LeaveAsIs(b)))) & (forall a (forall b (LeaveAsIs(b) -> IsGettingLate(a))))) -> (LeaveAsIs(b)),(exists a (IsGettingLate(a)) & (forall e (forall d (IsGettingLate(d) -> LeaveAsIs(e)))) & (forall g (forall f (LeaveAsIs(f) -> IsGettingLate(g))))) -> (exists b (LeaveAsIs(b))),Valid
33,0,ad hominem,"Speaker 1 (Democrat): “Donald Trump is a known adulterer. It reflects badly on his character, and suggests he might not be trustworthy.”
Speaker 2 (Republican): “What about Bill Clinton? You didn’t seem to care when he cheated.”"," ""Donald Trump is a known adulterer and it reflects badly on his character.""  "," ""Donald Trump might not be trustworthy.""","IsKnownAdulterer(a),  ReflectsBadlyOnCharacter(a)",IsNotTrustworthy(a),"[('IsKnownAdulterer(a)', 'IsNotTrustworthy(a)')]","[(' Donald Trump', ' Donald Trump')]","[(' Donald Trump', ' his character')]",IsKnownAdulterer(a) and ReflectsBadlyOnCharacter(a),~IsNotTrustworthy(a),(IsKnownAdulterer(a) and ReflectsBadlyOnCharacter(a) & (forall a (IsKnownAdulterer(a) -> IsNotTrustworthy(a)))) -> (~IsNotTrustworthy(a)),(exists a (IsKnownAdulterer(a) and ReflectsBadlyOnCharacter(a)) & (forall c (IsKnownAdulterer(c) -> IsNotTrustworthy(c)))) -> (exists a (~IsNotTrustworthy(a))),LF
34,0,ad hominem,"I hope I presented my argument clearly.  Now, my opponent will attempt to refute my argument by his own fallacious, incoherent, illogical version of history."," The opponent's version of history is fallacious, incoherent, and illogical.  ", The opponent will use a fallacious version of history to refute the argument. ,"IsFallacious(a),  IsIncoherent(a),  IsIllogical(a)","IsOpponent(b),  IsFallacious(c),  UsesToRefute(b, c, d)","[('IsFallacious(a)', 'IsOpponent(b)'), ('IsFallacious(a)', '  UsesToRefute(b, c, d)'), ('  IsIncoherent(a)', 'IsOpponent(b)'), ('  IsIncoherent(a)', '  IsFallacious(c)'), ('  IsIncoherent(a)', '  UsesToRefute(b, c, d)'), ('  IsIllogical(a)', 'IsOpponent(b)'), ('  IsIllogical(a)', '  IsFallacious(c)'), ('  IsIllogical(a)', '  UsesToRefute(b, c, d)')]",[],"[(' a fallacious version of history', "" The opponent's version of history""), (' the argument', "" The opponent's version of history"")]",IsFallacious(a) and IsIncoherent(a) and IsIllogical(a),"IsOpponent(b) and IsFallacious(c) and UsesToRefute(b, c, d)","(forall a (IsFallacious(a) and IsIncoherent(a) and IsIllogical(a)) & (forall a (forall b (IsFallacious(a) -> IsOpponent(b)))) & (forall c (forall a (forall d (forall b (IsFallacious(a) ->   UsesToRefute(b, c, d)))))) & (forall a (forall b (  IsIncoherent(a) -> IsOpponent(b)))) & (forall c (forall a (  IsIncoherent(a) ->   IsFallacious(c)))) & (forall c (forall a (forall d (forall b (  IsIncoherent(a) ->   UsesToRefute(b, c, d)))))) & (forall a (forall b (  IsIllogical(a) -> IsOpponent(b)))) & (forall c (forall a (  IsIllogical(a) ->   IsFallacious(c)))) & (forall c (forall a (forall d (forall b (  IsIllogical(a) ->   UsesToRefute(b, c, d))))))) -> (exists d (exists c (IsOpponent(b) and IsFallacious(c) and UsesToRefute(b, c, d))))","(exists a (IsFallacious(a) and IsIncoherent(a) and IsIllogical(a)) & (forall e (forall f (IsFallacious(e) -> IsOpponent(f)))) & (forall g (forall i (forall j (forall h (IsFallacious(g) ->   UsesToRefute(h,i,j)))))) & (forall l (forall k (  IsIncoherent(k) -> IsOpponent(l)))) & (forall n (forall m (  IsIncoherent(m) ->   IsFallacious(n)))) & (forall q (forall r (forall o (forall p (  IsIncoherent(o) ->   UsesToRefute(p,q,r)))))) & (forall s (forall t (  IsIllogical(s) -> IsOpponent(t)))) & (forall u (forall v (  IsIllogical(u) ->   IsFallacious(v)))) & (forall w (forall z (forall y (forall x (  IsIllogical(w) ->   UsesToRefute(x,y,z))))))) -> (exists c (exists d (exists b (IsOpponent(b) and IsFallacious(c) and UsesToRefute(b, c, d)))))",Valid
35,0,false causality,"Every time we sacrifice virgins, it rains. Therefore, sacrificing virgins causes it to rain."," ""Every time virgins are sacrificed, it rains.""  "," ""Sacrificing virgins causes rain""",IsSacrificed(a),"IsSacrificed(a),  CausesRain(a)",[],"[(' Virgins', ' Virgins')]",[],IsSacrificed(a),IsSacrificed(a) and CausesRain(a),(IsSacrificed(a)) -> (IsSacrificed(a) and CausesRain(a)),(exists a (IsSacrificed(a))) -> (exists a (IsSacrificed(a) and CausesRain(a))),LF
36,0,ad hominem,"Salesman: This car gets better than average gas mileage and is one of the most reliable cars according to Consumer Reports.
Will: I doubt it—you obviously just want to sell me that car.
"," ""This car gets better than average gas mileage and is one of the most reliable cars according to Consumer Reports.""  "," ""The salesman wants to sell Will that car.""","GetsBetterGasMileage(a, b),  IsMostReliable(a, c),  AccordingTo(a, d)","WantsToSell(e, f, g)",[],[],"[(' average gas mileage', ' Will'), (' average gas mileage', ' that car'), (' that car', ' most reliable cars')]","GetsBetterGasMileage(a, b) and IsMostReliable(a, c) and AccordingTo(a, d)","WantsToSell(e, f, g)","(forall c (exists b (GetsBetterGasMileage(a, b) and IsMostReliable(a, c) and AccordingTo(a, d)))) -> (forall g (forall f (WantsToSell(e, f, g))))","(exists c (exists a (exists d (exists b (GetsBetterGasMileage(a, b) and IsMostReliable(a, c) and AccordingTo(a, d)))))) -> (exists e (exists g (exists f (WantsToSell(e, f, g)))))",LF
37,0,fallacy of relevance,Labor unions in America are just as bad as Russia under Stalin!," ""Labor unions in America are as bad as Russia under Stalin.""  "," ""Labor unions in America are bad""","IsInAmerica(a),  IsUnder(c, d)","IsInAmerica(a),  IsBad(a)",[],"[(' Labor unions', ' Labor unions'), (' America', ' America')]","[(' Labor unions', ' America'), (' Labor unions', ' America')]","IsInAmerica(a) and IsUnder(c, d)",IsInAmerica(a) and IsBad(a),"(IsInAmerica(a) and IsUnder(c, d)) -> (IsInAmerica(a) and IsBad(a))","(exists c (exists a (exists d (IsInAmerica(a) and IsUnder(c, d))))) -> (exists a (IsInAmerica(a) and IsBad(a)))",LF
38,0,ad populum,"""Everyone was driving over the speed limit, so I shouldn't have gotten a ticket for it!"" is an example of which logical fallacy?"," ""Everyone was driving over the speed limit.""  "," ""I should not have gotten a ticket for driving over the speed limit.""","IsDriving(b),  IsOverSpeedLimit(b, a)","IsDriving(c),  IsOverSpeedLimit(c, a),  HasTicket(c, d)",[],"[(' speed limit', ' speed limit')]",[],"IsDriving(b) and IsOverSpeedLimit(b, a)","IsDriving(c) and IsOverSpeedLimit(c, a) and ~HasTicket(c, d)","(IsDriving(b) and IsOverSpeedLimit(b, a)) -> (IsDriving(c) and IsOverSpeedLimit(c, a) and ~HasTicket(c, d))","(exists a (exists b (IsDriving(b) and IsOverSpeedLimit(b, a)))) -> (exists c (exists a (exists d (IsDriving(c) and IsOverSpeedLimit(c, a) and ~HasTicket(c, d)))))",LF
39,0,ad hominem,Why would you trust Paris Hilton to sell health food? She drinks and parties and has multiple partners.," ""Paris Hilton drinks and parties and has multiple partners.""  "," ""Paris Hilton should not be trusted to sell health food.""","Drinks(a),  Parties(a),  HasMultiplePartners(a)","NotTrustedToSell(a, c)","[('Drinks(a)', 'NotTrustedToSell(a, c)'), ('  Parties(a)', 'NotTrustedToSell(a, c)'), ('  HasMultiplePartners(a)', 'NotTrustedToSell(a, c)'), ('NotTrustedToSell(a, c)', '  HasMultiplePartners(a)')]","[(' Paris Hilton', ' Paris Hilton')]","[(' Paris Hilton', ' multiple partners'), (' health food', ' multiple partners')]",Drinks(a) and Parties(a) and HasMultiplePartners(a),"~NotTrustedToSell(a, c)","(Drinks(a) and Parties(a) and HasMultiplePartners(a) & (forall c (forall a (Drinks(a) -> NotTrustedToSell(a, c)))) & (forall c (forall a (  Parties(a) -> NotTrustedToSell(a, c)))) & (forall c (forall a (  HasMultiplePartners(a) -> NotTrustedToSell(a, c)))) & (forall c (forall a (NotTrustedToSell(a, c) ->   HasMultiplePartners(a))))) -> (~NotTrustedToSell(a, c))","(exists a (Drinks(a) and Parties(a) and HasMultiplePartners(a)) & (forall e (forall d (Drinks(d) -> NotTrustedToSell(d,e)))) & (forall g (forall f (  Parties(f) -> NotTrustedToSell(f,g)))) & (forall i (forall h (  HasMultiplePartners(h) -> NotTrustedToSell(h,i)))) & (forall k (forall j (NotTrustedToSell(j,k) ->   HasMultiplePartners(j))))) -> (exists c (exists a (~NotTrustedToSell(a, c))))",LF
40,0,false causality,"“Yesterday, I walked under a ladder with an open umbrella indoors while spilling salt in front of a black cat. And I forgot to knock on wood with my lucky dice. That must be why I’m having such a bad day today. It’s bad luck.”"," ""I walked under a ladder with an open umbrella indoors while spilling salt in front of a black cat and forgot to knock on wood with lucky dice.""  "," ""Such actions cause a bad day due to bad luck.""","WalkUnder(a, b),  HaveOpenUmbrella(c),  SpillSalt(a, d),  IsBlackCat(e),  ForgetToKnockOnWood(a, f),  HaveLuckyDice(g)","CauseBadDay(h, i),  DueToBadLuck(i, j)","[('CauseBadDay(h, i)', '  HaveOpenUmbrella(c)'), ('  DueToBadLuck(i, j)', '  HaveOpenUmbrella(c)'), ('CauseBadDay(h, i)', '  SpillSalt(a, d)'), ('  DueToBadLuck(i, j)', '  SpillSalt(a, d)'), ('CauseBadDay(h, i)', '  IsBlackCat(e)'), ('CauseBadDay(h, i)', '  HaveLuckyDice(g)')]",[],"[(' I', ' a bad day'), (' I', ' bad luck'), (' bad luck', ' ladder'), (' lucky dice', ' Such actions')]","WalkUnder(a, b) and HaveOpenUmbrella(c) and SpillSalt(a, d) and IsBlackCat(e) and ForgetToKnockOnWood(a, f) and HaveLuckyDice(g)","CauseBadDay(h, i) and DueToBadLuck(i, j)","(exists g (forall b (exists a (WalkUnder(a, b) and HaveOpenUmbrella(c) and SpillSalt(a, d) and IsBlackCat(e) and ForgetToKnockOnWood(a, f) and HaveLuckyDice(g)))) & (forall i (forall c (forall h (CauseBadDay(h, i) ->   HaveOpenUmbrella(c))))) & (forall i (forall c (forall j (  DueToBadLuck(i, j) ->   HaveOpenUmbrella(c))))) & (forall i (forall a (forall d (forall h (CauseBadDay(h, i) ->   SpillSalt(a, d)))))) & (forall i (forall a (forall d (forall j (  DueToBadLuck(i, j) ->   SpillSalt(a, d)))))) & (forall e (forall i (forall h (CauseBadDay(h, i) ->   IsBlackCat(e))))) & (forall g (forall i (forall h (CauseBadDay(h, i) ->   HaveLuckyDice(g)))))) -> (forall h (forall j (forall i (CauseBadDay(h, i) and DueToBadLuck(i, j)))))","(exists e (exists f (exists c (exists d (exists b (exists g (exists a (WalkUnder(a, b) and HaveOpenUmbrella(c) and SpillSalt(a, d) and IsBlackCat(e) and ForgetToKnockOnWood(a, f) and HaveLuckyDice(g)))))))) & (forall l (forall m (forall k (CauseBadDay(k,l) ->   HaveOpenUmbrella(m))))) & (forall o (forall n (forall p (  DueToBadLuck(n,o) ->   HaveOpenUmbrella(p))))) & (forall q (forall s (forall r (forall t (CauseBadDay(q,r) ->   SpillSalt(s,t)))))) & (forall u (forall v (forall x (forall w (  DueToBadLuck(u,v) ->   SpillSalt(w,x)))))) & (forall z (forall y (CauseBadDay(y,z) ->   IsBlackCat({)))) & (CauseBadDay(|,}) ->   HaveLuckyDice(~))) -> (exists j (exists i (exists h (CauseBadDay(h, i) and DueToBadLuck(i, j)))))",
41,0,faulty generalization,"A car makes less pollution than a bus. Therefore, cars are less of a pollution problem than buses", A car makes less pollution than a bus.  , Cars are less of a pollution problem than buses.,"MakesLessPollutionThan(a, c)","MakesLessPollutionProblemThan(d, f)",[],[],"[(' A car', ' Cars'), (' pollution', ' pollution problem'), (' buses', ' a bus')]","MakesLessPollutionThan(a, c)","MakesLessPollutionProblemThan(d, f)","(forall c (exists a (MakesLessPollutionThan(a, c)))) -> (exists f (forall d (MakesLessPollutionProblemThan(d, f))))","(exists c (exists a (MakesLessPollutionThan(a, c)))) -> (exists f (exists d (MakesLessPollutionProblemThan(d, f))))",LF
42,0,appeal to emotion,"Preys on people’s emotions and sensitivities, can turn into a slippery slope"," ""Preying on people's emotions and sensitivities can turn into a slippery slope.""  "," ""Preying on people's emotions and sensitivities leads to negative consequences.""","PreysOn(a),  PreysOn(b),  CanTurnInto(c)","PreysOn(a),  PreysOn(b),  LeadsTo(d)","[('  LeadsTo(d)', 'PreysOn(a)'), ('  LeadsTo(d)', '  PreysOn(b)'), ('  CanTurnInto(c)', '  LeadsTo(d)')]","[("" People's emotions"", "" People's emotions""), (' sensitivities', ' sensitivities')]","[(' sensitivities', "" People's emotions""), (' sensitivities', "" People's emotions""), (' sensitivities', ' negative consequences'), (' slippery slope', ' sensitivities'), (' slippery slope', ' negative consequences')]",(PreysOn(a) and PreysOn(b)) and CanTurnInto(c),(PreysOn(a) and PreysOn(b)) and LeadsTo(d),(exists c (exists b ((PreysOn(a) and PreysOn(b)) and CanTurnInto(c))) & (forall a (forall d (  LeadsTo(d) -> PreysOn(a)))) & (forall d (forall b (  LeadsTo(d) ->   PreysOn(b)))) & (forall c (forall d (  CanTurnInto(c) ->   LeadsTo(d))))) -> (forall b (forall d (exists b (forall a ((PreysOn(a) and PreysOn(b)) and LeadsTo(d)))))),(exists c (exists a (exists b ((PreysOn(a) and PreysOn(b)) and CanTurnInto(c)))) & (forall e (forall f (  LeadsTo(e) -> PreysOn(f)))) & (forall g (forall h (  LeadsTo(g) ->   PreysOn(h)))) & (forall i (forall j (  CanTurnInto(i) ->   LeadsTo(j))))) -> (exists a (exists d (exists b ((PreysOn(a) and PreysOn(b)) and LeadsTo(d))))),
43,0,fallacy of logic,"Bats are mammals. Bats can fly. Pigs are also mammals, therefore pigs can fly."," ""Bats are mammals and bats can fly.""  "," ""Pigs can fly.""","IsMammal(a),  CanFly(a)",CanFly(c),[],[],[],IsMammal(a) and CanFly(a),CanFly(c),(IsMammal(a) and CanFly(a)) -> (CanFly(c)),(exists a (IsMammal(a) and CanFly(a))) -> (exists c (CanFly(c))),Valid
44,0,intentional,The Geo Metro is a superior car because it averages 43 miles per gallon., The Geo Metro averages 43 miles per gallon.  , The Geo Metro is a superior car.,Averages43MilesPerGallon(a),IsSuperiorCar(a),"[('Averages43MilesPerGallon(a)', 'IsSuperiorCar(a)'), ('IsSuperiorCar(a)', 'Averages43MilesPerGallon(a)')]","[(' The Geo Metro', ' The Geo Metro')]","[(' The Geo Metro', ' superior car')]",Averages43MilesPerGallon(a),IsSuperiorCar(a),(Averages43MilesPerGallon(a) & (forall a (Averages43MilesPerGallon(a) -> IsSuperiorCar(a))) & (forall a (IsSuperiorCar(a) -> Averages43MilesPerGallon(a)))) -> (IsSuperiorCar(a)),(exists a (Averages43MilesPerGallon(a)) & (forall c (Averages43MilesPerGallon(c) -> IsSuperiorCar(c))) & (forall d (IsSuperiorCar(d) -> Averages43MilesPerGallon(d)))) -> (exists a (IsSuperiorCar(a))),Valid
45,0,fallacy of relevance,"“While you may have concerns about my votes about the environment, I can assure you that I am an open minded individual. What we should really discuss is my record on votes that expanded educational opportunities for all children."""," ""I am an open-minded individual who has a record on votes that expanded educational opportunities for all children.""  "," ""Concerns about my votes on the environment should be dismissed.""","IsOpenMinded(a),  HasRecordOnVotes(a),  ExpandsEducationalOpportunities(d,e)","ConcernsVotesOnEnvironment(f, g)",[],[],"[(' I', ' My votes'), (' I', ' the environment'), (' an open-minded individual', ' My votes'), (' the environment', ' an open-minded individual'), (' My votes', ' a record on votes')]","IsOpenMinded(a) and HasRecordOnVotes(a) and ExpandsEducationalOpportunities(d,e)","ConcernsVotesOnEnvironment(f, g)","(exists a (IsOpenMinded(a) and HasRecordOnVotes(a) and ExpandsEducationalOpportunities(d,e))) -> (forall g (forall f (ConcernsVotesOnEnvironment(f, g))))","(exists e (exists a (exists d (IsOpenMinded(a) and HasRecordOnVotes(a) and ExpandsEducationalOpportunities(d,e))))) -> (exists g (exists f (ConcernsVotesOnEnvironment(f, g))))",LF
46,0,intentional,"Fish are the easiest pets to keep; they are inexpensive and require no maintenance at all. Plus, they are really pretty and soothing to watch.", Fish are inexpensive and require no maintenance.  , Fish are the easiest pets to keep.,"IsInexpensive(a),  RequiresNoMaintenance(a)","IsEasiestToKeep(a),  IsPet(a)","[('IsInexpensive(a)', 'IsEasiestToKeep(a)'), ('IsEasiestToKeep(a)', 'IsInexpensive(a)'), ('IsInexpensive(a)', '  IsPet(a)'), ('  IsPet(a)', 'IsInexpensive(a)'), ('  RequiresNoMaintenance(a)', 'IsEasiestToKeep(a)'), ('IsEasiestToKeep(a)', '  RequiresNoMaintenance(a)'), ('  RequiresNoMaintenance(a)', '  IsPet(a)'), ('  IsPet(a)', '  RequiresNoMaintenance(a)')]","[(' Fish', ' Fish')]",[],IsInexpensive(a) and RequiresNoMaintenance(a),IsEasiestToKeep(a) and IsPet(a),(IsInexpensive(a) and RequiresNoMaintenance(a) & (forall a (IsInexpensive(a) -> IsEasiestToKeep(a))) & (forall a (IsEasiestToKeep(a) -> IsInexpensive(a))) & (forall a (IsInexpensive(a) ->   IsPet(a))) & (forall a (  IsPet(a) -> IsInexpensive(a))) & (forall a (  RequiresNoMaintenance(a) -> IsEasiestToKeep(a))) & (forall a (IsEasiestToKeep(a) ->   RequiresNoMaintenance(a))) & (forall a (  RequiresNoMaintenance(a) ->   IsPet(a))) & (forall a (  IsPet(a) ->   RequiresNoMaintenance(a)))) -> (IsEasiestToKeep(a) and IsPet(a)),(exists a (IsInexpensive(a) and RequiresNoMaintenance(a)) & (forall c (IsInexpensive(c) -> IsEasiestToKeep(c))) & (forall d (IsEasiestToKeep(d) -> IsInexpensive(d))) & (forall e (IsInexpensive(e) ->   IsPet(e))) & (forall f (  IsPet(f) -> IsInexpensive(f))) & (forall g (  RequiresNoMaintenance(g) -> IsEasiestToKeep(g))) & (forall h (IsEasiestToKeep(h) ->   RequiresNoMaintenance(h))) & (forall i (  RequiresNoMaintenance(i) ->   IsPet(i))) & (forall j (  IsPet(j) ->   RequiresNoMaintenance(j)))) -> (exists a (IsEasiestToKeep(a) and IsPet(a))),Valid
47,0,intentional,I am only slightly obese.  That is perfectly normal here in America.," ""I am slightly obese.""  "," ""Being slightly obese is normal in America.""","IsObese(a),  IsSlightlyObese(a)",IsNormalIn(b),[],[],"[(' I', ' America')]",IsSlightlyObese(a),IsNormalIn(b),(exists a (IsSlightlyObese(a))) -> (forall b (IsNormalIn(b))),(exists a (IsSlightlyObese(a))) -> (exists b (IsNormalIn(b))),LF
48,0,ad populum,"Most people think the world is flat, therefore it is flat.", Most people think the world is flat.  , The world is flat.,ThinkWorldIsFlat(b),IsFlat(a),[],"[(' the world', ' The world')]",[],ThinkWorldIsFlat(b),IsFlat(a),(ThinkWorldIsFlat(b)) -> (IsFlat(a)),(exists b (ThinkWorldIsFlat(b))) -> (exists a (IsFlat(a))),LF
49,0,appeal to emotion,You have to give me a passing grade. I spent 150 hours on that project and missed every party this quarter.," ""I spent 150 hours on that project and missed every party this quarter.""  "," ""You have to give me a passing grade.""","Spent150HoursOn(b, a),  MissedParty(b, c, d)","Give(a, e, f)",[],"[(' that project', ' You')]","[(' I', ' me'), (' I', ' a passing grade'), (' that project', ' a passing grade'), (' this quarter', ' You'), (' this quarter', ' me'), (' this quarter', ' a passing grade')]","Spent150HoursOn(b, a) and MissedParty(b, c, d)","Give(a, e, f)","(exists d (exists a (exists b (Spent150HoursOn(b, a) and MissedParty(b, c, d))))) -> (forall a (forall f (forall e (Give(a, e, f)))))","(exists c (exists a (exists d (exists b (Spent150HoursOn(b, a) and MissedParty(b, c, d)))))) -> (exists e (exists f (exists a (Give(a, e, f)))))",LF
50,0,ad populum,"I guess I should buy my 12 year old daughter an iPhone. Everyone at her school has one, and I want her to fit in with the other kids.", Everyone at the daughter's school has an iPhone.  , You should buy the 12-year-old daughter an iPhone.,HasIPhone(a),"BuyIPhone(d, e),  Is12YearsOld(e)","[('  Is12YearsOld(e)', 'HasIPhone(a)')]",[],"[(' You', "" daughter's school""), (' 12-year-old daughter', "" daughter's school""), (' an iPhone', ' iPhone')]","IsAt(a, b) and HasIPhone(a)","Is12YearsOld(e) and BuyIPhone(d, e)","(forall b (IsAt(a, b) and HasIPhone(a)) & (forall e (forall a (  Is12YearsOld(e) -> HasIPhone(a))))) -> (exists e (exists d (Is12YearsOld(e) and BuyIPhone(d, e))))","(exists a (exists b (IsAt(a, b) and HasIPhone(a))) & (forall g (forall h (  Is12YearsOld(g) -> HasIPhone(h))))) -> (exists e (exists d (Is12YearsOld(e) and BuyIPhone(d, e))))",LF
51,0,intentional,Kerry’s plan will raise taxes by at least $900 billion his first hundred days., Kerry's plan will raise taxes by at least $900 billion in his first hundred days.  , Taxes will increase significantly soon.,"RaisesTaxes(b, a),  Amount(c),  TimeFrame(d)","WillIncrease(a),  SignificantIncrease(a)","[('WillIncrease(a)', 'RaisesTaxes(b, a)'), ('WillIncrease(a)', '  Amount(c)'), ('  SignificantIncrease(a)', '  Amount(c)'), ('  SignificantIncrease(a)', '  TimeFrame(d)')]","[(' taxes', ' Taxes')]",[],"(RaisesTaxes(b, a) and Amount(c)) and TimeFrame(d)",WillIncrease(a) and SignificantIncrease(a),"((RaisesTaxes(b, a) and Amount(c)) and TimeFrame(d) & (forall a (forall b (WillIncrease(a) -> RaisesTaxes(b, a)))) & (forall c (forall a (WillIncrease(a) ->   Amount(c)))) & (forall c (forall a (  SignificantIncrease(a) ->   Amount(c)))) & (forall a (forall d (  SignificantIncrease(a) ->   TimeFrame(d))))) -> (WillIncrease(a) and SignificantIncrease(a))","(exists c (exists a (exists d (exists b ((RaisesTaxes(b, a) and Amount(c)) and TimeFrame(d))))) & (forall g (forall f (forall h (WillIncrease(f) -> RaisesTaxes(g,h))))) & (forall i (forall j (WillIncrease(i) ->   Amount(j)))) & (forall l (forall k (  SignificantIncrease(k) ->   Amount(l)))) & (forall n (forall m (  SignificantIncrease(m) ->   TimeFrame(n))))) -> (exists a (WillIncrease(a) and SignificantIncrease(a)))",
52,0,fallacy of extension,"If you told a person, ""I think we should all stay inside to bend the curve of COVID-19"" and they replied, ""so I guess you want people to lose their jobs then,"" what logical fallacy are they using?"," ""Staying inside bends the curve of COVID-19.""  "," ""You want people to lose their jobs.""",BendsCurveOfCOVID19(b),WantsToLoseJobs(a),[],"[(' the curve', ' You'), (' the curve', ' people')]","[(' the curve', ' their jobs'), (' COVID-19', ' You'), (' COVID-19', ' their jobs')]",BendsCurveOfCOVID19(b),WantsToLoseJobs(a),(BendsCurveOfCOVID19(b)) -> (WantsToLoseJobs(a)),(exists b (BendsCurveOfCOVID19(b))) -> (exists a (WantsToLoseJobs(a))),LF
53,0,appeal to emotion,"Power lines cause cancer. I met a little boy with cancer who lived just 20 miles from a power line who looked into my eyes and said, in his weak voice, “Please do whatever you can so that other kids won’t have to go through what I am going through.” I urge you to vote for this bill to tear down all power lines and replace them with monkeys on treadmills."," ""Power lines cause cancer."""," ""Vote for the bill to tear down all power lines and replace them with monkeys on treadmills.""",CauseCancer(a),"VotesFor(c),  TearsDown(c, a),  ReplacesWith(a, d),  On(d, e)","[('CauseCancer(a)', '  On(d, e)')]","[(' Power lines', ' power lines')]",[],CauseCancer(a),"VotesFor(c) and (TearsDown(c, a) and ReplacesWith(a, d) and On(d, e))","(CauseCancer(a) & (forall e (forall a (forall d (CauseCancer(a) ->   On(d, e)))))) -> (VotesFor(c) and (TearsDown(c, a) and ReplacesWith(a, d) and On(d, e)))","(exists a (CauseCancer(a)) & (forall g (forall i (forall h (CauseCancer(g) ->   On(h,i)))))) -> (exists e (exists c (exists a (exists d (VotesFor(c) and (TearsDown(c, a) and ReplacesWith(a, d) and On(d, e)))))))",LF
54,0,ad hominem,"Student: Hey, Professor Moore, we shouldn't have to read this book by Freud. Everyone knows he used cocaine.", Freud used cocaine.  , We shouldn't have to read the book by Freud.,"Used(a, b)",IsByFreud(c),"[('Used(a, b)', 'IsByFreud(c)'), ('IsByFreud(c)', 'Used(a, b)')]",[],[],"Used(a, b)",IsByFreud(c) and ~ShouldRead(c),"(Used(a, b) & (forall c (forall a (forall b (Used(a, b) -> IsByFreud(c))))) & (forall c (forall a (forall b (IsByFreud(c) -> Used(a, b)))))) -> (IsByFreud(c) and ~ShouldRead(c))","(exists a (exists b (Used(a, b))) & (forall e (forall f (forall d (Used(d,e) -> IsByFreud(f))))) & (forall g (forall i (forall h (IsByFreud(g) -> Used(h,i)))))) -> (exists c (IsByFreud(c) and ~ShouldRead(c)))",LF
55,0,false causality,"Our house was burglarized right after that new family moved in next door. Therefore, that new family must have been involved.", The house was burglarized after the new family moved in next door.  , The new family was involved in the burglary.,"WasBurglarized(b),  MovedIn(a),  IsNextDoor(c)",WasInvolvedInBurglary(a),[],"[(' the new family', ' The new family')]","[(' The house', ' The new family'), (' next door', ' The new family')]",MovedIn(a) and IsNextDoor(c) and WasBurglarized(b),WasInvolvedInBurglary(a),(exists c (exists b (MovedIn(a) and IsNextDoor(c) and WasBurglarized(b)))) -> (forall a (WasInvolvedInBurglary(a))),(exists c (exists a (exists b (MovedIn(a) and IsNextDoor(c) and WasBurglarized(b))))) -> (exists a (WasInvolvedInBurglary(a))),LF
56,0,circular reasoning,"Witchcraft remains our most urgent spiritual problem because it threatens
our very souls."," ""Witchcraft is our most urgent spiritual problem.""  "," ""Witchcraft threatens our souls.""",IsWitchcraft(b),"Threatens(a, c)",[],"[(' Witchcraft', ' Witchcraft')]","[(' our souls', ' our most urgent spiritual problem')]",IsWitchcraft(b),"Threatens(a, c)","(forall b (IsWitchcraft(b))) -> (exists c (Threatens(a, c)))","(exists b (IsWitchcraft(b))) -> (exists c (exists a (Threatens(a, c))))",LF
57,0,false dilemma,"Senator Jill: ""We'll have to cut education funding this year.""
Senator Bill: ""Why?""
Senator Jill: ""Well, either we cut the social programs or we live with a huge deficit and we can't live with the deficit."""," ""We cannot live with a huge deficit."""," ""We will cut education funding this year.""","IsLivingWith(a, b),  IsHugeDeficit(b)","WillCut(a, c),  IsForThisYear(d)",[],"[(' We', ' We')]","[(' We', ' this year'), (' education funding', ' huge deficit'), (' huge deficit', ' this year')]","IsHugeDeficit(b) and ~IsLivingWith(a, b)","WillCut(a, c) and IsForThisYear(d)","(forall b (exists a (IsHugeDeficit(b) and ~IsLivingWith(a, b)))) -> (exists c (forall d (WillCut(a, c) and IsForThisYear(d))))","(exists a (exists b (IsHugeDeficit(b) and ~IsLivingWith(a, b)))) -> (exists c (exists a (exists d (WillCut(a, c) and IsForThisYear(d)))))",LF
58,0,appeal to emotion,"""You'll make the right decision because you have something that not many people do: you have heart.""?"," ""You have heart.""  "," ""You will make the right decision.""",HasHeart(a),WillMakeDecision(a),"[('HasHeart(a)', 'WillMakeDecision(a)'), ('WillMakeDecision(a)', 'HasHeart(a)')]","[(' You', ' You'), (' heart', ' the right decision')]","[(' the right decision', ' You'), (' heart', ' You')]",HasHeart(a),WillMakeDecision(a),(HasHeart(a) & (forall a (HasHeart(a) -> WillMakeDecision(a))) & (forall a (WillMakeDecision(a) -> HasHeart(a)))) -> (WillMakeDecision(a)),(exists a (HasHeart(a)) & (forall d (HasHeart(d) -> WillMakeDecision(d))) & (forall e (WillMakeDecision(e) -> HasHeart(e)))) -> (exists a (WillMakeDecision(a))),Valid
59,0,faulty generalization,Christine has a terrible experience with a boyfriend. She decides that all boys are mean. This is an example of which logical fallacy?," ""Christine had a terrible experience with a boyfriend.""  "," ""All boys are mean.""","HadTerribleExperience(a),  WithBoyfriend(b, c)",IsMean(d),[],[],"[(' boyfriend', ' Boys')]","HadTerribleExperience(a) and WithBoyfriend(b, c)",Boys(d) and IsMean(d),"(exists c (HadTerribleExperience(a) and WithBoyfriend(b, c))) -> (forall d (Boys(d) and IsMean(d)))","(exists c (exists a (exists b (HadTerribleExperience(a) and WithBoyfriend(b, c))))) -> (exists d (Boys(d) and IsMean(d)))",LF
60,0,circular reasoning,Smoking pot is against the law because it's wrong; I know it's wrong because it is against the law., Smoking pot is against the law.  , Smoking pot is wrong.,"IsSmoked(a),  IsAgainst(a, b)",IsWrong(c),[],[],"[(' Smoking pot', ' the law')]","IsSmoked(a) and IsAgainst(a, b)",IsWrong(c),"(forall b (IsSmoked(a) and IsAgainst(a, b))) -> (exists c (IsWrong(c)))","(exists a (exists b (IsSmoked(a) and IsAgainst(a, b)))) -> (exists c (IsWrong(c)))",LF
61,0,circular reasoning,"""You can't give me a D because I'm an A student!"""," ""I am an A student.""  "," ""You cannot give me a D grade.""",IsAStudent(a),"CannotGive(e, d)",[],[],"[(' I', ' me'), (' You', ' A student'), (' me', ' A student')]",IsAStudent(a),"CannotGive(e, d)","(exists a (IsAStudent(a))) -> (forall d (CannotGive(e, d)))","(exists a (IsAStudent(a))) -> (exists e (exists d (CannotGive(e, d))))",LF
62,0,fallacy of logic,People who buy stocks are no different from people who bet on horse racing. They both risk their money with little chance of making a big profit., People who buy stocks are no different from people who bet on horse racing. , People who buy stocks have little chance of making a big profit.,"BuysStocks(a),  BetsOnHorseRacing(b)","BuysStocks(a),  HasLittleChanceOfMaking(e)",[],"[(' People who buy stocks', ' People who buy stocks')]","[(' people who bet on horse racing', ' big profit'), (' stocks', ' People who buy stocks'), (' big profit', ' stocks'), (' big profit', ' horse racing')]",BuysStocks(a) and BetsOnHorseRacing(a),BuysStocks(a) and HasLittleChanceOfMaking(e),(BuysStocks(a) and BetsOnHorseRacing(a)) -> (BuysStocks(a) and HasLittleChanceOfMaking(e)),(exists a (BuysStocks(a) and BetsOnHorseRacing(a))) -> (exists e (exists a (BuysStocks(a) and HasLittleChanceOfMaking(e)))),LF
63,0,appeal to emotion,"I cannot get a job because the public education system failed me;  I have to steal to  survive.  It is society's fault, not mine.", The public education system failed me.  , Society is at fault for me having to steal to survive.,"Failed(b, a)","AtFault(c),  HasToSteal(a),  HasToSurvive(a)","[('AtFault(c)', 'Failed(b, a)'), ('  HasToSteal(a)', 'Failed(b, a)'), ('  HasToSurvive(a)', 'Failed(b, a)')]","[(' me', ' me')]",[],"Failed(b, a)",AtFault(c) and (HasToSteal(a) and HasToSurvive(a)),"(Failed(b, a) & (forall c (forall a (forall b (AtFault(c) -> Failed(b, a))))) & (forall a (forall b (  HasToSteal(a) -> Failed(b, a)))) & (forall a (forall b (  HasToSurvive(a) -> Failed(b, a))))) -> (AtFault(c) and (HasToSteal(a) and HasToSurvive(a)))","(exists a (exists b (Failed(b, a))) & (forall e (forall f (forall d (AtFault(d) -> Failed(e,f))))) & (forall g (forall i (forall h (  HasToSteal(g) -> Failed(h,i))))) & (forall l (forall k (forall j (  HasToSurvive(j) -> Failed(k,l)))))) -> (exists c (exists a (AtFault(c) and (HasToSteal(a) and HasToSurvive(a)))))",LF
64,0,faulty generalization,"Trump presents a dark image of America if Clinton is elected, with “Syrian refugees flooding in, illegal immigrants convicted of crimes staying.”"," ""Syrian refugees are flooding in and illegal immigrants convicted of crimes are staying."""," ""America will have a dark image if Clinton is elected.""","AreFloodingIn(a),  AreIllegal(b),  AreConvictedOf(b, c)","IsElected(e),  HasDarkImage(d)","[('AreFloodingIn(a)', 'IsElected(e)'), ('AreFloodingIn(a)', '  HasDarkImage(d)'), ('  HasDarkImage(d)', 'AreFloodingIn(a)'), ('  AreIllegal(b)', 'IsElected(e)'), ('  HasDarkImage(d)', '  AreConvictedOf(b, c)')]",[],"[(' crimes', ' America')]","AreFloodingIn(a) and (AreIllegal(b) and AreConvictedOf(b, c))",IsElected(e) and HasDarkImage(d),"(exists c (AreFloodingIn(a) and (AreIllegal(b) and AreConvictedOf(b, c))) & (forall e (forall a (AreFloodingIn(a) -> IsElected(e)))) & (forall a (forall d (AreFloodingIn(a) ->   HasDarkImage(d)))) & (forall a (forall d (  HasDarkImage(d) -> AreFloodingIn(a)))) & (forall e (forall b (  AreIllegal(b) -> IsElected(e)))) & (forall c (forall d (forall b (  HasDarkImage(d) ->   AreConvictedOf(b, c)))))) -> (forall d (IsElected(e) and HasDarkImage(d)))","(exists c (exists a (exists b (AreFloodingIn(a) and (AreIllegal(b) and AreConvictedOf(b, c))))) & (forall g (forall f (AreFloodingIn(f) -> IsElected(g)))) & (forall i (forall h (AreFloodingIn(h) ->   HasDarkImage(i)))) & (forall k (forall j (  HasDarkImage(j) -> AreFloodingIn(k)))) & (forall l (forall m (  AreIllegal(l) -> IsElected(m)))) & (forall o (forall n (forall p (  HasDarkImage(n) ->   AreConvictedOf(o,p)))))) -> (exists e (exists d (IsElected(e) and HasDarkImage(d))))",Valid
65,0,ad hominem,"Charlie: Fast food is filled with salt, fat, and added sugars. We need better regulation of the industry.
Bob: That my be, but you're such a hypocrite! I saw you devour a Triple-Baconator, super-sized fries, and 64oz of soda yesterday!"," ""Fast food is filled with salt, fat, and added sugars."""," ""There needs to be better regulation of the fast food industry.""","IsFilledWithSalt(a),  IsFilledWithFat(a),  IsFilledWithAddedSugars(a)","IsNeeded(e),  IsOfFastFoodIndustry(e)","[('IsNeeded(e)', 'IsFilledWithSalt(a)'), ('  IsFilledWithFat(a)', 'IsNeeded(e)'), ('  IsFilledWithFat(a)', '  IsOfFastFoodIndustry(e)'), ('  IsFilledWithAddedSugars(a)', '  IsOfFastFoodIndustry(e)')]",[],"[(' fast food industry', ' Fast food')]",IsFilledWithSalt(a) and IsFilledWithFat(a) and IsFilledWithAddedSugars(a),IsNeeded(e) and IsOfFastFoodIndustry(e),(IsFilledWithSalt(a) and IsFilledWithFat(a) and IsFilledWithAddedSugars(a) & (forall e (forall a (IsNeeded(e) -> IsFilledWithSalt(a)))) & (forall e (forall a (  IsFilledWithFat(a) -> IsNeeded(e)))) & (forall e (forall a (  IsFilledWithFat(a) ->   IsOfFastFoodIndustry(e)))) & (forall e (forall a (  IsFilledWithAddedSugars(a) ->   IsOfFastFoodIndustry(e))))) -> (IsNeeded(e) and IsOfFastFoodIndustry(e)),(exists a (IsFilledWithSalt(a) and IsFilledWithFat(a) and IsFilledWithAddedSugars(a)) & (forall g (forall h (IsNeeded(g) -> IsFilledWithSalt(h)))) & (forall i (forall j (  IsFilledWithFat(i) -> IsNeeded(j)))) & (forall l (forall k (  IsFilledWithFat(k) ->   IsOfFastFoodIndustry(l)))) & (forall n (forall m (  IsFilledWithAddedSugars(m) ->   IsOfFastFoodIndustry(n))))) -> (exists e (IsNeeded(e) and IsOfFastFoodIndustry(e))),Valid
66,0,faulty generalization,Christine has a terrible experience with a boyfriend. She decides that all boys are mean.," ""Christine has a terrible experience with a boyfriend.""  "," ""All boys are mean.""","HasTerribleExperience(a),  HasBoyfriend(a)",IsMean(d),"[('  HasBoyfriend(a)', 'IsMean(d)'), ('IsMean(d)', '  HasBoyfriend(a)')]",[],"[(' boyfriend', ' All boys')]",HasTerribleExperience(a) and HasBoyfriend(a),IsBoy(d) and IsMean(d),(HasTerribleExperience(a) and HasBoyfriend(a) & (forall a (forall d (  HasBoyfriend(a) -> IsMean(d)))) & (forall a (forall d (IsMean(d) ->   HasBoyfriend(a))))) -> (IsBoy(d) and IsMean(d)),(exists a (HasTerribleExperience(a) and HasBoyfriend(a)) & (forall e (forall f (  HasBoyfriend(e) -> IsMean(f)))) & (forall g (forall h (IsMean(g) ->   HasBoyfriend(h))))) -> (exists d (IsBoy(d) and IsMean(d))),LF
67,0,intentional,"Barbara believes the marketing agency's office is haunted. The cleaning crew once said they heard a other-worldly noise late at night. Since no one could prove that it wasn't a ghost, the office must be haunted.", The marketing agency's office is haunted.  , The office is haunted.,IsHaunted(a),IsHaunted(b),[],[],[],IsHaunted(a),IsHaunted(b),(IsHaunted(a)) -> (IsHaunted(b)),(exists a (IsHaunted(a))) -> (exists b (IsHaunted(b))),Valid
68,0,ad populum,"I am voting for Pepitone for President because the rest of my family is voting for her, and I don't want to be the only one not doing so."," ""The rest of my family is voting for Pepitone for President."""," ""You should vote for Pepitone for President.""","IsVotingFor(c, a),  IsCandidateFor(a, b)","IsVotingFor(d, a),  IsCandidateFor(a, b)",[],"[(' Pepitone', ' Pepitone'), (' President', ' President')]",[],"IsVotingFor(c, a) and IsCandidateFor(a, b)","IsVotingFor(d, a) and IsCandidateFor(a, b)","(IsVotingFor(c, a) and IsCandidateFor(a, b)) -> (IsVotingFor(d, a) and IsCandidateFor(a, b))","(exists c (exists a (exists b (IsVotingFor(c, a) and IsCandidateFor(a, b))))) -> (exists a (exists d (exists b (IsVotingFor(d, a) and IsCandidateFor(a, b)))))",Valid
69,0,fallacy of credibility,"“I admire the president for being a good role model.” REPLY: “But the New York Times says he’s a lousy role model, so you’re wrong.”"," ""The president is a good role model.""  "," ""The president is not a good role model.""",IsGoodRoleModel(a),IsNotGoodRoleModel(a),[],"[(' The president', ' The president')]","[(' The president', ' good role model'), (' The president', ' a good role model'), (' good role model', ' a good role model')]",IsGoodRoleModel(a),IsNotGoodRoleModel(a),(IsGoodRoleModel(a)) -> (IsNotGoodRoleModel(a)),(exists a (IsGoodRoleModel(a))) -> (exists a (IsNotGoodRoleModel(a))),LF
70,0,faulty generalization,The numbers on gun violence speak for themselves. We should ban guns in the country!," ""The numbers on gun violence speak for themselves.""  "," ""Guns should be banned in the country.""",AreOnGunViolence(a),AreInCountry(c),[],[],"[(' The numbers', ' country'), (' gun violence', ' Guns'), (' gun violence', ' country')]",AreOnGunViolence(a),AreInCountry(c) and ~Exists(c),(AreOnGunViolence(a)) -> (AreInCountry(c) and ~Exists(c)),(exists a (AreOnGunViolence(a))) -> (exists c (AreInCountry(c) and ~Exists(c))),LF
71,0,false causality,"“The temperature has dropped this morning, and I also have a headache. Therefore, the cold weather must be causing my headache. “"," ""The temperature has dropped this morning and I have a headache.""  "," ""The cold weather causes my headache.""","HasDropped(a),  HasHeadache(b)","IsCold(d),  Causes(d, e)",[],[],"[(' I', ' my headache'), (' my headache', ' a headache')]",HasDropped(a) and HasHeadache(b),"IsCold(d) and Causes(d, e)","(exists b (HasDropped(a) and HasHeadache(b))) -> (forall e (IsCold(d) and Causes(d, e)))","(exists a (exists b (HasDropped(a) and HasHeadache(b)))) -> (exists e (exists d (IsCold(d) and Causes(d, e))))",LF
72,0,ad hominem,"My teacher says the Earth is flat, so it definitely is flat."," ""The teacher says the Earth is flat.""  "," ""The Earth is flat.""","SaysIsFlat(b, a)",IsFlat(a),[],"[(' the Earth', ' The Earth')]",[],"SaysIsFlat(b, a)",IsFlat(a),"(SaysIsFlat(b, a)) -> (IsFlat(a))","(exists a (exists b (SaysIsFlat(b, a)))) -> (exists a (IsFlat(a)))",LF
73,0,equivocation,"The fallacy of equivocation occurs when a key term or phrase in an argument is used in an ambiguous way, with one meaning in one portion of the argument and then another meaning in another portion of the argument.", A key term or phrase in an argument is used in an ambiguous way with one meaning in one portion of the argument and another meaning in another portion of the argument., The fallacy of equivocation occurs.,"IsUsedInAmbiguousWay(a),  IsInArgument(b,a),  IsInMeaning(a,c),  IsInPortion(a,d),  IsInMeaning(a,e),  IsInPortion(a,f)",Occurs(g),"[('IsUsedInAmbiguousWay(a)', 'Occurs(g)'), ('Occurs(g)', 'IsUsedInAmbiguousWay(a)'), ('  IsInArgument(b,a)', 'Occurs(g)'), ('Occurs(g)', '  IsInArgument(b,a)'), ('Occurs(g)', '  IsInMeaning(a,c)'), ('Occurs(g)', '  IsInPortion(a,d)'), ('Occurs(g)', '  IsInPortion(a,f)')]",[],"[(' The fallacy of equivocation', ' Key term or phrase'), (' The fallacy of equivocation', ' argument'), (' The fallacy of equivocation', ' one meaning'), (' The fallacy of equivocation', ' one portion'), (' The fallacy of equivocation', ' another meaning'), (' The fallacy of equivocation', ' another portion')]","IsUsedInAmbiguousWay(a) and IsInArgument(b,a) and IsInMeaning(a,c) and IsInPortion(a,d) and IsInMeaning(a,e) and IsInPortion(a,f)",Occurs(g),"(forall f (forall e (forall d (forall c (forall b (forall a (IsUsedInAmbiguousWay(a) and IsInArgument(b,a) and IsInMeaning(a,c) and IsInPortion(a,d) and IsInMeaning(a,e) and IsInPortion(a,f))))))) & (forall g (forall a (IsUsedInAmbiguousWay(a) -> Occurs(g)))) & (forall g (forall a (Occurs(g) -> IsUsedInAmbiguousWay(a)))) & (forall g (forall a (forall b (  IsInArgument(b,a) -> Occurs(g))))) & (forall g (forall a (forall b (Occurs(g) ->   IsInArgument(b,a))))) & (forall g (forall c (forall a (Occurs(g) ->   IsInMeaning(a,c))))) & (forall g (forall a (forall d (Occurs(g) ->   IsInPortion(a,d))))) & (forall g (forall f (forall a (Occurs(g) ->   IsInPortion(a,f)))))) -> (exists g (Occurs(g)))","(exists e (exists f (exists c (exists d (exists b (exists a (IsUsedInAmbiguousWay(a) and IsInArgument(b,a) and IsInMeaning(a,c) and IsInPortion(a,d) and IsInMeaning(a,e) and IsInPortion(a,f))))))) & (forall i (forall h (IsUsedInAmbiguousWay(h) -> Occurs(i)))) & (forall k (forall j (Occurs(j) -> IsUsedInAmbiguousWay(k)))) & (forall l (forall n (forall m (  IsInArgument(l,m) -> Occurs(n))))) & (forall q (forall o (forall p (Occurs(o) ->   IsInArgument(p,q))))) & (forall s (forall r (forall t (Occurs(r) ->   IsInMeaning(s,t))))) & (forall u (forall v (forall w (Occurs(u) ->   IsInPortion(v,w))))) & (forall z (forall y (forall x (Occurs(x) ->   IsInPortion(y,z)))))) -> (exists g (Occurs(g)))",Valid
74,0,faulty generalization,When you have too little or unrepresentative data to make claim., There is too little or unrepresentative data to make a claim.  , A claim cannot be made.,"IsTooLittleOrUnrepresentative(b),  IsClaim(a)",IsClaim(a),[],"[(' a claim', ' A claim')]",[],IsTooLittleOrUnrepresentative(b) and ~IsClaim(a),~IsClaim(a),(IsTooLittleOrUnrepresentative(b) and ~IsClaim(a)) -> (~IsClaim(a)),(exists a (exists b (IsTooLittleOrUnrepresentative(b) and ~IsClaim(a)))) -> (exists a (~IsClaim(a))),Valid
75,0,ad populum,"The majority of people believe advertisers should spend more money on billboards, so billboards are objectively the best form of advertisement."," ""The majority of people believe advertisers should spend more money on billboards.""  "," ""Billboards are the best form of advertisement.""","Believe(b, c),  ShouldSpendMore(c, d, a)","IsFormOfAdvertisement(a, e),  IsBestForm(e)",[],"[(' billboards', ' Billboards')]","[(' Majority of people', ' form of advertisement'), (' Billboards', ' advertisers'), (' advertisers', ' form of advertisement'), (' billboards', ' form of advertisement')]","Believe(b, c) and ShouldSpendMore(c, d, a)","IsFormOfAdvertisement(a, e) and IsBestForm(e)","(exists a (forall c (exists b (Believe(b, c) and ShouldSpendMore(c, d, a))))) -> (exists a (forall e (IsFormOfAdvertisement(a, e) and IsBestForm(e))))","(exists c (exists a (exists d (exists b (Believe(b, c) and ShouldSpendMore(c, d, a)))))) -> (exists e (exists a (IsFormOfAdvertisement(a, e) and IsBestForm(e))))",LF
76,0,faulty generalization,"If we ban Hummers because they are bad for the environment, eventually the government will ban all cars, so we should not ban Hummers."," ""Hummers are bad for the environment.""  "," ""The government will ban all cars.""",BadForEnvironment(a),"WillBan(c, d)",[],[],[],BadForEnvironment(a),"WillBan(c, d)","(BadForEnvironment(a)) -> (WillBan(c, d))","(exists a (BadForEnvironment(a))) -> (exists c (exists d (WillBan(c, d))))",LF
77,0,ad hominem,"My opponent raised a good point, but can we trust him? I mean he just moved to town only 5 months ago, how much could he really know?"," ""My opponent raised a good point.""  "," ""The opponent cannot be trusted.""","RaisedPoint(b, a)",CannotBeTrusted(a),[],"[(' a good point', ' The opponent')]","[(' My opponent', ' The opponent')]","RaisedPoint(b, a)",CannotBeTrusted(a),"(exists b (RaisedPoint(b, a))) -> (forall a (CannotBeTrusted(a)))","(exists a (exists b (RaisedPoint(b, a)))) -> (exists a (CannotBeTrusted(a)))",LF
78,0,false dilemma,"Either you can save your money to buy a new car for yourself, or you can just take an Uber around for the rest of your life.", You can save your money to buy a new car.  , You will take an Uber for the rest of your life.,"IsSaved(a),  IsUsedToBuy(a, b)","Properties: WillTake(c, d),  ForTheRestOf(c, e)",[],[],"[(' new car', ' You')]","IsSaved(a) and IsUsedToBuy(a, b)","WillTake(c, d) and ForTheRestOf(c, e)","(exists b (IsSaved(a) and IsUsedToBuy(a, b))) -> (forall c (WillTake(c, d) and ForTheRestOf(c, e)))","(exists a (exists b (IsSaved(a) and IsUsedToBuy(a, b)))) -> (exists e (exists c (exists d (WillTake(c, d) and ForTheRestOf(c, e)))))",LF
79,0,false causality,"Matthieu was the only player on the team who didn't grow a playoff beard, and thus he ended up getting injured.", Matthieu was the only player on the team who didn't grow a playoff beard., Not growing a playoff beard results in getting injured.,"DidNotGrowPlayoffBeard(b),  IsOnlyPlayerOnTeamWhoDidNotGrowPlayoffBeard(b)","DidNotGrowPlayoffBeard(x),  GetsInjured(x)",[],"[(' playoff beard', ' Playoff beard')]",[],DidNotGrowPlayoffBeard(b) and IsOnlyPlayerOnTeamWhoDidNotGrowPlayoffBeard(b),DidNotGrowPlayoffBeard(x) and GetsInjured(x),(DidNotGrowPlayoffBeard(b) and IsOnlyPlayerOnTeamWhoDidNotGrowPlayoffBeard(b)) -> (DidNotGrowPlayoffBeard(x) and GetsInjured(x)),(exists b (DidNotGrowPlayoffBeard(b) and IsOnlyPlayerOnTeamWhoDidNotGrowPlayoffBeard(b))) -> (exists x (DidNotGrowPlayoffBeard(x) and GetsInjured(x))),LF
80,0,intentional,"John: Members of the UbaTuba White Men's Club are upstanding citizens of the community.
Marvin: Then why are there so many of these members in jail?
John: They were never true UbaTuba White Men's Club members.
Marvin: What’s a true UbaTuba White Men's Club member?
John: Those who don't go to jail.
", Many members of the UbaTuba White Men's Club are in jail.  , True UbaTuba White Men's Club members are upstanding citizens.,"IsMemberOf(a, b),  IsInJail(a)","IsMemberOf(d, UbaTubaWhiteMensClub),  IsUpstandingCitizen(d)",[],[],"[(' Members', "" True UbaTuba White Men's Club members""), (' Members', ' upstanding citizens'), ("" UbaTuba White Men's Club"", ' upstanding citizens')]","IsMemberOf(a, b) and IsInJail(a)","IsMemberOf(d, UbaTubaWhiteMensClub) and IsUpstandingCitizen(d)","(exists a (IsMemberOf(a, b) and IsInJail(a))) -> (forall d (IsMemberOf(d, UbaTubaWhiteMensClub) and IsUpstandingCitizen(d)))","(exists a (exists b (IsMemberOf(a, b) and IsInJail(a)))) -> (exists d (IsMemberOf(d, UbaTubaWhiteMensClub) and IsUpstandingCitizen(d)))",LF
81,0,faulty generalization,"""Animal experimentation reduces our respect for life. If we don't respect life, we are likely to be more and more tolerant of violent acts like war and murder. Soon our society will become a battlefield in which everyone constantly fears for their lives. It will be the end of civilization. To prevent this terrible consequence, we should make animal experimentation illegal right now."""," ""Animal experimentation reduces our respect for life.""  "," ""Animal experimentation will cause the end of civilization.""","ReducesRespectForLife(a, b)","CausesEndOfCivilization(a, c)","[('CausesEndOfCivilization(a, c)', 'ReducesRespectForLife(a, b)')]","[(' Animal experimentation', ' Animal experimentation')]",[],"ReducesRespectForLife(a, b)","CausesEndOfCivilization(a, c)","(ReducesRespectForLife(a, b) & (forall c (forall a (forall b (CausesEndOfCivilization(a, c) -> ReducesRespectForLife(a, b)))))) -> (CausesEndOfCivilization(a, c))","(exists a (exists b (ReducesRespectForLife(a, b))) & (forall e (forall f (forall d (CausesEndOfCivilization(d,e) -> ReducesRespectForLife(d,f)))))) -> (exists c (exists a (CausesEndOfCivilization(a, c))))",LF
82,0,false causality,You know Jane Fonda's exercise videos must be worth the money. Look at the great shape she's in., Jane Fonda is in great shape.  , Jane Fonda's exercise videos are worth the money.,IsInGreatShape(a),AreWorthMoney(c),"[('IsInGreatShape(a)', 'AreWorthMoney(c)'), ('AreWorthMoney(c)', 'IsInGreatShape(a)')]",[],"[("" Jane Fonda's exercise videos"", ' Jane Fonda'), (' the money', ' great shape')]",IsInGreatShape(a),AreWorthMoney(c),(forall a (IsInGreatShape(a)) & (forall c (forall a (IsInGreatShape(a) -> AreWorthMoney(c)))) & (forall c (forall a (AreWorthMoney(c) -> IsInGreatShape(a))))) -> (exists c (AreWorthMoney(c))),(exists a (IsInGreatShape(a)) & (forall e (forall f (IsInGreatShape(e) -> AreWorthMoney(f)))) & (forall g (forall h (AreWorthMoney(g) -> IsInGreatShape(h))))) -> (exists c (AreWorthMoney(c))),Valid
83,0,faulty generalization,"Asians make lousy athletes, but do well at the Math Olympiad."," ""Asians do well at the Math Olympiad."""," ""Asians make lousy athletes.""",DoesWellAtMathOlympiad(a),IsLousyAthlete(a),"[('DoesWellAtMathOlympiad(a)', 'IsLousyAthlete(a)')]","[(' Asians', ' Asians')]",[],DoesWellAtMathOlympiad(a),IsLousyAthlete(a),(DoesWellAtMathOlympiad(a) & (forall a (DoesWellAtMathOlympiad(a) -> IsLousyAthlete(a)))) -> (IsLousyAthlete(a)),(exists a (DoesWellAtMathOlympiad(a)) & (forall d (DoesWellAtMathOlympiad(d) -> IsLousyAthlete(d)))) -> (exists a (IsLousyAthlete(a))),Valid
84,0,false dilemma,"“Caldwell Hall is in bad shape. Either we tear it down and put up a new building, or we continue to risk students’ safety. Obviously we shouldn’t risk anyone’s safety, so we must tear the building down.”"," ""Caldwell Hall is in bad shape and continuing to use it risks students' safety.""  "," ""Caldwell Hall must be torn down.""","IsInBadShape(a),  RisksSafety(b, c)",MustBeTornDown(a),"[('IsInBadShape(a)', 'MustBeTornDown(a)'), ('MustBeTornDown(a)', 'IsInBadShape(a)'), ('  RisksSafety(b, c)', 'MustBeTornDown(a)'), ('MustBeTornDown(a)', '  RisksSafety(b, c)')]","[(' Caldwell Hall', ' Caldwell Hall')]","[("" students' safety"", ' Caldwell Hall')]","IsInBadShape(a) and RisksSafety(b, c)",MustBeTornDown(a),"(exists c (IsInBadShape(a) and RisksSafety(b, c)) & (forall a (IsInBadShape(a) -> MustBeTornDown(a))) & (forall a (MustBeTornDown(a) -> IsInBadShape(a))) & (forall c (forall a (forall b (  RisksSafety(b, c) -> MustBeTornDown(a))))) & (forall c (forall a (forall b (MustBeTornDown(a) ->   RisksSafety(b, c)))))) -> (forall a (MustBeTornDown(a)))","(exists c (exists a (exists b (IsInBadShape(a) and RisksSafety(b, c)))) & (forall d (IsInBadShape(d) -> MustBeTornDown(d))) & (forall e (MustBeTornDown(e) -> IsInBadShape(e))) & (forall g (forall f (forall h (  RisksSafety(f,g) -> MustBeTornDown(h))))) & (forall i (forall k (forall j (MustBeTornDown(i) ->   RisksSafety(j,k)))))) -> (exists a (MustBeTornDown(a)))",Valid
85,0,faulty generalization,Did you really vote for Donald as class treasurer? Didn't you hear that his uncle was imprisoned for embezzling $1.5 million?, Donald's uncle was imprisoned for embezzling $1.5 million.  , You should not have voted for Donald as class treasurer.,"WasImprisoned(a),  Embezzled(a, b)","VotedFor(c, d),  IsClassTreasurer(d)","[('  Embezzled(a, b)', 'VotedFor(c, d)')]",[],"[(' $1.5 million', ' You')]","WasImprisoned(a) and Embezzled(a, b)","VotedFor(c, d) and ~IsClassTreasurer(d)","(exists b (WasImprisoned(a) and Embezzled(a, b)) & (forall c (forall a (forall d (forall b (  Embezzled(a, b) -> VotedFor(c, d))))))) -> (forall c (VotedFor(c, d) and ~IsClassTreasurer(d)))","(exists a (exists b (WasImprisoned(a) and Embezzled(a, b))) & (forall g (forall f (forall i (forall h (  Embezzled(f,g) -> VotedFor(h,i))))))) -> (exists c (exists d (VotedFor(c, d) and ~IsClassTreasurer(d))))",LF
86,0,fallacy of logic,"If the ozone layer is destroyed, many people will get cancer and suffer from other illnesses.  The ozone layer is being protected, not destroyed.  So, many people will be spared the pain of cancer and other illnesses.", The ozone layer is being protected.  , Many people will be spared the pain of cancer and other illnesses.,IsProtected(a),"IsSparedPain(b, c),  HasOtherIllnesses(b, d)","[('IsProtected(a)', 'IsSparedPain(b, c)'), ('IsSparedPain(b, c)', 'IsProtected(a)'), ('IsProtected(a)', '  HasOtherIllnesses(b, d)')]",[],[],IsProtected(a),"IsSparedPain(b, c) and HasOtherIllnesses(b, d)","(IsProtected(a) & (forall c (forall a (forall b (IsProtected(a) -> IsSparedPain(b, c))))) & (forall c (forall a (forall b (IsSparedPain(b, c) -> IsProtected(a))))) & (forall a (forall d (forall b (IsProtected(a) ->   HasOtherIllnesses(b, d)))))) -> (IsSparedPain(b, c) and HasOtherIllnesses(b, d))","(exists a (IsProtected(a)) & (forall e (forall g (forall f (IsProtected(e) -> IsSparedPain(f,g))))) & (forall j (forall i (forall h (IsSparedPain(h,i) -> IsProtected(j))))) & (forall l (forall m (forall k (IsProtected(k) ->   HasOtherIllnesses(l,m)))))) -> (exists c (exists d (exists b (IsSparedPain(b, c) and HasOtherIllnesses(b, d)))))",Valid
87,0,faulty generalization,"Broccoli has significantly less fat than the leading candy bar! Plus, it's nowhere near as hot as Hot Cheetos!"," ""Broccoli has significantly less fat than the leading candy bar."""," ""Broccoli is healthier than Hot Cheetos and candy bars.""","HasSignificantlyLessFatThan(a, b)","IsHealthierThan(a, c),  IsHealthierThan(a, d)","[('IsHealthierThan(a, c)', 'HasSignificantlyLessFatThan(a, b)'), ('HasSignificantlyLessFatThan(a, b)', '  IsHealthierThan(a, d)')]","[(' Broccoli', ' Broccoli')]","[(' Hot Cheetos', ' leading candy bar')]","HasSignificantlyLessFatThan(a, b)","IsHealthierThan(a, c) and IsHealthierThan(a, d)","(forall b (HasSignificantlyLessFatThan(a, b)) & (forall c (forall a (forall b (IsHealthierThan(a, c) -> HasSignificantlyLessFatThan(a, b))))) & (forall a (forall d (forall b (HasSignificantlyLessFatThan(a, b) ->   IsHealthierThan(a, d)))))) -> (exists c (IsHealthierThan(a, c) and IsHealthierThan(a, d)))","(exists a (exists b (HasSignificantlyLessFatThan(a, b))) & (forall e (forall g (forall f (IsHealthierThan(e,f) -> HasSignificantlyLessFatThan(e,g))))) & (forall j (forall i (forall h (HasSignificantlyLessFatThan(h,i) ->   IsHealthierThan(h,j)))))) -> (exists c (exists a (exists d (IsHealthierThan(a, c) and IsHealthierThan(a, d)))))",Valid
88,0,fallacy of relevance,You're complaining because you have to walk to school? I used to have to give my parents my entire paycheck.," ""I used to have to give my parents my entire paycheck."""," ""You should not complain about having to walk to school.""","IsGiven(c, b),  IsOwnedBy(c, a)","ComplainsAboutWalking(d),  WalksTo(e)",[],[],"[(' I', ' school')]","IsOwnedBy(c, a) and IsGiven(c, b)",ComplainsAboutWalking(d) and WalksTo(e),"(exists a (IsOwnedBy(c, a) and IsGiven(c, b))) -> (forall e (ComplainsAboutWalking(d) and WalksTo(e)))","(exists c (exists a (exists b (IsOwnedBy(c, a) and IsGiven(c, b))))) -> (exists e (exists d (ComplainsAboutWalking(d) and WalksTo(e))))",LF
89,0,fallacy of extension,Robot 2 (Blue) has been refuting all of Robot 1's (Orange) arguments. Robot 1 launches the above counterargument. What is this fallacy?," ""Robot 2 has been refuting all of Robot 1's arguments.""  "," ""Robot 1's counterargument is fallacious.""","HasRefuted(a, b)",IsFallacious(c),[],[],[],"HasRefuted(a, b)",IsFallacious(c),"(HasRefuted(a, b)) -> (IsFallacious(c))","(exists a (exists b (HasRefuted(a, b)))) -> (exists c (IsFallacious(c)))",LF
90,0,ad hominem,Personally attacking someone to shift attention away from your views is," ""Personally attacking someone shifts attention away from your views.""  "," ""You should personally attack someone to shift attention away from your views.""","IsPersonallyAttacked(a),  ShiftsAttentionAwayFrom(b)","IsPersonallyAttacked(a),  ShiftsAttentionAwayFrom(b)",[],"[(' Someone', ' You'), (' Someone', ' someone'), (' your views', ' your views')]","[(' Someone', ' your views'), (' your views', ' You'), (' someone', ' your views')]",IsPersonallyAttacked(a) and ShiftsAttentionAwayFrom(b),IsPersonallyAttacked(a) and ShiftsAttentionAwayFrom(b),(exists b (exists a (IsPersonallyAttacked(a) and ShiftsAttentionAwayFrom(b)))) -> (exists a (forall b (IsPersonallyAttacked(a) and ShiftsAttentionAwayFrom(b)))),(exists a (exists b (IsPersonallyAttacked(a) and ShiftsAttentionAwayFrom(b)))) -> (exists a (exists b (IsPersonallyAttacked(a) and ShiftsAttentionAwayFrom(b)))),Valid
91,0,ad hominem,"""She's such a mean teacher and person – that's why she wouldn't raise my grade ONE percent!"""," ""The teacher is mean.""  "," ""The teacher did not raise my grade one percent.""",IsMean(a),"DidNotRaiseGrade(a, b)","[('IsMean(a)', 'DidNotRaiseGrade(a, b)'), ('DidNotRaiseGrade(a, b)', 'IsMean(a)')]","[(' The teacher', ' The teacher')]","[(' my grade', ' The teacher')]",IsMean(a),"DidNotRaiseGrade(a, b)","(forall a (IsMean(a)) & (forall a (forall b (IsMean(a) -> DidNotRaiseGrade(a, b)))) & (forall a (forall b (DidNotRaiseGrade(a, b) -> IsMean(a))))) -> (exists b (DidNotRaiseGrade(a, b)))","(exists a (IsMean(a)) & (forall c (forall d (IsMean(c) -> DidNotRaiseGrade(c,d)))) & (forall e (forall f (DidNotRaiseGrade(e,f) -> IsMean(e))))) -> (exists a (exists b (DidNotRaiseGrade(a, b))))",Valid
92,0,appeal to emotion,"If you don't buy the black pencils, you will get made fun of. You will not be chosen for group projects.", You will be made fun of and not chosen for group projects if you do not buy the black pencils.  , You should buy the black pencils.,"IsMadeFunOf(a),  IsNotChosenForGroupProjects(a),  DoesNotBuy(a, b)","ShouldBuy(a, c)","[('  IsNotChosenForGroupProjects(a)', 'ShouldBuy(a, c)')]","[(' You', ' You')]","[(' the black pencils', ' You'), (' the black pencils', ' black pencils')]","DoesNotBuy(a, b) and (IsMadeFunOf(a) and IsNotChosenForGroupProjects(a))","ShouldBuy(a, c)","(forall b (forall a (DoesNotBuy(a, b) and (IsMadeFunOf(a) and IsNotChosenForGroupProjects(a)))) & (forall c (forall a (  IsNotChosenForGroupProjects(a) -> ShouldBuy(a, c))))) -> (exists c (ShouldBuy(a, c)))","(exists a (exists b (DoesNotBuy(a, b) and (IsMadeFunOf(a) and IsNotChosenForGroupProjects(a)))) & (forall e (forall d (  IsNotChosenForGroupProjects(d) -> ShouldBuy(d,e))))) -> (exists c (exists a (ShouldBuy(a, c))))",Valid
93,0,faulty generalization,"Jeff's mom is concerned when she finds out that he skipped class one day. She tells him that she is concerned that since he skipped one class, he will start skipping more frequently. Then he will drop out altogether, never graduate or get into college, and end up unemployed and living at home for the rest of his life. What type of fallacy has Jeff's mom committed?", Jeff skipped one class.  , Jeff will end up unemployed and living at home for the rest of his life.,"Skipped(a, b)","IsUnemployed(a),  LivesAtHome(a),  ForTheRestOfHisLife(a, d)",[],"[(' Jeff', ' Jeff')]","[(' Jeff', ' his life'), (' home', ' one class')]","Skipped(a, b)","IsUnemployed(a) and LivesAtHome(a) and ForTheRestOfHisLife(a, d)","(exists a (Skipped(a, b))) -> (forall d (IsUnemployed(a) and LivesAtHome(a) and ForTheRestOfHisLife(a, d)))","(exists a (exists b (Skipped(a, b)))) -> (exists a (exists d (IsUnemployed(a) and LivesAtHome(a) and ForTheRestOfHisLife(a, d))))",LF
94,0,ad hominem,"How can you tell me I should exercise to lose weight? All you do is sit behind a desk all day. I've never seen you do a lick of exercise.

Identify the logical fallacy commited in this argument."," ""You sit behind a desk all day and you don't exercise.""  "," ""You should not tell me to exercise to lose weight.""","SitBehind(a, b),  DoesNotExercise(a)","TellToExercise(a, c),  LoseWeight(d)",[],"[(' You', ' You')]","[(' weight', ' You'), (' desk', ' You')]","SitBehind(a, b) and DoesNotExercise(a)","TellToExercise(a, c) and ~LoseWeight(d)","(exists b (forall a (SitBehind(a, b) and DoesNotExercise(a)))) -> (forall a (exists d (TellToExercise(a, c) and ~LoseWeight(d))))","(exists a (exists b (SitBehind(a, b) and DoesNotExercise(a)))) -> (exists c (exists a (exists d (TellToExercise(a, c) and ~LoseWeight(d)))))",LF
95,0,fallacy of logic,"""We both like music, so we should get married."""," ""We both like music.""  "," ""We should get married.""",LikesMusic(a),ShouldGetMarried(a),[],"[(' We', ' We')]","[(' We', ' music')]",LikesMusic(a),ShouldGetMarried(a),(LikesMusic(a)) -> (ShouldGetMarried(a)),(exists a (LikesMusic(a))) -> (exists a (ShouldGetMarried(a))),LF
96,0,ad hominem,"Brandon: We should have tastier lunches!
Jaylen: Don't listen to him! He's a terrible person! I saw him trip another student and steal his lunch money!"," ""Brandon is a terrible person who tripped another student and stole his lunch money.""  "," ""We should not listen to Brandon""","IsTerriblePerson(a),  Tripped(a, b),  Stole(a, c)",ShouldNotListenTo(a),"[('IsTerriblePerson(a)', 'ShouldNotListenTo(a)')]","[(' Brandon', ' Brandon')]","[(' We', ' another student'), (' Brandon', ' another student')]","IsTerriblePerson(a) and Tripped(a, b) and Stole(a, c)",ShouldNotListenTo(a),"(forall b (IsTerriblePerson(a) and Tripped(a, b) and Stole(a, c)) & (forall a (IsTerriblePerson(a) -> ShouldNotListenTo(a)))) -> (exists a (ShouldNotListenTo(a)))","(exists c (exists a (exists b (IsTerriblePerson(a) and Tripped(a, b) and Stole(a, c)))) & (forall e (IsTerriblePerson(e) -> ShouldNotListenTo(e)))) -> (exists a (ShouldNotListenTo(a)))",Valid
97,0,ad hominem,Of course Marx' theories about the ideal society are bunk. The guy spent all his time in the library.," ""Marx spent all his time in the library.""  "," ""Marx's theories about the ideal society are bunk.""",IsSpentInLibrary(b),"IsAbout(d, e)",[],[],"[(' Marx', "" Marx's theories""), ("" Marx's theories"", ' his time')]",IsSpentInLibrary(b),"IsAbout(d, e) and IsBunk(d)","(forall b (IsSpentInLibrary(b))) -> (exists d (IsAbout(d, e) and IsBunk(d)))","(exists b (IsSpentInLibrary(b))) -> (exists e (exists d (IsAbout(d, e) and IsBunk(d))))",LF
98,0,fallacy of relevance,"I'm tailgating her, because she cut me off!"," ""She cut me off.""  "," ""I am tailgating her.""","CutOff(a, b)","Tailgating(c, d)",[],[],"[(' her', ' She'), (' I', ' me')]","CutOff(a, b)","Tailgating(c, d)","(forall b (forall a (CutOff(a, b)))) -> (exists c (exists d (Tailgating(c, d))))","(exists a (exists b (CutOff(a, b)))) -> (exists c (exists d (Tailgating(c, d))))",LF
99,0,faulty generalization,President Petutti ordered a military strike that killed many civilians. He is no different than any other mass murder and he belongs in prison!," ""President Petutti ordered a military strike that killed many civilians."""," ""President Petutti is no different than any other mass murderer and President Petutti belongs in prison.""","Ordered(a, b),  Killed(b, c)","IsNoDifferent(a, d),  BelongsIn(a, e)","[('Ordered(a, b)', '  BelongsIn(a, e)'), ('  Killed(b, c)', 'IsNoDifferent(a, d)'), ('  Killed(b, c)', '  BelongsIn(a, e)')]","[(' President Petutti', ' President Petutti')]",[],"Ordered(a, b) and Killed(b, c)","IsNoDifferent(a, d) and BelongsIn(a, e)","(Ordered(a, b) and Killed(b, c) & (forall e (forall a (forall b (Ordered(a, b) ->   BelongsIn(a, e))))) & (forall c (forall a (forall d (forall b (  Killed(b, c) -> IsNoDifferent(a, d)))))) & (forall e (forall c (forall a (forall b (  Killed(b, c) ->   BelongsIn(a, e))))))) -> (IsNoDifferent(a, d) and BelongsIn(a, e))","(exists c (exists a (exists b (Ordered(a, b) and Killed(b, c)))) & (forall g (forall f (forall h (Ordered(f,g) ->   BelongsIn(f,h))))) & (forall l (forall i (forall k (forall j (  Killed(i,j) -> IsNoDifferent(k,l)))))) & (forall n (forall o (forall m (forall p (  Killed(m,n) ->   BelongsIn(o,p))))))) -> (exists e (exists a (exists d (IsNoDifferent(a, d) and BelongsIn(a, e)))))",Valid
100,1,,"Coach talks with football player, other players and crowd in background. Thus, a football coach talks with his player in front of the team and the crowd."," ""A football coach talks with his player in front of the team and the crowd."""," ""A football coach talks openly with his player.""","TalksWith(a, b),  InFrontOf(a, c),  InFrontOf(a, d)","TalksOpenlyWith(a, b)","[('TalksWith(a, b)', 'TalksOpenlyWith(a, b)'), ('TalksOpenlyWith(a, b)', 'TalksWith(a, b)'), ('  InFrontOf(a, c)', 'TalksOpenlyWith(a, b)'), ('TalksOpenlyWith(a, b)', '  InFrontOf(a, c)'), ('  InFrontOf(a, d)', 'TalksOpenlyWith(a, b)'), ('TalksOpenlyWith(a, b)', '  InFrontOf(a, d)')]","[(' A football coach', ' A football coach'), (' his player', ' his player')]","[(' his player', ' the team'), (' the crowd', ' his player')]","TalksWith(a, b) and InFrontOf(a, c) and InFrontOf(a, d)","TalksOpenlyWith(a, b)","(exists d (forall c (TalksWith(a, b) and InFrontOf(a, c) and InFrontOf(a, d))) & (forall a (forall b (TalksWith(a, b) -> TalksOpenlyWith(a, b)))) & (forall a (forall b (TalksOpenlyWith(a, b) -> TalksWith(a, b)))) & (forall c (forall a (forall b (  InFrontOf(a, c) -> TalksOpenlyWith(a, b))))) & (forall c (forall a (forall b (TalksOpenlyWith(a, b) ->   InFrontOf(a, c))))) & (forall a (forall d (forall b (  InFrontOf(a, d) -> TalksOpenlyWith(a, b))))) & (forall a (forall d (forall b (TalksOpenlyWith(a, b) ->   InFrontOf(a, d)))))) -> (forall b (exists b (TalksOpenlyWith(a, b))))","(exists c (exists a (exists d (exists b (TalksWith(a, b) and InFrontOf(a, c) and InFrontOf(a, d))))) & (forall e (forall f (TalksWith(e,f) -> TalksOpenlyWith(e,f)))) & (forall g (forall h (TalksOpenlyWith(g,h) -> TalksWith(g,h)))) & (forall i (forall k (forall j (  InFrontOf(i,j) -> TalksOpenlyWith(i,k))))) & (forall l (forall n (forall m (TalksOpenlyWith(l,m) ->   InFrontOf(l,n))))) & (forall q (forall o (forall p (  InFrontOf(o,p) -> TalksOpenlyWith(o,q))))) & (forall s (forall r (forall t (TalksOpenlyWith(r,s) ->   InFrontOf(r,t)))))) -> (exists a (exists b (TalksOpenlyWith(a, b))))",Valid
101,1,,"Two men watching one man make a golf putt on the set of Sports Center. As a consequence, people watching sports."," ""Two men are watching one man make a golf putt on the set of Sports Center.""  "," ""People are watching sports.""","IsWatching(a, b),  IsMaking(b, c),  IsOnSet(b, d)","IsWatching(e, f)",[],[],"[(' golf putt', ' sports'), (' set of Sports Center', ' sports')]","IsWatching(a, b) and IsMaking(b, c) and IsOnSet(b, d)","IsWatching(e, f)","(exists d (exists c (IsWatching(a, b) and IsMaking(b, c) and IsOnSet(b, d)))) -> (forall f (IsWatching(e, f)))","(exists c (exists a (exists d (exists b (IsWatching(a, b) and IsMaking(b, c) and IsOnSet(b, d)))))) -> (exists e (exists f (IsWatching(e, f))))",Valid
102,1,,"Six women wait to use a port-o-john in a field. Thus, women are outside."," ""Six women wait to use a port-o-john in a field.""  "," ""Women are outside.""","IsWaitingToUse(a, b),  IsInField(a)",IsOutside(d),"[('IsWaitingToUse(a, b)', 'IsOutside(d)'), ('IsOutside(d)', 'IsWaitingToUse(a, b)'), ('  IsInField(a)', 'IsOutside(d)'), ('IsOutside(d)', '  IsInField(a)')]",[],"[(' Six women', ' Women')]","IsWaitingToUse(a, b) and IsInField(a)",IsOutside(d),"(exists a (IsWaitingToUse(a, b) and IsInField(a)) & (forall a (forall d (forall b (IsWaitingToUse(a, b) -> IsOutside(d))))) & (forall a (forall d (forall b (IsOutside(d) -> IsWaitingToUse(a, b))))) & (forall a (forall d (  IsInField(a) -> IsOutside(d)))) & (forall a (forall d (IsOutside(d) ->   IsInField(a))))) -> (forall d (IsOutside(d)))","(exists a (exists b (IsWaitingToUse(a, b) and IsInField(a))) & (forall e (forall g (forall f (IsWaitingToUse(e,f) -> IsOutside(g))))) & (forall j (forall i (forall h (IsOutside(h) -> IsWaitingToUse(i,j))))) & (forall l (forall k (  IsInField(k) -> IsOutside(l)))) & (forall n (forall m (IsOutside(m) ->   IsInField(n))))) -> (exists d (IsOutside(d)))",Valid
103,1,,Women wearing a black top and glasses speaking into a blue tipped microphone with another woman beside her writing. It follows that one woman speaking into a microphone while a second woman writes beside her., A woman is wearing a black top and glasses and speaking into a blue-tipped microphone while another woman is writing beside her., One woman speaks into a microphone and a second woman writes beside her.,"IsWearing(a, b),  IsWearing(a, c),  IsSpeakingInto(a, d),  IsWriting(e)","IsSpeakingInto(f, g),  IsWriting(h)","[('IsSpeakingInto(f, g)', 'IsWearing(a, b)'), ('  IsWriting(h)', 'IsWearing(a, b)'), ('IsSpeakingInto(f, g)', '  IsWearing(a, c)'), ('  IsWriting(h)', '  IsWearing(a, c)'), ('  IsSpeakingInto(a, d)', '  IsWriting(h)'), ('  IsWriting(h)', '  IsSpeakingInto(a, d)'), ('  IsWriting(e)', 'IsSpeakingInto(f, g)'), ('IsSpeakingInto(f, g)', '  IsWriting(e)')]",[],"[(' One woman', ' A woman'), (' second woman', ' A woman'), (' One woman', ' another woman'), (' second woman', ' another woman')]","IsWearing(a, b) and IsWearing(a, c) and IsSpeakingInto(a, d) and IsWriting(e)","IsSpeakingInto(f, g) and IsWriting(h)","(forall e (forall a (IsWearing(a, b) and IsWearing(a, c) and IsSpeakingInto(a, d) and IsWriting(e))) & (forall g (forall f (forall a (forall b (IsSpeakingInto(f, g) -> IsWearing(a, b)))))) & (forall a (forall h (forall b (  IsWriting(h) -> IsWearing(a, b))))) & (forall g (forall f (forall c (forall a (IsSpeakingInto(f, g) ->   IsWearing(a, c)))))) & (forall c (forall a (forall h (  IsWriting(h) ->   IsWearing(a, c))))) & (forall a (forall d (forall h (  IsSpeakingInto(a, d) ->   IsWriting(h))))) & (forall a (forall d (forall h (  IsWriting(h) ->   IsSpeakingInto(a, d))))) & (forall e (forall g (forall f (  IsWriting(e) -> IsSpeakingInto(f, g))))) & (forall e (forall g (forall f (IsSpeakingInto(f, g) ->   IsWriting(e)))))) -> (exists h (exists f (IsSpeakingInto(f, g) and IsWriting(h))))","(exists e (exists c (exists d (exists b (exists a (IsWearing(a, b) and IsWearing(a, c) and IsSpeakingInto(a, d) and IsWriting(e)))))) & (forall l (forall i (forall k (forall j (IsSpeakingInto(i,j) -> IsWearing(k,l)))))) & (forall n (forall o (forall m (  IsWriting(m) -> IsWearing(n,o))))) & (forall q (forall s (forall r (forall p (IsSpeakingInto(p,q) ->   IsWearing(r,s)))))) & (forall u (forall v (forall t (  IsWriting(t) ->   IsWearing(u,v))))) & (forall w (forall y (forall x (  IsSpeakingInto(w,x) ->   IsWriting(y))))) & (forall z (  IsWriting(z) ->   IsSpeakingInto({,|))) & (  IsWriting(}) -> IsSpeakingInto(~,)) & (IsSpeakingInto(,) ->   IsWriting())) -> (exists g (exists f (exists h (IsSpeakingInto(f, g) and IsWriting(h)))))",
104,1,,"One tan girl with a wool hat is running and leaning over an object, while another person in a wool hat is sitting on the ground. Therefore, a tan girl runs leans over an object."," ""A tan girl with a wool hat is running and leaning over an object, and another person with a wool hat is sitting on the ground."""," ""A tan girl runs and leans over an object.""","IsTan(a),  IsWearingWoolHat(a),  IsRunning(a),  IsLeaningOver(a, c),  IsWearingWoolHat(d),  IsSittingOnGround(d, e)","IsTan(f),  Runs(f),  LeansOver(f, g)","[('IsTan(a)', '  Runs(f)'), ('  Runs(f)', 'IsTan(a)'), ('IsTan(a)', '  LeansOver(f, g)'), ('  LeansOver(f, g)', 'IsTan(a)'), ('  Runs(f)', '  IsWearingWoolHat(a)'), ('  IsRunning(a)', 'IsTan(f)'), ('IsTan(f)', '  IsRunning(a)'), ('  Runs(f)', '  IsRunning(a)'), ('  IsRunning(a)', '  LeansOver(f, g)'), ('  LeansOver(f, g)', '  IsRunning(a)'), ('  IsLeaningOver(a, c)', 'IsTan(f)'), ('IsTan(f)', '  IsLeaningOver(a, c)'), ('  IsLeaningOver(a, c)', '  Runs(f)'), ('  Runs(f)', '  IsLeaningOver(a, c)'), ('  IsLeaningOver(a, c)', '  LeansOver(f, g)'), ('  LeansOver(f, g)', '  IsLeaningOver(a, c)'), ('IsTan(f)', '  IsWearingWoolHat(d)'), ('  Runs(f)', '  IsWearingWoolHat(d)'), ('  LeansOver(f, g)', '  IsWearingWoolHat(d)'), ('IsTan(f)', '  IsSittingOnGround(d, e)'), ('  Runs(f)', '  IsSittingOnGround(d, e)'), ('  LeansOver(f, g)', '  IsSittingOnGround(d, e)')]",[],"[(' Tan girl', ' A tan girl'), (' Tan girl', ' an object'), (' wool hat', ' an object'), (' wool hat', ' an object'), (' ground', ' an object')]","IsTan(a) and IsWearingWoolHat(a) and IsRunning(a) and IsLeaningOver(a, c) and IsWearingWoolHat(d) and IsSittingOnGround(d, e)","IsTan(f) and Runs(f) and LeansOver(f, g)","(exists e (exists a (IsTan(a) and IsWearingWoolHat(a) and IsRunning(a) and IsLeaningOver(a, c) and IsWearingWoolHat(d) and IsSittingOnGround(d, e))) & (forall f (forall a (IsTan(a) ->   Runs(f)))) & (forall f (forall a (  Runs(f) -> IsTan(a)))) & (forall g (forall f (forall a (IsTan(a) ->   LeansOver(f, g))))) & (forall g (forall f (forall a (  LeansOver(f, g) -> IsTan(a))))) & (forall f (forall a (  Runs(f) ->   IsWearingWoolHat(a)))) & (forall f (forall a (  IsRunning(a) -> IsTan(f)))) & (forall f (forall a (IsTan(f) ->   IsRunning(a)))) & (forall f (forall a (  Runs(f) ->   IsRunning(a)))) & (forall g (forall f (forall a (  IsRunning(a) ->   LeansOver(f, g))))) & (forall g (forall f (forall a (  LeansOver(f, g) ->   IsRunning(a))))) & (forall f (forall c (forall a (  IsLeaningOver(a, c) -> IsTan(f))))) & (forall f (forall c (forall a (IsTan(f) ->   IsLeaningOver(a, c))))) & (forall f (forall c (forall a (  IsLeaningOver(a, c) ->   Runs(f))))) & (forall f (forall c (forall a (  Runs(f) ->   IsLeaningOver(a, c))))) & (forall g (forall f (forall c (forall a (  IsLeaningOver(a, c) ->   LeansOver(f, g)))))) & (forall g (forall f (forall c (forall a (  LeansOver(f, g) ->   IsLeaningOver(a, c)))))) & (forall f (forall d (IsTan(f) ->   IsWearingWoolHat(d)))) & (forall f (forall d (  Runs(f) ->   IsWearingWoolHat(d)))) & (forall g (forall f (forall d (  LeansOver(f, g) ->   IsWearingWoolHat(d))))) & (forall e (forall f (forall d (IsTan(f) ->   IsSittingOnGround(d, e))))) & (forall e (forall f (forall d (  Runs(f) ->   IsSittingOnGround(d, e))))) & (forall e (forall g (forall f (forall d (  LeansOver(f, g) ->   IsSittingOnGround(d, e))))))) -> (forall g (forall f (IsTan(f) and Runs(f) and LeansOver(f, g))))","(exists e (exists c (exists a (exists d (IsTan(a) and IsWearingWoolHat(a) and IsRunning(a) and IsLeaningOver(a, c) and IsWearingWoolHat(d) and IsSittingOnGround(d, e))))) & (forall i (forall h (IsTan(h) ->   Runs(i)))) & (forall k (forall j (  Runs(j) -> IsTan(k)))) & (forall l (forall n (forall m (IsTan(l) ->   LeansOver(m,n))))) & (forall q (forall o (forall p (  LeansOver(o,p) -> IsTan(q))))) & (forall s (forall r (  Runs(r) ->   IsWearingWoolHat(s)))) & (forall u (forall t (  IsRunning(t) -> IsTan(u)))) & (forall v (forall w (IsTan(v) ->   IsRunning(w)))) & (forall y (forall x (  Runs(x) ->   IsRunning(y)))) & (forall z (  IsRunning(z) ->   LeansOver({,|))) & (  LeansOver(},~) ->   IsRunning()) & (  IsLeaningOver(,) -> IsTan()) & (IsTan() ->   IsLeaningOver(,)) & (  IsLeaningOver(,) ->   Runs()) & (  Runs() ->   IsLeaningOver(,)) & (  IsLeaningOver(,) ->   LeansOver(,)) & (  LeansOver(,) ->   IsLeaningOver(,)) & (IsTan() ->   IsWearingWoolHat()) & (  Runs() ->   IsWearingWoolHat()) & (  LeansOver(,) ->   IsWearingWoolHat()) & (IsTan() ->   IsSittingOnGround(,)) & (  Runs() ->   IsSittingOnGround(, )) & (  LeansOver(¡,¢) ->   IsSittingOnGround(£,¤))) -> (exists g (exists f (IsTan(f) and Runs(f) and LeansOver(f, g))))",
105,1,,A scientist studies a slide in order to work on her new creation. It follows that a scientist studies a slide that is related to her invention., A scientist studies a slide.  , A scientist studies a slide related to a scientist's invention.,"Studies(a, b)","Studies(a, b),  IsRelatedTo(b, c)","[('Studies(a, b)', '  IsRelatedTo(b, c)'), ('  IsRelatedTo(b, c)', 'Studies(a, b)')]","[(' A scientist', ' A scientist'), (' a slide', ' a slide')]","[("" a scientist's invention"", ' A scientist')]","Studies(a, b)","Studies(a, b) and IsRelatedTo(b, c)","(forall a (Studies(a, b)) & (forall c (forall a (forall b (Studies(a, b) ->   IsRelatedTo(b, c))))) & (forall c (forall a (forall b (  IsRelatedTo(b, c) -> Studies(a, b)))))) -> (exists c (Studies(a, b) and IsRelatedTo(b, c)))","(exists a (exists b (Studies(a, b))) & (forall e (forall g (forall f (forall d (Studies(d,e) ->   IsRelatedTo(f,g)))))) & (forall j (forall i (forall k (forall h (  IsRelatedTo(h,i) -> Studies(j,k))))))) -> (exists c (exists a (exists b (Studies(a, b) and IsRelatedTo(b, c)))))",Valid
106,1,,"A red dog jumps and catches a tennis ball in its mouth. Consequently, a dog catching a ball."," ""A red dog jumps and catches a tennis ball in its mouth.""  "," ""A dog catches a ball.""","IsRed(a),  Jumps(a),  Catches(a, b),  InMouth(b, c)","Catches(d, e)","[('Catches(d, e)', 'IsRed(a)'), ('Catches(d, e)', '  Jumps(a)'), ('  InMouth(b, c)', 'Catches(d, e)'), ('Catches(d, e)', '  InMouth(b, c)')]",[],[],"IsRed(a) and Jumps(a) and Catches(a, b) and InMouth(b, c)","Catches(d, e)","(IsRed(a) and Jumps(a) and Catches(a, b) and InMouth(b, c) & (forall e (forall a (forall d (Catches(d, e) -> IsRed(a))))) & (forall e (forall a (forall d (Catches(d, e) ->   Jumps(a))))) & (forall e (forall c (forall d (forall b (  InMouth(b, c) -> Catches(d, e)))))) & (forall e (forall c (forall d (forall b (Catches(d, e) ->   InMouth(b, c))))))) -> (Catches(d, e))","(exists c (exists a (exists b (IsRed(a) and Jumps(a) and Catches(a, b) and InMouth(b, c)))) & (forall g (forall f (forall h (Catches(f,g) -> IsRed(h))))) & (forall i (forall k (forall j (Catches(i,j) ->   Jumps(k))))) & (forall l (forall n (forall o (forall m (  InMouth(l,m) -> Catches(n,o)))))) & (forall q (forall s (forall r (forall p (Catches(p,q) ->   InMouth(r,s))))))) -> (exists e (exists d (Catches(d, e))))",Valid
107,1,,"A group of dogs stand in the snow. Thus, there are animals outdoors."," ""A group of dogs stand in the snow.""  "," ""There are animals outdoors.""",StandInSnow(a),IsOutdoors(c),"[('StandInSnow(a)', 'IsOutdoors(c)'), ('IsOutdoors(c)', 'StandInSnow(a)')]",[],"[(' the snow', ' outdoors')]",StandInSnow(a),IsOutdoors(c),(StandInSnow(a) & (forall c (forall a (StandInSnow(a) -> IsOutdoors(c)))) & (forall c (forall a (IsOutdoors(c) -> StandInSnow(a))))) -> (IsOutdoors(c)),(exists a (StandInSnow(a)) & (forall e (forall f (StandInSnow(e) -> IsOutdoors(f)))) & (forall g (forall h (IsOutdoors(g) -> StandInSnow(h))))) -> (exists c (IsOutdoors(c))),Valid
108,1,,This person looks to be snowboarding on a very small pile of snow on a sunny cold day. This implies that young snowboarder sizing up their next jump.," ""This person is snowboarding on a very small pile of snow on a sunny cold day."""," ""The young snowboarder is sizing up the next jump.""","IsSnowboarding(a),  IsOnPileOfSnow(a, b),  IsSunnyColdDay(c)","IsYoung(d),  IsSizingUp(d, e)","[('IsSnowboarding(a)', '  IsSizingUp(d, e)')]",[],"[(' the next jump', ' This person')]","IsSnowboarding(a) and IsOnPileOfSnow(a, b) and IsSunnyColdDay(c)","IsYoung(d) and IsSizingUp(d, e)","(forall a (IsSnowboarding(a) and IsOnPileOfSnow(a, b) and IsSunnyColdDay(c)) & (forall e (forall a (forall d (IsSnowboarding(a) ->   IsSizingUp(d, e)))))) -> (exists e (IsYoung(d) and IsSizingUp(d, e)))","(exists c (exists a (exists b (IsSnowboarding(a) and IsOnPileOfSnow(a, b) and IsSunnyColdDay(c)))) & (forall g (forall f (forall h (IsSnowboarding(f) ->   IsSizingUp(g,h)))))) -> (exists e (exists d (IsYoung(d) and IsSizingUp(d, e))))",LF
109,1,,"A large number of people are watching men dressed in kilts, one of whom has thrown a long pole. As a consequence, people watch men in kilts."," ""A man in a kilt has thrown a long pole.""  "," ""People watch men in kilts.""","IsInKilt(a),  HasThrownPole(a)","Watch(c, d),  AreInKilts(d)","[('IsInKilt(a)', 'Watch(c, d)'), ('Watch(c, d)', 'IsInKilt(a)'), ('IsInKilt(a)', '  AreInKilts(d)'), ('  AreInKilts(d)', 'IsInKilt(a)'), ('  HasThrownPole(a)', 'Watch(c, d)'), ('Watch(c, d)', '  HasThrownPole(a)'), ('  AreInKilts(d)', '  HasThrownPole(a)')]",[],"[(' kilts', ' A man in a kilt')]",IsInKilt(a) and HasThrownPole(a),"Watch(c, d) and AreInKilts(d)","(IsInKilt(a) and HasThrownPole(a) & (forall c (forall a (forall d (IsInKilt(a) -> Watch(c, d))))) & (forall c (forall a (forall d (Watch(c, d) -> IsInKilt(a))))) & (forall a (forall d (IsInKilt(a) ->   AreInKilts(d)))) & (forall a (forall d (  AreInKilts(d) -> IsInKilt(a)))) & (forall c (forall a (forall d (  HasThrownPole(a) -> Watch(c, d))))) & (forall c (forall a (forall d (Watch(c, d) ->   HasThrownPole(a))))) & (forall a (forall d (  AreInKilts(d) ->   HasThrownPole(a))))) -> (Watch(c, d) and AreInKilts(d))","(exists a (IsInKilt(a) and HasThrownPole(a)) & (forall g (forall f (forall h (IsInKilt(f) -> Watch(g,h))))) & (forall i (forall k (forall j (Watch(i,j) -> IsInKilt(k))))) & (forall l (forall m (IsInKilt(l) ->   AreInKilts(m)))) & (forall o (forall n (  AreInKilts(n) -> IsInKilt(o)))) & (forall q (forall r (forall p (  HasThrownPole(p) -> Watch(q,r))))) & (forall s (forall u (forall t (Watch(s,t) ->   HasThrownPole(u))))) & (forall v (forall w (  AreInKilts(v) ->   HasThrownPole(w))))) -> (exists c (exists d (Watch(c, d) and AreInKilts(d))))",Valid
110,1,,"A boy is riding down the road between two cows. Consequently, a boy, a road and two cows."," ""A boy is riding down the road between two cows.""  "," ""A boy, a road, and two cows exist.""","IsRidingDown(a, c),  IsBetween(a, b)","Exists(a),  Exists(d),  Exists(b)","[('Exists(a)', 'IsRidingDown(a, c)'), ('  Exists(d)', 'IsRidingDown(a, c)'), ('  Exists(b)', 'IsRidingDown(a, c)'), ('Exists(a)', '  IsBetween(a, b)'), ('  Exists(b)', '  IsBetween(a, b)')]","[(' A boy', ' A boy'), (' two cows', ' two cows')]","[(' the road', ' a road')]","IsRidingDown(a, c) and IsBetween(a, b)",Exists(a) and Exists(d) and Exists(b),"(exists c (IsRidingDown(a, c) and IsBetween(a, b)) & (forall c (forall a (Exists(a) -> IsRidingDown(a, c)))) & (forall c (forall a (forall d (  Exists(d) -> IsRidingDown(a, c))))) & (forall c (forall a (forall b (  Exists(b) -> IsRidingDown(a, c))))) & (forall a (forall b (Exists(a) ->   IsBetween(a, b)))) & (forall a (forall b (  Exists(b) ->   IsBetween(a, b))))) -> (forall d (Exists(a) and Exists(d) and Exists(b)))","(exists c (exists a (exists b (IsRidingDown(a, c) and IsBetween(a, b)))) & (forall e (forall f (Exists(e) -> IsRidingDown(e,f)))) & (forall g (forall i (forall h (  Exists(g) -> IsRidingDown(h,i))))) & (forall l (forall k (forall j (  Exists(j) -> IsRidingDown(k,l))))) & (forall n (forall m (Exists(m) ->   IsBetween(m,n)))) & (forall q (forall o (forall p (  Exists(o) ->   IsBetween(p,q)))))) -> (exists a (exists d (exists b (Exists(a) and Exists(d) and Exists(b)))))",LF
111,1,,A bald man is getting out of a small blue car. It follows that the man is bald.," ""A bald man is getting out of a small blue car.""  "," ""The man is bald.""","IsBald(a),  IsGettingOutOf(a, b)",IsBald(c),"[('IsBald(c)', '  IsGettingOutOf(a, b)')]",[],[],"IsBald(a) and IsGettingOutOf(a, b)",IsBald(c),"(IsBald(a) and IsGettingOutOf(a, b) & (forall c (forall a (forall b (IsBald(c) ->   IsGettingOutOf(a, b)))))) -> (IsBald(c))","(exists a (exists b (IsBald(a) and IsGettingOutOf(a, b))) & (forall e (forall f (forall d (IsBald(d) ->   IsGettingOutOf(e,f)))))) -> (exists c (IsBald(c)))",Valid
112,1,,"Young boys in green and blue jerseys kick around a soccer ball while other soccer games take place in the background. Thus, young boys kicking around a soccer ball."," ""Young boys wear green and blue jerseys and kick around a soccer ball.""  "," ""Young boys kick around a soccer ball.""","IsYoung(a),  Wears(a, c),  Kicks(a, b)","IsYoung(a),  Kicks(a, b)","[('  Kicks(a, b)', 'IsYoung(a)'), ('IsYoung(a)', '  Wears(a, c)'), ('  Kicks(a, b)', '  Wears(a, c)'), ('  Kicks(a, b)', 'IsYoung(a)'), ('IsYoung(a)', '  Kicks(a, b)')]","[(' Young boys', ' Young boys'), (' soccer ball', ' soccer ball')]",[],"IsYoung(a) and Wears(a, c) and Kicks(a, b)","IsYoung(a) and Kicks(a, b)","(IsYoung(a) and Wears(a, c) and Kicks(a, b) & (forall a (forall b (  Kicks(a, b) -> IsYoung(a)))) & (forall c (forall a (IsYoung(a) ->   Wears(a, c)))) & (forall c (forall a (forall b (  Kicks(a, b) ->   Wears(a, c))))) & (forall a (forall b (  Kicks(a, b) -> IsYoung(a)))) & (forall a (forall b (IsYoung(a) ->   Kicks(a, b))))) -> (IsYoung(a) and Kicks(a, b))","(exists c (exists a (exists b (IsYoung(a) and Wears(a, c) and Kicks(a, b)))) & (forall e (forall d (  Kicks(d,e) -> IsYoung(d)))) & (forall g (forall f (IsYoung(f) ->   Wears(f,g)))) & (forall j (forall i (forall h (  Kicks(h,i) ->   Wears(h,j))))) & (forall l (forall k (  Kicks(k,l) -> IsYoung(k)))) & (forall n (forall m (IsYoung(m) ->   Kicks(m,n))))) -> (exists a (exists b (IsYoung(a) and Kicks(a, b))))",Valid
113,1,,"A girl playing a violin along with a group of people. Consequently, a girl is playing an instrument."," ""A girl is playing a violin with a group of people.""  "," ""A girl is playing an instrument.""","IsPlaying(a, b),  IsWith(a, c)","IsPlaying(a, d)","[('IsPlaying(a, d)', '  IsWith(a, c)')]","[(' A girl', ' A girl')]",[],"IsPlaying(a, b) and IsWith(a, c)","IsPlaying(a, d)","(IsPlaying(a, b) and IsWith(a, c) & (forall c (forall a (forall d (IsPlaying(a, d) ->   IsWith(a, c)))))) -> (IsPlaying(a, d))","(exists c (exists a (exists b (IsPlaying(a, b) and IsWith(a, c)))) & (forall e (forall g (forall f (IsPlaying(e,f) ->   IsWith(e,g)))))) -> (exists a (exists d (IsPlaying(a, d))))",Valid
114,1,,Two small boys in blue soccer uniforms use a wooden set of steps to wash their hands in an adult-sized bathroom. It follows that two boys washing their hands.," ""Two small boys in blue soccer uniforms are using a wooden set of steps to wash their hands in an adult-sized bathroom."""," ""Two boys are washing their hands.""","IsSmall(b),  IsInBlueSoccerUniforms(b),  IsUsingStepsToWashHands(b, d),  IsInAdultSizedBathroom(b)",IsWashingHands(f),"[('IsWashingHands(f)', 'IsSmall(b)'), ('IsWashingHands(f)', '  IsInBlueSoccerUniforms(b)'), ('IsWashingHands(f)', '  IsUsingStepsToWashHands(b, d)'), ('IsWashingHands(f)', '  IsInAdultSizedBathroom(b)')]","[(' their hands', ' their hands')]","[(' Two small boys', ' Two boys')]","IsSmall(b) and IsInBlueSoccerUniforms(b) and IsUsingStepsToWashHands(b, d) and IsInAdultSizedBathroom(b)",IsWashingHands(f),"(exists b (IsSmall(b) and IsInBlueSoccerUniforms(b) and IsUsingStepsToWashHands(b, d) and IsInAdultSizedBathroom(b)) & (forall f (forall b (IsWashingHands(f) -> IsSmall(b)))) & (forall f (forall b (IsWashingHands(f) ->   IsInBlueSoccerUniforms(b)))) & (forall f (forall d (forall b (IsWashingHands(f) ->   IsUsingStepsToWashHands(b, d))))) & (forall f (forall b (IsWashingHands(f) ->   IsInAdultSizedBathroom(b))))) -> (forall f (IsWashingHands(f)))","(exists d (exists b (IsSmall(b) and IsInBlueSoccerUniforms(b) and IsUsingStepsToWashHands(b, d) and IsInAdultSizedBathroom(b))) & (forall g (forall h (IsWashingHands(g) -> IsSmall(h)))) & (forall i (forall j (IsWashingHands(i) ->   IsInBlueSoccerUniforms(j)))) & (forall l (forall m (forall k (IsWashingHands(k) ->   IsUsingStepsToWashHands(l,m))))) & (forall o (forall n (IsWashingHands(n) ->   IsInAdultSizedBathroom(o))))) -> (exists f (IsWashingHands(f)))",LF
115,1,,A soccer player in white kicks a ball as another soccer player lunges towards the ball and a third soccer player in red follows close by. This implies that there are three soccer players.," A soccer player in white kicks a ball, another soccer player lunges towards the ball, and a third soccer player in red follows close by.  ", There are three soccer players.,"IsInWhite(a),  KicksBall(a),  LungesTowardsBall(c),  IsInRed(d),  FollowsClose(d)",AreSoccerPlayers(e),"[('IsInWhite(a)', 'AreSoccerPlayers(e)'), ('AreSoccerPlayers(e)', 'IsInWhite(a)'), ('AreSoccerPlayers(e)', '  KicksBall(a)'), ('AreSoccerPlayers(e)', '  LungesTowardsBall(c)'), ('AreSoccerPlayers(e)', '  IsInRed(d)'), ('AreSoccerPlayers(e)', '  FollowsClose(d)')]",[],"[(' Three soccer players', ' soccer player')]",IsInWhite(a) and KicksBall(a) and LungesTowardsBall(c) and IsInRed(d) and FollowsClose(d),AreSoccerPlayers(e),(forall c (IsInWhite(a) and KicksBall(a) and LungesTowardsBall(c) and IsInRed(d) and FollowsClose(d)) & (forall e (forall a (IsInWhite(a) -> AreSoccerPlayers(e)))) & (forall e (forall a (AreSoccerPlayers(e) -> IsInWhite(a)))) & (forall e (forall a (AreSoccerPlayers(e) ->   KicksBall(a)))) & (forall e (forall c (AreSoccerPlayers(e) ->   LungesTowardsBall(c)))) & (forall e (forall d (AreSoccerPlayers(e) ->   IsInRed(d)))) & (forall e (forall d (AreSoccerPlayers(e) ->   FollowsClose(d))))) -> (exists e (AreSoccerPlayers(e))),(exists c (exists a (exists d (IsInWhite(a) and KicksBall(a) and LungesTowardsBall(c) and IsInRed(d) and FollowsClose(d)))) & (forall g (forall f (IsInWhite(f) -> AreSoccerPlayers(g)))) & (forall i (forall h (AreSoccerPlayers(h) -> IsInWhite(i)))) & (forall k (forall j (AreSoccerPlayers(j) ->   KicksBall(k)))) & (forall l (forall m (AreSoccerPlayers(l) ->   LungesTowardsBall(m)))) & (forall o (forall n (AreSoccerPlayers(n) ->   IsInRed(o)))) & (forall q (forall p (AreSoccerPlayers(p) ->   FollowsClose(q))))) -> (exists e (AreSoccerPlayers(e))),Valid
116,1,,"Children playing a video game together. Thus, the kids are indoors playing a video game.", Children are playing a video game together.  , The kids are indoors playing a video game.,"ArePlaying(a),  IsVideoGame(b)","AreIndoors(c),  ArePlaying(c),  IsVideoGame(d)",[],[],"[(' Children', ' The kids'), (' video game', ' a video game')]",ArePlaying(a) and IsVideoGame(b),AreIndoors(c) and ArePlaying(c) and IsVideoGame(d),(exists b (exists a (ArePlaying(a) and IsVideoGame(b)))) -> (forall d (forall c (AreIndoors(c) and ArePlaying(c) and IsVideoGame(d)))),(exists a (exists b (ArePlaying(a) and IsVideoGame(b)))) -> (exists c (exists d (AreIndoors(c) and ArePlaying(c) and IsVideoGame(d)))),LF
117,1,,Two people in coats kiss on the side of a road. This implies that people show their appreciation for another., Two people in coats kiss on the side of a road.  , People show their appreciation for another.,"IsInCoat(a),  KissOnSideOfRoad(a)","ShowAppreciation(d, e, f)","[('ShowAppreciation(d, e, f)', 'IsInCoat(a)'), ('  KissOnSideOfRoad(a)', 'ShowAppreciation(d, e, f)'), ('ShowAppreciation(d, e, f)', '  KissOnSideOfRoad(a)')]",[],"[(' their appreciation', ' Two people'), (' Two people', ' another'), (' side of a road', ' their appreciation'), (' side of a road', ' another')]",IsInCoat(a) and KissOnSideOfRoad(a),"ShowAppreciation(d, e, f)","(forall a (IsInCoat(a) and KissOnSideOfRoad(a)) & (forall e (forall f (forall a (forall d (ShowAppreciation(d, e, f) -> IsInCoat(a)))))) & (forall e (forall f (forall a (forall d (  KissOnSideOfRoad(a) -> ShowAppreciation(d, e, f)))))) & (forall e (forall f (forall a (forall d (ShowAppreciation(d, e, f) ->   KissOnSideOfRoad(a))))))) -> (forall f (exists e (ShowAppreciation(d, e, f))))","(exists a (IsInCoat(a) and KissOnSideOfRoad(a)) & (forall g (forall i (forall j (forall h (ShowAppreciation(g,h,i) -> IsInCoat(j)))))) & (forall l (forall n (forall m (forall k (  KissOnSideOfRoad(k) -> ShowAppreciation(l,m,n)))))) & (forall q (forall r (forall o (forall p (ShowAppreciation(o,p,q) ->   KissOnSideOfRoad(r))))))) -> (exists e (exists f (exists d (ShowAppreciation(d, e, f)))))",Valid
118,1,,Woman reading a book with a grocery tote. It follows that a woman is reading.," ""A woman is reading a book with a grocery tote.""  "," ""A woman is reading.""","IsReading(a),  HasGroceryTote(a)",IsReading(a),"[('IsReading(a)', '  HasGroceryTote(a)')]","[(' A woman', ' A woman')]",[],IsReading(a) and HasGroceryTote(a),IsReading(a),(IsReading(a) and HasGroceryTote(a) & (forall a (IsReading(a) ->   HasGroceryTote(a)))) -> (IsReading(a)),(exists a (IsReading(a) and HasGroceryTote(a)) & (forall d (IsReading(d) ->   HasGroceryTote(d)))) -> (exists a (IsReading(a))),Valid
119,1,,"A man wearing a brown hoodie is shopping for snacks. As a consequence, the man is wearing brown.", A man wearing a brown hoodie is shopping for snacks.  , The man is wearing brown.  ,"IsWearingBrownHoodie(a),  IsShoppingForSnacks(a)",IsWearingBrown(c),"[('IsWearingBrownHoodie(a)', 'IsWearingBrown(c)'), ('IsWearingBrown(c)', 'IsWearingBrownHoodie(a)'), ('IsWearingBrown(c)', '  IsShoppingForSnacks(a)')]",[],[],IsWearingBrownHoodie(a) and IsShoppingForSnacks(a),IsWearingBrown(c),(IsWearingBrownHoodie(a) and IsShoppingForSnacks(a) & (forall c (forall a (IsWearingBrownHoodie(a) -> IsWearingBrown(c)))) & (forall c (forall a (IsWearingBrown(c) -> IsWearingBrownHoodie(a)))) & (forall c (forall a (IsWearingBrown(c) ->   IsShoppingForSnacks(a))))) -> (IsWearingBrown(c)),(exists a (IsWearingBrownHoodie(a) and IsShoppingForSnacks(a)) & (forall e (forall d (IsWearingBrownHoodie(d) -> IsWearingBrown(e)))) & (forall g (forall f (IsWearingBrown(f) -> IsWearingBrownHoodie(g)))) & (forall i (forall h (IsWearingBrown(h) ->   IsShoppingForSnacks(i))))) -> (exists c (IsWearingBrown(c))),Valid
120,1,,"A young man in a blue T-shirt and sweatpants stands over a stove and looks at the camera while another young man stands behind him. As a consequence, a man is in front of a camera.", A young man in a blue T-shirt and sweatpants is standing over a stove and looking at the camera while another young man is standing behind him., A man is in front of a camera.,"IsInBlueTShirtAndSweatpants(a),  IsStandingOver(a, b),  IsLookingAt(a, c),  IsStandingBehind(d, a)","IsInFrontOf(e, f)","[('IsInBlueTShirtAndSweatpants(a)', 'IsInFrontOf(e, f)'), ('IsInFrontOf(e, f)', 'IsInBlueTShirtAndSweatpants(a)'), ('IsInFrontOf(e, f)', '  IsStandingOver(a, b)'), ('  IsLookingAt(a, c)', 'IsInFrontOf(e, f)'), ('IsInFrontOf(e, f)', '  IsLookingAt(a, c)'), ('IsInFrontOf(e, f)', '  IsStandingBehind(d, a)')]",[],[],"IsInBlueTShirtAndSweatpants(a) and IsStandingOver(a, b) and IsLookingAt(a, c) and IsStandingBehind(d, a)","IsInFrontOf(e, f)","(IsInBlueTShirtAndSweatpants(a) and IsStandingOver(a, b) and IsLookingAt(a, c) and IsStandingBehind(d, a) & (forall e (forall f (forall a (IsInBlueTShirtAndSweatpants(a) -> IsInFrontOf(e, f))))) & (forall e (forall f (forall a (IsInFrontOf(e, f) -> IsInBlueTShirtAndSweatpants(a))))) & (forall e (forall f (forall a (forall b (IsInFrontOf(e, f) ->   IsStandingOver(a, b)))))) & (forall e (forall f (forall c (forall a (  IsLookingAt(a, c) -> IsInFrontOf(e, f)))))) & (forall e (forall f (forall c (forall a (IsInFrontOf(e, f) ->   IsLookingAt(a, c)))))) & (forall e (forall f (forall a (forall d (IsInFrontOf(e, f) ->   IsStandingBehind(d, a))))))) -> (IsInFrontOf(e, f))","(exists c (exists a (exists d (exists b (IsInBlueTShirtAndSweatpants(a) and IsStandingOver(a, b) and IsLookingAt(a, c) and IsStandingBehind(d, a))))) & (forall g (forall i (forall h (IsInBlueTShirtAndSweatpants(g) -> IsInFrontOf(h,i))))) & (forall l (forall k (forall j (IsInFrontOf(j,k) -> IsInBlueTShirtAndSweatpants(l))))) & (forall n (forall o (forall m (forall p (IsInFrontOf(m,n) ->   IsStandingOver(o,p)))))) & (forall q (forall s (forall r (forall t (  IsLookingAt(q,r) -> IsInFrontOf(s,t)))))) & (forall u (forall v (forall x (forall w (IsInFrontOf(u,v) ->   IsLookingAt(w,x)))))) & (forall z (forall y (IsInFrontOf(y,z) ->   IsStandingBehind({,|))))) -> (exists e (exists f (IsInFrontOf(e, f))))",
121,1,,"This church choir sings to the masses as they sing joyous songs from the book at a church. Therefore, the church is filled with song.", The church choir sings joyous songs from the book.  , The church is filled with song.,"Sings(a, b),  From(b, c)","IsFilledWith(d, e)","[('Sings(a, b)', 'IsFilledWith(d, e)'), ('IsFilledWith(d, e)', 'Sings(a, b)'), ('IsFilledWith(d, e)', '  From(b, c)')]",[],"[(' Church choir', ' The church'), (' song', ' Church choir'), (' joyous songs', ' The church'), (' joyous songs', ' song')]","Sings(a, b) and From(b, c)","IsFilledWith(d, e)","(exists b (forall a (exists a (Sings(a, b) and From(b, c)))) & (forall e (forall a (forall d (forall b (Sings(a, b) -> IsFilledWith(d, e)))))) & (forall e (forall a (forall d (forall b (IsFilledWith(d, e) -> Sings(a, b)))))) & (forall e (forall c (forall d (forall b (IsFilledWith(d, e) ->   From(b, c))))))) -> (forall e (exists e (forall d (IsFilledWith(d, e)))))","(exists c (exists a (exists b (Sings(a, b) and From(b, c)))) & (forall g (forall f (forall i (forall h (Sings(f,g) -> IsFilledWith(h,i)))))) & (forall l (forall m (forall k (forall j (IsFilledWith(j,k) -> Sings(l,m)))))) & (forall q (forall o (forall n (forall p (IsFilledWith(n,o) ->   From(p,q))))))) -> (exists e (exists d (IsFilledWith(d, e))))",Valid
122,1,,"A man and a woman are standing at the side of an inflatable climbing structure. As a consequence, a man and a woman are standing.", A man and a woman are standing at the side of an inflatable climbing structure.  , A man and a woman are standing.,"IsStandingAtSide(a, c),  IsStandingAtSide(b, c),  IsAtSideOf(c, d)","IsStanding(a),  IsStanding(b)","[('IsStandingAtSide(a, c)', 'IsStanding(a)'), ('IsStanding(a)', 'IsStandingAtSide(a, c)'), ('  IsStanding(b)', 'IsStandingAtSide(a, c)'), ('  IsStandingAtSide(b, c)', 'IsStanding(a)'), ('IsStanding(a)', '  IsStandingAtSide(b, c)'), ('  IsStandingAtSide(b, c)', '  IsStanding(b)'), ('  IsStanding(b)', '  IsStandingAtSide(b, c)'), ('IsStanding(a)', '  IsAtSideOf(c, d)'), ('  IsStanding(b)', '  IsAtSideOf(c, d)')]","[(' A man', ' A man'), (' a woman', ' a woman')]","[(' side', ' a woman')]","IsStandingAtSide(a, c) and IsStandingAtSide(b, c) and IsAtSideOf(c, d)",IsStanding(a) and IsStanding(b),"(exists c (IsStandingAtSide(a, c) and IsStandingAtSide(b, c) and IsAtSideOf(c, d)) & (forall c (forall a (IsStandingAtSide(a, c) -> IsStanding(a)))) & (forall c (forall a (IsStanding(a) -> IsStandingAtSide(a, c)))) & (forall c (forall a (forall b (  IsStanding(b) -> IsStandingAtSide(a, c))))) & (forall c (forall a (forall b (  IsStandingAtSide(b, c) -> IsStanding(a))))) & (forall c (forall a (forall b (IsStanding(a) ->   IsStandingAtSide(b, c))))) & (forall c (forall b (  IsStandingAtSide(b, c) ->   IsStanding(b)))) & (forall c (forall b (  IsStanding(b) ->   IsStandingAtSide(b, c)))) & (forall c (forall a (forall d (IsStanding(a) ->   IsAtSideOf(c, d))))) & (forall c (forall d (forall b (  IsStanding(b) ->   IsAtSideOf(c, d)))))) -> (forall b (IsStanding(a) and IsStanding(b)))","(exists c (exists a (exists d (exists b (IsStandingAtSide(a, c) and IsStandingAtSide(b, c) and IsAtSideOf(c, d))))) & (forall e (forall f (IsStandingAtSide(e,f) -> IsStanding(e)))) & (forall g (forall h (IsStanding(g) -> IsStandingAtSide(g,h)))) & (forall i (forall k (forall j (  IsStanding(i) -> IsStandingAtSide(j,k))))) & (forall l (forall n (forall m (  IsStandingAtSide(l,m) -> IsStanding(n))))) & (forall q (forall o (forall p (IsStanding(o) ->   IsStandingAtSide(p,q))))) & (forall s (forall r (  IsStandingAtSide(r,s) ->   IsStanding(r)))) & (forall u (forall t (  IsStanding(t) ->   IsStandingAtSide(t,u)))) & (forall v (forall x (forall w (IsStanding(v) ->   IsAtSideOf(w,x))))) & (forall z (forall y (  IsStanding(y) ->   IsAtSideOf(z,{))))) -> (exists a (exists b (IsStanding(a) and IsStanding(b))))",
123,1,,An asian teenager wearing a white shirt with black stripes is sitting on the steps with his face resting on his hand. This implies that the teenager is seated.," ""An Asian teenager wearing a white shirt with black stripes is sitting on the steps with his face resting on his hand.""  "," ""The teenager is seated.""","IsAsian(b),  IsTeenager(b),  IsWearing(b, c),  IsSittingOn(b, a),  IsResting(d, e)",IsSeated(a),"[('IsSeated(a)', 'IsAsian(b)'), ('  IsTeenager(b)', 'IsSeated(a)'), ('IsSeated(a)', '  IsTeenager(b)'), ('IsSeated(a)', '  IsWearing(b, c)'), ('  IsSittingOn(b, a)', 'IsSeated(a)'), ('IsSeated(a)', '  IsSittingOn(b, a)'), ('IsSeated(a)', '  IsResting(d, e)')]","[(' the steps', ' The teenager')]","[(' The teenager', ' An Asian teenager'), (' a white shirt with black stripes', ' The teenager')]","IsAsian(b) and IsTeenager(b) and IsWearing(b, c) and IsSittingOn(b, a) and IsResting(d, e)",IsSeated(a),"(exists c (forall b (IsAsian(b) and IsTeenager(b) and IsWearing(b, c) and IsSittingOn(b, a) and IsResting(d, e))) & (forall a (forall b (IsSeated(a) -> IsAsian(b)))) & (forall a (forall b (  IsTeenager(b) -> IsSeated(a)))) & (forall a (forall b (IsSeated(a) ->   IsTeenager(b)))) & (forall c (forall a (forall b (IsSeated(a) ->   IsWearing(b, c))))) & (forall a (forall b (  IsSittingOn(b, a) -> IsSeated(a)))) & (forall a (forall b (IsSeated(a) ->   IsSittingOn(b, a)))) & (forall e (forall a (forall d (IsSeated(a) ->   IsResting(d, e)))))) -> (forall a (exists a (IsSeated(a))))","(exists e (exists c (exists d (exists b (exists a (IsAsian(b) and IsTeenager(b) and IsWearing(b, c) and IsSittingOn(b, a) and IsResting(d, e)))))) & (forall g (forall h (IsSeated(g) -> IsAsian(h)))) & (forall i (forall j (  IsTeenager(i) -> IsSeated(j)))) & (forall l (forall k (IsSeated(k) ->   IsTeenager(l)))) & (forall n (forall o (forall m (IsSeated(m) ->   IsWearing(n,o))))) & (forall q (forall r (forall p (  IsSittingOn(p,q) -> IsSeated(r))))) & (forall s (forall u (forall t (IsSeated(s) ->   IsSittingOn(t,u))))) & (forall v (forall x (forall w (IsSeated(v) ->   IsResting(w,x)))))) -> (exists a (IsSeated(a)))",Valid
124,1,,"Boy in red and black shirt walks through grass. Therefore, the boy is walking."," ""The boy in red and black shirt walks through grass.""  "," ""The boy is walking.""","IsInRedAndBlackShirt(a),  WalksThroughGrass(a)",IsWalking(c),"[('IsWalking(c)', 'IsInRedAndBlackShirt(a)'), ('  WalksThroughGrass(a)', 'IsWalking(c)'), ('IsWalking(c)', '  WalksThroughGrass(a)')]",[],[],IsInRedAndBlackShirt(a) and WalksThroughGrass(a),IsWalking(c),(IsInRedAndBlackShirt(a) and WalksThroughGrass(a) & (forall c (forall a (IsWalking(c) -> IsInRedAndBlackShirt(a)))) & (forall c (forall a (  WalksThroughGrass(a) -> IsWalking(c)))) & (forall c (forall a (IsWalking(c) ->   WalksThroughGrass(a))))) -> (IsWalking(c)),(exists a (IsInRedAndBlackShirt(a) and WalksThroughGrass(a)) & (forall e (forall d (IsWalking(d) -> IsInRedAndBlackShirt(e)))) & (forall g (forall f (  WalksThroughGrass(f) -> IsWalking(g)))) & (forall i (forall h (IsWalking(h) ->   WalksThroughGrass(i))))) -> (exists c (IsWalking(c))),Valid
125,1,,"These girls are having a great time looking for seashells. As a consequence, the girls are happy."," ""These girls are having a great time looking for seashells."""," ""The girls are happy.""","HavingGreatTime(a),  LookingForSeashells(a)",IsHappy(c),"[('HavingGreatTime(a)', 'IsHappy(c)'), ('IsHappy(c)', 'HavingGreatTime(a)'), ('  LookingForSeashells(a)', 'IsHappy(c)'), ('IsHappy(c)', '  LookingForSeashells(a)')]",[],"[(' These girls', ' The girls')]",HavingGreatTime(a) and LookingForSeashells(a),IsHappy(c),(exists a (HavingGreatTime(a) and LookingForSeashells(a)) & (forall c (forall a (HavingGreatTime(a) -> IsHappy(c)))) & (forall c (forall a (IsHappy(c) -> HavingGreatTime(a)))) & (forall c (forall a (  LookingForSeashells(a) -> IsHappy(c)))) & (forall c (forall a (IsHappy(c) ->   LookingForSeashells(a))))) -> (forall c (IsHappy(c))),(exists a (HavingGreatTime(a) and LookingForSeashells(a)) & (forall e (forall d (HavingGreatTime(d) -> IsHappy(e)))) & (forall g (forall f (IsHappy(f) -> HavingGreatTime(g)))) & (forall i (forall h (  LookingForSeashells(h) -> IsHappy(i)))) & (forall k (forall j (IsHappy(j) ->   LookingForSeashells(k))))) -> (exists c (IsHappy(c))),Valid
126,1,,"Small girl in a pink dress is playing electronic drum pads with sticks. Consequently, a girl is playing electronic drums."," ""A small girl in a pink dress is playing electronic drum pads with sticks."""," ""A girl is playing electronic drums.""","IsSmall(a),  IsInPinkDress(a),  PlaysDrumPads(a),  UsesSticks(a)",PlaysDrums(e),"[('PlaysDrums(e)', 'IsSmall(a)'), ('PlaysDrums(e)', '  IsInPinkDress(a)'), ('  PlaysDrumPads(a)', 'PlaysDrums(e)'), ('PlaysDrums(e)', '  PlaysDrumPads(a)'), ('  UsesSticks(a)', 'PlaysDrums(e)'), ('PlaysDrums(e)', '  UsesSticks(a)')]",[],"[(' Small girl', ' A girl'), (' pink dress', ' A girl')]",IsSmall(a) and IsInPinkDress(a) and PlaysDrumPads(a) and UsesSticks(a),PlaysDrums(e),(exists a (IsSmall(a) and IsInPinkDress(a) and PlaysDrumPads(a) and UsesSticks(a)) & (forall e (forall a (PlaysDrums(e) -> IsSmall(a)))) & (forall e (forall a (PlaysDrums(e) ->   IsInPinkDress(a)))) & (forall e (forall a (  PlaysDrumPads(a) -> PlaysDrums(e)))) & (forall e (forall a (PlaysDrums(e) ->   PlaysDrumPads(a)))) & (forall e (forall a (  UsesSticks(a) -> PlaysDrums(e)))) & (forall e (forall a (PlaysDrums(e) ->   UsesSticks(a))))) -> (forall e (PlaysDrums(e))),(exists a (IsSmall(a) and IsInPinkDress(a) and PlaysDrumPads(a) and UsesSticks(a)) & (forall g (forall h (PlaysDrums(g) -> IsSmall(h)))) & (forall i (forall j (PlaysDrums(i) ->   IsInPinkDress(j)))) & (forall l (forall k (  PlaysDrumPads(k) -> PlaysDrums(l)))) & (forall n (forall m (PlaysDrums(m) ->   PlaysDrumPads(n)))) & (forall o (forall p (  UsesSticks(o) -> PlaysDrums(p)))) & (forall q (forall r (PlaysDrums(q) ->   UsesSticks(r))))) -> (exists e (PlaysDrums(e))),Valid
127,1,,"A blond woman with a tattoo of on an angel on her arm walking down the street, a concrete wall in the background. As a consequence, a person with a tattoo."," ""A blond woman has a tattoo of an angel on her arm.""  "," ""A person with a tattoo.""","IsBlond(a),  HasTattoo(a),  IsTattooOf(b,c),  IsOn(b,d)",HasTattoo(e),"[('HasTattoo(e)', 'IsBlond(a)'), ('HasTattoo(e)', '  IsTattooOf(b,c)'), ('  IsOn(b,d)', 'HasTattoo(e)'), ('HasTattoo(e)', '  IsOn(b,d)')]",[],"[(' her arm', ' a tattoo')]","IsBlond(a) and HasTattoo(a) and IsTattooOf(b,c) and IsOn(b,d)",HasTattoo(e),"(IsBlond(a) and HasTattoo(a) and IsTattooOf(b,c) and IsOn(b,d) & (forall e (forall a (HasTattoo(e) -> IsBlond(a)))) & (forall e (forall c (forall b (HasTattoo(e) ->   IsTattooOf(b,c))))) & (forall e (forall d (forall b (  IsOn(b,d) -> HasTattoo(e))))) & (forall e (forall d (forall b (HasTattoo(e) ->   IsOn(b,d)))))) -> (HasTattoo(e))","(exists c (exists a (exists d (exists b (IsBlond(a) and HasTattoo(a) and IsTattooOf(b,c) and IsOn(b,d))))) & (forall g (forall h (HasTattoo(g) -> IsBlond(h)))) & (forall i (forall k (forall j (HasTattoo(i) ->   IsTattooOf(j,k))))) & (forall l (forall n (forall m (  IsOn(l,m) -> HasTattoo(n))))) & (forall q (forall o (forall p (HasTattoo(o) ->   IsOn(p,q)))))) -> (exists e (HasTattoo(e)))",Valid
128,1,,"A tan dog chases a black and white soccer ball. Therefore, a dog is chasing a ball.", A tan dog chases a black and white soccer ball.  , A dog is chasing a ball.,"IsTan(a),  Chases(a, b),  IsBlackAndWhite(b)","Chases(c, d)","[('Chases(c, d)', 'IsTan(a)'), ('Chases(c, d)', '  IsBlackAndWhite(b)')]",[],"[(' A tan dog', ' A dog')]","IsTan(a) and Chases(a, b) and IsBlackAndWhite(b)","Chases(c, d)","(exists a (IsTan(a) and Chases(a, b) and IsBlackAndWhite(b)) & (forall c (forall a (forall d (Chases(c, d) -> IsTan(a))))) & (forall c (forall d (forall b (Chases(c, d) ->   IsBlackAndWhite(b)))))) -> (forall c (Chases(c, d)))","(exists a (exists b (IsTan(a) and Chases(a, b) and IsBlackAndWhite(b))) & (forall e (forall g (forall f (Chases(e,f) -> IsTan(g))))) & (forall j (forall i (forall h (Chases(h,i) ->   IsBlackAndWhite(j)))))) -> (exists c (exists d (Chases(c, d))))",Valid
129,1,,"A dusty boy runs along a dirt path through the grass. As a consequence, a boy is outside running."," ""A dusty boy runs along a dirt path through the grass.""  "," ""A boy is outside running.""","IsDusty(a),  Runs(a),  IsAlongPath(a, b),  IsThroughGrass(a, c)","IsOutside(d),  IsRunning(d)","[('IsOutside(d)', 'IsDusty(a)'), ('  IsRunning(d)', 'IsDusty(a)'), ('  Runs(a)', 'IsOutside(d)'), ('IsOutside(d)', '  Runs(a)'), ('  Runs(a)', '  IsRunning(d)'), ('  IsRunning(d)', '  Runs(a)'), ('IsOutside(d)', '  IsAlongPath(a, b)'), ('  IsAlongPath(a, b)', '  IsRunning(d)'), ('  IsRunning(d)', '  IsAlongPath(a, b)'), ('IsOutside(d)', '  IsThroughGrass(a, c)'), ('  IsRunning(d)', '  IsThroughGrass(a, c)')]",[],[],"IsDusty(a) and Runs(a) and IsAlongPath(a, b) and IsThroughGrass(a, c)",IsOutside(d) and IsRunning(d),"(IsDusty(a) and Runs(a) and IsAlongPath(a, b) and IsThroughGrass(a, c) & (forall a (forall d (IsOutside(d) -> IsDusty(a)))) & (forall a (forall d (  IsRunning(d) -> IsDusty(a)))) & (forall a (forall d (  Runs(a) -> IsOutside(d)))) & (forall a (forall d (IsOutside(d) ->   Runs(a)))) & (forall a (forall d (  Runs(a) ->   IsRunning(d)))) & (forall a (forall d (  IsRunning(d) ->   Runs(a)))) & (forall a (forall d (forall b (IsOutside(d) ->   IsAlongPath(a, b))))) & (forall a (forall d (forall b (  IsAlongPath(a, b) ->   IsRunning(d))))) & (forall a (forall d (forall b (  IsRunning(d) ->   IsAlongPath(a, b))))) & (forall c (forall a (forall d (IsOutside(d) ->   IsThroughGrass(a, c))))) & (forall c (forall a (forall d (  IsRunning(d) ->   IsThroughGrass(a, c)))))) -> (IsOutside(d) and IsRunning(d))","(exists c (exists a (exists b (IsDusty(a) and Runs(a) and IsAlongPath(a, b) and IsThroughGrass(a, c)))) & (forall e (forall f (IsOutside(e) -> IsDusty(f)))) & (forall g (forall h (  IsRunning(g) -> IsDusty(h)))) & (forall i (forall j (  Runs(i) -> IsOutside(j)))) & (forall l (forall k (IsOutside(k) ->   Runs(l)))) & (forall n (forall m (  Runs(m) ->   IsRunning(n)))) & (forall o (forall p (  IsRunning(o) ->   Runs(p)))) & (forall q (forall s (forall r (IsOutside(q) ->   IsAlongPath(r,s))))) & (forall u (forall v (forall t (  IsAlongPath(t,u) ->   IsRunning(v))))) & (forall w (forall y (forall x (  IsRunning(w) ->   IsAlongPath(x,y))))) & (forall z (IsOutside(z) ->   IsThroughGrass({,|))) & (  IsRunning(}) ->   IsThroughGrass(~,))) -> (exists d (IsOutside(d) and IsRunning(d)))",
130,1,,"A guy with a football, a crowd watching him. Consequently, there is a guy holding a football.", There is a guy holding a football.  , A crowd is watching a guy with a football.,"IsHolding(a, b)","IsWatching(c, a),  HasFootball(a)","[('IsHolding(a, b)', 'IsWatching(c, a)'), ('IsHolding(a, b)', '  HasFootball(a)'), ('  HasFootball(a)', 'IsHolding(a, b)')]","[(' A guy', ' a guy'), (' a football', ' a football')]",[],"IsHolding(a, b)","IsWatching(c, a) and HasFootball(a)","(IsHolding(a, b) & (forall c (forall a (forall b (IsHolding(a, b) -> IsWatching(c, a))))) & (forall a (forall b (IsHolding(a, b) ->   HasFootball(a)))) & (forall a (forall b (  HasFootball(a) -> IsHolding(a, b))))) -> (IsWatching(c, a) and HasFootball(a))","(exists a (exists b (IsHolding(a, b))) & (forall e (forall g (forall f (forall h (IsHolding(e,f) -> IsWatching(g,h)))))) & (forall i (forall j (IsHolding(i,j) ->   HasFootball(i)))) & (forall l (forall k (  HasFootball(k) -> IsHolding(k,l))))) -> (exists c (exists a (IsWatching(c, a) and HasFootball(a))))",Valid
131,1,,Two women are tending to their herd of animals including cows and goats near a building made primarily of stone. It follows that the two women are taking care of a herd of animals., Two women are tending to a herd of animals including cows and goats near a building made primarily of stone.  , The two women are taking care of a herd of animals.,"IsTendingTo(a, b),  Includes(b, c),  Includes(b, d),  IsNear(b, e),  IsMadeOf(e, f)","IsTakingCareOf(g, h)","[('IsTendingTo(a, b)', 'IsTakingCareOf(g, h)'), ('IsTakingCareOf(g, h)', 'IsTendingTo(a, b)'), ('IsTakingCareOf(g, h)', '  Includes(b, c)'), ('IsTakingCareOf(g, h)', '  Includes(b, d)'), ('IsTakingCareOf(g, h)', '  IsNear(b, e)'), ('IsTakingCareOf(g, h)', '  IsMadeOf(e, f)')]",[],"[(' The two women', ' Two women'), (' a herd of animals', ' herd of animals'), (' cows', ' a herd of animals'), (' goats', ' a herd of animals'), (' The two women', ' building')]","IsTendingTo(a, b) and Includes(b, c) and Includes(b, d) and IsNear(b, e) and IsMadeOf(e, f)","IsTakingCareOf(g, h)","(forall e (exists d (exists c (forall b (forall a (IsTendingTo(a, b) and Includes(b, c) and Includes(b, d) and IsNear(b, e) and IsMadeOf(e, f)))))) & (forall g (forall a (forall h (forall b (IsTendingTo(a, b) -> IsTakingCareOf(g, h)))))) & (forall g (forall a (forall h (forall b (IsTakingCareOf(g, h) -> IsTendingTo(a, b)))))) & (forall g (forall c (forall h (forall b (IsTakingCareOf(g, h) ->   Includes(b, c)))))) & (forall g (forall d (forall h (forall b (IsTakingCareOf(g, h) ->   Includes(b, d)))))) & (forall e (forall g (forall h (forall b (IsTakingCareOf(g, h) ->   IsNear(b, e)))))) & (forall e (forall g (forall f (forall h (IsTakingCareOf(g, h) ->   IsMadeOf(e, f))))))) -> (forall h (exists h (exists g (IsTakingCareOf(g, h)))))","(exists e (exists f (exists c (exists d (exists b (exists a (IsTendingTo(a, b) and Includes(b, c) and Includes(b, d) and IsNear(b, e) and IsMadeOf(e, f))))))) & (forall l (forall i (forall k (forall j (IsTendingTo(i,j) -> IsTakingCareOf(k,l)))))) & (forall n (forall o (forall m (forall p (IsTakingCareOf(m,n) -> IsTendingTo(o,p)))))) & (forall q (forall s (forall r (forall t (IsTakingCareOf(q,r) ->   Includes(s,t)))))) & (forall u (forall v (forall x (forall w (IsTakingCareOf(u,v) ->   Includes(w,x)))))) & (forall z (forall y (IsTakingCareOf(y,z) ->   IsNear({,|)))) & (IsTakingCareOf(},~) ->   IsMadeOf(,))) -> (exists g (exists h (IsTakingCareOf(g, h))))",
132,1,,"A boy and girl play together on a pile or rocks in a residential area. Thus, the boy and girl are outside.", A boy and girl play together on a pile of rocks in a residential area.  , The boy and girl are outside.,"PlaysTogether(b, a),  IsOn(c, b),  IsOn(c, a),  IsIn(d, c)","IsOutside(e),  IsOutside(a)","[('IsOutside(e)', 'PlaysTogether(b, a)'), ('  IsOutside(a)', 'PlaysTogether(b, a)'), ('IsOutside(e)', '  IsOn(c, b)'), ('  IsOutside(a)', '  IsOn(c, b)'), ('IsOutside(e)', '  IsOn(c, a)'), ('  IsOutside(a)', '  IsOn(c, a)'), ('IsOutside(e)', '  IsIn(d, c)'), ('  IsOutside(a)', '  IsIn(d, c)')]","[(' girl', ' girl')]","[(' The boy', ' A boy'), (' The boy', ' residential area'), (' residential area', ' girl')]","PlaysTogether(b, a) and IsOn(c, b) and IsOn(c, a) and IsIn(d, c)",IsOutside(e) and IsOutside(a),"(forall d (forall b (PlaysTogether(b, a) and IsOn(c, b) and IsOn(c, a) and IsIn(d, c))) & (forall e (forall a (forall b (IsOutside(e) -> PlaysTogether(b, a))))) & (forall a (forall b (  IsOutside(a) -> PlaysTogether(b, a)))) & (forall e (forall c (forall b (IsOutside(e) ->   IsOn(c, b))))) & (forall c (forall a (forall b (  IsOutside(a) ->   IsOn(c, b))))) & (forall e (forall c (forall a (IsOutside(e) ->   IsOn(c, a))))) & (forall c (forall a (  IsOutside(a) ->   IsOn(c, a)))) & (forall e (forall c (forall d (IsOutside(e) ->   IsIn(d, c))))) & (forall c (forall a (forall d (  IsOutside(a) ->   IsIn(d, c)))))) -> (forall a (exists e (IsOutside(e) and IsOutside(a))))","(exists c (exists a (exists d (exists b (PlaysTogether(b, a) and IsOn(c, b) and IsOn(c, a) and IsIn(d, c))))) & (forall g (forall f (forall h (IsOutside(f) -> PlaysTogether(g,h))))) & (forall i (forall k (forall j (  IsOutside(i) -> PlaysTogether(j,k))))) & (forall l (forall n (forall m (IsOutside(l) ->   IsOn(m,n))))) & (forall q (forall o (forall p (  IsOutside(o) ->   IsOn(p,q))))) & (forall s (forall r (forall t (IsOutside(r) ->   IsOn(s,t))))) & (forall u (forall v (forall w (  IsOutside(u) ->   IsOn(v,w))))) & (forall z (forall y (forall x (IsOutside(x) ->   IsIn(y,z))))) & (  IsOutside({) ->   IsIn(|,}))) -> (exists e (exists a (IsOutside(e) and IsOutside(a))))",
133,1,,"A boy stands in the middle of a crowd of teenagers. Thus, a person stands in the middle of a crowd of teenagers."," ""A boy stands in the middle of a crowd of teenagers.""  "," ""A person stands in the middle of a crowd of teenagers.""","IsStandingInMiddleOf(d, a),  InCrowdOf(b, c)","IsStandingInMiddleOf(e, a),  InCrowdOf(b, c)","[('IsStandingInMiddleOf(d, a)', '  InCrowdOf(b, c)'), ('  InCrowdOf(b, c)', 'IsStandingInMiddleOf(d, a)'), ('IsStandingInMiddleOf(e, a)', '  InCrowdOf(b, c)')]","[(' middle', ' middle'), (' crowd', ' crowd'), (' teenagers', ' teenagers')]","[(' middle', ' A person'), (' middle', ' crowd'), (' middle', ' crowd'), (' teenagers', ' crowd'), (' teenagers', ' crowd')]","IsStandingInMiddleOf(d, a) and InCrowdOf(b, c)","IsStandingInMiddleOf(e, a) and InCrowdOf(b, c)","(exists c (exists a (IsStandingInMiddleOf(d, a) and InCrowdOf(b, c))) & (forall c (forall a (forall d (forall b (IsStandingInMiddleOf(d, a) ->   InCrowdOf(b, c)))))) & (forall c (forall a (forall d (forall b (  InCrowdOf(b, c) -> IsStandingInMiddleOf(d, a)))))) & (forall e (forall c (forall a (forall b (IsStandingInMiddleOf(e, a) ->   InCrowdOf(b, c))))))) -> (exists c (exists a (forall b (forall e (IsStandingInMiddleOf(e, a) and InCrowdOf(b, c))))))","(exists c (exists a (exists d (exists b (IsStandingInMiddleOf(d, a) and InCrowdOf(b, c))))) & (forall g (forall f (forall i (forall h (IsStandingInMiddleOf(f,g) ->   InCrowdOf(h,i)))))) & (forall l (forall m (forall k (forall j (  InCrowdOf(j,k) -> IsStandingInMiddleOf(l,m)))))) & (forall q (forall o (forall n (forall p (IsStandingInMiddleOf(n,o) ->   InCrowdOf(p,q))))))) -> (exists e (exists c (exists a (exists b (IsStandingInMiddleOf(e, a) and InCrowdOf(b, c))))))",Valid
134,1,,"Two men are standing in a boat. Thus, some people are in a boat.", Two men are standing in a boat.  , Some people are in a boat.,"IsStandingIn(b, a)","IsIn(c, a)","[('IsStandingIn(b, a)', 'IsIn(c, a)')]","[(' a boat', ' a boat')]",[],"IsStandingIn(b, a)","IsIn(c, a)","(IsStandingIn(b, a) & (forall c (forall a (forall b (IsStandingIn(b, a) -> IsIn(c, a)))))) -> (IsIn(c, a))","(exists a (exists b (IsStandingIn(b, a))) & (forall e (forall f (forall d (IsStandingIn(d,e) -> IsIn(f,e)))))) -> (exists c (exists a (IsIn(c, a))))",Valid
135,1,,An Asian woman dressed in a colorful outfit laughing. It follows that a woman is wearing colorful clothing.," ""An Asian woman is dressed in a colorful outfit and is laughing."""," ""A woman is wearing colorful clothing.""","IsAsian(a),  IsDressedIn(a, b),  IsLaughing(a)","IsWearing(c, d)","[('IsWearing(c, d)', 'IsAsian(a)'), ('  IsDressedIn(a, b)', 'IsWearing(c, d)'), ('IsWearing(c, d)', '  IsDressedIn(a, b)'), ('IsWearing(c, d)', '  IsLaughing(a)')]",[],"[(' Asian woman', ' A woman'), (' colorful clothing', ' Asian woman'), (' colorful outfit', ' A woman'), (' colorful outfit', ' colorful clothing')]","IsAsian(a) and IsDressedIn(a, b) and IsLaughing(a)","IsWearing(c, d)","(exists b (forall a (exists a (IsAsian(a) and IsDressedIn(a, b) and IsLaughing(a)))) & (forall c (forall a (forall d (IsWearing(c, d) -> IsAsian(a))))) & (forall c (forall a (forall d (forall b (  IsDressedIn(a, b) -> IsWearing(c, d)))))) & (forall c (forall a (forall d (forall b (IsWearing(c, d) ->   IsDressedIn(a, b)))))) & (forall c (forall a (forall d (IsWearing(c, d) ->   IsLaughing(a)))))) -> (forall d (exists d (forall c (IsWearing(c, d)))))","(exists a (exists b (IsAsian(a) and IsDressedIn(a, b) and IsLaughing(a))) & (forall e (forall g (forall f (IsWearing(e,f) -> IsAsian(g))))) & (forall j (forall i (forall k (forall h (  IsDressedIn(h,i) -> IsWearing(j,k)))))) & (forall l (forall n (forall o (forall m (IsWearing(l,m) ->   IsDressedIn(n,o)))))) & (forall q (forall r (forall p (IsWearing(p,q) ->   IsLaughing(r)))))) -> (exists c (exists d (IsWearing(c, d))))",Valid
136,1,,"A woman in black reviews a message as she walks to work. Hence, the woman in black has a job."," ""A woman in black reviews a message while walking to work.""  "," ""The woman in black has a job.""","IsInBlack(a),  ReviewsMessage(a),  WalksToWork(a)","IsInBlack(d),  HasJob(d)","[('  HasJob(d)', 'IsInBlack(a)'), ('  ReviewsMessage(a)', '  HasJob(d)'), ('  HasJob(d)', '  ReviewsMessage(a)'), ('  WalksToWork(a)', 'IsInBlack(d)'), ('  WalksToWork(a)', '  HasJob(d)'), ('  HasJob(d)', '  WalksToWork(a)')]",[],"[(' The woman in black', ' A woman in black'), (' The woman in black', ' a message'), (' work', ' a job')]",IsInBlack(a) and ReviewsMessage(a) and WalksToWork(a),IsInBlack(d) and HasJob(d),(forall a (IsInBlack(a) and ReviewsMessage(a) and WalksToWork(a)) & (forall a (forall d (  HasJob(d) -> IsInBlack(a)))) & (forall a (forall d (  ReviewsMessage(a) ->   HasJob(d)))) & (forall a (forall d (  HasJob(d) ->   ReviewsMessage(a)))) & (forall a (forall d (  WalksToWork(a) -> IsInBlack(d)))) & (forall a (forall d (  WalksToWork(a) ->   HasJob(d)))) & (forall a (forall d (  HasJob(d) ->   WalksToWork(a))))) -> (exists d (IsInBlack(d) and HasJob(d))),(exists a (IsInBlack(a) and ReviewsMessage(a) and WalksToWork(a)) & (forall g (forall f (  HasJob(f) -> IsInBlack(g)))) & (forall i (forall h (  ReviewsMessage(h) ->   HasJob(i)))) & (forall k (forall j (  HasJob(j) ->   ReviewsMessage(k)))) & (forall l (forall m (  WalksToWork(l) -> IsInBlack(m)))) & (forall o (forall n (  WalksToWork(n) ->   HasJob(o)))) & (forall q (forall p (  HasJob(p) ->   WalksToWork(q))))) -> (exists d (IsInBlack(d) and HasJob(d))),Valid
137,1,,"A shirtless man rock climbs. As a consequence, a man is outside."," ""A shirtless man is rock climbing.""  "," ""A man is outside.""","IsShirtless(a),  IsRockClimbing(a)",IsOutside(b),[],[],[],IsShirtless(a) and IsRockClimbing(a),IsOutside(b),(IsShirtless(a) and IsRockClimbing(a)) -> (IsOutside(b)),(exists a (IsShirtless(a) and IsRockClimbing(a))) -> (exists b (IsOutside(b))),LF
138,1,,"A man wearing a kilt has thrown a large pole. Therefore, a man is wearing a skirt."," ""A man wearing a kilt has thrown a large pole.""  "," ""A man is wearing a skirt.""","IsWearingKilt(a),  HasThrownLargePole(a)",IsWearingSkirt(c),"[('IsWearingKilt(a)', 'IsWearingSkirt(c)'), ('IsWearingSkirt(c)', '  HasThrownLargePole(a)')]",[],[],IsWearingKilt(a) and HasThrownLargePole(a),IsWearingSkirt(c),(IsWearingKilt(a) and HasThrownLargePole(a) & (forall c (forall a (IsWearingKilt(a) -> IsWearingSkirt(c)))) & (forall c (forall a (IsWearingSkirt(c) ->   HasThrownLargePole(a))))) -> (IsWearingSkirt(c)),(exists a (IsWearingKilt(a) and HasThrownLargePole(a)) & (forall e (forall f (IsWearingKilt(e) -> IsWearingSkirt(f)))) & (forall g (forall h (IsWearingSkirt(g) ->   HasThrownLargePole(h))))) -> (exists c (IsWearingSkirt(c))),Valid
139,1,,"A man in a blue t-shirt is taking a picture while a woman with an umbrella walks behind him. Consequently, a man is taking a picture outdoors while a woman walks behind him."," ""A man in a blue t-shirt is taking a picture while a woman with an umbrella walks behind him."""," ""A man is taking a picture outdoors while a woman walks behind him.""","IsInBlueTShirt(c),  IsTakingPicture(c),  HasPicture(a),  HasUmbrella(d),  WalksBehind(d, b)","IsTakingPicture(e),  HasPicture(a),  WalksBehind(f, b),  IsOutdoors(e)","[('IsTakingPicture(e)', 'IsInBlueTShirt(c)'), ('IsInBlueTShirt(c)', '  HasPicture(a)'), ('  WalksBehind(f, b)', 'IsInBlueTShirt(c)'), ('  IsOutdoors(e)', 'IsInBlueTShirt(c)'), ('  IsTakingPicture(c)', '  HasPicture(a)'), ('  IsTakingPicture(c)', '  WalksBehind(f, b)'), ('  IsTakingPicture(c)', '  IsOutdoors(e)'), ('  IsOutdoors(e)', '  IsTakingPicture(c)'), ('IsTakingPicture(e)', '  HasPicture(a)'), ('  WalksBehind(f, b)', '  HasPicture(a)'), ('  IsOutdoors(e)', '  HasPicture(a)'), ('  HasUmbrella(d)', 'IsTakingPicture(e)'), ('IsTakingPicture(e)', '  HasUmbrella(d)'), ('  HasUmbrella(d)', '  HasPicture(a)'), ('  HasUmbrella(d)', '  WalksBehind(f, b)'), ('  WalksBehind(f, b)', '  HasUmbrella(d)'), ('  HasUmbrella(d)', '  IsOutdoors(e)'), ('  IsOutdoors(e)', '  HasUmbrella(d)'), ('  WalksBehind(d, b)', 'IsTakingPicture(e)'), ('IsTakingPicture(e)', '  WalksBehind(d, b)'), ('  WalksBehind(d, b)', '  HasPicture(a)'), ('  WalksBehind(d, b)', '  IsOutdoors(e)'), ('  IsOutdoors(e)', '  WalksBehind(d, b)')]","[(' a picture', ' a picture'), (' him', ' him')]","[(' A man in a blue t-shirt', ' a picture'), (' him', ' a picture'), (' a woman with an umbrella', ' a picture'), (' him', ' A man'), (' him', ' a picture')]","IsInBlueTShirt(c) and IsTakingPicture(c) and HasPicture(a) and HasUmbrella(d) and WalksBehind(d, b)","IsTakingPicture(e) and HasPicture(a) and WalksBehind(f, b) and IsOutdoors(e)","(exists d (exists b (exists c (IsInBlueTShirt(c) and IsTakingPicture(c) and HasPicture(a) and HasUmbrella(d) and WalksBehind(d, b)))) & (forall e (forall c (IsTakingPicture(e) -> IsInBlueTShirt(c)))) & (forall c (forall a (IsInBlueTShirt(c) ->   HasPicture(a)))) & (forall f (forall c (forall b (  WalksBehind(f, b) -> IsInBlueTShirt(c))))) & (forall e (forall c (  IsOutdoors(e) -> IsInBlueTShirt(c)))) & (forall c (forall a (  IsTakingPicture(c) ->   HasPicture(a)))) & (forall f (forall c (forall b (  IsTakingPicture(c) ->   WalksBehind(f, b))))) & (forall e (forall c (  IsTakingPicture(c) ->   IsOutdoors(e)))) & (forall e (forall c (  IsOutdoors(e) ->   IsTakingPicture(c)))) & (forall e (forall a (IsTakingPicture(e) ->   HasPicture(a)))) & (forall f (forall a (forall b (  WalksBehind(f, b) ->   HasPicture(a))))) & (forall e (forall a (  IsOutdoors(e) ->   HasPicture(a)))) & (forall e (forall d (  HasUmbrella(d) -> IsTakingPicture(e)))) & (forall e (forall d (IsTakingPicture(e) ->   HasUmbrella(d)))) & (forall a (forall d (  HasUmbrella(d) ->   HasPicture(a)))) & (forall f (forall d (forall b (  HasUmbrella(d) ->   WalksBehind(f, b))))) & (forall f (forall d (forall b (  WalksBehind(f, b) ->   HasUmbrella(d))))) & (forall e (forall d (  HasUmbrella(d) ->   IsOutdoors(e)))) & (forall e (forall d (  IsOutdoors(e) ->   HasUmbrella(d)))) & (forall e (forall d (forall b (  WalksBehind(d, b) -> IsTakingPicture(e))))) & (forall e (forall d (forall b (IsTakingPicture(e) ->   WalksBehind(d, b))))) & (forall a (forall d (forall b (  WalksBehind(d, b) ->   HasPicture(a))))) & (forall e (forall d (forall b (  WalksBehind(d, b) ->   IsOutdoors(e))))) & (forall e (forall d (forall b (  IsOutdoors(e) ->   WalksBehind(d, b)))))) -> (forall e (exists b (forall a (IsTakingPicture(e) and HasPicture(a) and WalksBehind(f, b) and IsOutdoors(e)))))","(exists c (exists a (exists d (exists b (IsInBlueTShirt(c) and IsTakingPicture(c) and HasPicture(a) and HasUmbrella(d) and WalksBehind(d, b))))) & (forall g (forall h (IsTakingPicture(g) -> IsInBlueTShirt(h)))) & (forall i (forall j (IsInBlueTShirt(i) ->   HasPicture(j)))) & (forall l (forall m (forall k (  WalksBehind(k,l) -> IsInBlueTShirt(m))))) & (forall o (forall n (  IsOutdoors(n) -> IsInBlueTShirt(o)))) & (forall q (forall p (  IsTakingPicture(p) ->   HasPicture(q)))) & (forall s (forall r (forall t (  IsTakingPicture(r) ->   WalksBehind(s,t))))) & (forall u (forall v (  IsTakingPicture(u) ->   IsOutdoors(v)))) & (forall w (forall x (  IsOutdoors(w) ->   IsTakingPicture(x)))) & (forall z (forall y (IsTakingPicture(y) ->   HasPicture(z)))) & (  WalksBehind({,|) ->   HasPicture(})) & (  IsOutdoors(~) ->   HasPicture()) & (  HasUmbrella() -> IsTakingPicture()) & (IsTakingPicture() ->   HasUmbrella()) & (  HasUmbrella() ->   HasPicture()) & (  HasUmbrella() ->   WalksBehind(,)) & (  WalksBehind(,) ->   HasUmbrella()) & (  HasUmbrella() ->   IsOutdoors()) & (  IsOutdoors() ->   HasUmbrella()) & (  WalksBehind(,) -> IsTakingPicture()) & (IsTakingPicture() ->   WalksBehind(,)) & (  WalksBehind(,) ->   HasPicture()) & (  WalksBehind(,) ->   IsOutdoors()) & (  IsOutdoors() ->   WalksBehind(,))) -> (exists e (exists f (exists a (exists b (IsTakingPicture(e) and HasPicture(a) and WalksBehind(f, b) and IsOutdoors(e))))))",
140,1,,"A child and a parent or older sibling going for a hike. Consequently, two people are going for a hike."," ""A child and a parent or older sibling are going for a hike.""  "," ""Two people are going for a hike.""","IsGoingForHike(b),  IsGoingForHike(c)",IsGoingForHike(d),[],"[(' a hike', ' a hike')]",[],IsGoingForHike(b) and IsGoingForHike(c),IsGoingForHike(d),(IsGoingForHike(b) and IsGoingForHike(c)) -> (IsGoingForHike(d)),(exists c (exists b (IsGoingForHike(b) and IsGoingForHike(c)))) -> (exists d (IsGoingForHike(d))),Valid
141,1,,"Two kids in black trunks bouncing on a wet trampoline. Consequently, children play on trampolines outdoors."," ""Two kids in black trunks are bouncing on a wet trampoline.""  "," ""Children play on trampolines outdoors.""","IsInBlackTrunks(a),  IsBouncing(a),  IsWet(c)","IsPlaying(d),  IsOnTrampolines(d),  IsOutdoors(f)","[('IsPlaying(d)', 'IsInBlackTrunks(a)'), ('  IsOnTrampolines(d)', 'IsInBlackTrunks(a)'), ('  IsOutdoors(f)', 'IsInBlackTrunks(a)'), ('  IsBouncing(a)', 'IsPlaying(d)'), ('IsPlaying(d)', '  IsBouncing(a)'), ('  IsOnTrampolines(d)', '  IsBouncing(a)'), ('  IsOutdoors(f)', '  IsBouncing(a)'), ('IsPlaying(d)', '  IsWet(c)'), ('  IsOnTrampolines(d)', '  IsWet(c)'), ('  IsOutdoors(f)', '  IsWet(c)')]",[],"[(' Children', ' Two kids'), (' wet trampoline', ' trampolines')]",IsInBlackTrunks(a) and IsBouncing(a) and IsWet(c),IsPlaying(d) and IsOnTrampolines(d) and IsOutdoors(f),(forall a (IsInBlackTrunks(a) and IsBouncing(a) and IsWet(c)) & (forall a (forall d (IsPlaying(d) -> IsInBlackTrunks(a)))) & (forall a (forall d (  IsOnTrampolines(d) -> IsInBlackTrunks(a)))) & (forall f (forall a (  IsOutdoors(f) -> IsInBlackTrunks(a)))) & (forall a (forall d (  IsBouncing(a) -> IsPlaying(d)))) & (forall a (forall d (IsPlaying(d) ->   IsBouncing(a)))) & (forall a (forall d (  IsOnTrampolines(d) ->   IsBouncing(a)))) & (forall f (forall a (  IsOutdoors(f) ->   IsBouncing(a)))) & (forall c (forall d (IsPlaying(d) ->   IsWet(c)))) & (forall c (forall d (  IsOnTrampolines(d) ->   IsWet(c)))) & (forall f (forall c (  IsOutdoors(f) ->   IsWet(c))))) -> (exists d (IsPlaying(d) and IsOnTrampolines(d) and IsOutdoors(f))),(exists c (exists a (IsInBlackTrunks(a) and IsBouncing(a) and IsWet(c))) & (forall g (forall h (IsPlaying(g) -> IsInBlackTrunks(h)))) & (forall i (forall j (  IsOnTrampolines(i) -> IsInBlackTrunks(j)))) & (forall l (forall k (  IsOutdoors(k) -> IsInBlackTrunks(l)))) & (forall n (forall m (  IsBouncing(m) -> IsPlaying(n)))) & (forall o (forall p (IsPlaying(o) ->   IsBouncing(p)))) & (forall q (forall r (  IsOnTrampolines(q) ->   IsBouncing(r)))) & (forall s (forall t (  IsOutdoors(s) ->   IsBouncing(t)))) & (forall u (forall v (IsPlaying(u) ->   IsWet(v)))) & (forall w (forall x (  IsOnTrampolines(w) ->   IsWet(x)))) & (forall z (forall y (  IsOutdoors(y) ->   IsWet(z))))) -> (exists f (exists d (IsPlaying(d) and IsOnTrampolines(d) and IsOutdoors(f)))),LF
142,1,,"2 people with backpacks are at a table with a woman with a beige blazer sitting behind it. Thus, 2 people are at a table."," ""Two people with backpacks are at a table with a woman in a beige blazer."""," ""Two people are at a table.""","HasBackpack(a),  AreAtTable(a),  IsWithWoman(a, d),  IsInBeigeBlazer(d)",AreAtTable(a),"[('AreAtTable(a)', 'HasBackpack(a)'), ('AreAtTable(a)', '  IsWithWoman(a, d)'), ('AreAtTable(a)', '  IsInBeigeBlazer(d)')]","[(' Two people', ' Two people'), (' table', ' table')]","[(' table', ' Two people'), (' table', ' Two people')]","HasBackpack(a) and AreAtTable(a) and IsWithWoman(a, d) and IsInBeigeBlazer(d)",AreAtTable(a),"(HasBackpack(a) and AreAtTable(a) and IsWithWoman(a, d) and IsInBeigeBlazer(d) & (forall a (AreAtTable(a) -> HasBackpack(a))) & (forall a (forall d (AreAtTable(a) ->   IsWithWoman(a, d)))) & (forall a (forall d (AreAtTable(a) ->   IsInBeigeBlazer(d))))) -> (AreAtTable(a))","(exists a (exists d (HasBackpack(a) and AreAtTable(a) and IsWithWoman(a, d) and IsInBeigeBlazer(d))) & (forall f (AreAtTable(f) -> HasBackpack(f))) & (forall g (forall h (AreAtTable(g) ->   IsWithWoman(g,h)))) & (forall i (forall j (AreAtTable(i) ->   IsInBeigeBlazer(j))))) -> (exists a (AreAtTable(a)))",Valid
143,1,,"A group stands and watches two men, apparently dressed in some sort of costume, wrestle on the ground. It follows that there are people wrestling.", Two men dressed in costume are wrestling on the ground.  , There are people wrestling.,"IsDressedInCostume(a),  IsWrestlingOnGround(a)",IsWrestling(d),"[('IsWrestling(d)', 'IsDressedInCostume(a)'), ('  IsWrestlingOnGround(a)', 'IsWrestling(d)'), ('IsWrestling(d)', '  IsWrestlingOnGround(a)')]",[],[],IsDressedInCostume(a) and IsWrestlingOnGround(a),IsWrestling(d),(IsDressedInCostume(a) and IsWrestlingOnGround(a) & (forall a (forall d (IsWrestling(d) -> IsDressedInCostume(a)))) & (forall a (forall d (  IsWrestlingOnGround(a) -> IsWrestling(d)))) & (forall a (forall d (IsWrestling(d) ->   IsWrestlingOnGround(a))))) -> (IsWrestling(d)),(exists a (IsDressedInCostume(a) and IsWrestlingOnGround(a)) & (forall e (forall f (IsWrestling(e) -> IsDressedInCostume(f)))) & (forall g (forall h (  IsWrestlingOnGround(g) -> IsWrestling(h)))) & (forall i (forall j (IsWrestling(i) ->   IsWrestlingOnGround(j))))) -> (exists d (IsWrestling(d))),Valid
144,1,,"two girls looking out the window at ""Hair at Hart."" Hence, two people look out a window."," ""Two girls are looking out the window at 'Hair at Hart.'"""," ""Two people look out a window.""","IsLookingOutOf(a, b),  IsLookingAt(a, c)","IsLookingOutOf(d, e)","[('  IsLookingAt(a, c)', 'IsLookingOutOf(d, e)'), ('IsLookingOutOf(d, e)', '  IsLookingAt(a, c)')]",[],"[(' the window', ' Two people'), (' the window', ' window')]","IsLookingOutOf(a, b) and IsLookingAt(a, c)","IsLookingOutOf(d, e)","(exists b (IsLookingOutOf(a, b) and IsLookingAt(a, c)) & (forall e (forall c (forall a (forall d (  IsLookingAt(a, c) -> IsLookingOutOf(d, e)))))) & (forall e (forall c (forall a (forall d (IsLookingOutOf(d, e) ->   IsLookingAt(a, c))))))) -> (forall e (forall d (IsLookingOutOf(d, e))))","(exists c (exists a (exists b (IsLookingOutOf(a, b) and IsLookingAt(a, c)))) & (forall g (forall f (forall i (forall h (  IsLookingAt(f,g) -> IsLookingOutOf(h,i)))))) & (forall l (forall m (forall k (forall j (IsLookingOutOf(j,k) ->   IsLookingAt(l,m))))))) -> (exists e (exists d (IsLookingOutOf(d, e))))",Valid
145,1,,"A man visiting a friend in the hospital. Therefore, a man in a hospital receives a visiting friend."," ""A man is visiting a friend in the hospital."""," ""A man in the hospital receives a visiting friend.""","IsVisiting(a, b),  IsIn(c, b)","IsInHospital(d),  Receives(d, e)","[('IsInHospital(d)', 'IsVisiting(a, b)')]",[],"[(' a friend', ' visiting friend')]","IsVisiting(a, b) and IsIn(c, b)","IsInHospital(d) and Receives(d, e)","(exists b (IsVisiting(a, b) and IsIn(c, b)) & (forall a (forall d (forall b (IsInHospital(d) -> IsVisiting(a, b)))))) -> (forall e (IsInHospital(d) and Receives(d, e)))","(exists c (exists a (exists b (IsVisiting(a, b) and IsIn(c, b)))) & (forall g (forall f (forall h (IsInHospital(f) -> IsVisiting(g,h)))))) -> (exists e (exists d (IsInHospital(d) and Receives(d, e))))",LF
146,1,,"A schoolgirl is jumping over a low hurdle. Consequently, a girl is jumping over a hurdle."," ""A schoolgirl is jumping over a low hurdle."""," ""A girl is jumping over a hurdle.""","IsJumpingOver(a, b)","IsJumpingOver(c, d)",[],[],"[(' A schoolgirl', ' A girl'), (' a low hurdle', ' a hurdle')]","IsJumpingOver(a, b)","IsJumpingOver(c, d)","(exists b (exists a (IsJumpingOver(a, b)))) -> (forall d (forall c (IsJumpingOver(c, d))))","(exists a (exists b (IsJumpingOver(a, b)))) -> (exists c (exists d (IsJumpingOver(c, d))))",Valid
147,1,,"Young Asian girl is sitting on the ground in rubble. Hence, the young Asian girl is outside in the rubble."," ""The young Asian girl is sitting on the ground in rubble."""," ""The young Asian girl is outside in the rubble.""","IsYoung(a),  IsAsian(a),  IsSittingOnGround(a),  IsInRubble(a)","IsYoung(a),  IsAsian(a),  IsOutside(a),  IsInRubble(a)","[('  IsOutside(a)', 'IsYoung(a)'), ('  IsInRubble(a)', 'IsYoung(a)'), ('  IsOutside(a)', '  IsAsian(a)'), ('  IsInRubble(a)', '  IsAsian(a)'), ('  IsSittingOnGround(a)', '  IsAsian(a)'), ('  IsSittingOnGround(a)', '  IsOutside(a)'), ('  IsOutside(a)', '  IsSittingOnGround(a)'), ('  IsInRubble(a)', '  IsSittingOnGround(a)'), ('  IsInRubble(a)', 'IsYoung(a)'), ('IsYoung(a)', '  IsInRubble(a)'), ('  IsInRubble(a)', '  IsAsian(a)'), ('  IsInRubble(a)', '  IsOutside(a)'), ('  IsOutside(a)', '  IsInRubble(a)')]","[(' The young Asian girl', ' The young Asian girl'), (' rubble', ' rubble')]",[],IsYoung(a) and IsAsian(a) and IsSittingOnGround(a) and IsInRubble(a),IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a),(IsYoung(a) and IsAsian(a) and IsSittingOnGround(a) and IsInRubble(a) & (forall a (  IsOutside(a) -> IsYoung(a))) & (forall a (  IsInRubble(a) -> IsYoung(a))) & (forall a (  IsOutside(a) ->   IsAsian(a))) & (forall a (  IsInRubble(a) ->   IsAsian(a))) & (forall a (  IsSittingOnGround(a) ->   IsAsian(a))) & (forall a (  IsSittingOnGround(a) ->   IsOutside(a))) & (forall a (  IsOutside(a) ->   IsSittingOnGround(a))) & (forall a (  IsInRubble(a) ->   IsSittingOnGround(a))) & (forall a (  IsInRubble(a) -> IsYoung(a))) & (forall a (IsYoung(a) ->   IsInRubble(a))) & (forall a (  IsInRubble(a) ->   IsAsian(a))) & (forall a (  IsInRubble(a) ->   IsOutside(a))) & (forall a (  IsOutside(a) ->   IsInRubble(a)))) -> (IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a)),(exists a (IsYoung(a) and IsAsian(a) and IsSittingOnGround(a) and IsInRubble(a)) & (forall d (  IsOutside(d) -> IsYoung(d))) & (forall e (  IsInRubble(e) -> IsYoung(e))) & (forall f (  IsOutside(f) ->   IsAsian(f))) & (forall g (  IsInRubble(g) ->   IsAsian(g))) & (forall h (  IsSittingOnGround(h) ->   IsAsian(h))) & (forall i (  IsSittingOnGround(i) ->   IsOutside(i))) & (forall j (  IsOutside(j) ->   IsSittingOnGround(j))) & (forall k (  IsInRubble(k) ->   IsSittingOnGround(k))) & (forall l (  IsInRubble(l) -> IsYoung(l))) & (forall m (IsYoung(m) ->   IsInRubble(m))) & (forall n (  IsInRubble(n) ->   IsAsian(n))) & (forall o (  IsInRubble(o) ->   IsOutside(o))) & (forall p (  IsOutside(p) ->   IsInRubble(p)))) -> (exists a (IsYoung(a) and IsAsian(a) and IsOutside(a) and IsInRubble(a))),Valid
148,1,,"A group of women sing together while wearing matching black dresses. Thus, there are women singing."," ""A group of women are wearing matching black dresses and singing together.""  "," ""There are women singing.""","Wearing(a, b),  SingingTogether(a)",Singing(c),"[('Singing(c)', 'Wearing(a, b)'), ('  SingingTogether(a)', 'Singing(c)'), ('Singing(c)', '  SingingTogether(a)')]",[],"[(' Women', ' A group of women'), (' matching black dresses', ' Women')]","Wearing(a, b) and SingingTogether(a)",Singing(c),"(exists b (forall a (Wearing(a, b) and SingingTogether(a))) & (forall c (forall a (forall b (Singing(c) -> Wearing(a, b))))) & (forall c (forall a (  SingingTogether(a) -> Singing(c)))) & (forall c (forall a (Singing(c) ->   SingingTogether(a))))) -> (forall c (exists c (Singing(c))))","(exists a (exists b (Wearing(a, b) and SingingTogether(a))) & (forall e (forall f (forall d (Singing(d) -> Wearing(e,f))))) & (forall g (forall h (  SingingTogether(g) -> Singing(h)))) & (forall i (forall j (Singing(i) ->   SingingTogether(j))))) -> (exists c (Singing(c)))",Valid
149,1,,Two boys in running clothes stretching. This implies that the boys are stretching.," ""Two boys in running clothes are stretching.""  "," ""The boys are stretching.""","IsInRunningClothes(a),  IsStretching(a)",IsStretching(c),"[('IsStretching(c)', 'IsInRunningClothes(a)')]",[],"[(' Two boys', ' The boys')]",IsInRunningClothes(a) and IsStretching(a),IsStretching(c),(exists a (IsInRunningClothes(a) and IsStretching(a)) & (forall c (forall a (IsStretching(c) -> IsInRunningClothes(a))))) -> (forall c (IsStretching(c))),(exists a (IsInRunningClothes(a) and IsStretching(a)) & (forall e (forall d (IsStretching(d) -> IsInRunningClothes(e))))) -> (exists c (IsStretching(c))),Valid
150,1,,A group of young men in a gym take turns scoring in basketball. This implies that guys are indoors.," ""A group of young men take turns scoring in basketball in a gym.""  "," ""Guys are indoors.""","InGroupOfYoungMen(x),  TakesTurnsScoringInBasketball(x),  InGym(x)",IsIndoors(d),"[('InGroupOfYoungMen(x)', 'IsIndoors(d)'), ('IsIndoors(d)', 'InGroupOfYoungMen(x)'), ('  TakesTurnsScoringInBasketball(x)', 'IsIndoors(d)'), ('IsIndoors(d)', '  TakesTurnsScoringInBasketball(x)'), ('  InGym(x)', 'IsIndoors(d)'), ('IsIndoors(d)', '  InGym(x)')]",[],"[(' Guys', ' A group of young men')]",InGroupOfYoungMen(a) and TakesTurnsScoringInBasketball(a) and InGym(a),IsIndoors(d),(forall a (InGroupOfYoungMen(a) and TakesTurnsScoringInBasketball(a) and InGym(a)) & (forall d (forall x (InGroupOfYoungMen(x) -> IsIndoors(d)))) & (forall d (forall x (IsIndoors(d) -> InGroupOfYoungMen(x)))) & (forall d (forall x (  TakesTurnsScoringInBasketball(x) -> IsIndoors(d)))) & (forall d (forall x (IsIndoors(d) ->   TakesTurnsScoringInBasketball(x)))) & (forall d (forall x (  InGym(x) -> IsIndoors(d)))) & (forall d (forall x (IsIndoors(d) ->   InGym(x))))) -> (exists d (IsIndoors(d))),(exists a (InGroupOfYoungMen(a) and TakesTurnsScoringInBasketball(a) and InGym(a)) & (forall g (forall f (InGroupOfYoungMen(f) -> IsIndoors(g)))) & (forall i (forall h (IsIndoors(h) -> InGroupOfYoungMen(i)))) & (forall k (forall j (  TakesTurnsScoringInBasketball(j) -> IsIndoors(k)))) & (forall l (forall m (IsIndoors(l) ->   TakesTurnsScoringInBasketball(m)))) & (forall o (forall n (  InGym(n) -> IsIndoors(o)))) & (forall q (forall p (IsIndoors(p) ->   InGym(q))))) -> (exists d (IsIndoors(d))),Valid
151,1,,"An Eastern vendor sits by his stall with a rooster nearby. Consequently, a rooster near a vendor."," ""An Eastern vendor sits by his stall with a rooster nearby.""  "," ""There is a rooster near a vendor.""","IsEasternVendor(b),  SitsBy(b, c),  IsNearby(a, c)","IsNear(a, d)","[('IsNear(a, d)', 'IsEasternVendor(b)'), ('  IsNearby(a, c)', 'IsNear(a, d)')]","[(' rooster', ' Rooster')]",[],"IsEasternVendor(b) and SitsBy(b, c) and IsNearby(a, c)","IsNear(a, d)","(IsEasternVendor(b) and SitsBy(b, c) and IsNearby(a, c) & (forall a (forall d (forall b (IsNear(a, d) -> IsEasternVendor(b))))) & (forall c (forall a (forall d (  IsNearby(a, c) -> IsNear(a, d)))))) -> (IsNear(a, d))","(exists c (exists a (exists b (IsEasternVendor(b) and SitsBy(b, c) and IsNearby(a, c)))) & (forall g (forall f (forall h (IsNear(f,g) -> IsEasternVendor(h))))) & (forall i (forall k (forall j (  IsNearby(i,j) -> IsNear(i,k)))))) -> (exists a (exists d (IsNear(a, d))))",Valid
152,1,,"A bird is perched on a tree branch. Thus, a bird is perching in a tree."," ""A bird is perched on a tree branch.""  "," ""A bird is perching in a tree.""","IsPerchedOn(a, b)","IsPerchingIn(a, c)","[('IsPerchedOn(a, b)', 'IsPerchingIn(a, c)'), ('IsPerchingIn(a, c)', 'IsPerchedOn(a, b)')]","[(' A bird', ' A bird')]","[(' tree branch', ' a tree')]","IsPerchedOn(a, b)","IsPerchingIn(a, c)","(exists b (IsPerchedOn(a, b)) & (forall c (forall a (forall b (IsPerchedOn(a, b) -> IsPerchingIn(a, c))))) & (forall c (forall a (forall b (IsPerchingIn(a, c) -> IsPerchedOn(a, b)))))) -> (forall c (IsPerchingIn(a, c)))","(exists a (exists b (IsPerchedOn(a, b))) & (forall e (forall f (forall d (IsPerchedOn(d,e) -> IsPerchingIn(d,f))))) & (forall g (forall i (forall h (IsPerchingIn(g,h) -> IsPerchedOn(g,i)))))) -> (exists c (exists a (IsPerchingIn(a, c))))",Valid
153,1,,"A man in an overcoat putting on his gloves at a subway station. Therefore, a person is in the subway station."," ""A man in an overcoat is putting on his gloves at a subway station."""," ""A person is in the subway station.""","IsInOvercoat(a),  IsPuttingOnGloves(a),  IsAtSubwayStation(a)",IsInSubwayStation(d),"[('IsInSubwayStation(d)', 'IsInOvercoat(a)'), ('  IsPuttingOnGloves(a)', 'IsInSubwayStation(d)'), ('IsInSubwayStation(d)', '  IsPuttingOnGloves(a)'), ('  IsAtSubwayStation(a)', 'IsInSubwayStation(d)'), ('IsInSubwayStation(d)', '  IsAtSubwayStation(a)')]",[],"[(' subway station', ' a subway station')]",IsInOvercoat(a) and IsPuttingOnGloves(a) and IsAtSubwayStation(a),IsInSubwayStation(d),(IsInOvercoat(a) and IsPuttingOnGloves(a) and IsAtSubwayStation(a) & (forall a (forall d (IsInSubwayStation(d) -> IsInOvercoat(a)))) & (forall a (forall d (  IsPuttingOnGloves(a) -> IsInSubwayStation(d)))) & (forall a (forall d (IsInSubwayStation(d) ->   IsPuttingOnGloves(a)))) & (forall a (forall d (  IsAtSubwayStation(a) -> IsInSubwayStation(d)))) & (forall a (forall d (IsInSubwayStation(d) ->   IsAtSubwayStation(a))))) -> (IsInSubwayStation(d)),(exists a (IsInOvercoat(a) and IsPuttingOnGloves(a) and IsAtSubwayStation(a)) & (forall g (forall f (IsInSubwayStation(f) -> IsInOvercoat(g)))) & (forall i (forall h (  IsPuttingOnGloves(h) -> IsInSubwayStation(i)))) & (forall k (forall j (IsInSubwayStation(j) ->   IsPuttingOnGloves(k)))) & (forall l (forall m (  IsAtSubwayStation(l) -> IsInSubwayStation(m)))) & (forall o (forall n (IsInSubwayStation(n) ->   IsAtSubwayStation(o))))) -> (exists d (IsInSubwayStation(d))),Valid
154,1,,"Person with umbrella observes flooded streets with cars in the water. Consequently, a person is outside.", The streets are flooded with cars in the water.  , A person is outside due to flooded streets.,"IsFloodedWith(a, b),  IsInWater(b)","IsOutside(d),  AreFlooded(e)","[('IsOutside(d)', 'IsFloodedWith(a, b)'), ('IsOutside(d)', '  IsInWater(b)')]",[],"[(' flooded streets', ' The streets'), (' water', ' flooded streets')]","IsFloodedWith(a, b) and IsInWater(b)",AreFlooded(e) and IsOutside(d),"(forall a (IsFloodedWith(a, b) and IsInWater(b)) & (forall a (forall d (forall b (IsOutside(d) -> IsFloodedWith(a, b))))) & (forall d (forall b (IsOutside(d) ->   IsInWater(b))))) -> (exists e (AreFlooded(e) and IsOutside(d)))","(exists a (exists b (IsFloodedWith(a, b) and IsInWater(b))) & (forall g (forall f (forall h (IsOutside(f) -> IsFloodedWith(g,h))))) & (forall i (forall j (IsOutside(i) ->   IsInWater(j))))) -> (exists e (exists d (AreFlooded(e) and IsOutside(d))))",LF
155,1,,A group of people are camping out on some rocks. This implies that people are outdoors.," ""A group of people are camping on some rocks.""  "," ""People are outdoors.""","IsCampingOn(a, b)",IsOutdoors(c),"[('IsCampingOn(a, b)', 'IsOutdoors(c)'), ('IsOutdoors(c)', 'IsCampingOn(a, b)')]",[],"[(' People', ' Group of people')]","IsCampingOn(a, b)",IsOutdoors(c),"(forall a (IsCampingOn(a, b)) & (forall c (forall a (forall b (IsCampingOn(a, b) -> IsOutdoors(c))))) & (forall c (forall a (forall b (IsOutdoors(c) -> IsCampingOn(a, b)))))) -> (exists c (IsOutdoors(c)))","(exists a (exists b (IsCampingOn(a, b))) & (forall e (forall f (forall d (IsCampingOn(d,e) -> IsOutdoors(f))))) & (forall g (forall i (forall h (IsOutdoors(g) -> IsCampingOn(h,i)))))) -> (exists c (IsOutdoors(c)))",Valid
156,1,,A choir made up of varying ages of people are performing. This implies that the choir is singing.," ""A choir made up of varying ages of people is performing."""," ""The choir is singing.""","IsMadeUpOf(a, b),  IsPerforming(a)",IsSinging(c),"[('IsSinging(c)', 'IsMadeUpOf(a, b)'), ('  IsPerforming(a)', 'IsSinging(c)'), ('IsSinging(c)', '  IsPerforming(a)')]",[],"[(' The choir', ' A choir'), (' The choir', ' varying ages of people')]","IsMadeUpOf(a, b) and IsPerforming(a)",IsSinging(c),"(forall b (forall a (IsMadeUpOf(a, b) and IsPerforming(a))) & (forall c (forall a (forall b (IsSinging(c) -> IsMadeUpOf(a, b))))) & (forall c (forall a (  IsPerforming(a) -> IsSinging(c)))) & (forall c (forall a (IsSinging(c) ->   IsPerforming(a))))) -> (exists c (IsSinging(c)))","(exists a (exists b (IsMadeUpOf(a, b) and IsPerforming(a))) & (forall e (forall f (forall d (IsSinging(d) -> IsMadeUpOf(e,f))))) & (forall g (forall h (  IsPerforming(g) -> IsSinging(h)))) & (forall i (forall j (IsSinging(i) ->   IsPerforming(j))))) -> (exists c (IsSinging(c)))",Valid
157,1,,A man scales a rock climbing wall. It follows that a man rock climbing., A man scales a rock climbing wall.  , A man is rock climbing.,"Scales(a, b)",IsRockClimbing(a),"[('Scales(a, b)', 'IsRockClimbing(a)'), ('IsRockClimbing(a)', 'Scales(a, b)')]","[(' A man', ' A man')]",[],"Scales(a, b)",IsRockClimbing(a),"(Scales(a, b) & (forall a (forall b (Scales(a, b) -> IsRockClimbing(a)))) & (forall a (forall b (IsRockClimbing(a) -> Scales(a, b))))) -> (IsRockClimbing(a))","(exists a (exists b (Scales(a, b))) & (forall c (forall d (Scales(c,d) -> IsRockClimbing(c)))) & (forall e (forall f (IsRockClimbing(e) -> Scales(e,f))))) -> (exists a (IsRockClimbing(a)))",Valid
158,1,,"A little white dog runs outside, their ears blown back in the wind. It follows that there is an animal outside."," ""A little white dog runs outside.""  "," ""There is an animal outside.""  ","IsLittle(a),  IsWhite(a),  RunsOutside(a)","IsAnimal(b),  IsOutside(b)","[('IsAnimal(b)', 'IsLittle(a)'), ('  IsOutside(b)', 'IsLittle(a)'), ('IsAnimal(b)', '  IsWhite(a)'), ('  RunsOutside(a)', 'IsAnimal(b)'), ('IsAnimal(b)', '  RunsOutside(a)'), ('  RunsOutside(a)', '  IsOutside(b)'), ('  IsOutside(b)', '  RunsOutside(a)')]",[],[],IsLittle(a) and IsWhite(a) and RunsOutside(a),IsAnimal(b) and IsOutside(b),(IsLittle(a) and IsWhite(a) and RunsOutside(a) & (forall a (forall b (IsAnimal(b) -> IsLittle(a)))) & (forall a (forall b (  IsOutside(b) -> IsLittle(a)))) & (forall a (forall b (IsAnimal(b) ->   IsWhite(a)))) & (forall a (forall b (  RunsOutside(a) -> IsAnimal(b)))) & (forall a (forall b (IsAnimal(b) ->   RunsOutside(a)))) & (forall a (forall b (  RunsOutside(a) ->   IsOutside(b)))) & (forall a (forall b (  IsOutside(b) ->   RunsOutside(a))))) -> (IsAnimal(b) and IsOutside(b)),(exists a (IsLittle(a) and IsWhite(a) and RunsOutside(a)) & (forall c (forall d (IsAnimal(c) -> IsLittle(d)))) & (forall e (forall f (  IsOutside(e) -> IsLittle(f)))) & (forall g (forall h (IsAnimal(g) ->   IsWhite(h)))) & (forall i (forall j (  RunsOutside(i) -> IsAnimal(j)))) & (forall l (forall k (IsAnimal(k) ->   RunsOutside(l)))) & (forall n (forall m (  RunsOutside(m) ->   IsOutside(n)))) & (forall o (forall p (  IsOutside(o) ->   RunsOutside(p))))) -> (exists b (IsAnimal(b) and IsOutside(b))),Valid
159,1,,"A bearded man sits near a white van. As a consequence, a man sitting outside near a van."," ""A bearded man sits near a white van.""  "," ""A man is sitting outside near a van.""","IsBearded(a),  SitsNear(a, b)","IsSittingOutside(c),  SitsNear(c, d)","[('IsSittingOutside(c)', 'IsBearded(a)'), ('  SitsNear(c, d)', 'IsBearded(a)'), ('  SitsNear(a, b)', 'IsSittingOutside(c)'), ('IsSittingOutside(c)', '  SitsNear(a, b)')]",[],"[(' a white van', ' a van')]","IsBearded(a) and SitsNear(a, b)","IsSittingOutside(c) and SitsNear(c, d)","(exists b (IsBearded(a) and SitsNear(a, b)) & (forall c (forall a (IsSittingOutside(c) -> IsBearded(a)))) & (forall c (forall a (forall d (  SitsNear(c, d) -> IsBearded(a))))) & (forall c (forall a (forall b (  SitsNear(a, b) -> IsSittingOutside(c))))) & (forall c (forall a (forall b (IsSittingOutside(c) ->   SitsNear(a, b)))))) -> (forall d (IsSittingOutside(c) and SitsNear(c, d)))","(exists a (exists b (IsBearded(a) and SitsNear(a, b))) & (forall e (forall f (IsSittingOutside(e) -> IsBearded(f)))) & (forall g (forall i (forall h (  SitsNear(g,h) -> IsBearded(i))))) & (forall l (forall k (forall j (  SitsNear(j,k) -> IsSittingOutside(l))))) & (forall n (forall o (forall m (IsSittingOutside(m) ->   SitsNear(n,o)))))) -> (exists c (exists d (IsSittingOutside(c) and SitsNear(c, d))))",Valid
160,1,,"Two children wearing hooded tops laughing with each other. Thus, children laugh."," ""Two children wearing hooded tops are laughing with each other.""  "," ""Children laugh.""","IsWearingHoodedTops(a),  IsLaughingWithEachOther(a)",IsLaughing(c),"[('IsWearingHoodedTops(a)', 'IsLaughing(c)'), ('IsLaughing(c)', 'IsWearingHoodedTops(a)'), ('  IsLaughingWithEachOther(a)', 'IsLaughing(c)'), ('IsLaughing(c)', '  IsLaughingWithEachOther(a)')]",[],"[(' Two children', ' Children')]",IsWearingHoodedTops(a) and IsLaughingWithEachOther(a),IsLaughing(c),(exists a (IsWearingHoodedTops(a) and IsLaughingWithEachOther(a)) & (forall c (forall a (IsWearingHoodedTops(a) -> IsLaughing(c)))) & (forall c (forall a (IsLaughing(c) -> IsWearingHoodedTops(a)))) & (forall c (forall a (  IsLaughingWithEachOther(a) -> IsLaughing(c)))) & (forall c (forall a (IsLaughing(c) ->   IsLaughingWithEachOther(a))))) -> (forall c (IsLaughing(c))),(exists a (IsWearingHoodedTops(a) and IsLaughingWithEachOther(a)) & (forall e (forall d (IsWearingHoodedTops(d) -> IsLaughing(e)))) & (forall g (forall f (IsLaughing(f) -> IsWearingHoodedTops(g)))) & (forall i (forall h (  IsLaughingWithEachOther(h) -> IsLaughing(i)))) & (forall k (forall j (IsLaughing(j) ->   IsLaughingWithEachOther(k))))) -> (exists c (IsLaughing(c))),Valid
161,1,,"A man in glasses in a basement. Thus, the basement has a man in it."," ""A man is in the basement and he wears glasses.""  "," ""The basement has a man in it.""","IsInBasement(a),  WearsGlasses(c)",IsInBasement(a),"[('IsInBasement(a)', '  WearsGlasses(c)')]","[(' A man', ' a man'), (' the basement', ' The basement')]","[(' a man', ' he')]",IsInBasement(a) and WearsGlasses(c),IsInBasement(a),(forall c (IsInBasement(a) and WearsGlasses(c)) & (forall c (forall a (IsInBasement(a) ->   WearsGlasses(c))))) -> (exists a (IsInBasement(a))),(exists c (exists a (IsInBasement(a) and WearsGlasses(c))) & (forall g (forall h (IsInBasement(g) ->   WearsGlasses(h))))) -> (exists a (IsInBasement(a))),Valid
162,1,,A man in a white shirt speaks into a microphone as other men gather behind him at a public event. This implies that a man in a white shirt is making a speech in front of a crowd., A man in a white shirt speaks into a microphone at a public event.  , A man in a white shirt is making a speech in front of a crowd.,"IsInWhiteShirt(a),  SpeaksIntoMicrophone(a),  IsAtPublicEvent(a)","IsInWhiteShirt(d),  IsMakingSpeech(d),  IsInFrontOfCrowd(d)","[('  IsMakingSpeech(d)', 'IsInWhiteShirt(a)'), ('  IsInFrontOfCrowd(d)', 'IsInWhiteShirt(a)'), ('  SpeaksIntoMicrophone(a)', 'IsInWhiteShirt(d)'), ('  SpeaksIntoMicrophone(a)', '  IsMakingSpeech(d)'), ('  IsMakingSpeech(d)', '  SpeaksIntoMicrophone(a)'), ('  SpeaksIntoMicrophone(a)', '  IsInFrontOfCrowd(d)'), ('  IsInFrontOfCrowd(d)', '  SpeaksIntoMicrophone(a)'), ('  IsAtPublicEvent(a)', 'IsInWhiteShirt(d)'), ('  IsAtPublicEvent(a)', '  IsMakingSpeech(d)'), ('  IsMakingSpeech(d)', '  IsAtPublicEvent(a)'), ('  IsAtPublicEvent(a)', '  IsInFrontOfCrowd(d)'), ('  IsInFrontOfCrowd(d)', '  IsAtPublicEvent(a)')]",[],"[(' a white shirt', ' A man in a white shirt'), (' microphone', ' a speech'), (' a white shirt', ' public event'), (' a crowd', ' public event')]",IsInWhiteShirt(a) and SpeaksIntoMicrophone(a) and IsAtPublicEvent(a),IsInWhiteShirt(d) and IsMakingSpeech(d) and IsInFrontOfCrowd(d),(IsInWhiteShirt(a) and SpeaksIntoMicrophone(a) and IsAtPublicEvent(a) & (forall a (forall d (  IsMakingSpeech(d) -> IsInWhiteShirt(a)))) & (forall a (forall d (  IsInFrontOfCrowd(d) -> IsInWhiteShirt(a)))) & (forall a (forall d (  SpeaksIntoMicrophone(a) -> IsInWhiteShirt(d)))) & (forall a (forall d (  SpeaksIntoMicrophone(a) ->   IsMakingSpeech(d)))) & (forall a (forall d (  IsMakingSpeech(d) ->   SpeaksIntoMicrophone(a)))) & (forall a (forall d (  SpeaksIntoMicrophone(a) ->   IsInFrontOfCrowd(d)))) & (forall a (forall d (  IsInFrontOfCrowd(d) ->   SpeaksIntoMicrophone(a)))) & (forall a (forall d (  IsAtPublicEvent(a) -> IsInWhiteShirt(d)))) & (forall a (forall d (  IsAtPublicEvent(a) ->   IsMakingSpeech(d)))) & (forall a (forall d (  IsMakingSpeech(d) ->   IsAtPublicEvent(a)))) & (forall a (forall d (  IsAtPublicEvent(a) ->   IsInFrontOfCrowd(d)))) & (forall a (forall d (  IsInFrontOfCrowd(d) ->   IsAtPublicEvent(a))))) -> (IsInWhiteShirt(d) and IsMakingSpeech(d) and IsInFrontOfCrowd(d)),(exists a (IsInWhiteShirt(a) and SpeaksIntoMicrophone(a) and IsAtPublicEvent(a)) & (forall i (forall h (  IsMakingSpeech(h) -> IsInWhiteShirt(i)))) & (forall k (forall j (  IsInFrontOfCrowd(j) -> IsInWhiteShirt(k)))) & (forall l (forall m (  SpeaksIntoMicrophone(l) -> IsInWhiteShirt(m)))) & (forall o (forall n (  SpeaksIntoMicrophone(n) ->   IsMakingSpeech(o)))) & (forall q (forall p (  IsMakingSpeech(p) ->   SpeaksIntoMicrophone(q)))) & (forall s (forall r (  SpeaksIntoMicrophone(r) ->   IsInFrontOfCrowd(s)))) & (forall u (forall t (  IsInFrontOfCrowd(t) ->   SpeaksIntoMicrophone(u)))) & (forall v (forall w (  IsAtPublicEvent(v) -> IsInWhiteShirt(w)))) & (forall y (forall x (  IsAtPublicEvent(x) ->   IsMakingSpeech(y)))) & (forall z (  IsMakingSpeech(z) ->   IsAtPublicEvent({))) & (  IsAtPublicEvent(|) ->   IsInFrontOfCrowd(})) & (  IsInFrontOfCrowd(~) ->   IsAtPublicEvent())) -> (exists d (IsInWhiteShirt(d) and IsMakingSpeech(d) and IsInFrontOfCrowd(d))),
163,1,,A brown and white dog is chained up near a red chair. It follows that the dog is chained to a chair.," ""A brown and white dog is chained up near a red chair."""," ""The dog is chained to a chair.""","IsBrownAndWhite(a),  IsChainedUp(a),  IsNear(a, b)","IsChainedTo(c, d)",[],[],"[(' A brown and white dog', ' The dog')]","IsBrownAndWhite(a) and IsChainedUp(a) and IsNear(a, b)","IsChainedTo(c, d)","(exists a (IsBrownAndWhite(a) and IsChainedUp(a) and IsNear(a, b))) -> (forall c (IsChainedTo(c, d)))","(exists a (exists b (IsBrownAndWhite(a) and IsChainedUp(a) and IsNear(a, b)))) -> (exists c (exists d (IsChainedTo(c, d))))",LF
164,1,,"This is when daddy taught her how to ride her scooter. Consequently, daddy taught her."," ""Daddy taught her how to ride her scooter.""  "," ""Daddy taught her.""  ","Taught(a, b),  RidesScooter(b, c)","Taught(a, b)","[('  RidesScooter(b, c)', 'Taught(a, b)'), ('Taught(a, b)', '  RidesScooter(b, c)')]","[(' Daddy', ' Daddy'), (' her', ' her')]",[],"Taught(a, b) and RidesScooter(b, c)","Taught(a, b)","(Taught(a, b) and RidesScooter(b, c) & (forall c (forall a (forall b (  RidesScooter(b, c) -> Taught(a, b))))) & (forall c (forall a (forall b (Taught(a, b) ->   RidesScooter(b, c)))))) -> (Taught(a, b))","(exists c (exists a (exists b (Taught(a, b) and RidesScooter(b, c)))) & (forall e (forall g (forall f (forall d (  RidesScooter(d,e) -> Taught(f,g)))))) & (forall j (forall i (forall k (forall h (Taught(h,i) ->   RidesScooter(j,k))))))) -> (exists a (exists b (Taught(a, b))))",Valid
165,1,,"A small girl with short brown hair is pushing a pink scooter over grass with brown leaves with threes in the background. Therefore, the girl is outside."," ""A small girl with short brown hair is pushing a pink scooter over grass with brown leaves and trees in the background.""  "," ""The girl is outside.""","IsSmall(a),  HasShortBrownHair(a),  IsPushing(a, b),  IsPink(b),  IsOverGrassWithBrownLeaves(b, c),  HasTrees(d),  IsInBackground(e)",IsOutside(f),"[('IsOutside(f)', 'IsSmall(a)'), ('IsOutside(f)', '  HasShortBrownHair(a)'), ('IsOutside(f)', '  IsPushing(a, b)'), ('IsOutside(f)', '  IsPink(b)'), ('  IsOverGrassWithBrownLeaves(b, c)', 'IsOutside(f)'), ('IsOutside(f)', '  IsOverGrassWithBrownLeaves(b, c)'), ('  HasTrees(d)', 'IsOutside(f)'), ('IsOutside(f)', '  HasTrees(d)'), ('IsOutside(f)', '  IsInBackground(e)')]",[],"[(' A small girl with short brown hair', ' The girl'), (' the background', ' The girl')]","IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, b) and IsPink(b) and IsOverGrassWithBrownLeaves(b, c) and HasTrees(d) and IsInBackground(e)",IsOutside(f),"(exists e (exists a (IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, b) and IsPink(b) and IsOverGrassWithBrownLeaves(b, c) and HasTrees(d) and IsInBackground(e))) & (forall f (forall a (IsOutside(f) -> IsSmall(a)))) & (forall f (forall a (IsOutside(f) ->   HasShortBrownHair(a)))) & (forall f (forall a (forall b (IsOutside(f) ->   IsPushing(a, b))))) & (forall f (forall b (IsOutside(f) ->   IsPink(b)))) & (forall f (forall c (forall b (  IsOverGrassWithBrownLeaves(b, c) -> IsOutside(f))))) & (forall f (forall c (forall b (IsOutside(f) ->   IsOverGrassWithBrownLeaves(b, c))))) & (forall f (forall d (  HasTrees(d) -> IsOutside(f)))) & (forall f (forall d (IsOutside(f) ->   HasTrees(d)))) & (forall e (forall f (IsOutside(f) ->   IsInBackground(e))))) -> (forall f (IsOutside(f)))","(exists e (exists c (exists d (exists b (exists a (IsSmall(a) and HasShortBrownHair(a) and IsPushing(a, b) and IsPink(b) and IsOverGrassWithBrownLeaves(b, c) and HasTrees(d) and IsInBackground(e)))))) & (forall g (forall h (IsOutside(g) -> IsSmall(h)))) & (forall i (forall j (IsOutside(i) ->   HasShortBrownHair(j)))) & (forall l (forall m (forall k (IsOutside(k) ->   IsPushing(l,m))))) & (forall o (forall n (IsOutside(n) ->   IsPink(o)))) & (forall q (forall r (forall p (  IsOverGrassWithBrownLeaves(p,q) -> IsOutside(r))))) & (forall s (forall u (forall t (IsOutside(s) ->   IsOverGrassWithBrownLeaves(t,u))))) & (forall v (forall w (  HasTrees(v) -> IsOutside(w)))) & (forall y (forall x (IsOutside(x) ->   HasTrees(y)))) & (forall z (IsOutside(z) ->   IsInBackground({)))) -> (exists f (IsOutside(f)))",
166,1,,"A man wearing a black cap is suspended in the air on a swing, as children are swinging on a swing set. Hence, a man in a black hat is swinging with some children.", A man wearing a black cap is suspended in the air on a swing.  , A man in a black hat is swinging with some children.,"IsWearingBlackCap(a),  IsSuspendedInAir(a),  IsOnSwing(a)","IsInBlackHat(d),  IsSwinging(d),  IsWithChildren(d)","[('  IsWithChildren(d)', 'IsWearingBlackCap(a)'), ('  IsWithChildren(d)', '  IsSuspendedInAir(a)'), ('  IsOnSwing(a)', 'IsInBlackHat(d)'), ('  IsSwinging(d)', '  IsOnSwing(a)'), ('  IsOnSwing(a)', '  IsWithChildren(d)'), ('  IsWithChildren(d)', '  IsOnSwing(a)')]",[],"[(' A man in a black hat', ' A man wearing a black cap'), (' some children', ' swing')]",IsWearingBlackCap(a) and IsSuspendedInAir(a) and IsOnSwing(a),IsInBlackHat(d) and IsSwinging(d) and IsWithChildren(d),(forall a (IsWearingBlackCap(a) and IsSuspendedInAir(a) and IsOnSwing(a)) & (forall a (forall d (  IsWithChildren(d) -> IsWearingBlackCap(a)))) & (forall a (forall d (  IsWithChildren(d) ->   IsSuspendedInAir(a)))) & (forall a (forall d (  IsOnSwing(a) -> IsInBlackHat(d)))) & (forall a (forall d (  IsSwinging(d) ->   IsOnSwing(a)))) & (forall a (forall d (  IsOnSwing(a) ->   IsWithChildren(d)))) & (forall a (forall d (  IsWithChildren(d) ->   IsOnSwing(a))))) -> (exists d (IsInBlackHat(d) and IsSwinging(d) and IsWithChildren(d))),(exists a (IsWearingBlackCap(a) and IsSuspendedInAir(a) and IsOnSwing(a)) & (forall g (forall f (  IsWithChildren(f) -> IsWearingBlackCap(g)))) & (forall i (forall h (  IsWithChildren(h) ->   IsSuspendedInAir(i)))) & (forall k (forall j (  IsOnSwing(j) -> IsInBlackHat(k)))) & (forall l (forall m (  IsSwinging(l) ->   IsOnSwing(m)))) & (forall o (forall n (  IsOnSwing(n) ->   IsWithChildren(o)))) & (forall q (forall p (  IsWithChildren(p) ->   IsOnSwing(q))))) -> (exists d (IsInBlackHat(d) and IsSwinging(d) and IsWithChildren(d))),LF
167,1,,"A man with a blue, collared shirt sits in front of another man. This implies that a man sits in front of another man."," A man with a blue, collared shirt sits in front of another man.  ", A man sits in front of another man.,"IsInBlueCollaredShirt(b),  IsSittingInFrontOf(b, a)","IsSittingInFrontOf(d, a)","[('IsSittingInFrontOf(d, a)', 'IsInBlueCollaredShirt(b)')]","[(' another man', ' another man')]","[(' collared shirt', ' A man'), (' collared shirt', ' another man')]","IsInBlueCollaredShirt(b) and IsSittingInFrontOf(b, a)","IsSittingInFrontOf(d, a)","(IsInBlueCollaredShirt(b) and IsSittingInFrontOf(b, a) & (forall a (forall d (forall b (IsSittingInFrontOf(d, a) -> IsInBlueCollaredShirt(b)))))) -> (IsSittingInFrontOf(d, a))","(exists a (exists b (IsInBlueCollaredShirt(b) and IsSittingInFrontOf(b, a))) & (forall e (forall g (forall f (IsSittingInFrontOf(e,f) -> IsInBlueCollaredShirt(g)))))) -> (exists a (exists d (IsSittingInFrontOf(d, a))))",Valid
168,1,,"A young man in an orange shirt, maneuvers a skateboard at the top of a ramp. Therefore, a person rides a skateboard.", A young man in an orange shirt maneuvers a skateboard at the top of a ramp.  , A person rides a skateboard.,"IsYoung(a),  IsInOrangeShirt(a),  ManeuversSkateboard(a),  IsAtTopOfRamp(d)",RidesSkateboard(e),"[('RidesSkateboard(e)', 'IsYoung(a)'), ('RidesSkateboard(e)', '  IsInOrangeShirt(a)'), ('  ManeuversSkateboard(a)', 'RidesSkateboard(e)'), ('RidesSkateboard(e)', '  ManeuversSkateboard(a)'), ('RidesSkateboard(e)', '  IsAtTopOfRamp(d)')]",[],"[(' a skateboard', ' skateboard')]",IsYoung(a) and IsInOrangeShirt(a) and ManeuversSkateboard(a) and IsAtTopOfRamp(d),RidesSkateboard(e),(IsYoung(a) and IsInOrangeShirt(a) and ManeuversSkateboard(a) and IsAtTopOfRamp(d) & (forall e (forall a (RidesSkateboard(e) -> IsYoung(a)))) & (forall e (forall a (RidesSkateboard(e) ->   IsInOrangeShirt(a)))) & (forall e (forall a (  ManeuversSkateboard(a) -> RidesSkateboard(e)))) & (forall e (forall a (RidesSkateboard(e) ->   ManeuversSkateboard(a)))) & (forall e (forall d (RidesSkateboard(e) ->   IsAtTopOfRamp(d))))) -> (RidesSkateboard(e)),(exists a (exists d (IsYoung(a) and IsInOrangeShirt(a) and ManeuversSkateboard(a) and IsAtTopOfRamp(d))) & (forall g (forall h (RidesSkateboard(g) -> IsYoung(h)))) & (forall i (forall j (RidesSkateboard(i) ->   IsInOrangeShirt(j)))) & (forall l (forall k (  ManeuversSkateboard(k) -> RidesSkateboard(l)))) & (forall n (forall m (RidesSkateboard(m) ->   ManeuversSkateboard(n)))) & (forall o (forall p (RidesSkateboard(o) ->   IsAtTopOfRamp(p))))) -> (exists e (RidesSkateboard(e))),Valid
169,1,,"A large group of people walking in a busy city at night. Consequently, people are walking a city."," ""A large group of people is walking in a busy city at night."""," ""People are walking in a city.""","IsLargeGroup(a),  IsWalking(a),  IsInBusyCity(a),  IsAtNight(a)","IsWalking(d),  IsInCity(d)","[('IsLargeGroup(a)', 'IsWalking(d)'), ('IsWalking(d)', 'IsLargeGroup(a)'), ('IsLargeGroup(a)', '  IsInCity(d)'), ('  IsInCity(d)', 'IsLargeGroup(a)'), ('  IsWalking(a)', '  IsInCity(d)'), ('  IsInCity(d)', '  IsWalking(a)'), ('  IsInBusyCity(a)', 'IsWalking(d)'), ('IsWalking(d)', '  IsInBusyCity(a)'), ('  IsInCity(d)', '  IsInBusyCity(a)'), ('IsWalking(d)', '  IsAtNight(a)'), ('  IsInCity(d)', '  IsAtNight(a)')]",[],"[(' A large group of people', ' People'), (' city', ' A large group of people'), (' People', ' busy city'), (' busy city', ' city')]",IsLargeGroup(a) and IsWalking(a) and IsInBusyCity(a) and IsAtNight(a),"IsWalking(d) and IsInCity(d, e)","(forall a (exists a (IsLargeGroup(a) and IsWalking(a) and IsInBusyCity(a) and IsAtNight(a))) & (forall a (forall d (IsLargeGroup(a) -> IsWalking(d)))) & (forall a (forall d (IsWalking(d) -> IsLargeGroup(a)))) & (forall a (forall d (IsLargeGroup(a) ->   IsInCity(d)))) & (forall a (forall d (  IsInCity(d) -> IsLargeGroup(a)))) & (forall a (forall d (  IsWalking(a) ->   IsInCity(d)))) & (forall a (forall d (  IsInCity(d) ->   IsWalking(a)))) & (forall a (forall d (  IsInBusyCity(a) -> IsWalking(d)))) & (forall a (forall d (IsWalking(d) ->   IsInBusyCity(a)))) & (forall a (forall d (  IsInCity(d) ->   IsInBusyCity(a)))) & (forall a (forall d (IsWalking(d) ->   IsAtNight(a)))) & (forall a (forall d (  IsInCity(d) ->   IsAtNight(a))))) -> (exists e (forall d (IsWalking(d) and IsInCity(d, e))))","(exists a (IsLargeGroup(a) and IsWalking(a) and IsInBusyCity(a) and IsAtNight(a)) & (forall g (forall f (IsLargeGroup(f) -> IsWalking(g)))) & (forall i (forall h (IsWalking(h) -> IsLargeGroup(i)))) & (forall k (forall j (IsLargeGroup(j) ->   IsInCity(k)))) & (forall l (forall m (  IsInCity(l) -> IsLargeGroup(m)))) & (forall o (forall n (  IsWalking(n) ->   IsInCity(o)))) & (forall q (forall p (  IsInCity(p) ->   IsWalking(q)))) & (forall s (forall r (  IsInBusyCity(r) -> IsWalking(s)))) & (forall u (forall t (IsWalking(t) ->   IsInBusyCity(u)))) & (forall v (forall w (  IsInCity(v) ->   IsInBusyCity(w)))) & (forall y (forall x (IsWalking(x) ->   IsAtNight(y)))) & (forall z (  IsInCity(z) ->   IsAtNight({)))) -> (exists e (exists d (IsWalking(d) and IsInCity(d, e))))",
170,1,,"A group of people are walking by a van. Therefore, some people outdoors."," ""A group of people is walking by a van.""  "," ""Some people are outdoors.""","IsWalking(a),  IsBy(a, b)",IsOutdoors(c),"[('IsWalking(a)', 'IsOutdoors(c)'), ('IsOutdoors(c)', 'IsWalking(a)'), ('  IsBy(a, b)', 'IsOutdoors(c)'), ('IsOutdoors(c)', '  IsBy(a, b)')]",[],"[(' Some people', ' A group of people'), (' outdoors', ' A group of people')]","IsWalking(a) and IsBy(a, b)",IsOutdoors(c),"(forall a (IsWalking(a) and IsBy(a, b)) & (forall c (forall a (IsWalking(a) -> IsOutdoors(c)))) & (forall c (forall a (IsOutdoors(c) -> IsWalking(a)))) & (forall c (forall a (forall b (  IsBy(a, b) -> IsOutdoors(c))))) & (forall c (forall a (forall b (IsOutdoors(c) ->   IsBy(a, b)))))) -> (exists c (IsOutdoors(c)))","(exists a (exists b (IsWalking(a) and IsBy(a, b))) & (forall e (forall f (IsWalking(e) -> IsOutdoors(f)))) & (forall g (forall h (IsOutdoors(g) -> IsWalking(h)))) & (forall i (forall k (forall j (  IsBy(i,j) -> IsOutdoors(k))))) & (forall l (forall n (forall m (IsOutdoors(l) ->   IsBy(m,n)))))) -> (exists c (IsOutdoors(c)))",Valid
171,1,,"A white and a black dog fighting in a fenced in room. As a consequence, the dogs are fighting.", A white dog and a black dog are fighting in a fenced room.  , The dogs are fighting.,"IsWhite(a),  IsBlack(b),  IsFighting(a, b),  IsInFencedRoom(a),  IsInFencedRoom(b)",IsFighting(d),"[('IsFighting(d)', 'IsWhite(a)'), ('IsFighting(d)', '  IsBlack(b)'), ('IsFighting(d)', '  IsInFencedRoom(a)'), ('IsFighting(d)', '  IsInFencedRoom(b)')]",[],"[(' White dog', ' The dogs'), (' black dog', ' The dogs')]","IsWhite(a) and IsBlack(b) and IsFighting(a, b) and IsInFencedRoom(a) and IsInFencedRoom(b)",IsFighting(d),"(exists b (exists a (IsWhite(a) and IsBlack(b) and IsFighting(a, b) and IsInFencedRoom(a) and IsInFencedRoom(b))) & (forall a (forall d (IsFighting(d) -> IsWhite(a)))) & (forall d (forall b (IsFighting(d) ->   IsBlack(b)))) & (forall a (forall d (IsFighting(d) ->   IsInFencedRoom(a)))) & (forall d (forall b (IsFighting(d) ->   IsInFencedRoom(b))))) -> (forall d (IsFighting(d)))","(exists a (exists b (IsWhite(a) and IsBlack(b) and IsFighting(a, b) and IsInFencedRoom(a) and IsInFencedRoom(b))) & (forall e (forall f (IsFighting(e) -> IsWhite(f)))) & (forall g (forall h (IsFighting(g) ->   IsBlack(h)))) & (forall i (forall j (IsFighting(i) ->   IsInFencedRoom(j)))) & (forall l (forall k (IsFighting(k) ->   IsInFencedRoom(l))))) -> (exists d (IsFighting(d)))",
172,1,,"A white greyhound dog wearing a muzzle runs around a track. Hence, the dog is racing other dogs."," ""A white greyhound dog wearing a muzzle runs around a track.""  "," ""The dog races other dogs.""","IsWhite(a),  IsGreyhound(a),  IsDog(a),  IsWearing(a, b),  RunsAround(a, c)","Races(d, e)","[('Races(d, e)', '  IsDog(a)')]",[],"[(' A white greyhound dog', ' The dog'), (' A white greyhound dog', ' other dogs')]","IsWhite(a) and IsGreyhound(a) and IsDog(a) and IsWearing(a, b) and RunsAround(a, c)","Races(d, e)","(exists a (IsWhite(a) and IsGreyhound(a) and IsDog(a) and IsWearing(a, b) and RunsAround(a, c)) & (forall e (forall a (forall d (Races(d, e) ->   IsDog(a)))))) -> (forall e (forall d (Races(d, e))))","(exists c (exists a (exists b (IsWhite(a) and IsGreyhound(a) and IsDog(a) and IsWearing(a, b) and RunsAround(a, c)))) & (forall g (forall f (forall h (Races(f,g) ->   IsDog(h)))))) -> (exists e (exists d (Races(d, e))))",LF
173,1,,The pitcher is pitching the ball in a game of baseball. It follows that the pitcher throws the ball.," ""The pitcher is pitching the ball in a game of baseball.""  "," ""The pitcher throws the ball.""","IsPitching(a),  IsGameOfBaseball(c)",IsThrowing(a),"[('IsPitching(a)', 'IsThrowing(a)'), ('IsThrowing(a)', 'IsPitching(a)'), ('IsThrowing(a)', '  IsGameOfBaseball(c)')]","[(' The pitcher', ' The pitcher'), (' the ball', ' the ball')]","[(' The pitcher', ' a game of baseball'), (' the ball', ' a game of baseball')]",IsPitching(a) and IsGameOfBaseball(c),IsThrowing(a),(forall c (IsPitching(a) and IsGameOfBaseball(c)) & (forall a (IsPitching(a) -> IsThrowing(a))) & (forall a (IsThrowing(a) -> IsPitching(a))) & (forall c (forall a (IsThrowing(a) ->   IsGameOfBaseball(c))))) -> (exists a (IsThrowing(a))),(exists c (exists a (IsPitching(a) and IsGameOfBaseball(c))) & (forall d (IsPitching(d) -> IsThrowing(d))) & (forall e (IsThrowing(e) -> IsPitching(e))) & (forall g (forall f (IsThrowing(f) ->   IsGameOfBaseball(g))))) -> (exists a (IsThrowing(a))),Valid
174,1,,"Girl in a red coat, blue head wrap and jeans is making a snow angel. As a consequence, a girl outside plays in the snow."," ""A girl in a red coat, blue head wrap, and jeans is making a snow angel."""," ""A girl outside plays in the snow.""","IsInRedCoat(a),  IsInBlueHeadWrap(a),  IsInJeans(a),  IsMakingSnowAngel(a)","IsOutside(a),  PlaysInSnow(a)","[('IsOutside(a)', 'IsInRedCoat(a)'), ('  PlaysInSnow(a)', 'IsInRedCoat(a)'), ('IsOutside(a)', '  IsInBlueHeadWrap(a)'), ('  PlaysInSnow(a)', '  IsInBlueHeadWrap(a)'), ('IsOutside(a)', '  IsInJeans(a)'), ('  IsInJeans(a)', '  PlaysInSnow(a)'), ('  PlaysInSnow(a)', '  IsInJeans(a)'), ('  IsMakingSnowAngel(a)', 'IsOutside(a)'), ('IsOutside(a)', '  IsMakingSnowAngel(a)'), ('  IsMakingSnowAngel(a)', '  PlaysInSnow(a)'), ('  PlaysInSnow(a)', '  IsMakingSnowAngel(a)')]","[(' A girl', ' A girl')]","[(' snow angel', ' snow')]",IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a),IsOutside(a) and PlaysInSnow(a),(IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a) & (forall a (IsOutside(a) -> IsInRedCoat(a))) & (forall a (  PlaysInSnow(a) -> IsInRedCoat(a))) & (forall a (IsOutside(a) ->   IsInBlueHeadWrap(a))) & (forall a (  PlaysInSnow(a) ->   IsInBlueHeadWrap(a))) & (forall a (IsOutside(a) ->   IsInJeans(a))) & (forall a (  IsInJeans(a) ->   PlaysInSnow(a))) & (forall a (  PlaysInSnow(a) ->   IsInJeans(a))) & (forall a (  IsMakingSnowAngel(a) -> IsOutside(a))) & (forall a (IsOutside(a) ->   IsMakingSnowAngel(a))) & (forall a (  IsMakingSnowAngel(a) ->   PlaysInSnow(a))) & (forall a (  PlaysInSnow(a) ->   IsMakingSnowAngel(a)))) -> (IsOutside(a) and PlaysInSnow(a)),(exists a (IsInRedCoat(a) and IsInBlueHeadWrap(a) and IsInJeans(a) and IsMakingSnowAngel(a)) & (forall g (IsOutside(g) -> IsInRedCoat(g))) & (forall h (  PlaysInSnow(h) -> IsInRedCoat(h))) & (forall i (IsOutside(i) ->   IsInBlueHeadWrap(i))) & (forall j (  PlaysInSnow(j) ->   IsInBlueHeadWrap(j))) & (forall k (IsOutside(k) ->   IsInJeans(k))) & (forall l (  IsInJeans(l) ->   PlaysInSnow(l))) & (forall m (  PlaysInSnow(m) ->   IsInJeans(m))) & (forall n (  IsMakingSnowAngel(n) -> IsOutside(n))) & (forall o (IsOutside(o) ->   IsMakingSnowAngel(o))) & (forall p (  IsMakingSnowAngel(p) ->   PlaysInSnow(p))) & (forall q (  PlaysInSnow(q) ->   IsMakingSnowAngel(q)))) -> (exists a (IsOutside(a) and PlaysInSnow(a))),Valid
175,1,,"Men in an office with computers and a projector screen. Consequently, there are computers and a projector screen in the room.", There are men in an office with computers and a projector screen.  , There are computers and a projector screen in the room.,"IsInOffice(c),  HasComputers(c),  HasProjectorScreen(c)","IsInRoom(a),  IsInRoom(b)","[('IsInRoom(a)', 'IsInOffice(c)'), ('  IsInRoom(b)', 'IsInOffice(c)'), ('IsInRoom(a)', '  HasComputers(c)'), ('  IsInRoom(b)', '  HasComputers(c)'), ('IsInRoom(a)', '  HasProjectorScreen(c)')]","[(' computers', ' Computers'), (' projector screen', ' projector screen')]",[],IsInOffice(c) and HasComputers(c) and HasProjectorScreen(c),IsInRoom(a) and IsInRoom(b),(IsInOffice(c) and HasComputers(c) and HasProjectorScreen(c) & (forall c (forall a (IsInRoom(a) -> IsInOffice(c)))) & (forall c (forall b (  IsInRoom(b) -> IsInOffice(c)))) & (forall c (forall a (IsInRoom(a) ->   HasComputers(c)))) & (forall c (forall b (  IsInRoom(b) ->   HasComputers(c)))) & (forall c (forall a (IsInRoom(a) ->   HasProjectorScreen(c))))) -> (IsInRoom(a) and IsInRoom(b)),(exists c (IsInOffice(c) and HasComputers(c) and HasProjectorScreen(c)) & (forall g (forall h (IsInRoom(g) -> IsInOffice(h)))) & (forall i (forall j (  IsInRoom(i) -> IsInOffice(j)))) & (forall l (forall k (IsInRoom(k) ->   HasComputers(l)))) & (forall n (forall m (  IsInRoom(m) ->   HasComputers(n)))) & (forall o (forall p (IsInRoom(o) ->   HasProjectorScreen(p))))) -> (exists a (exists b (IsInRoom(a) and IsInRoom(b)))),LF
176,1,,"A small child in a red jacket is sitting on a man's shoulders and holding his head. Therefore, the child's hands are on the man's head.", A small child in a red jacket is sitting on a man's shoulders and holding the man's head.  , The child's hands are on the man's head.,"IsSmall(b),  IsInRedJacket(b),  IsOn(b, d),  IsHolding(b, a)","IsOn(e, a)","[('IsOn(e, a)', 'IsSmall(b)'), ('IsOn(e, a)', '  IsInRedJacket(b)')]","[("" the man's head"", "" the man's head"")]","[("" The child's hands"", ' A small child')]","IsSmall(b) and IsInRedJacket(b) and IsOn(b, d) and IsHolding(b, a)","IsOn(e, a)","(forall b (IsSmall(b) and IsInRedJacket(b) and IsOn(b, d) and IsHolding(b, a)) & (forall e (forall a (forall b (IsOn(e, a) -> IsSmall(b))))) & (forall e (forall a (forall b (IsOn(e, a) ->   IsInRedJacket(b)))))) -> (exists e (IsOn(e, a)))","(exists a (exists d (exists b (IsSmall(b) and IsInRedJacket(b) and IsOn(b, d) and IsHolding(b, a)))) & (forall g (forall f (forall h (IsOn(f,g) -> IsSmall(h))))) & (forall i (forall k (forall j (IsOn(i,j) ->   IsInRedJacket(k)))))) -> (exists e (exists a (IsOn(e, a))))",Valid
177,1,,Three girls are standing and talking to each other. It follows that three girls are talking., Three girls are standing and talking to each other.  , Three girls are talking.,"IsStanding(a),  IsTalkingToEachOther(a)",IsTalking(a),"[('IsStanding(a)', 'IsTalking(a)'), ('IsTalking(a)', 'IsStanding(a)'), ('  IsTalkingToEachOther(a)', 'IsTalking(a)'), ('IsTalking(a)', '  IsTalkingToEachOther(a)')]","[(' Three girls', ' Three girls')]",[],IsStanding(a) and IsTalkingToEachOther(a),IsTalking(a),(IsStanding(a) and IsTalkingToEachOther(a) & (forall a (IsStanding(a) -> IsTalking(a))) & (forall a (IsTalking(a) -> IsStanding(a))) & (forall a (  IsTalkingToEachOther(a) -> IsTalking(a))) & (forall a (IsTalking(a) ->   IsTalkingToEachOther(a)))) -> (IsTalking(a)),(exists a (IsStanding(a) and IsTalkingToEachOther(a)) & (forall c (IsStanding(c) -> IsTalking(c))) & (forall d (IsTalking(d) -> IsStanding(d))) & (forall e (  IsTalkingToEachOther(e) -> IsTalking(e))) & (forall f (IsTalking(f) ->   IsTalkingToEachOther(f)))) -> (exists a (IsTalking(a))),Valid
178,1,,"a man with a cap and not wearing shirt is laying a wooden bench. Consequently, a man relaxes on a bench."," ""A man with a cap and not wearing a shirt is laying on a wooden bench.""  "," ""A man relaxes on a bench.""","IsWearingCap(a),  IsNotWearingShirt(a),  IsLayingOnBench(a)","IsRelaxing(c),  IsOnBench(c)","[('IsRelaxing(c)', 'IsWearingCap(a)'), ('  IsOnBench(c)', 'IsWearingCap(a)'), ('IsRelaxing(c)', '  IsNotWearingShirt(a)'), ('  IsOnBench(c)', '  IsNotWearingShirt(a)'), ('  IsLayingOnBench(a)', 'IsRelaxing(c)'), ('IsRelaxing(c)', '  IsLayingOnBench(a)'), ('  IsLayingOnBench(a)', '  IsOnBench(c)'), ('  IsOnBench(c)', '  IsLayingOnBench(a)')]",[],"[(' a wooden bench', ' a bench')]",IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOnBench(a),IsRelaxing(c) and IsOnBench(c),(IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOnBench(a) & (forall c (forall a (IsRelaxing(c) -> IsWearingCap(a)))) & (forall c (forall a (  IsOnBench(c) -> IsWearingCap(a)))) & (forall c (forall a (IsRelaxing(c) ->   IsNotWearingShirt(a)))) & (forall c (forall a (  IsOnBench(c) ->   IsNotWearingShirt(a)))) & (forall c (forall a (  IsLayingOnBench(a) -> IsRelaxing(c)))) & (forall c (forall a (IsRelaxing(c) ->   IsLayingOnBench(a)))) & (forall c (forall a (  IsLayingOnBench(a) ->   IsOnBench(c)))) & (forall c (forall a (  IsOnBench(c) ->   IsLayingOnBench(a))))) -> (IsRelaxing(c) and IsOnBench(c)),(exists a (IsWearingCap(a) and IsNotWearingShirt(a) and IsLayingOnBench(a)) & (forall e (forall f (IsRelaxing(e) -> IsWearingCap(f)))) & (forall g (forall h (  IsOnBench(g) -> IsWearingCap(h)))) & (forall i (forall j (IsRelaxing(i) ->   IsNotWearingShirt(j)))) & (forall l (forall k (  IsOnBench(k) ->   IsNotWearingShirt(l)))) & (forall n (forall m (  IsLayingOnBench(m) -> IsRelaxing(n)))) & (forall o (forall p (IsRelaxing(o) ->   IsLayingOnBench(p)))) & (forall q (forall r (  IsLayingOnBench(q) ->   IsOnBench(r)))) & (forall s (forall t (  IsOnBench(s) ->   IsLayingOnBench(t))))) -> (exists c (IsRelaxing(c) and IsOnBench(c))),Valid
179,1,,"A man in a red shirt is being filmed by another man on a sports field with a huge audience of people watching and cheering. Therefore, the man is being filmed by another man."," ""A man in a red shirt is being filmed by another man on a sports field with a huge audience of people watching and cheering."""," ""The man is being filmed by another man.""","IsInRedShirt(b),  IsFilming(a,b),  IsOnSportsField(a),  IsOnSportsField(b),  IsWatchingAndCheering(d)","IsBeingFilmed(e),  IsFilming(a,e)","[('IsInRedShirt(b)', 'IsBeingFilmed(e)'), ('  IsFilming(a,e)', 'IsInRedShirt(b)'), ('  IsFilming(a,b)', 'IsBeingFilmed(e)'), ('IsBeingFilmed(e)', '  IsFilming(a,b)'), ('IsBeingFilmed(e)', '  IsOnSportsField(a)'), ('  IsFilming(a,e)', '  IsOnSportsField(a)'), ('IsBeingFilmed(e)', '  IsOnSportsField(b)'), ('  IsFilming(a,e)', '  IsOnSportsField(b)'), ('IsBeingFilmed(e)', '  IsWatchingAndCheering(d)'), ('  IsFilming(a,e)', '  IsWatchingAndCheering(d)')]","[(' another man', ' another man')]","[(' A man in a red shirt', ' another man'), (' The man', ' another man')]","IsInRedShirt(b) and IsFilming(a,b) and IsOnSportsField(a) and IsOnSportsField(b) and IsWatchingAndCheering(d)","IsBeingFilmed(e) and IsFilming(a,e)","(forall a (exists b (IsInRedShirt(b) and IsFilming(a,b) and IsOnSportsField(a) and IsOnSportsField(b) and IsWatchingAndCheering(d))) & (forall e (forall b (IsInRedShirt(b) -> IsBeingFilmed(e)))) & (forall e (forall a (forall b (  IsFilming(a,e) -> IsInRedShirt(b))))) & (forall e (forall a (forall b (  IsFilming(a,b) -> IsBeingFilmed(e))))) & (forall e (forall a (forall b (IsBeingFilmed(e) ->   IsFilming(a,b))))) & (forall e (forall a (IsBeingFilmed(e) ->   IsOnSportsField(a)))) & (forall e (forall a (  IsFilming(a,e) ->   IsOnSportsField(a)))) & (forall e (forall b (IsBeingFilmed(e) ->   IsOnSportsField(b)))) & (forall e (forall a (forall b (  IsFilming(a,e) ->   IsOnSportsField(b))))) & (forall e (forall d (IsBeingFilmed(e) ->   IsWatchingAndCheering(d)))) & (forall e (forall a (forall d (  IsFilming(a,e) ->   IsWatchingAndCheering(d)))))) -> (exists e (forall a (IsBeingFilmed(e) and IsFilming(a,e))))","(exists a (exists d (exists b (IsInRedShirt(b) and IsFilming(a,b) and IsOnSportsField(a) and IsOnSportsField(b) and IsWatchingAndCheering(d)))) & (forall g (forall f (IsInRedShirt(f) -> IsBeingFilmed(g)))) & (forall j (forall i (forall h (  IsFilming(h,i) -> IsInRedShirt(j))))) & (forall l (forall m (forall k (  IsFilming(k,l) -> IsBeingFilmed(m))))) & (forall o (forall n (forall p (IsBeingFilmed(n) ->   IsFilming(o,p))))) & (forall q (forall r (IsBeingFilmed(q) ->   IsOnSportsField(r)))) & (forall s (forall t (  IsFilming(s,t) ->   IsOnSportsField(s)))) & (forall u (forall v (IsBeingFilmed(u) ->   IsOnSportsField(v)))) & (forall w (forall y (forall x (  IsFilming(w,x) ->   IsOnSportsField(y))))) & (forall z (IsBeingFilmed(z) ->   IsWatchingAndCheering({))) & (  IsFilming(|,}) ->   IsWatchingAndCheering(~))) -> (exists e (exists a (IsBeingFilmed(e) and IsFilming(a,e))))",
180,1,,"A man in a suit cheering in a library in front of children. Thus, a guy is cheering near some children."," ""A man in a suit is cheering in a library in front of children.""  "," ""A guy is cheering near children.""","IsInSuit(b),  IsCheering(b),  IsInLibrary(b),  IsInFrontOfChildren(b)","IsCheering(d),  IsNearChildren(d)","[('IsCheering(d)', 'IsInSuit(b)'), ('  IsNearChildren(d)', 'IsInSuit(b)'), ('  IsCheering(b)', '  IsNearChildren(d)'), ('  IsNearChildren(d)', '  IsCheering(b)'), ('IsCheering(d)', '  IsInLibrary(b)'), ('  IsNearChildren(d)', '  IsInLibrary(b)'), ('  IsInFrontOfChildren(b)', 'IsCheering(d)'), ('IsCheering(d)', '  IsInFrontOfChildren(b)'), ('  IsInFrontOfChildren(b)', '  IsNearChildren(d)'), ('  IsNearChildren(d)', '  IsInFrontOfChildren(b)')]","[(' children', ' children')]","[(' A man in a suit', ' A guy')]",IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b),IsCheering(d) and IsNearChildren(d),(exists b (IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b)) & (forall d (forall b (IsCheering(d) -> IsInSuit(b)))) & (forall d (forall b (  IsNearChildren(d) -> IsInSuit(b)))) & (forall d (forall b (  IsCheering(b) ->   IsNearChildren(d)))) & (forall d (forall b (  IsNearChildren(d) ->   IsCheering(b)))) & (forall d (forall b (IsCheering(d) ->   IsInLibrary(b)))) & (forall d (forall b (  IsNearChildren(d) ->   IsInLibrary(b)))) & (forall d (forall b (  IsInFrontOfChildren(b) -> IsCheering(d)))) & (forall d (forall b (IsCheering(d) ->   IsInFrontOfChildren(b)))) & (forall d (forall b (  IsInFrontOfChildren(b) ->   IsNearChildren(d)))) & (forall d (forall b (  IsNearChildren(d) ->   IsInFrontOfChildren(b))))) -> (forall d (IsCheering(d) and IsNearChildren(d))),(exists b (IsInSuit(b) and IsCheering(b) and IsInLibrary(b) and IsInFrontOfChildren(b)) & (forall e (forall f (IsCheering(e) -> IsInSuit(f)))) & (forall g (forall h (  IsNearChildren(g) -> IsInSuit(h)))) & (forall i (forall j (  IsCheering(i) ->   IsNearChildren(j)))) & (forall l (forall k (  IsNearChildren(k) ->   IsCheering(l)))) & (forall n (forall m (IsCheering(m) ->   IsInLibrary(n)))) & (forall o (forall p (  IsNearChildren(o) ->   IsInLibrary(p)))) & (forall q (forall r (  IsInFrontOfChildren(q) -> IsCheering(r)))) & (forall s (forall t (IsCheering(s) ->   IsInFrontOfChildren(t)))) & (forall u (forall v (  IsInFrontOfChildren(u) ->   IsNearChildren(v)))) & (forall w (forall x (  IsNearChildren(w) ->   IsInFrontOfChildren(x))))) -> (exists d (IsCheering(d) and IsNearChildren(d))),Valid
181,1,,A man in suit waiting for the green light. This implies that a man waits at a red light., A man in a suit is waiting for the green light.  , A man waits at a red light.,"IsInSuit(a),  IsWaitingForGreenLight(a)",IsWaitingAtRedLight(c),"[('IsWaitingAtRedLight(c)', 'IsInSuit(a)'), ('IsWaitingAtRedLight(c)', '  IsWaitingForGreenLight(a)')]",[],"[(' A man in a suit', ' A man')]",IsInSuit(a) and IsWaitingForGreenLight(a),IsWaitingAtRedLight(c),(exists a (IsInSuit(a) and IsWaitingForGreenLight(a)) & (forall c (forall a (IsWaitingAtRedLight(c) -> IsInSuit(a)))) & (forall c (forall a (IsWaitingAtRedLight(c) ->   IsWaitingForGreenLight(a))))) -> (forall c (IsWaitingAtRedLight(c))),(exists a (IsInSuit(a) and IsWaitingForGreenLight(a)) & (forall e (forall f (IsWaitingAtRedLight(e) -> IsInSuit(f)))) & (forall g (forall h (IsWaitingAtRedLight(g) ->   IsWaitingForGreenLight(h))))) -> (exists c (IsWaitingAtRedLight(c))),LF
182,1,,"A man smokes while leaning against a pillar, which has a ""missing person"" flier posted on it. Thus, a guy smoking against a wall with a flier on it."," ""A man smokes while leaning against a pillar with a 'missing person' flier on it."""," ""A guy smoking is associated with a wall with a flier on it.""","Smokes(a),  LeansAgainst(a, b),  HasFlier(b, c)","Smokes(d),  IsAssociatedWith(d, e),  HasFlier(e, f)","[('  LeansAgainst(a, b)', '  IsAssociatedWith(d, e)'), ('  LeansAgainst(a, b)', '  HasFlier(e, f)'), ('Smokes(d)', '  HasFlier(b, c)')]",[],"[(' Guy', ' A man'), (' flier', "" 'missing person' flier"")]","Smokes(a) and LeansAgainst(a, b) and HasFlier(b, c)","Smokes(d) and IsAssociatedWith(d, e) and HasFlier(e, f)","(forall c (forall a (Smokes(a) and LeansAgainst(a, b) and HasFlier(b, c))) & (forall e (forall a (forall d (forall b (  LeansAgainst(a, b) ->   IsAssociatedWith(d, e)))))) & (forall e (forall f (forall a (forall b (  LeansAgainst(a, b) ->   HasFlier(e, f)))))) & (forall c (forall d (forall b (Smokes(d) ->   HasFlier(b, c)))))) -> (exists f (exists d (Smokes(d) and IsAssociatedWith(d, e) and HasFlier(e, f))))","(exists c (exists a (exists b (Smokes(a) and LeansAgainst(a, b) and HasFlier(b, c)))) & (forall g (forall i (forall j (forall h (  LeansAgainst(g,h) ->   IsAssociatedWith(i,j)))))) & (forall l (forall n (forall m (forall k (  LeansAgainst(k,l) ->   HasFlier(m,n)))))) & (forall q (forall o (forall p (Smokes(o) ->   HasFlier(p,q)))))) -> (exists e (exists f (exists d (Smokes(d) and IsAssociatedWith(d, e) and HasFlier(e, f)))))",Valid
183,1,,"A woman is standing at a podium. Thus, a person is at a podium."," ""A woman is standing at a podium."""," ""A person is at a podium.""","IsStandingAt(b, a)","IsAt(c, a)","[('IsStandingAt(b, a)', 'IsAt(c, a)'), ('IsAt(c, a)', 'IsStandingAt(b, a)')]","[(' podium', ' podium')]",[],"IsStandingAt(b, a)","IsAt(c, a)","(IsStandingAt(b, a) & (forall c (forall a (forall b (IsStandingAt(b, a) -> IsAt(c, a))))) & (forall c (forall a (forall b (IsAt(c, a) -> IsStandingAt(b, a)))))) -> (IsAt(c, a))","(exists a (exists b (IsStandingAt(b, a))) & (forall e (forall f (forall d (IsStandingAt(d,e) -> IsAt(f,e))))) & (forall g (forall i (forall h (IsAt(g,h) -> IsStandingAt(i,h)))))) -> (exists c (exists a (IsAt(c, a))))",Valid
184,1,,Four boys are about to be hit by an approaching wave. It follows that a wave is about hit some boys.," ""Four boys are about to be hit by an approaching wave.""  "," ""A wave is about to hit some boys.""","IsFour(b),  IsApproaching(a),  IsHitByWave(b)",IsHitByWave(c),"[('IsHitByWave(c)', 'IsFour(b)'), ('  IsApproaching(a)', 'IsHitByWave(c)'), ('IsHitByWave(c)', '  IsApproaching(a)')]","[(' approaching wave', ' A wave')]","[(' Four boys', ' some boys')]",IsFour(b) and IsApproaching(a) and IsHitByWave(b),IsHitByWave(c),(exists b (IsFour(b) and IsApproaching(a) and IsHitByWave(b)) & (forall c (forall b (IsHitByWave(c) -> IsFour(b)))) & (forall c (forall a (  IsApproaching(a) -> IsHitByWave(c)))) & (forall c (forall a (IsHitByWave(c) ->   IsApproaching(a))))) -> (forall c (IsHitByWave(c))),(exists a (exists b (IsFour(b) and IsApproaching(a) and IsHitByWave(b))) & (forall e (forall f (IsHitByWave(e) -> IsFour(f)))) & (forall g (forall h (  IsApproaching(g) -> IsHitByWave(h)))) & (forall i (forall j (IsHitByWave(i) ->   IsApproaching(j))))) -> (exists c (IsHitByWave(c))),Valid
185,1,,"people are sitting on a bench in front of buildings. Thus, some people are seated on a bench outside.", People are sitting on a bench in front of buildings.  , Some people are seated on a bench outside.,"IsSittingOn(a, b),  IsInFrontOf(b, c)","IsSeatedOn(d, bench),  IsOutside(d)","[('IsSittingOn(a, b)', 'IsSeatedOn(d, bench)'), ('IsSeatedOn(d, bench)', 'IsSittingOn(a, b)'), ('IsSittingOn(a, b)', '  IsOutside(d)'), ('  IsOutside(d)', 'IsSittingOn(a, b)'), ('IsSeatedOn(d, bench)', '  IsInFrontOf(b, c)'), ('  IsOutside(d)', '  IsInFrontOf(b, c)')]",[],"[(' People', '')]","IsSittingOn(a, b) and IsInFrontOf(b, c)","IsSeatedOn(d, bench) and IsOutside(d)","(exists a (IsSittingOn(a, b) and IsInFrontOf(b, c)) & (forall a (forall d (forall b (IsSittingOn(a, b) -> IsSeatedOn(d, bench))))) & (forall a (forall d (forall b (IsSeatedOn(d, bench) -> IsSittingOn(a, b))))) & (forall a (forall d (forall b (IsSittingOn(a, b) ->   IsOutside(d))))) & (forall a (forall d (forall b (  IsOutside(d) -> IsSittingOn(a, b))))) & (forall c (forall d (forall b (IsSeatedOn(d, bench) ->   IsInFrontOf(b, c))))) & (forall c (forall d (forall b (  IsOutside(d) ->   IsInFrontOf(b, c)))))) -> (forall d (IsSeatedOn(d, bench) and IsOutside(d)))","(exists c (exists a (exists b (IsSittingOn(a, b) and IsInFrontOf(b, c)))) & (forall e (forall g (forall f (forall h (IsSittingOn(e,f) -> IsSeatedOn(g,h)))))) & (forall l (forall i (forall k (forall j (IsSeatedOn(i,j) -> IsSittingOn(k,l)))))) & (forall n (forall o (forall m (IsSittingOn(m,n) ->   IsOutside(o))))) & (forall q (forall r (forall p (  IsOutside(p) -> IsSittingOn(q,r))))) & (forall s (forall u (forall v (forall t (IsSeatedOn(s,t) ->   IsInFrontOf(u,v)))))) & (forall w (forall y (forall x (  IsOutside(w) ->   IsInFrontOf(x,y)))))) -> (exists d (IsSeatedOn(d, bench) and IsOutside(d)))",Valid
186,1,,The skateboarder is jumping his board in the air while another skateboarder watches. This implies that a skateboarder is jumping.," ""A skateboarder is jumping his board in the air.""  "," ""A skateboarder is jumping.""","IsSkateboarder(a),  IsJumping(a),  HasBoard(a,b)","IsSkateboarder(a),  IsJumping(a)","[('IsSkateboarder(a)', '  IsJumping(a)'), ('  IsJumping(a)', 'IsSkateboarder(a)'), ('  IsJumping(a)', 'IsSkateboarder(a)'), ('IsSkateboarder(a)', '  HasBoard(a,b)'), ('  IsJumping(a)', '  HasBoard(a,b)')]","[(' A skateboarder', ' A skateboarder')]",[],"IsSkateboarder(a) and IsJumping(a) and HasBoard(a,b)",IsSkateboarder(a) and IsJumping(a),"(IsSkateboarder(a) and IsJumping(a) and HasBoard(a,b) & (forall a (IsSkateboarder(a) ->   IsJumping(a))) & (forall a (  IsJumping(a) -> IsSkateboarder(a))) & (forall a (  IsJumping(a) -> IsSkateboarder(a))) & (forall a (forall b (IsSkateboarder(a) ->   HasBoard(a,b)))) & (forall a (forall b (  IsJumping(a) ->   HasBoard(a,b))))) -> (IsSkateboarder(a) and IsJumping(a))","(exists a (exists b (IsSkateboarder(a) and IsJumping(a) and HasBoard(a,b))) & (forall d (IsSkateboarder(d) ->   IsJumping(d))) & (forall e (  IsJumping(e) -> IsSkateboarder(e))) & (forall f (  IsJumping(f) -> IsSkateboarder(f))) & (forall g (forall h (IsSkateboarder(g) ->   HasBoard(g,h)))) & (forall i (forall j (  IsJumping(i) ->   HasBoard(i,j))))) -> (exists a (IsSkateboarder(a) and IsJumping(a)))",Valid
187,1,,"A man wearing a black hat and coat makes a face with a crowd behind him. As a consequence, a guy is standing near a crowd of people.", A man wearing a black hat and coat makes a face with a crowd behind him.  , A guy stands near a crowd of people.,"IsWearingBlackHat(a),  IsWearingCoat(a),  MakesFace(a),  IsBehind(d, a)","IsNear(e, f)","[('IsNear(e, f)', '  IsWearingCoat(a)'), ('  IsBehind(d, a)', 'IsNear(e, f)')]",[],"[(' Guy', ' a face'), (' crowd of people', ' a face'), (' Guy', ' a crowd'), (' a crowd', ' crowd of people')]","IsWearingBlackHat(a) and IsWearingCoat(a) and MakesFace(a) and IsBehind(d, a)","IsNear(e, f)","(forall d (IsWearingBlackHat(a) and IsWearingCoat(a) and MakesFace(a) and IsBehind(d, a)) & (forall e (forall f (forall a (IsNear(e, f) ->   IsWearingCoat(a))))) & (forall e (forall f (forall a (forall d (  IsBehind(d, a) -> IsNear(e, f))))))) -> (forall f (exists e (IsNear(e, f))))","(exists a (exists d (IsWearingBlackHat(a) and IsWearingCoat(a) and MakesFace(a) and IsBehind(d, a))) & (forall g (forall i (forall h (IsNear(g,h) ->   IsWearingCoat(i))))) & (forall l (forall m (forall k (forall j (  IsBehind(j,k) -> IsNear(l,m))))))) -> (exists e (exists f (IsNear(e, f))))",Valid
188,1,,"A group of soldiers march in a parade. Thus, a group of people march in a parade."," ""A group of soldiers march in a parade.""  "," ""A group of people march in a parade.""",MarchInParade(b),MarchInParade(c),[],"[(' parade', ' parade')]","[(' parade', ' A group of people')]",MarchInParade(b),MarchInParade(c),(MarchInParade(b)) -> (MarchInParade(c)),(exists b (MarchInParade(b))) -> (exists c (MarchInParade(c))),Valid
189,1,,The 3 dogs are cruising down the street. This implies that three dogs together.," ""The three dogs are cruising down the street.""  "," ""Three dogs are together.""","AreCruisingDown(a, b)",AreTogether(c),"[('AreTogether(c)', 'AreCruisingDown(a, b)')]",[],"[(' Three dogs', ' The three dogs')]","AreCruisingDown(a, b)",AreTogether(c),"(forall a (AreCruisingDown(a, b)) & (forall c (forall a (forall b (AreTogether(c) -> AreCruisingDown(a, b)))))) -> (exists c (AreTogether(c)))","(exists a (exists b (AreCruisingDown(a, b))) & (forall e (forall f (forall d (AreTogether(d) -> AreCruisingDown(e,f)))))) -> (exists c (AreTogether(c)))",LF
190,1,,"The gentleman is speaking while the others are listening. As a consequence, the man is being given respect."," ""The gentleman is speaking while the others are listening.""  "," ""The man is given respect.""","IsSpeaking(a),  IsListening(b)",IsGivenRespect(c),"[('IsGivenRespect(c)', '  IsListening(b)')]",[],"[(' The man', ' The gentleman')]",IsSpeaking(a) and IsListening(b),IsGivenRespect(c),(forall a (IsSpeaking(a) and IsListening(b)) & (forall c (forall b (IsGivenRespect(c) ->   IsListening(b))))) -> (exists c (IsGivenRespect(c))),(exists a (exists b (IsSpeaking(a) and IsListening(b))) & (forall e (forall d (IsGivenRespect(d) ->   IsListening(e))))) -> (exists c (IsGivenRespect(c))),LF
191,1,,"One child in black is walking down a hill covered in white snow while 2 children are on their knees. Thus, there are three children in this picture, and they are all outside."," One child is walking down a hill, and two children are on their knees.", There are three children outside in this picture.,"IsWalkingDown(a, b),  IsOn(c, d)","IsOutside(e, f)","[('IsOutside(e, f)', 'IsWalkingDown(a, b)'), ('IsOutside(e, f)', '  IsOn(c, d)')]",[],"[(' One child', ' picture'), (' picture', ' a hill')]","IsWalkingDown(a, b) and IsOn(c, d)","IsOutside(e, f)","(forall b (exists a (IsWalkingDown(a, b) and IsOn(c, d))) & (forall e (forall f (forall a (forall b (IsOutside(e, f) -> IsWalkingDown(a, b)))))) & (forall e (forall f (forall c (forall d (IsOutside(e, f) ->   IsOn(c, d))))))) -> (forall f (IsOutside(e, f)))","(exists c (exists a (exists d (exists b (IsWalkingDown(a, b) and IsOn(c, d))))) & (forall g (forall i (forall j (forall h (IsOutside(g,h) -> IsWalkingDown(i,j)))))) & (forall l (forall n (forall m (forall k (IsOutside(k,l) ->   IsOn(m,n))))))) -> (exists e (exists f (IsOutside(e, f))))",LF
192,1,,A group of people are sight seeing and taking pictures. It follows that there are a group of people., A group of people are sight seeing and taking pictures.  , There are a group of people.,"IsSightSeeing(a),  IsTakingPictures(a)",IsGroupOfPeople(a),"[('IsSightSeeing(a)', 'IsGroupOfPeople(a)'), ('IsGroupOfPeople(a)', 'IsSightSeeing(a)'), ('IsGroupOfPeople(a)', '  IsTakingPictures(a)')]","[(' A group of people', ' A group of people')]",[],IsSightSeeing(a) and IsTakingPictures(a),IsGroupOfPeople(a),(IsSightSeeing(a) and IsTakingPictures(a) & (forall a (IsSightSeeing(a) -> IsGroupOfPeople(a))) & (forall a (IsGroupOfPeople(a) -> IsSightSeeing(a))) & (forall a (IsGroupOfPeople(a) ->   IsTakingPictures(a)))) -> (IsGroupOfPeople(a)),(exists a (IsSightSeeing(a) and IsTakingPictures(a)) & (forall c (IsSightSeeing(c) -> IsGroupOfPeople(c))) & (forall d (IsGroupOfPeople(d) -> IsSightSeeing(d))) & (forall e (IsGroupOfPeople(e) ->   IsTakingPictures(e)))) -> (exists a (IsGroupOfPeople(a))),Valid
193,1,,"Army men grilling a lot of meat while his troop looks on. Hence, some of the people here have been in the armed forces."," ""Army men are grilling a lot of meat while the troop looks on.""  "," ""Some of the people here have been in the armed forces.""","IsGrilling(b, c),  LooksOn(a)",IsInArmedForces(a),"[('IsGrilling(b, c)', 'IsInArmedForces(a)'), ('IsInArmedForces(a)', 'IsGrilling(b, c)'), ('IsInArmedForces(a)', '  LooksOn(a)')]","[(' the troop', ' Some of the people here')]","[(' Army men', ' armed forces'), (' the troop', ' armed forces')]","IsGrilling(b, c) and LooksOn(a)",IsInArmedForces(a),"(IsGrilling(b, c) and LooksOn(a) & (forall c (forall a (forall b (IsGrilling(b, c) -> IsInArmedForces(a))))) & (forall c (forall a (forall b (IsInArmedForces(a) -> IsGrilling(b, c))))) & (forall a (IsInArmedForces(a) ->   LooksOn(a)))) -> (IsInArmedForces(a))","(exists c (exists a (exists b (IsGrilling(b, c) and LooksOn(a)))) & (forall g (forall f (forall h (IsGrilling(f,g) -> IsInArmedForces(h))))) & (forall i (forall k (forall j (IsInArmedForces(i) -> IsGrilling(j,k))))) & (forall l (IsInArmedForces(l) ->   LooksOn(l)))) -> (exists a (IsInArmedForces(a)))",Valid
194,1,,"The basketball player in red is challenging the player in white for the ball. Consequently, people are playing basketball."," ""The basketball player in red is challenging the player in white for the ball.""  "," ""People are playing basketball.""","IsInRed(a),  IsChallenging(a, b),  IsInWhite(b),  IsChallengingForTheBall(a, c)",IsPlayingBasketball(d),"[('IsPlayingBasketball(d)', 'IsInRed(a)'), ('  IsChallenging(a, b)', 'IsPlayingBasketball(d)'), ('IsPlayingBasketball(d)', '  IsChallenging(a, b)'), ('IsPlayingBasketball(d)', '  IsInWhite(b)'), ('  IsChallengingForTheBall(a, c)', 'IsPlayingBasketball(d)'), ('IsPlayingBasketball(d)', '  IsChallengingForTheBall(a, c)')]",[],"[(' the ball', ' basketball')]","IsInRed(a) and IsChallenging(a, b) and IsInWhite(b) and IsChallengingForTheBall(a, c)",IsPlayingBasketball(d),"(IsInRed(a) and IsChallenging(a, b) and IsInWhite(b) and IsChallengingForTheBall(a, c) & (forall a (forall d (IsPlayingBasketball(d) -> IsInRed(a)))) & (forall a (forall d (forall b (  IsChallenging(a, b) -> IsPlayingBasketball(d))))) & (forall a (forall d (forall b (IsPlayingBasketball(d) ->   IsChallenging(a, b))))) & (forall d (forall b (IsPlayingBasketball(d) ->   IsInWhite(b)))) & (forall c (forall a (forall d (  IsChallengingForTheBall(a, c) -> IsPlayingBasketball(d))))) & (forall c (forall a (forall d (IsPlayingBasketball(d) ->   IsChallengingForTheBall(a, c)))))) -> (IsPlayingBasketball(d))","(exists c (exists a (exists b (IsInRed(a) and IsChallenging(a, b) and IsInWhite(b) and IsChallengingForTheBall(a, c)))) & (forall g (forall f (IsPlayingBasketball(f) -> IsInRed(g)))) & (forall j (forall i (forall h (  IsChallenging(h,i) -> IsPlayingBasketball(j))))) & (forall l (forall m (forall k (IsPlayingBasketball(k) ->   IsChallenging(l,m))))) & (forall o (forall n (IsPlayingBasketball(n) ->   IsInWhite(o)))) & (forall q (forall r (forall p (  IsChallengingForTheBall(p,q) -> IsPlayingBasketball(r))))) & (forall s (forall u (forall t (IsPlayingBasketball(s) ->   IsChallengingForTheBall(t,u)))))) -> (exists d (IsPlayingBasketball(d)))",Valid
195,1,,"A older man with gray hair wearing a gray suit next to a green and yellow taxi. Thus, a older man with gray hair wearing a gray suit."," ""An older man with gray hair is wearing a gray suit."""," ""There is an older man with gray hair wearing a gray suit.""","IsOlder(a),  HasGrayHair(a),  IsWearingGraySuit(a)","IsOlder(a),  HasGrayHair(a),  IsWearingGraySuit(a)","[('IsOlder(a)', '  IsWearingGraySuit(a)'), ('  HasGrayHair(a)', 'IsOlder(a)'), ('IsOlder(a)', '  HasGrayHair(a)'), ('  IsWearingGraySuit(a)', '  HasGrayHair(a)'), ('  IsWearingGraySuit(a)', 'IsOlder(a)'), ('IsOlder(a)', '  IsWearingGraySuit(a)'), ('  IsWearingGraySuit(a)', '  HasGrayHair(a)')]","[(' Older man', ' Older man'), (' gray hair', ' gray hair'), (' gray suit', ' gray suit')]","[(' gray hair', ' Older man'), (' gray suit', ' Older man'), (' gray hair', ' Older man'), (' gray suit', ' Older man')]",IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a),IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a),(IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a) & (forall a (IsOlder(a) ->   IsWearingGraySuit(a))) & (forall a (  HasGrayHair(a) -> IsOlder(a))) & (forall a (IsOlder(a) ->   HasGrayHair(a))) & (forall a (  IsWearingGraySuit(a) ->   HasGrayHair(a))) & (forall a (  IsWearingGraySuit(a) -> IsOlder(a))) & (forall a (IsOlder(a) ->   IsWearingGraySuit(a))) & (forall a (  IsWearingGraySuit(a) ->   HasGrayHair(a)))) -> (IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a)),(exists a (IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a)) & (forall d (IsOlder(d) ->   IsWearingGraySuit(d))) & (forall e (  HasGrayHair(e) -> IsOlder(e))) & (forall f (IsOlder(f) ->   HasGrayHair(f))) & (forall g (  IsWearingGraySuit(g) ->   HasGrayHair(g))) & (forall h (  IsWearingGraySuit(h) -> IsOlder(h))) & (forall i (IsOlder(i) ->   IsWearingGraySuit(i))) & (forall j (  IsWearingGraySuit(j) ->   HasGrayHair(j)))) -> (exists a (IsOlder(a) and HasGrayHair(a) and IsWearingGraySuit(a))),Valid
196,1,,"A man drops something, reaching for it while a woman in a beige blazer discusses an important topic. Hence, a woman is talking while a man is reaching for something."," ""A man drops something and reaches for it while a woman in a beige blazer discusses an important topic."""," ""A woman is talking while a man is reaching for something.""","DropsSomething(a),  ReachesForIt(a),  DiscussesTopic(b, c)","Talking(d),  ReachingForSomething(a)","[('Talking(d)', 'DropsSomething(a)'), ('Talking(d)', '  ReachesForIt(a)'), ('Talking(d)', '  DiscussesTopic(b, c)')]","[(' A man', ' a man'), (' A man', ' something'), (' something', ' something'), (' it', ' something')]","[(' A woman', ' something'), (' a man', ' something'), (' woman in a beige blazer', ' A woman'), (' woman in a beige blazer', ' something'), (' something', ' important topic')]","DropsSomething(a) and ReachesForIt(a) and DiscussesTopic(b, c)",Talking(d) and ReachingForSomething(a),"(forall c (exists b (forall a (DropsSomething(a) and ReachesForIt(a) and DiscussesTopic(b, c)))) & (forall a (forall d (Talking(d) -> DropsSomething(a)))) & (forall a (forall d (Talking(d) ->   ReachesForIt(a)))) & (forall c (forall d (forall b (Talking(d) ->   DiscussesTopic(b, c)))))) -> (forall d (forall a (exists d (Talking(d) and ReachingForSomething(a)))))","(exists c (exists a (exists b (DropsSomething(a) and ReachesForIt(a) and DiscussesTopic(b, c)))) & (forall i (forall h (Talking(h) -> DropsSomething(i)))) & (forall k (forall j (Talking(j) ->   ReachesForIt(k)))) & (forall l (forall n (forall m (Talking(l) ->   DiscussesTopic(m,n)))))) -> (exists a (exists d (Talking(d) and ReachingForSomething(a))))",LF
197,1,,A crowd watching a skateboarder. This implies that a person is skateboarding., A person is skateboarding.  , A crowd watches a skateboarder.,IsSkateboarding(a),"IsWatching(b),  IsASkateboarder(c)","[('IsSkateboarding(a)', 'IsWatching(b)'), ('IsSkateboarding(a)', '  IsASkateboarder(c)'), ('  IsASkateboarder(c)', 'IsSkateboarding(a)')]",[],[],IsSkateboarding(a),IsWatching(b) and IsASkateboarder(c),(IsSkateboarding(a) & (forall a (forall b (IsSkateboarding(a) -> IsWatching(b)))) & (forall c (forall a (IsSkateboarding(a) ->   IsASkateboarder(c)))) & (forall c (forall a (  IsASkateboarder(c) -> IsSkateboarding(a))))) -> (IsWatching(b) and IsASkateboarder(c)),(exists a (IsSkateboarding(a)) & (forall e (forall d (IsSkateboarding(d) -> IsWatching(e)))) & (forall g (forall f (IsSkateboarding(f) ->   IsASkateboarder(g)))) & (forall i (forall h (  IsASkateboarder(h) -> IsSkateboarding(i))))) -> (exists c (exists b (IsWatching(b) and IsASkateboarder(c)))),Valid
198,1,,"A male guitar player is vigorously singing a not to a song in a poorly lit room. As a consequence, a man is singing indoors.", A male guitar player is singing a note to a song in a poorly lit room.  , A man is singing indoors.,"IsMale(a),  IsGuitarPlayer(a),  IsSinging(a, b),  IsNoteOf(b, c),  IsInRoom(a, d),  IsPoorlyLit(d)","IsSinging(e),  IsIndoors(e, f)","[('IsMale(a)', 'IsSinging(e)'), ('IsSinging(e)', 'IsMale(a)'), ('  IsIndoors(e, f)', 'IsMale(a)'), ('IsSinging(e)', '  IsGuitarPlayer(a)'), ('  IsGuitarPlayer(a)', '  IsIndoors(e, f)'), ('  IsIndoors(e, f)', '  IsGuitarPlayer(a)'), ('  IsSinging(a, b)', '  IsIndoors(e, f)'), ('  IsIndoors(e, f)', '  IsSinging(a, b)'), ('IsSinging(e)', '  IsNoteOf(b, c)'), ('  IsIndoors(e, f)', '  IsNoteOf(b, c)'), ('  IsInRoom(a, d)', 'IsSinging(e)'), ('IsSinging(e)', '  IsInRoom(a, d)'), ('  IsInRoom(a, d)', '  IsIndoors(e, f)'), ('  IsIndoors(e, f)', '  IsInRoom(a, d)'), ('  IsPoorlyLit(d)', 'IsSinging(e)'), ('IsSinging(e)', '  IsPoorlyLit(d)'), ('  IsIndoors(e, f)', '  IsPoorlyLit(d)')]",[],[],"IsMale(a) and IsGuitarPlayer(a) and IsSinging(a, b) and IsNoteOf(b, c) and IsInRoom(a, d) and IsPoorlyLit(d)","IsSinging(e) and IsIndoors(e, f)","(IsMale(a) and IsGuitarPlayer(a) and IsSinging(a, b) and IsNoteOf(b, c) and IsInRoom(a, d) and IsPoorlyLit(d) & (forall e (forall a (IsMale(a) -> IsSinging(e)))) & (forall e (forall a (IsSinging(e) -> IsMale(a)))) & (forall e (forall f (forall a (  IsIndoors(e, f) -> IsMale(a))))) & (forall e (forall a (IsSinging(e) ->   IsGuitarPlayer(a)))) & (forall e (forall f (forall a (  IsGuitarPlayer(a) ->   IsIndoors(e, f))))) & (forall e (forall f (forall a (  IsIndoors(e, f) ->   IsGuitarPlayer(a))))) & (forall e (forall f (forall a (forall b (  IsSinging(a, b) ->   IsIndoors(e, f)))))) & (forall e (forall f (forall a (forall b (  IsIndoors(e, f) ->   IsSinging(a, b)))))) & (forall e (forall c (forall b (IsSinging(e) ->   IsNoteOf(b, c))))) & (forall e (forall f (forall c (forall b (  IsIndoors(e, f) ->   IsNoteOf(b, c)))))) & (forall e (forall a (forall d (  IsInRoom(a, d) -> IsSinging(e))))) & (forall e (forall a (forall d (IsSinging(e) ->   IsInRoom(a, d))))) & (forall e (forall f (forall a (forall d (  IsInRoom(a, d) ->   IsIndoors(e, f)))))) & (forall e (forall f (forall a (forall d (  IsIndoors(e, f) ->   IsInRoom(a, d)))))) & (forall e (forall d (  IsPoorlyLit(d) -> IsSinging(e)))) & (forall e (forall d (IsSinging(e) ->   IsPoorlyLit(d)))) & (forall e (forall f (forall d (  IsIndoors(e, f) ->   IsPoorlyLit(d)))))) -> (IsSinging(e) and IsIndoors(e, f))","(exists c (exists a (exists d (exists b (IsMale(a) and IsGuitarPlayer(a) and IsSinging(a, b) and IsNoteOf(b, c) and IsInRoom(a, d) and IsPoorlyLit(d))))) & (forall g (forall h (IsMale(g) -> IsSinging(h)))) & (forall i (forall j (IsSinging(i) -> IsMale(j)))) & (forall l (forall m (forall k (  IsIndoors(k,l) -> IsMale(m))))) & (forall o (forall n (IsSinging(n) ->   IsGuitarPlayer(o)))) & (forall q (forall r (forall p (  IsGuitarPlayer(p) ->   IsIndoors(q,r))))) & (forall s (forall u (forall t (  IsIndoors(s,t) ->   IsGuitarPlayer(u))))) & (forall y (forall v (forall x (forall w (  IsSinging(v,w) ->   IsIndoors(x,y)))))) & (forall z (  IsIndoors(z,{) ->   IsSinging(|,}))) & (IsSinging(~) ->   IsNoteOf(,)) & (  IsIndoors(,) ->   IsNoteOf(,)) & (  IsInRoom(,) -> IsSinging()) & (IsSinging() ->   IsInRoom(,)) & (  IsInRoom(,) ->   IsIndoors(,)) & (  IsIndoors(,) ->   IsInRoom(,)) & (  IsPoorlyLit() -> IsSinging()) & (IsSinging() ->   IsPoorlyLit()) & (  IsIndoors(,) ->   IsPoorlyLit())) -> (exists e (exists f (IsSinging(e) and IsIndoors(e, f))))",
199,1,,"The sun breaks through the trees as a child rides a swing. Thus, a child rides a swing in the daytime."," ""The sun breaks through the trees.""  "," ""A child rides a swing in the daytime.""","BreaksThrough(a, b)","Rides(c, d),  IsInDaytime(c)","[('BreaksThrough(a, b)', 'Rides(c, d)'), ('Rides(c, d)', 'BreaksThrough(a, b)'), ('BreaksThrough(a, b)', '  IsInDaytime(c)'), ('  IsInDaytime(c)', 'BreaksThrough(a, b)')]",[],[],"BreaksThrough(a, b)","Rides(c, d) and IsInDaytime(c)","(BreaksThrough(a, b) & (forall c (forall a (forall d (forall b (BreaksThrough(a, b) -> Rides(c, d)))))) & (forall c (forall a (forall d (forall b (Rides(c, d) -> BreaksThrough(a, b)))))) & (forall c (forall a (forall b (BreaksThrough(a, b) ->   IsInDaytime(c))))) & (forall c (forall a (forall b (  IsInDaytime(c) -> BreaksThrough(a, b)))))) -> (Rides(c, d) and IsInDaytime(c))","(exists a (exists b (BreaksThrough(a, b))) & (forall g (forall f (forall i (forall h (BreaksThrough(f,g) -> Rides(h,i)))))) & (forall l (forall m (forall k (forall j (Rides(j,k) -> BreaksThrough(l,m)))))) & (forall o (forall n (forall p (BreaksThrough(n,o) ->   IsInDaytime(p))))) & (forall q (forall s (forall r (  IsInDaytime(q) -> BreaksThrough(r,s)))))) -> (exists c (exists d (Rides(c, d) and IsInDaytime(c))))",Valid
