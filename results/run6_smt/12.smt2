(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(declare-fun IsHispanic (BoundSet) Bool)
(declare-fun IsWearingRedPlaidShirt (BoundSet) Bool)
(declare-fun WorksOnSewing (BoundSet) Bool)
(declare-fun IsWearing (BoundSet) Bool)
(declare-fun IsSewing (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (exists ((c BoundSet)) (exists ((b BoundSet)) (and (IsHispanic a) (and (IsWearingRedPlaidShirt b) (WorksOnSewing c)))))) (and (forall ((h BoundSet)) (forall ((g BoundSet)) (=> (IsWearingRedPlaidShirt g) (IsWearing h)))) (and (forall ((j BoundSet)) (forall ((i BoundSet)) (=> (IsWearing i) (IsWearingRedPlaidShirt j)))) (and (forall ((l BoundSet)) (forall ((k BoundSet)) (=> (WorksOnSewing k) (IsSewing l)))) (forall ((n BoundSet)) (forall ((m BoundSet)) (=> (IsSewing m) (WorksOnSewing n)))))))) (exists ((f BoundSet)) (exists ((e BoundSet)) (and (IsWearing e) (IsSewing f)))))))
(check-sat)
(get-model)