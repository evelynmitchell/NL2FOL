(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsAny (BoundSet) Bool)
(declare-fun IsFloodingActivity (BoundSet) Bool)
(declare-fun IsHumanAlterations (BoundSet) Bool)
(declare-fun CausesFloodingActivity (BoundSet) Bool)
(declare-fun IsHuman (BoundSet) Bool)
(declare-fun IsRiver (BoundSet) Bool)
(declare-fun IsStream (BoundSet) Bool)
(declare-fun IsStreamFlow (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((b BoundSet)) (exists ((d BoundSet)) (and (IsAny b) (and (IsFloodingActivity c) (IsHumanAlterations d)))))) (and (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (IsFloodingActivity j) (CausesFloodingActivity k)))) (and (forall ((m BoundSet)) (forall ((l BoundSet)) (=> (CausesFloodingActivity l) (IsFloodingActivity m)))) (and (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (IsHumanAlterations n) (IsHuman o)))) (and (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (IsHuman p) (IsHumanAlterations q)))) (and (forall ((s BoundSet)) (forall ((r BoundSet)) (=> (IsRiver r) (IsStream s)))) (and (forall ((u BoundSet)) (forall ((t BoundSet)) (=> (IsRiver t) (CausesFloodingActivity u)))) (forall ((w BoundSet)) (forall ((v BoundSet)) (=> (IsRiver v) (IsStreamFlow w))))))))))) (exists ((h BoundSet)) (exists ((a BoundSet)) (exists ((f BoundSet)) (exists ((g BoundSet)) (and (IsHuman f) (and (and (IsRiver a) (IsStream g)) (CausesFloodingActivity h))))))))))
(check-sat)
(get-model)