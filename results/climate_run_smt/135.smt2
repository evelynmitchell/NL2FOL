(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsRedheaded (BoundSet) Bool)
(declare-fun IsInterestedInWater (BoundSet) Bool)
(declare-fun IsInterestedInPeople (BoundSet) Bool)
(declare-fun IsInDistance (BoundSet) Bool)
(declare-fun IsAtWater (BoundSet) Bool)
(declare-fun IsSitting (BoundSet) Bool)
(declare-fun IsLookingThroughRailing (BoundSet) Bool)
(declare-fun IsPeoplePlayingOnBeach (BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsRedheaded a) (and (IsInterestedInWater a) (and (IsInterestedInPeople a) (IsInDistance a))))) (forall ((b BoundSet)) (=> (IsInterestedInWater b) (IsAtWater b)))) (exists ((a BoundSet)) (and (IsSitting a) (and (IsLookingThroughRailing a) (and (IsAtWater a) (and (IsPeoplePlayingOnBeach a) (IsInDistance a)))))))))
(check-sat)
(get-model)