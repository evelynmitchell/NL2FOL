(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsRuns (BoundSet) Bool)
(declare-fun IsOnBike (BoundSet) Bool)
(declare-fun IsRed (BoundSet) Bool)
(declare-fun IsClosesGap (BoundSet BoundSet) Bool)
(declare-fun IsInFrontOf (BoundSet BoundSet) Bool)
(assert (not (=> (and (exists ((a BoundSet)) (and (IsRuns a) (and (IsOnBike a) (IsRed a)))) (and (forall ((e BoundSet)) (forall ((f BoundSet)) (forall ((g BoundSet)) (=> (IsOnBike e) (IsClosesGap f g))))) (and (forall ((j BoundSet)) (forall ((h BoundSet)) (forall ((i BoundSet)) (=> (IsOnBike h) (IsInFrontOf i j))))) (forall ((k BoundSet)) (forall ((m BoundSet)) (forall ((l BoundSet)) (=> (IsInFrontOf k l) (IsOnBike m)))))))) (exists ((c BoundSet)) (exists ((d BoundSet)) (exists ((b BoundSet)) (and (IsClosesGap b d) (IsInFrontOf c d))))))))
(check-sat)
(get-model)