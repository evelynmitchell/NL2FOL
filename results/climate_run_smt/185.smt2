(set-logic ALL)
(set-option :produce-models true)
(declare-sort BoundSet 0)
(declare-sort UnboundSet 0)
(set-option :finite-model-find true)
(declare-fun IsFemale (BoundSet) Bool)
(declare-fun IsPresenting (BoundSet) Bool)
(declare-fun IsPineapple (BoundSet) Bool)
(declare-fun IsWatermelon (BoundSet) Bool)
(declare-fun IsDisplayed (BoundSet) Bool)
(declare-fun IsChef (BoundSet) Bool)
(assert (not (=> (and (exists ((c BoundSet)) (exists ((a BoundSet)) (exists ((b BoundSet)) (and (IsFemale a) (and (IsPresenting a) (and (IsPineapple b) (IsWatermelon c))))))) (and (forall ((f BoundSet)) (forall ((g BoundSet)) (=> (IsFemale f) (IsDisplayed g)))) (and (forall ((h BoundSet)) (forall ((i BoundSet)) (=> (IsFemale h) (IsChef i)))) (and (forall ((k BoundSet)) (forall ((j BoundSet)) (=> (IsChef j) (IsFemale k)))) (and (forall ((m BoundSet)) (forall ((l BoundSet)) (=> (IsPresenting l) (IsDisplayed m)))) (and (forall ((o BoundSet)) (forall ((n BoundSet)) (=> (IsPresenting n) (IsChef o)))) (and (forall ((q BoundSet)) (forall ((p BoundSet)) (=> (IsPineapple p) (IsDisplayed q)))) (forall ((s BoundSet)) (forall ((r BoundSet)) (=> (IsWatermelon r) (IsDisplayed s))))))))))) (exists ((e BoundSet)) (exists ((d BoundSet)) (and (IsDisplayed d) (IsChef e)))))))
(check-sat)
(get-model)