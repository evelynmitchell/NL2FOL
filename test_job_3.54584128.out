Python 3.9.0
called
0
Claim:   "Giving 10% of your income to the Church will free a child's soul from Limbo into Heaven."
Implication:   "You should give your money to the Church."
Referring Expressions, Claim:  Your income, church, child's soul, limbo, heaven
Referring Expressions, Implication:  Your money, church
Subset entities:  [(' Your money', ' Your income'), (' heaven', ' church')]
Equal entities:  [(' church', ' church')]
Mappings:  {' church': 'a', ' Your income': 'b', " child's soul": 'c', ' limbo': 'd', ' heaven': 'e', ' Your money': 'f'}
Claim Properties:   IsGiven(b,a),  IsInLimbo(c),  IsInHeaven(c)
Implication Proeprties   IsGiven(f,a)
property implications:  []
Claim Lf:  (IsGiven(b,a) & IsInLimbo(c)) -> IsInHeaven(e)
Impliation Lf:  IsGiven(f,a)
Updated Claim Lf=  (IsGiven(b,a) and IsInLimbo(c)) and IsInHeaven(e)
Updated Implication Lf= IsGiven(f,a)
Final Lf=  (exists e (forall b ((IsGiven(b,a) and IsInLimbo(c)) and IsInHeaven(e)))) -> (forall a (exists f (IsGiven(f,a))))
Final Lf2=  (exists b (exists e (exists a (exists c ((IsGiven(b,a) and IsInLimbo(c)) and IsInHeaven(e)))))) -> (exists f (exists a (IsGiven(f,a))))
0
Claim:   "If everyone lived their life exactly like Jesus lived his life"
Implication:   "The world would be a beautiful place"
Referring Expressions, Claim:  Everyone, Jesus, life
Referring Expressions, Implication:  The world, beautiful place
Subset entities:  [(' beautiful place', ' life')]
Equal entities:  []
Mappings:  {' Everyone': 'a', ' Jesus': 'b', ' life': 'c', ' The world': 'd', ' beautiful place': 'e'}
Claim Properties:   IsLivedExactlyLike(a,b)
Implication Proeprties   IsBeautiful(e)
property implications:  []
Claim Lf:  IsLivedExactlyLike(a,b) -> (IsLivedExactlyLike(a,b) -> IsGood(c))
Impliation Lf:  IsBeautiful(d)
Updated Claim Lf=  IsLivedExactlyLike(a,b) and (IsLivedExactlyLike(a,b) and IsGood(c))
Updated Implication Lf= IsBeautiful(d)
Final Lf=  (IsLivedExactlyLike(a,b) and (IsLivedExactlyLike(a,b) and IsGood(c))) -> (IsBeautiful(d))
Final Lf2=  (exists b (exists a (exists c (IsLivedExactlyLike(a,b) and (IsLivedExactlyLike(a,b) and IsGood(c)))))) -> (exists d (IsBeautiful(d)))
0
Claim:   "Grandma knitted a sweater for me."
Implication:   "Wearing the sweater will make Grandma happy."
Referring Expressions, Claim:  Grandma, me
Referring Expressions, Implication:  Grandma, sweater
Subset entities:  []
Equal entities:  [(' Grandma', ' Grandma')]
Mappings:  {' Grandma': 'a', ' me': 'b', ' sweater': 'c'}
Claim Properties:   IsKnitted(a),  IsFor(b)
Implication Proeprties   IsWorn(c),  MakesHappy(a)
property implications:  []
Claim Lf:  IsKnitted(a) -> IsFor(b)
Impliation Lf:  IsWorn(c) -> MakesHappy(a)
Updated Claim Lf=  IsKnitted(a) and IsFor(b)
Updated Implication Lf= IsWorn(c) and MakesHappy(a)
Final Lf=  (IsKnitted(a) and IsFor(b)) -> (IsWorn(c) and MakesHappy(a))
Final Lf2=  (exists b (exists a (IsKnitted(a) and IsFor(b)))) -> (exists a (exists c (IsWorn(c) and MakesHappy(a))))
0
Claim:   "Everyone breaks into the spooky cabin."
Implication:   "You should break into the spooky cabin."
Referring Expressions, Claim:  Everyone, spooky cabin
Referring Expressions, Implication:  You, spooky cabin
Subset entities:  [(' spooky cabin', ' You')]
Equal entities:  [(' spooky cabin', ' spooky cabin')]
Mappings:  {' spooky cabin': 'a', ' Everyone': 'b', ' You': 'c'}
Claim Properties:   IsInSpookyCabin(a)
Implication Proeprties   ShouldBreakInto(c,a)
property implications:  [(' ShouldBreakInto(c,a)', ' IsInSpookyCabin(a)')]
Claim Lf:  IsInSpookyCabin(b)
Impliation Lf:  ShouldBreakInto(c,a)
Updated Claim Lf=  IsInSpookyCabin(b)
Updated Implication Lf= ShouldBreakInto(c,a)
Final Lf=  (IsInSpookyCabin(b) & (forall a (forall c ( ShouldBreakInto(c,a) ->  IsInSpookyCabin(a))))) -> (ShouldBreakInto(c,a))
Final Lf2=  (exists b (IsInSpookyCabin(b)) & (forall d (forall e ( ShouldBreakInto(d,e) ->  IsInSpookyCabin(e))))) -> (exists a (exists c (ShouldBreakInto(c,a))))
0
Claim:   "Ms. Drayer says the debate is the best class."
Implication:   "The debate is the best class."
Referring Expressions, Claim:  Ms. Drayer, debate, class.
Referring Expressions, Implication:  The debate, class
Subset entities:  [(' Ms. Drayer', ' class'), (' debate', ' The debate'), (' debate', ' class'), (' class', ' class.')]
Equal entities:  []
Mappings:  {' Ms. Drayer': 'a', ' debate': 'b', ' class.': 'c', ' The debate': 'd', ' class': 'e'}
Claim Properties:   IsTeacher(a),  IsBestClass(b)
Implication Proeprties   IsBestClass(d)
property implications:  []
Claim Lf:  IsTeacher(a) & IsBestClass(b)
Impliation Lf:  IsBestClass(e)
Updated Claim Lf=  IsTeacher(a) and IsBestClass(b)
Updated Implication Lf= IsBestClass(e)
Final Lf=  (exists b (exists a (IsTeacher(a) and IsBestClass(b)))) -> (forall e (IsBestClass(e)))
Final Lf2=  (exists b (exists a (IsTeacher(a) and IsBestClass(b)))) -> (exists e (IsBestClass(e)))
0
Claim:   "The blonde crossed the road because she saw a shoe sale."
Implication:   "There is a shoe sale on the other side of the road."
Referring Expressions, Claim:  The blonde, shoe sale
Referring Expressions, Implication:  There is, shoe sale, other side of the road.
Subset entities:  [(' The blonde', ' There is')]
Equal entities:  [(' shoe sale', ' shoe sale')]
Mappings:  {' shoe sale': 'a', ' The blonde': 'b', ' There is': 'c', ' other side of the road.': 'd'}
Claim Properties:   IsBlonde(b),  IsAtShoeSale(a)
Implication Proeprties   IsOnOtherSideOfRoad(d)
property implications:  []
Claim Lf:  IsBlonde(b) -> IsAtShoeSale(a)
Impliation Lf:  IsOnOtherSideOfRoad(d) & IsShoeSale(a)
Updated Claim Lf=  IsBlonde(b) and IsAtShoeSale(a)
Updated Implication Lf= IsOnOtherSideOfRoad(d) and IsShoeSale(a)
Final Lf=  (IsBlonde(b) and IsAtShoeSale(a)) -> (IsOnOtherSideOfRoad(d) and IsShoeSale(a))
Final Lf2=  (exists b (exists a (IsBlonde(b) and IsAtShoeSale(a)))) -> (exists d (exists a (IsOnOtherSideOfRoad(d) and IsShoeSale(a))))
0
Claim:   "Timmy doesn't believe in God."
Implication:   "Timmy will burn in Hell forever."
Referring Expressions, Claim:  Timmy, God
Referring Expressions, Implication:  Timmy, Hell, forever
Subset entities:  []
Equal entities:  [(' Timmy', ' Timmy')]
Mappings:  {' Timmy': 'a', ' God': 'b', ' Hell': 'c', ' forever': 'd'}
Claim Properties:   IsBelieveIn(a),  IsGod(b)
Implication Proeprties   IsBurnIn(a),  IsInHell(c),  IsForever(d)
property implications:  [('  IsGod(b)', '  IsForever(d)')]
Claim Lf:  ~IsBelieveIn(a)
Impliation Lf:  IsBurnIn(a) -> IsInHell(c) & IsForever(d)
Updated Claim Lf=  ~IsBelieveIn(a)
Updated Implication Lf= IsBurnIn(a) and IsInHell(c) and IsForever(d)
Final Lf=  (~IsBelieveIn(a) & (forall b (forall d (  IsGod(b) ->   IsForever(d))))) -> (IsBurnIn(a) and IsInHell(c) and IsForever(d))
Final Lf2=  (exists a (~IsBelieveIn(a)) & (forall f (forall e (  IsGod(e) ->   IsForever(f))))) -> (exists d (exists a (exists c (IsBurnIn(a) and IsInHell(c) and IsForever(d)))))
0
Claim:  
Implication:  
Referring Expressions, Claim:  The student, highest mark, exam, brilliant student.
Referring Expressions, Implication:  The student, highest mark, exam, brilliant student.
Mappings:  {' The student': 'a', ' highest mark': 'b', ' exam': 'c', ' brilliant student.': 'd'}
Updated Claim Lf=  
Updated Implication Lf= 
Final Lf=  () -> ()
Final Lf2=  () -> ()
0
Claim:   "Caroline is going to have lunch with the new girl."
Implication:   "Jenna can't believe that Caroline is ditching her old friends for the new girl."
Referring Expressions, Claim:  Caroline, new girl
Referring Expressions, Implication:  Jenna, Caroline, new girl
Subset entities:  [(' Caroline', ' new girl'), (' Jenna', ' new girl'), (' Caroline', ' new girl')]
Equal entities:  [(' Caroline', ' Caroline'), (' new girl', ' new girl')]
Mappings:  {' Caroline': 'a', ' new girl': 'b', ' Jenna': 'c'}
Claim Properties:   IsGoingToHaveLunch(a,b)
Implication Proeprties   IsBelieve(c),  IsDitching(a,b)
property implications:  []
Claim Lf:  IsGoingToHaveLunch(a,b)
Impliation Lf:  IsBelieve(c) -> (IsDitching(a,b) | IsNewGirl(b))
Updated Claim Lf=  IsGoingToHaveLunch(a,b)
Updated Implication Lf= IsBelieve(c) and (IsDitching(a,b) or IsNewGirl(b))
Final Lf=  (forall b (exists a (IsGoingToHaveLunch(a,b)))) -> (exists c (exists a (forall b (IsBelieve(c) and (IsDitching(a,b) or IsNewGirl(b))))))
Final Lf2=  (exists b (exists a (IsGoingToHaveLunch(a,b)))) -> (exists b (exists a (exists c (IsBelieve(c) and (IsDitching(a,b) or IsNewGirl(b))))))
0
Claim:  
Implication:  
Referring Expressions, Claim:  The student, highest mark, exam, brilliant student.
Referring Expressions, Implication:  The student, highest mark, exam, brilliant student.
Mappings:  {' The student': 'a', ' highest mark': 'b', ' exam': 'c', ' brilliant student.': 'd'}
Updated Claim Lf=  
Updated Implication Lf= 
Final Lf=  () -> ()
Final Lf2=  () -> ()
0
Claim:   "Coach talks with football player"
Implication:   "A football coach talks with his player in front of the team and the crowd."
Referring Expressions, Claim:  Coach, football player
Referring Expressions, Implication: 
Subset entities:  [(' Coach', '')]
Equal entities:  []
Mappings:  {' Coach': 'a', ' football player': 'b', '': 'c'}
Claim Properties:   IsTalkWith(a,b)
Implication Proeprties   IsTalkWith(a,b),  IsInFrontOfTeam(c),  IsInCrowd(c)
property implications:  [(' IsTalkWith(a,b)', '  IsInFrontOfTeam(c)')]
Claim Lf:  IsTalkWith(a,b)
Impliation Lf:  IsTalkWith(a,b) & IsInFrontOfTeam(c) & IsInCrowd(c)
Updated Claim Lf=  IsTalkWith(a,b)
Updated Implication Lf= IsTalkWith(a,b) and IsInFrontOfTeam(c) and IsInCrowd(c)
Final Lf=  (exists a (IsTalkWith(a,b)) & (forall b (forall a (forall c ( IsTalkWith(a,b) ->   IsInFrontOfTeam(c)))))) -> (forall c (IsTalkWith(a,b) and IsInFrontOfTeam(c) and IsInCrowd(c)))
Final Lf2=  (exists b (exists a (IsTalkWith(a,b))) & (forall f (forall d (forall e ( IsTalkWith(d,e) ->   IsInFrontOfTeam(f)))))) -> (exists b (exists a (exists c (IsTalkWith(a,b) and IsInFrontOfTeam(c) and IsInCrowd(c)))))
0
Claim:   "Two men watched one man make a golf putt on the set of Sports Center."
Implication:   "People watch sports."
Referring Expressions, Claim:  Two men, one man, golf putt, Sports Center.
Referring Expressions, Implication:  People, sports
Subset entities:  [(' golf putt', ' sports')]
Equal entities:  []
Mappings:  {' Two men': 'a', ' one man': 'b', ' golf putt': 'c', ' Sports Center.': 'd', ' People': 'e', ' sports': 'f'}
Claim Properties:   IsWatched(a,b),  IsOnSportsCenter(c)
Implication Proeprties   IsWatched(e,f)
property implications:  [('  IsOnSportsCenter(c)', ' IsWatched(e,f)')]
Claim Lf:  IsWatched(a,b) -> IsOnSportsCenter(c)
Impliation Lf:  IsWatched(e,f)
Updated Claim Lf=  IsWatched(a,b) and IsOnSportsCenter(c)
Updated Implication Lf= IsWatched(e,f)
Final Lf=  (exists c (IsWatched(a,b) and IsOnSportsCenter(c)) & (forall e (forall f (forall c (  IsOnSportsCenter(c) ->  IsWatched(e,f)))))) -> (forall f (IsWatched(e,f)))
Final Lf2=  (exists b (exists a (exists c (IsWatched(a,b) and IsOnSportsCenter(c)))) & (forall h (forall g (forall i (  IsOnSportsCenter(g) ->  IsWatched(h,i)))))) -> (exists f (exists e (IsWatched(e,f))))
0
Claim:   "Six women are outside."
Implication:   "Women wait to use a port-o-john in a field."
Referring Expressions, Claim:  Six women, outside
Referring Expressions, Implication:  Women, port-o-john, field
Subset entities:  [(' Six women', ' Women'), (' outside', ' field')]
Equal entities:  []
Mappings:  {' Six women': 'a', ' outside': 'b', ' Women': 'c', ' port-o-john': 'd', ' field': 'e'}
Claim Properties:   IsOutside(a)
Implication Proeprties   IsWaitingToUse(c),  IsInField(e)
property implications:  [(' IsOutside(a)', ' IsWaitingToUse(c)')]
Claim Lf:  IsOutside(b)
Impliation Lf:  IsWaitingToUse(c) -> IsInField(e)
Updated Claim Lf=  IsOutside(b)
Updated Implication Lf= IsWaitingToUse(c) and IsInField(e)
Final Lf=  (exists b (IsOutside(b)) & (forall a (forall c ( IsOutside(a) ->  IsWaitingToUse(c))))) -> (forall e (IsWaitingToUse(c) and IsInField(e)))
Final Lf2=  (exists b (IsOutside(b)) & (forall f (forall g ( IsOutside(f) ->  IsWaitingToUse(g))))) -> (exists e (exists c (IsWaitingToUse(c) and IsInField(e))))
0
Claim:   "Woman wearing a black top and glasses speaks into a blue tipped microphone while another woman writes beside her."
Implication:   "One woman speaks into a microphone while a second woman writes beside her."
Referring Expressions, Claim:  Woman, black top, glasses, blue tipped microphone, another woman, beside her.
Referring Expressions, Implication:  One woman, second woman, microphone, beside her.
Subset entities:  [(' One woman', ' Woman'), (' beside her.', ' Woman'), (' black top', ' beside her.'), (' One woman', ' another woman'), (' second woman', ' another woman'), (' beside her.', ' another woman'), (' beside her.', ' One woman'), (' beside her.', ' second woman'), (' microphone', ' beside her.')]
Equal entities:  [(' beside her.', ' beside her.')]
Mappings:  {' beside her.': 'a', ' Woman': 'b', ' black top': 'c', ' glasses': 'd', ' blue tipped microphone': 'e', ' another woman': 'f', ' One woman': 'g', ' second woman': 'h', ' microphone': 'i'}
Claim Properties:   IsWearingBlackTop(c),  HasGlasses(d),  IsSpeakingIntoBlueTippedMicrophone(e),  IsBesideHer(a)
Implication Proeprties   IsSpeakingIntoMicrophone(g),  IsBesideHer(h)
property implications:  [('  IsSpeakingIntoBlueTippedMicrophone(e)', ' IsSpeakingIntoMicrophone(g)')]
Claim Lf:  (IsWearingBlackTop(c) & IsSpeakingIntoBlueTippedMicrophone(e)) -> IsBesideHer(a)
Impliation Lf:  IsSpeakingIntoMicrophone(g) -> IsBesideHer(h)
Updated Claim Lf=  (IsWearingBlackTop(c) and IsSpeakingIntoBlueTippedMicrophone(e)) and IsBesideHer(a)
Updated Implication Lf= IsSpeakingIntoMicrophone(g) and IsBesideHer(h)
Final Lf=  (exists a ((IsWearingBlackTop(c) and IsSpeakingIntoBlueTippedMicrophone(e)) and IsBesideHer(a)) & (forall g (forall e (  IsSpeakingIntoBlueTippedMicrophone(e) ->  IsSpeakingIntoMicrophone(g))))) -> (forall h (forall g (IsSpeakingIntoMicrophone(g) and IsBesideHer(h))))
Final Lf2=  (exists e (exists a (exists c ((IsWearingBlackTop(c) and IsSpeakingIntoBlueTippedMicrophone(e)) and IsBesideHer(a)))) & (forall k (forall j (  IsSpeakingIntoBlueTippedMicrophone(j) ->  IsSpeakingIntoMicrophone(k))))) -> (exists h (exists g (IsSpeakingIntoMicrophone(g) and IsBesideHer(h))))
0
Claim:   "A tan girl runs and leans over an object."
Implication:   "A person in a wool hat sits on the ground."
Referring Expressions, Claim:  Tan girl, object
Referring Expressions, Implication:  A person, wool hat, ground
Subset entities:  [(' Tan girl', ' A person'), (' ground', ' object')]
Equal entities:  []
Mappings:  {' Tan girl': 'a', ' object': 'b', ' A person': 'c', ' wool hat': 'd', ' ground': 'e'}
Claim Properties:   IsTan(a),  Runs(a),  LeansOver(b)
Implication Proeprties   IsInWoolHat(d),  SitsOnGround(e)
property implications:  []
Claim Lf:  IsTan(a) & Runs(a) -> LeansOver(b)
Impliation Lf:  IsInWoolHat(d) -> SitsOnGround(e)
Updated Claim Lf=  IsTan(a) and Runs(a) and LeansOver(b)
Updated Implication Lf= IsInWoolHat(d) and SitsOnGround(e)
Final Lf=  (forall b (IsTan(a) and Runs(a) and LeansOver(b))) -> (exists e (IsInWoolHat(d) and SitsOnGround(e)))
Final Lf2=  (exists b (exists a (IsTan(a) and Runs(a) and LeansOver(b)))) -> (exists d (exists e (IsInWoolHat(d) and SitsOnGround(e))))
0
Claim:   "A scientist studies a slide."
Implication:   "A scientist studies a slide related to her invention."
Referring Expressions, Claim:  A scientist, slide
Referring Expressions, Implication:  A scientist, her invention, slide
Subset entities:  [(' slide', ' her invention')]
Equal entities:  [(' A scientist', ' A scientist'), (' slide', ' slide')]
Mappings:  {' A scientist': 'a', ' slide': 'b', ' her invention': 'c'}
Claim Properties:   IsStudies(a,b)
Implication Proeprties   IsRelatedTo(a,c),  IsStudies(a,b)
property implications:  []
Claim Lf:  IsStudies(a,b)
Impliation Lf:  IsRelatedTo(a,c) -> IsStudies(a,b)
Updated Claim Lf=  IsStudies(a,b)
Updated Implication Lf= IsRelatedTo(a,c) and IsStudies(a,b)
Final Lf=  (exists b (IsStudies(a,b))) -> (forall c (IsRelatedTo(a,c) and IsStudies(a,b)))
Final Lf2=  (exists b (exists a (IsStudies(a,b)))) -> (exists b (exists a (exists c (IsRelatedTo(a,c) and IsStudies(a,b)))))
0
Claim:   "A red dog jumps and catches a tennis ball in its mouth."
Implication:   "A dog catches a ball."
Referring Expressions, Claim:  A red dog, tennis ball, its mouth.
Referring Expressions, Implication:  A dog, ball
Subset entities:  []
Equal entities:  []
Mappings:  {' A red dog': 'a', ' tennis ball': 'b', ' its mouth.': 'c', ' A dog': 'd', ' ball': 'e'}
Claim Properties:   IsRed(a),  Jumps(b),  IsCaughtInMouth(c)
Implication Proeprties   IsCaught(d),  IsBall(e)
property implications:  [('  Jumps(b)', '  IsBall(e)')]
Claim Lf:  IsRed(a) & Jumps(b) -> IsCaughtInMouth(c)
Impliation Lf:  IsCaught(d) -> IsBall(e)
Updated Claim Lf=  IsRed(a) and Jumps(b) and IsCaughtInMouth(c)
Updated Implication Lf= IsCaught(d) and IsBall(e)
Final Lf=  (IsRed(a) and Jumps(b) and IsCaughtInMouth(c) & (forall b (forall e (  Jumps(b) ->   IsBall(e))))) -> (IsCaught(d) and IsBall(e))
Final Lf2=  (exists b (exists a (exists c (IsRed(a) and Jumps(b) and IsCaughtInMouth(c)))) & (forall f (forall g (  Jumps(f) ->   IsBall(g))))) -> (exists d (exists e (IsCaught(d) and IsBall(e))))
0
Claim:   "A group of dogs stand in the snow."
Implication:   "There are animals outdoors."
Referring Expressions, Claim:  A group of dogs, snow
Referring Expressions, Implication:  There are (animals) (outdoors)
Subset entities:  [(' A group of dogs', ' There are (animals) (outdoors)')]
Equal entities:  []
Mappings:  {' A group of dogs': 'a', ' snow': 'b', ' There are (animals) (outdoors)': 'c'}
Claim Properties:   IsStandingIn(a,b)
Implication Proeprties   IsOutdoors(c)
property implications:  [(' IsStandingIn(a,b)', ' IsOutdoors(c)')]
Claim Lf:  IsStandingIn(a,b)
Impliation Lf:  IsOutdoors(c)
Updated Claim Lf=  IsStandingIn(a,b)
Updated Implication Lf= IsOutdoors(c)
Final Lf=  (exists a (IsStandingIn(a,b)) & (forall b (forall a (forall c ( IsStandingIn(a,b) ->  IsOutdoors(c)))))) -> (forall c (IsOutdoors(c)))
Final Lf2=  (exists b (exists a (IsStandingIn(a,b))) & (forall f (forall d (forall e ( IsStandingIn(d,e) ->  IsOutdoors(f)))))) -> (exists c (IsOutdoors(c)))
0
Claim:   "This person looks to be snowboarding on a very small pile of snow."
Implication:   "Young snowboarders are sizing up their next jump."
Referring Expressions, Claim:  This person, snowboarding, small pile of snow.
Referring Expressions, Implication:  You, young snowboarders, next jump.
Subset entities:  [(' young snowboarders', ' This person'), (' snowboarding', ' young snowboarders')]
Equal entities:  []
Mappings:  {' This person': 'a', ' snowboarding': 'b', ' small pile of snow.': 'c', ' You': 'd', ' young snowboarders': 'e', ' next jump.': 'f'}
Claim Properties:   IsSnowboarding(a),  IsOnSmallPileOfSnow(c)
Implication Proeprties   IsYou(d),  IsYoungSnowboarder(e),  IsSizingUp(f)
property implications:  [(' IsSnowboarding(a)', '  IsYoungSnowboarder(e)'), ('  IsYoungSnowboarder(e)', ' IsSnowboarding(a)')]
Claim Lf:  IsSnowboarding(a) -> IsOnSmallPileOfSnow(c)
Impliation Lf:  IsYou(d) & IsYoungSnowboarder(e) & IsSizingUp(f)
Updated Claim Lf=  IsSnowboarding(a) and IsOnSmallPileOfSnow(c)
Updated Implication Lf= IsYou(d) and IsYoungSnowboarder(e) and IsSizingUp(f)
Final Lf=  (forall a (IsSnowboarding(a) and IsOnSmallPileOfSnow(c)) & (forall a (forall e ( IsSnowboarding(a) ->   IsYoungSnowboarder(e)))) & (forall a (forall e (  IsYoungSnowboarder(e) ->  IsSnowboarding(a))))) -> (exists e (IsYou(d) and IsYoungSnowboarder(e) and IsSizingUp(f)))
Final Lf2=  (exists a (exists c (IsSnowboarding(a) and IsOnSmallPileOfSnow(c))) & (forall h (forall g ( IsSnowboarding(g) ->   IsYoungSnowboarder(h)))) & (forall j (forall i (  IsYoungSnowboarder(i) ->  IsSnowboarding(j))))) -> (exists f (exists d (exists e (IsYou(d) and IsYoungSnowboarder(e) and IsSizingUp(f)))))
0
Claim:   "A large number of people are watching men in kilts."
Implication:   "People watch men in kilts as a consequence of one of them throwing a long pole."
Referring Expressions, Claim:  A large number of people, men in kilts.
Referring Expressions, Implication:  People, men in kilts, one of them, long pole
Subset entities:  [(' A large number of people', ' People'), (' men in kilts', ' A large number of people'), (' men in kilts', ' men in kilts.'), (' men in kilts.', ' one of them')]
Equal entities:  []
Mappings:  {' A large number of people': 'a', ' men in kilts.': 'b', ' People': 'c', ' men in kilts': 'd', ' one of them': 'e', ' long pole': 'f'}
Claim Properties:   IsWatching(a),  AreInKilts(b)
Implication Proeprties   IsWatching(c),  ThrowsLongPole(e)
property implications:  []
Claim Lf:  IsWatching(a) -> AreInKilts(b)
Impliation Lf:  IsWatching(c) -> ThrowsLongPole(e)
Updated Claim Lf=  IsWatching(a) and AreInKilts(b)
Updated Implication Lf= IsWatching(c) and ThrowsLongPole(e)
Final Lf=  (exists b (exists a (IsWatching(a) and AreInKilts(b)))) -> (forall e (forall c (IsWatching(c) and ThrowsLongPole(e))))
Final Lf2=  (exists b (exists a (IsWatching(a) and AreInKilts(b)))) -> (exists e (exists c (IsWatching(c) and ThrowsLongPole(e))))
